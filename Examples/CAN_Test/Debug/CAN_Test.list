
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08008a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000400  24000060  08008aac  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000460  08008aac  00020460  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014e85  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002376  00000000  00000000  00034f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e38  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b08  00000000  00000000  00038108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036e3a  00000000  00000000  00038c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000138f9  00000000  00000000  0006fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00160b37  00000000  00000000  00083343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000419c  00000000  00000000  001e3e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001e8018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800894c 	.word	0x0800894c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800894c 	.word	0x0800894c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 feb3 	bl	80013ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f8bf 	bl	8000808 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 fa6f 	bl	8000b6c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068e:	f000 fa21 	bl	8000ad4 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000692:	f000 f939 	bl	8000908 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000696:	f000 f9b7 	bl	8000a08 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800069a:	4854      	ldr	r0, [pc, #336]	; (80007ec <main+0x170>)
 800069c:	f002 f830 	bl	8002700 <HAL_FDCAN_Start>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0x2e>
  	  Error_Handler();
 80006a6:	f000 fbff 	bl	8000ea8 <Error_Handler>
    }

  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK) {
 80006aa:	4851      	ldr	r0, [pc, #324]	; (80007f0 <main+0x174>)
 80006ac:	f002 f828 	bl	8002700 <HAL_FDCAN_Start>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <main+0x3e>
	  Error_Handler();
 80006b6:	f000 fbf7 	bl	8000ea8 <Error_Handler>
  }

  TxHeader1.Identifier = 0x11;
 80006ba:	4b4e      	ldr	r3, [pc, #312]	; (80007f4 <main+0x178>)
 80006bc:	2211      	movs	r2, #17
 80006be:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 80006c0:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <main+0x178>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 80006c6:	4b4b      	ldr	r3, [pc, #300]	; (80007f4 <main+0x178>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_12;
 80006cc:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <main+0x178>)
 80006ce:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80006d2:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <main+0x178>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <main+0x178>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_FD_CAN;
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <main+0x178>)
 80006e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006e6:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006e8:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <main+0x178>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <main+0x178>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]

  TxHeader2.Identifier = 0x22;
 80006f4:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <main+0x17c>)
 80006f6:	2222      	movs	r2, #34	; 0x22
 80006f8:	601a      	str	r2, [r3, #0]
  TxHeader2.IdType = FDCAN_STANDARD_ID;
 80006fa:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <main+0x17c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000700:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <main+0x17c>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  TxHeader2.DataLength = FDCAN_DLC_BYTES_12;
 8000706:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <main+0x17c>)
 8000708:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800070c:	60da      	str	r2, [r3, #12]
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <main+0x17c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <main+0x17c>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  TxHeader2.FDFormat = FDCAN_FD_CAN;
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <main+0x17c>)
 800071c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000720:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <main+0x17c>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <main+0x17c>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]


  FDCAN_FilterTypeDef sFilterConfig1;

  sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  sFilterConfig1.FilterIndex = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig1.FilterType = FDCAN_FILTER_MASK;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800073a:	2301      	movs	r3, #1
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sFilterConfig1.FilterID1 = 0x22;
 800073e:	2322      	movs	r3, #34	; 0x22
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  sFilterConfig1.FilterID2 = 0x22;
 8000742:	2322      	movs	r3, #34	; 0x22
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
  sFilterConfig1.RxBufferIndex = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4619      	mov	r1, r3
 8000750:	4826      	ldr	r0, [pc, #152]	; (80007ec <main+0x170>)
 8000752:	f001 ff5f 	bl	8002614 <HAL_FDCAN_ConfigFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <main+0xe4>
  {
    /* Filter configuration Error */
    Error_Handler();
 800075c:	f000 fba4 	bl	8000ea8 <Error_Handler>
  }

  FDCAN_FilterTypeDef sFilterConfig2;

  sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
  sFilterConfig2.FilterIndex = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  sFilterConfig2.FilterType = FDCAN_FILTER_MASK;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 800076c:	2302      	movs	r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
  sFilterConfig2.FilterID1 = 0x11;
 8000770:	2311      	movs	r3, #17
 8000772:	613b      	str	r3, [r7, #16]
  sFilterConfig2.FilterID2 = 0x11;
 8000774:	2311      	movs	r3, #17
 8000776:	617b      	str	r3, [r7, #20]
  sFilterConfig2.RxBufferIndex = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481b      	ldr	r0, [pc, #108]	; (80007f0 <main+0x174>)
 8000782:	f001 ff47 	bl	8002614 <HAL_FDCAN_ConfigFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <main+0x114>
  {
    /* Filter configuration Error */
    Error_Handler();
 800078c:	f000 fb8c 	bl	8000ea8 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <main+0x170>)
 8000796:	f002 f9a7 	bl	8002ae8 <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <main+0x128>
  {
    /* Notification Error */
    Error_Handler();
 80007a0:	f000 fb82 	bl	8000ea8 <Error_Handler>
  }

  // Activate the notification for new data in FIFO1 for FDCAN2
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <main+0x174>)
 80007aa:	f002 f99d 	bl	8002ae8 <HAL_FDCAN_ActivateNotification>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <main+0x13c>
  {
    /* Notification Error */
    Error_Handler();
 80007b4:	f000 fb78 	bl	8000ea8 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  sprintf((char *)TxData1, "CAN1 %d", indx++);
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <main+0x180>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	490f      	ldr	r1, [pc, #60]	; (80007fc <main+0x180>)
 80007c0:	600a      	str	r2, [r1, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	490e      	ldr	r1, [pc, #56]	; (8000800 <main+0x184>)
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <main+0x188>)
 80007c8:	f007 fc1c 	bl	8008004 <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK) {
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <main+0x188>)
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <main+0x178>)
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <main+0x170>)
 80007d2:	f001 ffc0 	bl	8002756 <HAL_FDCAN_AddMessageToTxFifoQ>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <main+0x164>
		  Error_Handler();
 80007dc:	f000 fb64 	bl	8000ea8 <Error_Handler>
	  }
//	  else {
//		  HAL_FDCAN_AbortTxRequest(&hfdcan1, FDCAN_TX_BUFFER0);
//	  }

	  HAL_Delay (1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 fe94 	bl	8001510 <HAL_Delay>
	  sprintf((char *)TxData1, "CAN1 %d", indx++);
 80007e8:	e7e6      	b.n	80007b8 <main+0x13c>
 80007ea:	bf00      	nop
 80007ec:	2400007c 	.word	0x2400007c
 80007f0:	2400011c 	.word	0x2400011c
 80007f4:	24000250 	.word	0x24000250
 80007f8:	240002ac 	.word	0x240002ac
 80007fc:	24000308 	.word	0x24000308
 8000800:	08008964 	.word	0x08008964
 8000804:	2400029c 	.word	0x2400029c

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	; 0x70
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000812:	224c      	movs	r2, #76	; 0x4c
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 fc14 	bl	8008044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fc0e 	bl	8008044 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000828:	2002      	movs	r0, #2
 800082a:	f003 f891 	bl	8003950 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <SystemClock_Config+0xf8>)
 8000834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000836:	4a32      	ldr	r2, [pc, #200]	; (8000900 <SystemClock_Config+0xf8>)
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <SystemClock_Config+0xf8>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <SystemClock_Config+0xfc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000850:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <SystemClock_Config+0xfc>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <SystemClock_Config+0xfc>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000864:	bf00      	nop
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <SystemClock_Config+0xfc>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000872:	d1f8      	bne.n	8000866 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000874:	2303      	movs	r3, #3
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000878:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800087e:	2301      	movs	r3, #1
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	2302      	movs	r3, #2
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000892:	2312      	movs	r3, #18
 8000894:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800089a:	2303      	movs	r3, #3
 800089c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a2:	230c      	movs	r3, #12
 80008a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008a6:	2302      	movs	r3, #2
 80008a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80008aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 f885 	bl	80039c4 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008c0:	f000 faf2 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	233f      	movs	r3, #63	; 0x3f
 80008c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fcc5 	bl	8004278 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80008f4:	f000 fad8 	bl	8000ea8 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3770      	adds	r7, #112	; 0x70
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58000400 	.word	0x58000400
 8000904:	58024800 	.word	0x58024800

08000908 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000910:	4a3c      	ldr	r2, [pc, #240]	; (8000a04 <MX_FDCAN1_Init+0xfc>)
 8000912:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000914:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000920:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000922:	2200      	movs	r2, #0
 8000924:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000928:	2200      	movs	r2, #0
 800092a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800092e:	2200      	movs	r2, #0
 8000930:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000932:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000934:	2201      	movs	r2, #1
 8000936:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000938:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800093a:	220d      	movs	r2, #13
 800093c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000940:	2256      	movs	r2, #86	; 0x56
 8000942:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000946:	220d      	movs	r2, #13
 8000948:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800094c:	2219      	movs	r2, #25
 800094e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000952:	2201      	movs	r2, #1
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000958:	2202      	movs	r2, #2
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800095e:	2201      	movs	r2, #1
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000964:	2200      	movs	r2, #0
 8000966:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800096a:	2201      	movs	r2, #1
 800096c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000970:	2200      	movs	r2, #0
 8000972:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000976:	2201      	movs	r2, #1
 8000978:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800097c:	2204      	movs	r2, #4
 800097e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000988:	2204      	movs	r2, #4
 800098a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800098e:	2200      	movs	r2, #0
 8000990:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 8000994:	2204      	movs	r2, #4
 8000996:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 800099a:	2200      	movs	r2, #0
 800099c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009b6:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 80009b8:	f001 fc4e 	bl	8002258 <HAL_FDCAN_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80009c2:	f000 fa71 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; // Send the data to FIFO 0
 80009d2:	2301      	movs	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x29;
 80009d6:	2329      	movs	r3, #41	; 0x29
 80009d8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x28;
 80009da:	2328      	movs	r3, #40	; 0x28
 80009dc:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_FDCAN1_Init+0xf8>)
 80009e8:	f001 fe14 	bl	8002614 <HAL_FDCAN_ConfigFilter>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_FDCAN1_Init+0xee>
  	Error_Handler();
 80009f2:	f000 fa59 	bl	8000ea8 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2400007c 	.word	0x2400007c
 8000a04:	4000a000 	.word	0x4000a000

08000a08 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_Init 0 */
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */
  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a0c:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a0e:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <MX_FDCAN2_Init+0xc8>)
 8000a10:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a18:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a38:	220d      	movs	r2, #13
 8000a3a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a3e:	2256      	movs	r2, #86	; 0x56
 8000a40:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a44:	220d      	movs	r2, #13
 8000a46:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a4a:	2219      	movs	r2, #25
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1280;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a62:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_FDCAN2_Init+0xc4>)
 8000ab8:	f001 fbce 	bl	8002258 <HAL_FDCAN_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000ac2:	f000 f9f1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  /* USER CODE END FDCAN2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400011c 	.word	0x2400011c
 8000ad0:	4000a400 	.word	0x4000a400

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <MX_USART3_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b1e:	f005 fd63 	bl	80065e8 <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 f9be 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b30:	f007 f99e 	bl	8007e70 <HAL_UARTEx_SetTxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 f9b5 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b42:	f007 f9d3 	bl	8007eec <HAL_UARTEx_SetRxFifoThreshold>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 f9ac 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b52:	f007 f954 	bl	8007dfe <HAL_UARTEx_DisableFifoMode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f9a4 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	240001bc 	.word	0x240001bc
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b8b      	ldr	r3, [pc, #556]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a89      	ldr	r2, [pc, #548]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba0:	4b83      	ldr	r3, [pc, #524]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a82      	ldr	r2, [pc, #520]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b7f      	ldr	r3, [pc, #508]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b7c      	ldr	r3, [pc, #496]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a7a      	ldr	r2, [pc, #488]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b78      	ldr	r3, [pc, #480]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b74      	ldr	r3, [pc, #464]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a73      	ldr	r2, [pc, #460]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b70      	ldr	r3, [pc, #448]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b6d      	ldr	r3, [pc, #436]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	4a6b      	ldr	r2, [pc, #428]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0a:	4b69      	ldr	r3, [pc, #420]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c18:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a64      	ldr	r2, [pc, #400]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b61      	ldr	r3, [pc, #388]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a5c      	ldr	r2, [pc, #368]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <MX_GPIO_Init+0x244>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c5a:	4856      	ldr	r0, [pc, #344]	; (8000db4 <MX_GPIO_Init+0x248>)
 8000c5c:	f002 fe5e 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c66:	4854      	ldr	r0, [pc, #336]	; (8000db8 <MX_GPIO_Init+0x24c>)
 8000c68:	f002 fe58 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2102      	movs	r1, #2
 8000c70:	4852      	ldr	r0, [pc, #328]	; (8000dbc <MX_GPIO_Init+0x250>)
 8000c72:	f002 fe53 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	484d      	ldr	r0, [pc, #308]	; (8000dc0 <MX_GPIO_Init+0x254>)
 8000c8c:	f002 fc96 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c90:	2332      	movs	r3, #50	; 0x32
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4845      	ldr	r0, [pc, #276]	; (8000dc0 <MX_GPIO_Init+0x254>)
 8000cac:	f002 fc86 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cb0:	2386      	movs	r3, #134	; 0x86
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	483e      	ldr	r0, [pc, #248]	; (8000dc4 <MX_GPIO_Init+0x258>)
 8000ccc:	f002 fc76 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cd0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4832      	ldr	r0, [pc, #200]	; (8000db4 <MX_GPIO_Init+0x248>)
 8000cea:	f002 fc67 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482a      	ldr	r0, [pc, #168]	; (8000db4 <MX_GPIO_Init+0x248>)
 8000d0c:	f002 fc56 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4823      	ldr	r0, [pc, #140]	; (8000db8 <MX_GPIO_Init+0x24c>)
 8000d2a:	f002 fc47 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0x25c>)
 8000d44:	f002 fc3a 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d48:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <MX_GPIO_Init+0x258>)
 8000d66:	f002 fc29 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <MX_GPIO_Init+0x25c>)
 8000d88:	f002 fc18 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_GPIO_Init+0x250>)
 8000da4:	f002 fc0a 	bl	80035bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da8:	bf00      	nop
 8000daa:	3730      	adds	r7, #48	; 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020400 	.word	0x58020400
 8000db8:	58020c00 	.word	0x58020c00
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58020800 	.word	0x58020800
 8000dc4:	58020000 	.word	0x58020000
 8000dc8:	58021800 	.word	0x58021800

08000dcc <HAL_FDCAN_RxFifo1Callback>:

/* USER CODE BEGIN 4 */

// FDCAN2 Callback
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d028      	beq.n	8000e32 <HAL_FDCAN_RxFifo1Callback+0x66>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_FDCAN_RxFifo1Callback+0x70>)
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_FDCAN_RxFifo1Callback+0x74>)
 8000de4:	2141      	movs	r1, #65	; 0x41
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f001 fd10 	bl	800280c <HAL_FDCAN_GetRxMessage>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000df2:	f000 f859 	bl	8000ea8 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f001 fe74 	bl	8002ae8 <HAL_FDCAN_ActivateNotification>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000e06:	f000 f84f 	bl	8000ea8 <Error_Handler>
    }

	  sprintf((char *)TxData2, "CAN2 %d", indx++);
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000e12:	600a      	str	r2, [r1, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	490c      	ldr	r1, [pc, #48]	; (8000e48 <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000e1a:	f007 f8f3 	bl	8008004 <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000e20:	490b      	ldr	r1, [pc, #44]	; (8000e50 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000e24:	f001 fc97 	bl	8002756 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_FDCAN_RxFifo1Callback+0x66>
	  {
		  Error_Handler();
 8000e2e:	f000 f83b 	bl	8000ea8 <Error_Handler>
	  }
  }
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000300 	.word	0x24000300
 8000e40:	240002d0 	.word	0x240002d0
 8000e44:	24000308 	.word	0x24000308
 8000e48:	0800896c 	.word	0x0800896c
 8000e4c:	240002f8 	.word	0x240002f8
 8000e50:	240002ac 	.word	0x240002ac
 8000e54:	2400011c 	.word	0x2400011c

08000e58 <HAL_FDCAN_RxFifo0Callback>:


// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d014      	beq.n	8000e96 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f001 fcca 	bl	800280c <HAL_FDCAN_GetRxMessage>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000e7e:	f000 f813 	bl	8000ea8 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e82:	2200      	movs	r2, #0
 8000e84:	2101      	movs	r1, #1
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f001 fe2e 	bl	8002ae8 <HAL_FDCAN_ActivateNotification>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000e92:	f000 f809 	bl	8000ea8 <Error_Handler>
    }
  }
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240002a4 	.word	0x240002a4
 8000ea4:	24000274 	.word	0x24000274

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58024400 	.word	0x58024400

08000eec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0bc      	sub	sp, #240	; 0xf0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	22c0      	movs	r2, #192	; 0xc0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f007 f899 	bl	8008044 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5e      	ldr	r2, [pc, #376]	; (8001090 <HAL_FDCAN_MspInit+0x1a4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d158      	bne.n	8000fce <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fd2b 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000f40:	f7ff ffb2 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f44:	4b53      	ldr	r3, [pc, #332]	; (8001094 <HAL_FDCAN_MspInit+0x1a8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a52      	ldr	r2, [pc, #328]	; (8001094 <HAL_FDCAN_MspInit+0x1a8>)
 8000f4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f4e:	4b51      	ldr	r3, [pc, #324]	; (8001094 <HAL_FDCAN_MspInit+0x1a8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10e      	bne.n	8000f74 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8000f58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f66:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8000f68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b44      	ldr	r3, [pc, #272]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000faa:	2309      	movs	r3, #9
 8000fac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4839      	ldr	r0, [pc, #228]	; (800109c <HAL_FDCAN_MspInit+0x1b0>)
 8000fb8:	f002 fb00 	bl	80035bc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2013      	movs	r0, #19
 8000fc2:	f000 fbb0 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fc6:	2013      	movs	r0, #19
 8000fc8:	f000 fbc7 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000fcc:	e05c      	b.n	8001088 <HAL_FDCAN_MspInit+0x19c>
  else if(hfdcan->Instance==FDCAN2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <HAL_FDCAN_MspInit+0x1b4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d157      	bne.n	8001088 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fccd 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 8000ffc:	f7ff ff54 	bl	8000ea8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_FDCAN_MspInit+0x1a8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_FDCAN_MspInit+0x1a8>)
 8001008:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_FDCAN_MspInit+0x1a8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d10e      	bne.n	8001030 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8001014:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001018:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8001024:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_FDCAN_MspInit+0x1ac>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800104e:	2360      	movs	r3, #96	; 0x60
 8001050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001066:	2309      	movs	r3, #9
 8001068:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001070:	4619      	mov	r1, r3
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <HAL_FDCAN_MspInit+0x1b8>)
 8001074:	f002 faa2 	bl	80035bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2016      	movs	r0, #22
 800107e:	f000 fb52 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001082:	2016      	movs	r0, #22
 8001084:	f000 fb69 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 8001088:	bf00      	nop
 800108a:	37f0      	adds	r7, #240	; 0xf0
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	4000a000 	.word	0x4000a000
 8001094:	2400030c 	.word	0x2400030c
 8001098:	58024400 	.word	0x58024400
 800109c:	58020c00 	.word	0x58020c00
 80010a0:	4000a400 	.word	0x4000a400
 80010a4:	58020400 	.word	0x58020400

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ba      	sub	sp, #232	; 0xe8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	22c0      	movs	r2, #192	; 0xc0
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 ffbb 	bl	8008044 <memset>
  if(huart->Instance==USART3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a2b      	ldr	r2, [pc, #172]	; (8001180 <HAL_UART_MspInit+0xd8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d14e      	bne.n	8001176 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d8:	f04f 0202 	mov.w	r2, #2
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fc4e 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010fa:	f7ff fed5 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_UART_MspInit+0xdc>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <HAL_UART_MspInit+0xdc>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_UART_MspInit+0xdc>)
 8001110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_UART_MspInit+0xdc>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_UART_MspInit+0xdc>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_UART_MspInit+0xdc>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001154:	2307      	movs	r3, #7
 8001156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800115e:	4619      	mov	r1, r3
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_UART_MspInit+0xe0>)
 8001162:	f002 fa2b 	bl	80035bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2027      	movs	r0, #39	; 0x27
 800116c:	f000 fadb 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001170:	2027      	movs	r0, #39	; 0x27
 8001172:	f000 faf2 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	37e8      	adds	r7, #232	; 0xe8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004800 	.word	0x40004800
 8001184:	58024400 	.word	0x58024400
 8001188:	58020c00 	.word	0x58020c00

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f97a 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80011e6:	f001 fcf9 	bl	8002bdc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2400007c 	.word	0x2400007c

080011f4 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <FDCAN2_IT1_IRQHandler+0x10>)
 80011fa:	f001 fcef 	bl	8002bdc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2400011c 	.word	0x2400011c

08001208 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <USART3_IRQHandler+0x10>)
 800120e:	f005 fa3b 	bl	8006688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	240001bc 	.word	0x240001bc

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f006 ff02 	bl	8008054 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24080000 	.word	0x24080000
 800127c:	00000400 	.word	0x00000400
 8001280:	24000310 	.word	0x24000310
 8001284:	24000460 	.word	0x24000460

08001288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800128c:	4b37      	ldr	r3, [pc, #220]	; (800136c <SystemInit+0xe4>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a36      	ldr	r2, [pc, #216]	; (800136c <SystemInit+0xe4>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <SystemInit+0xe8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d807      	bhi.n	80012b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012a8:	4b31      	ldr	r3, [pc, #196]	; (8001370 <SystemInit+0xe8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 030f 	bic.w	r3, r3, #15
 80012b0:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <SystemInit+0xe8>)
 80012b2:	f043 0307 	orr.w	r3, r3, #7
 80012b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <SystemInit+0xec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a2d      	ldr	r2, [pc, #180]	; (8001374 <SystemInit+0xec>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <SystemInit+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <SystemInit+0xec>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4929      	ldr	r1, [pc, #164]	; (8001374 <SystemInit+0xec>)
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <SystemInit+0xf0>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <SystemInit+0xe8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <SystemInit+0xe8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 030f 	bic.w	r3, r3, #15
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <SystemInit+0xe8>)
 80012ec:	f043 0307 	orr.w	r3, r3, #7
 80012f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <SystemInit+0xec>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <SystemInit+0xec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <SystemInit+0xec>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <SystemInit+0xec>)
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <SystemInit+0xf4>)
 8001308:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <SystemInit+0xec>)
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <SystemInit+0xf8>)
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <SystemInit+0xec>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <SystemInit+0xfc>)
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <SystemInit+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <SystemInit+0xec>)
 800131e:	4a19      	ldr	r2, [pc, #100]	; (8001384 <SystemInit+0xfc>)
 8001320:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <SystemInit+0xec>)
 8001324:	2200      	movs	r2, #0
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <SystemInit+0xec>)
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <SystemInit+0xfc>)
 800132c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <SystemInit+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <SystemInit+0xec>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <SystemInit+0xec>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SystemInit+0xec>)
 8001342:	2200      	movs	r2, #0
 8001344:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <SystemInit+0x100>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <SystemInit+0x104>)
 800134c:	4013      	ands	r3, r2
 800134e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001352:	d202      	bcs.n	800135a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <SystemInit+0x108>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <SystemInit+0x10c>)
 800135c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001360:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	52002000 	.word	0x52002000
 8001374:	58024400 	.word	0x58024400
 8001378:	eaf6ed7f 	.word	0xeaf6ed7f
 800137c:	02020200 	.word	0x02020200
 8001380:	01ff0000 	.word	0x01ff0000
 8001384:	01010280 	.word	0x01010280
 8001388:	5c001000 	.word	0x5c001000
 800138c:	ffff0000 	.word	0xffff0000
 8001390:	51008108 	.word	0x51008108
 8001394:	52004000 	.word	0x52004000

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff ff74 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f006 fe4b 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff f957 	bl	800067c <main>
  bx  lr
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80013dc:	08008a4c 	.word	0x08008a4c
  ldr r2, =_sbss
 80013e0:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80013e4:	24000460 	.word	0x24000460

080013e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC3_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f2:	2003      	movs	r0, #3
 80013f4:	f000 f98c 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f8:	f003 f8f4 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_Init+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	4913      	ldr	r1, [pc, #76]	; (8001458 <HAL_Init+0x6c>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_Init+0x68>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_Init+0x6c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_Init+0x70>)
 800142e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_Init+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f814 	bl	8001464 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e002      	b.n	800144c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001446:	f7ff fd37 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400
 8001458:	080089c0 	.word	0x080089c0
 800145c:	24000004 	.word	0x24000004
 8001460:	24000000 	.word	0x24000000

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_InitTick+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e021      	b.n	80014bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_InitTick+0x64>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_InitTick+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f971 	bl	8001776 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f93b 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x68>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2400000c 	.word	0x2400000c
 80014c8:	24000000 	.word	0x24000000
 80014cc:	24000008 	.word	0x24000008

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2400000c 	.word	0x2400000c
 80014f4:	24000314 	.word	0x24000314

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	24000314 	.word	0x24000314

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400000c 	.word	0x2400000c

08001558 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetREVID+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0c1b      	lsrs	r3, r3, #16
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	5c001000 	.word	0x5c001000

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	05fa0000 	.word	0x05fa0000

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff29 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff40 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff33 	bl	80015d4 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa4 	bl	80016cc <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff feae 	bl	80014f8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e2dc      	b.n	8001d62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e2cd      	b.n	8001d62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <HAL_DMA_Abort+0x214>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04a      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a74      	ldr	r2, [pc, #464]	; (80019a8 <HAL_DMA_Abort+0x218>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d045      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a73      	ldr	r2, [pc, #460]	; (80019ac <HAL_DMA_Abort+0x21c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d040      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_DMA_Abort+0x220>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d03b      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a70      	ldr	r2, [pc, #448]	; (80019b4 <HAL_DMA_Abort+0x224>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d036      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <HAL_DMA_Abort+0x228>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6d      	ldr	r2, [pc, #436]	; (80019bc <HAL_DMA_Abort+0x22c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d02c      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6b      	ldr	r2, [pc, #428]	; (80019c0 <HAL_DMA_Abort+0x230>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d027      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <HAL_DMA_Abort+0x234>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d022      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a68      	ldr	r2, [pc, #416]	; (80019c8 <HAL_DMA_Abort+0x238>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01d      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a67      	ldr	r2, [pc, #412]	; (80019cc <HAL_DMA_Abort+0x23c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d018      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <HAL_DMA_Abort+0x240>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a64      	ldr	r2, [pc, #400]	; (80019d4 <HAL_DMA_Abort+0x244>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a62      	ldr	r2, [pc, #392]	; (80019d8 <HAL_DMA_Abort+0x248>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a61      	ldr	r2, [pc, #388]	; (80019dc <HAL_DMA_Abort+0x24c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d004      	beq.n	8001866 <HAL_DMA_Abort+0xd6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a5f      	ldr	r2, [pc, #380]	; (80019e0 <HAL_DMA_Abort+0x250>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_DMA_Abort+0xda>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_DMA_Abort+0xdc>
 800186a:	2300      	movs	r3, #0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 021e 	bic.w	r2, r2, #30
 800187e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e00a      	b.n	80018ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <HAL_DMA_Abort+0x214>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d072      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_DMA_Abort+0x218>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d06d      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a39      	ldr	r2, [pc, #228]	; (80019ac <HAL_DMA_Abort+0x21c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d068      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <HAL_DMA_Abort+0x220>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d063      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a36      	ldr	r2, [pc, #216]	; (80019b4 <HAL_DMA_Abort+0x224>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d05e      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_DMA_Abort+0x228>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d059      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a33      	ldr	r2, [pc, #204]	; (80019bc <HAL_DMA_Abort+0x22c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d054      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_DMA_Abort+0x230>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d04f      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <HAL_DMA_Abort+0x234>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d04a      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <HAL_DMA_Abort+0x238>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d045      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <HAL_DMA_Abort+0x23c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d040      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2b      	ldr	r2, [pc, #172]	; (80019d0 <HAL_DMA_Abort+0x240>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d03b      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2a      	ldr	r2, [pc, #168]	; (80019d4 <HAL_DMA_Abort+0x244>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d036      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <HAL_DMA_Abort+0x248>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d031      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a27      	ldr	r2, [pc, #156]	; (80019dc <HAL_DMA_Abort+0x24c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d02c      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <HAL_DMA_Abort+0x250>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d027      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <HAL_DMA_Abort+0x254>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d022      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <HAL_DMA_Abort+0x258>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01d      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_DMA_Abort+0x25c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d018      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_DMA_Abort+0x260>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_DMA_Abort+0x264>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00e      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_DMA_Abort+0x268>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d009      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_DMA_Abort+0x26c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d004      	beq.n	800199e <HAL_DMA_Abort+0x20e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_DMA_Abort+0x270>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d132      	bne.n	8001a04 <HAL_DMA_Abort+0x274>
 800199e:	2301      	movs	r3, #1
 80019a0:	e031      	b.n	8001a06 <HAL_DMA_Abort+0x276>
 80019a2:	bf00      	nop
 80019a4:	40020010 	.word	0x40020010
 80019a8:	40020028 	.word	0x40020028
 80019ac:	40020040 	.word	0x40020040
 80019b0:	40020058 	.word	0x40020058
 80019b4:	40020070 	.word	0x40020070
 80019b8:	40020088 	.word	0x40020088
 80019bc:	400200a0 	.word	0x400200a0
 80019c0:	400200b8 	.word	0x400200b8
 80019c4:	40020410 	.word	0x40020410
 80019c8:	40020428 	.word	0x40020428
 80019cc:	40020440 	.word	0x40020440
 80019d0:	40020458 	.word	0x40020458
 80019d4:	40020470 	.word	0x40020470
 80019d8:	40020488 	.word	0x40020488
 80019dc:	400204a0 	.word	0x400204a0
 80019e0:	400204b8 	.word	0x400204b8
 80019e4:	58025408 	.word	0x58025408
 80019e8:	5802541c 	.word	0x5802541c
 80019ec:	58025430 	.word	0x58025430
 80019f0:	58025444 	.word	0x58025444
 80019f4:	58025458 	.word	0x58025458
 80019f8:	5802546c 	.word	0x5802546c
 80019fc:	58025480 	.word	0x58025480
 8001a00:	58025494 	.word	0x58025494
 8001a04:	2300      	movs	r3, #0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6d      	ldr	r2, [pc, #436]	; (8001bd4 <HAL_DMA_Abort+0x444>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d04a      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <HAL_DMA_Abort+0x448>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d045      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <HAL_DMA_Abort+0x44c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d040      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a68      	ldr	r2, [pc, #416]	; (8001be0 <HAL_DMA_Abort+0x450>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d03b      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a67      	ldr	r2, [pc, #412]	; (8001be4 <HAL_DMA_Abort+0x454>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d036      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <HAL_DMA_Abort+0x458>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a64      	ldr	r2, [pc, #400]	; (8001bec <HAL_DMA_Abort+0x45c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d02c      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a62      	ldr	r2, [pc, #392]	; (8001bf0 <HAL_DMA_Abort+0x460>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d027      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a61      	ldr	r2, [pc, #388]	; (8001bf4 <HAL_DMA_Abort+0x464>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d022      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a5f      	ldr	r2, [pc, #380]	; (8001bf8 <HAL_DMA_Abort+0x468>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <HAL_DMA_Abort+0x46c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d018      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5c      	ldr	r2, [pc, #368]	; (8001c00 <HAL_DMA_Abort+0x470>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_DMA_Abort+0x474>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a59      	ldr	r2, [pc, #356]	; (8001c08 <HAL_DMA_Abort+0x478>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d009      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_DMA_Abort+0x47c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d004      	beq.n	8001aba <HAL_DMA_Abort+0x32a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a56      	ldr	r2, [pc, #344]	; (8001c10 <HAL_DMA_Abort+0x480>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d108      	bne.n	8001acc <HAL_DMA_Abort+0x33c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e007      	b.n	8001adc <HAL_DMA_Abort+0x34c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001adc:	e013      	b.n	8001b06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ade:	f7ff fd0b 	bl	80014f8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d90c      	bls.n	8001b06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e12d      	b.n	8001d62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e5      	bne.n	8001ade <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_DMA_Abort+0x444>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04a      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_DMA_Abort+0x448>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d045      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2c      	ldr	r2, [pc, #176]	; (8001bdc <HAL_DMA_Abort+0x44c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d040      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_DMA_Abort+0x450>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d03b      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <HAL_DMA_Abort+0x454>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d036      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <HAL_DMA_Abort+0x458>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_DMA_Abort+0x45c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d02c      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <HAL_DMA_Abort+0x460>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d027      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_DMA_Abort+0x464>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <HAL_DMA_Abort+0x468>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_DMA_Abort+0x46c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_DMA_Abort+0x470>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_DMA_Abort+0x474>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <HAL_DMA_Abort+0x478>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_DMA_Abort+0x47c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_Abort+0x422>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_DMA_Abort+0x480>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_DMA_Abort+0x426>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_DMA_Abort+0x428>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02b      	beq.n	8001c14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	223f      	movs	r2, #63	; 0x3f
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	e02a      	b.n	8001c2a <HAL_DMA_Abort+0x49a>
 8001bd4:	40020010 	.word	0x40020010
 8001bd8:	40020028 	.word	0x40020028
 8001bdc:	40020040 	.word	0x40020040
 8001be0:	40020058 	.word	0x40020058
 8001be4:	40020070 	.word	0x40020070
 8001be8:	40020088 	.word	0x40020088
 8001bec:	400200a0 	.word	0x400200a0
 8001bf0:	400200b8 	.word	0x400200b8
 8001bf4:	40020410 	.word	0x40020410
 8001bf8:	40020428 	.word	0x40020428
 8001bfc:	40020440 	.word	0x40020440
 8001c00:	40020458 	.word	0x40020458
 8001c04:	40020470 	.word	0x40020470
 8001c08:	40020488 	.word	0x40020488
 8001c0c:	400204a0 	.word	0x400204a0
 8001c10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2201      	movs	r2, #1
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_DMA_Abort+0x5dc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d072      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a4d      	ldr	r2, [pc, #308]	; (8001d70 <HAL_DMA_Abort+0x5e0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d06d      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a4c      	ldr	r2, [pc, #304]	; (8001d74 <HAL_DMA_Abort+0x5e4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d068      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <HAL_DMA_Abort+0x5e8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d063      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <HAL_DMA_Abort+0x5ec>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d05e      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <HAL_DMA_Abort+0x5f0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d059      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_DMA_Abort+0x5f4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d054      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <HAL_DMA_Abort+0x5f8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d04f      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <HAL_DMA_Abort+0x5fc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04a      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a41      	ldr	r2, [pc, #260]	; (8001d90 <HAL_DMA_Abort+0x600>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d045      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a40      	ldr	r2, [pc, #256]	; (8001d94 <HAL_DMA_Abort+0x604>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d040      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <HAL_DMA_Abort+0x608>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d03b      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	; (8001d9c <HAL_DMA_Abort+0x60c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d036      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <HAL_DMA_Abort+0x610>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d031      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <HAL_DMA_Abort+0x614>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d02c      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <HAL_DMA_Abort+0x618>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d027      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a37      	ldr	r2, [pc, #220]	; (8001dac <HAL_DMA_Abort+0x61c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d022      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a35      	ldr	r2, [pc, #212]	; (8001db0 <HAL_DMA_Abort+0x620>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01d      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <HAL_DMA_Abort+0x624>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <HAL_DMA_Abort+0x628>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a31      	ldr	r2, [pc, #196]	; (8001dbc <HAL_DMA_Abort+0x62c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00e      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_DMA_Abort+0x630>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_DMA_Abort+0x634>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d004      	beq.n	8001d1a <HAL_DMA_Abort+0x58a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <HAL_DMA_Abort+0x638>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_DMA_Abort+0x58e>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_DMA_Abort+0x590>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d015      	beq.n	8001d50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40020010 	.word	0x40020010
 8001d70:	40020028 	.word	0x40020028
 8001d74:	40020040 	.word	0x40020040
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	40020070 	.word	0x40020070
 8001d80:	40020088 	.word	0x40020088
 8001d84:	400200a0 	.word	0x400200a0
 8001d88:	400200b8 	.word	0x400200b8
 8001d8c:	40020410 	.word	0x40020410
 8001d90:	40020428 	.word	0x40020428
 8001d94:	40020440 	.word	0x40020440
 8001d98:	40020458 	.word	0x40020458
 8001d9c:	40020470 	.word	0x40020470
 8001da0:	40020488 	.word	0x40020488
 8001da4:	400204a0 	.word	0x400204a0
 8001da8:	400204b8 	.word	0x400204b8
 8001dac:	58025408 	.word	0x58025408
 8001db0:	5802541c 	.word	0x5802541c
 8001db4:	58025430 	.word	0x58025430
 8001db8:	58025444 	.word	0x58025444
 8001dbc:	58025458 	.word	0x58025458
 8001dc0:	5802546c 	.word	0x5802546c
 8001dc4:	58025480 	.word	0x58025480
 8001dc8:	58025494 	.word	0x58025494

08001dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e237      	b.n	800224e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d004      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e22c      	b.n	800224e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_DMA_Abort_IT+0x1a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d04a      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <HAL_DMA_Abort_IT+0x1a4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d045      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a59      	ldr	r2, [pc, #356]	; (8001f74 <HAL_DMA_Abort_IT+0x1a8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d040      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_DMA_Abort_IT+0x1ac>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d03b      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a56      	ldr	r2, [pc, #344]	; (8001f7c <HAL_DMA_Abort_IT+0x1b0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d036      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a55      	ldr	r2, [pc, #340]	; (8001f80 <HAL_DMA_Abort_IT+0x1b4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d031      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a53      	ldr	r2, [pc, #332]	; (8001f84 <HAL_DMA_Abort_IT+0x1b8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02c      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_DMA_Abort_IT+0x1bc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d027      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_DMA_Abort_IT+0x1c0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d022      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_DMA_Abort_IT+0x1c4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d01d      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <HAL_DMA_Abort_IT+0x1c8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d018      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_DMA_Abort_IT+0x1cc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <HAL_DMA_Abort_IT+0x1d0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00e      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a49      	ldr	r2, [pc, #292]	; (8001fa0 <HAL_DMA_Abort_IT+0x1d4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d009      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a47      	ldr	r2, [pc, #284]	; (8001fa4 <HAL_DMA_Abort_IT+0x1d8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xc8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a46      	ldr	r2, [pc, #280]	; (8001fa8 <HAL_DMA_Abort_IT+0x1dc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA_Abort_IT+0xcc>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_DMA_Abort_IT+0xce>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8086 	beq.w	8001fac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <HAL_DMA_Abort_IT+0x1a0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d04a      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2e      	ldr	r2, [pc, #184]	; (8001f70 <HAL_DMA_Abort_IT+0x1a4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d045      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <HAL_DMA_Abort_IT+0x1a8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d040      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2b      	ldr	r2, [pc, #172]	; (8001f78 <HAL_DMA_Abort_IT+0x1ac>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d03b      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <HAL_DMA_Abort_IT+0x1b0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d036      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a28      	ldr	r2, [pc, #160]	; (8001f80 <HAL_DMA_Abort_IT+0x1b4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d031      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_DMA_Abort_IT+0x1b8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02c      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <HAL_DMA_Abort_IT+0x1bc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d027      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_DMA_Abort_IT+0x1c0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d022      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_DMA_Abort_IT+0x1c4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d01d      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_DMA_Abort_IT+0x1c8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d018      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_DMA_Abort_IT+0x1cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_DMA_Abort_IT+0x1d0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00e      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x17c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d108      	bne.n	8001f5a <HAL_DMA_Abort_IT+0x18e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e178      	b.n	800224c <HAL_DMA_Abort_IT+0x480>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e16f      	b.n	800224c <HAL_DMA_Abort_IT+0x480>
 8001f6c:	40020010 	.word	0x40020010
 8001f70:	40020028 	.word	0x40020028
 8001f74:	40020040 	.word	0x40020040
 8001f78:	40020058 	.word	0x40020058
 8001f7c:	40020070 	.word	0x40020070
 8001f80:	40020088 	.word	0x40020088
 8001f84:	400200a0 	.word	0x400200a0
 8001f88:	400200b8 	.word	0x400200b8
 8001f8c:	40020410 	.word	0x40020410
 8001f90:	40020428 	.word	0x40020428
 8001f94:	40020440 	.word	0x40020440
 8001f98:	40020458 	.word	0x40020458
 8001f9c:	40020470 	.word	0x40020470
 8001fa0:	40020488 	.word	0x40020488
 8001fa4:	400204a0 	.word	0x400204a0
 8001fa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 020e 	bic.w	r2, r2, #14
 8001fba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6c      	ldr	r2, [pc, #432]	; (8002174 <HAL_DMA_Abort_IT+0x3a8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04a      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <HAL_DMA_Abort_IT+0x3ac>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d045      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_DMA_Abort_IT+0x3b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a68      	ldr	r2, [pc, #416]	; (8002180 <HAL_DMA_Abort_IT+0x3b4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d03b      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_DMA_Abort_IT+0x3b8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d036      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_DMA_Abort_IT+0x3bc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_DMA_Abort_IT+0x3c0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02c      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a62      	ldr	r2, [pc, #392]	; (8002190 <HAL_DMA_Abort_IT+0x3c4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_DMA_Abort_IT+0x3c8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5f      	ldr	r2, [pc, #380]	; (8002198 <HAL_DMA_Abort_IT+0x3cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a5d      	ldr	r2, [pc, #372]	; (800219c <HAL_DMA_Abort_IT+0x3d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_DMA_Abort_IT+0x3d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_DMA_Abort_IT+0x3d8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a59      	ldr	r2, [pc, #356]	; (80021a8 <HAL_DMA_Abort_IT+0x3dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_DMA_Abort_IT+0x3e0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_Abort_IT+0x290>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_DMA_Abort_IT+0x3e4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d108      	bne.n	800206e <HAL_DMA_Abort_IT+0x2a2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e007      	b.n	800207e <HAL_DMA_Abort_IT+0x2b2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <HAL_DMA_Abort_IT+0x3a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d072      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <HAL_DMA_Abort_IT+0x3ac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d06d      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a39      	ldr	r2, [pc, #228]	; (800217c <HAL_DMA_Abort_IT+0x3b0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d068      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a37      	ldr	r2, [pc, #220]	; (8002180 <HAL_DMA_Abort_IT+0x3b4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d063      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a36      	ldr	r2, [pc, #216]	; (8002184 <HAL_DMA_Abort_IT+0x3b8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d05e      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a34      	ldr	r2, [pc, #208]	; (8002188 <HAL_DMA_Abort_IT+0x3bc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d059      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a33      	ldr	r2, [pc, #204]	; (800218c <HAL_DMA_Abort_IT+0x3c0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d054      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a31      	ldr	r2, [pc, #196]	; (8002190 <HAL_DMA_Abort_IT+0x3c4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04f      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_DMA_Abort_IT+0x3c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_DMA_Abort_IT+0x3cc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2d      	ldr	r2, [pc, #180]	; (800219c <HAL_DMA_Abort_IT+0x3d0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_DMA_Abort_IT+0x3d4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_DMA_Abort_IT+0x3d8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_DMA_Abort_IT+0x3dc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_DMA_Abort_IT+0x3e0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_DMA_Abort_IT+0x3e4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_DMA_Abort_IT+0x3e8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_DMA_Abort_IT+0x3ec>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <HAL_DMA_Abort_IT+0x3f0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_DMA_Abort_IT+0x3f4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_DMA_Abort_IT+0x3f8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_DMA_Abort_IT+0x3fc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_DMA_Abort_IT+0x400>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort_IT+0x3a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_DMA_Abort_IT+0x404>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d132      	bne.n	80021d4 <HAL_DMA_Abort_IT+0x408>
 800216e:	2301      	movs	r3, #1
 8002170:	e031      	b.n	80021d6 <HAL_DMA_Abort_IT+0x40a>
 8002172:	bf00      	nop
 8002174:	40020010 	.word	0x40020010
 8002178:	40020028 	.word	0x40020028
 800217c:	40020040 	.word	0x40020040
 8002180:	40020058 	.word	0x40020058
 8002184:	40020070 	.word	0x40020070
 8002188:	40020088 	.word	0x40020088
 800218c:	400200a0 	.word	0x400200a0
 8002190:	400200b8 	.word	0x400200b8
 8002194:	40020410 	.word	0x40020410
 8002198:	40020428 	.word	0x40020428
 800219c:	40020440 	.word	0x40020440
 80021a0:	40020458 	.word	0x40020458
 80021a4:	40020470 	.word	0x40020470
 80021a8:	40020488 	.word	0x40020488
 80021ac:	400204a0 	.word	0x400204a0
 80021b0:	400204b8 	.word	0x400204b8
 80021b4:	58025408 	.word	0x58025408
 80021b8:	5802541c 	.word	0x5802541c
 80021bc:	58025430 	.word	0x58025430
 80021c0:	58025444 	.word	0x58025444
 80021c4:	58025458 	.word	0x58025458
 80021c8:	5802546c 	.word	0x5802546c
 80021cc:	58025480 	.word	0x58025480
 80021d0:	58025494 	.word	0x58025494
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d028      	beq.n	800222c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002208:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002220:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800222a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b098      	sub	sp, #96	; 0x60
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002260:	4a84      	ldr	r2, [pc, #528]	; (8002474 <HAL_FDCAN_Init+0x21c>)
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	4611      	mov	r1, r2
 8002268:	224c      	movs	r2, #76	; 0x4c
 800226a:	4618      	mov	r0, r3
 800226c:	f005 ff1e 	bl	80080ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1c6      	b.n	8002608 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <HAL_FDCAN_Init+0x220>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d106      	bne.n	8002292 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fe20 	bl	8000eec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0210 	bic.w	r2, r2, #16
 80022ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff f91c 	bl	80014f8 <HAL_GetTick>
 80022c0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022c2:	e014      	b.n	80022ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022c4:	f7ff f918 	bl	80014f8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0a      	cmp	r3, #10
 80022d0:	d90d      	bls.n	80022ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e18c      	b.n	8002608 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d0e3      	beq.n	80022c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800230c:	f7ff f8f4 	bl	80014f8 <HAL_GetTick>
 8002310:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002312:	e014      	b.n	800233e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002314:	f7ff f8f0 	bl	80014f8 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d90d      	bls.n	800233e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e164      	b.n	8002608 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0e3      	beq.n	8002314 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0202 	orr.w	r2, r2, #2
 800235a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7c1b      	ldrb	r3, [r3, #16]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d108      	bne.n	8002376 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002372:	619a      	str	r2, [r3, #24]
 8002374:	e007      	b.n	8002386 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002384:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7c5b      	ldrb	r3, [r3, #17]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239c:	619a      	str	r2, [r3, #24]
 800239e:	e007      	b.n	80023b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7c9b      	ldrb	r3, [r3, #18]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023c6:	619a      	str	r2, [r3, #24]
 80023c8:	e007      	b.n	80023da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80023fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0210 	bic.w	r2, r2, #16
 800240e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0204 	orr.w	r2, r2, #4
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	e030      	b.n	800248c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d02c      	beq.n	800248c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d020      	beq.n	800247c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002448:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0210 	orr.w	r2, r2, #16
 8002458:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d114      	bne.n	800248c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0220 	orr.w	r2, r2, #32
 8002470:	619a      	str	r2, [r3, #24]
 8002472:	e00b      	b.n	800248c <HAL_FDCAN_Init+0x234>
 8002474:	08008974 	.word	0x08008974
 8002478:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	3b01      	subs	r3, #1
 8002492:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	3b01      	subs	r3, #1
 800249a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800249c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024a4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024b4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024b6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c0:	d115      	bne.n	80024ee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	3b01      	subs	r3, #1
 80024ce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024d0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	3b01      	subs	r3, #1
 80024d8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024da:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	3b01      	subs	r3, #1
 80024e4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80024ea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024ec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002514:	4413      	add	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d011      	beq.n	800253e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002522:	f023 0107 	bic.w	r1, r3, #7
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	3360      	adds	r3, #96	; 0x60
 800252e:	443b      	add	r3, r7
 8002530:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d011      	beq.n	800256a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800254e:	f023 0107 	bic.w	r1, r3, #7
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3360      	adds	r3, #96	; 0x60
 800255a:	443b      	add	r3, r7
 800255c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800257a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	443b      	add	r3, r7
 8002588:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800258c:	011a      	lsls	r2, r3, #4
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80025a8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	443b      	add	r3, r7
 80025b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80025ba:	021a      	lsls	r2, r3, #8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_FDCAN_Init+0x3b8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d107      	bne.n	80025e0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f022 0203 	bic.w	r2, r2, #3
 80025de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fddb 	bl	80031b4 <FDCAN_CalcultateRamBlockAddresses>
 80025fe:	4603      	mov	r3, r0
 8002600:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002604:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002608:	4618      	mov	r0, r3
 800260a:	3760      	adds	r7, #96	; 0x60
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	4000a000 	.word	0x4000a000

08002614 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002624:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d002      	beq.n	8002632 <HAL_FDCAN_ConfigFilter+0x1e>
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d157      	bne.n	80026e2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d12b      	bne.n	8002692 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b07      	cmp	r3, #7
 8002640:	d10d      	bne.n	800265e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800264e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002654:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002656:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e00e      	b.n	800267c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800266a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8002672:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e025      	b.n	80026de <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	075a      	lsls	r2, r3, #29
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b07      	cmp	r3, #7
 80026a6:	d103      	bne.n	80026b0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e006      	b.n	80026be <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	079a      	lsls	r2, r3, #30
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3304      	adds	r3, #4
 80026d6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e008      	b.n	80026f4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026e8:	f043 0202 	orr.w	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d111      	bne.n	8002738 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e008      	b.n	800274a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d141      	bne.n	80027f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002776:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e038      	b.n	8002804 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800279a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e026      	b.n	8002804 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fe77 	bl	80034c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80027e2:	2201      	movs	r2, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e008      	b.n	8002804 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027f8:	f043 0208 	orr.w	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800280c:	b480      	push	{r7}
 800280e:	b08b      	sub	sp, #44	; 0x2c
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002824:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002826:	7efb      	ldrb	r3, [r7, #27]
 8002828:	2b02      	cmp	r3, #2
 800282a:	f040 814b 	bne.w	8002ac4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d14d      	bne.n	80028d0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800283c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e13e      	b.n	8002ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800286e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e12c      	b.n	8002ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002884:	0e1b      	lsrs	r3, r3, #24
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10b      	bne.n	80028a6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002896:	0fdb      	lsrs	r3, r3, #31
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a0:	d101      	bne.n	80028a6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	69f9      	ldr	r1, [r7, #28]
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e069      	b.n	80029a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b41      	cmp	r3, #65	; 0x41
 80028d4:	d14d      	bne.n	8002972 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0ed      	b.n	8002ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0db      	b.n	8002ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002926:	0e1b      	lsrs	r3, r3, #24
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10b      	bne.n	8002948 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002938:	0fdb      	lsrs	r3, r3, #31
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002942:	d101      	bne.n	8002948 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002944:	2301      	movs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	69f9      	ldr	r1, [r7, #28]
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	e018      	b.n	80029a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d309      	bcc.n	8002990 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0a2      	b.n	8002ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e005      	b.n	80029d4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	3304      	adds	r3, #4
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e1b      	lsrs	r3, r3, #24
 8002a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0fda      	lsrs	r2, r3, #31
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	e00a      	b.n	8002a5e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	440b      	add	r3, r1
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d3eb      	bcc.n	8002a48 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d105      	bne.n	8002a82 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002a80:	e01e      	b.n	8002ac0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b41      	cmp	r3, #65	; 0x41
 8002a86:	d105      	bne.n	8002a94 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a92:	e015      	b.n	8002ac0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b1f      	cmp	r3, #31
 8002a98:	d808      	bhi.n	8002aac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002aaa:	e009      	b.n	8002ac0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8002abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e008      	b.n	8002ad6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	372c      	adds	r7, #44	; 0x2c
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	080089d0 	.word	0x080089d0

08002ae8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002afa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d002      	beq.n	8002b08 <HAL_FDCAN_ActivateNotification+0x20>
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d155      	bne.n	8002bb4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d108      	bne.n	8002b28 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b26:	e014      	b.n	8002b52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d108      	bne.n	8002b4a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0202 	orr.w	r2, r2, #2
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b48:	e003      	b.n	8002b52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <HAL_FDCAN_ActivateNotification+0xec>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6553      	str	r3, [r2, #84]	; 0x54
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0f9b      	lsrs	r3, r3, #30
 8002baa:	490b      	ldr	r1, [pc, #44]	; (8002bd8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e008      	b.n	8002bc6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	3fcfffff 	.word	0x3fcfffff
 8002bd8:	4000a800 	.word	0x4000a800

08002bdc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b096      	sub	sp, #88	; 0x58
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002be4:	4b95      	ldr	r3, [pc, #596]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	079b      	lsls	r3, r3, #30
 8002bea:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002bec:	4b93      	ldr	r3, [pc, #588]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	079b      	lsls	r3, r3, #30
 8002bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c24:	4013      	ands	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c54:	4013      	ands	r3, r2
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00f      	beq.n	8002caa <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c9e:	4b67      	ldr	r3, [pc, #412]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa39 	bl	800311c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01c      	beq.n	8002cee <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cde:	651a      	str	r2, [r3, #80]	; 0x50
 8002ce0:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f9ee 	bl	80030ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_FDCAN_IRQHandler+0x264>)
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	6513      	str	r3, [r2, #80]	; 0x50
 8002d00:	4a4e      	ldr	r2, [pc, #312]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	0f9b      	lsrs	r3, r3, #30
 8002d06:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9b2 	bl	8003074 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d1c:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_FDCAN_IRQHandler+0x264>)
 8002d1e:	400b      	ands	r3, r1
 8002d20:	6513      	str	r3, [r2, #80]	; 0x50
 8002d22:	4a46      	ldr	r2, [pc, #280]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d26:	0f9b      	lsrs	r3, r3, #30
 8002d28:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f9ac 	bl	800308a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_FDCAN_IRQHandler+0x264>)
 8002d40:	400b      	ands	r3, r1
 8002d42:	6513      	str	r3, [r2, #80]	; 0x50
 8002d44:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	0f9b      	lsrs	r3, r3, #30
 8002d4a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002d4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe f882 	bl	8000e58 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_FDCAN_IRQHandler+0x264>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	6513      	str	r3, [r2, #80]	; 0x50
 8002d66:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6a:	0f9b      	lsrs	r3, r3, #30
 8002d6c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002d6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe f82b 	bl	8000dcc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00f      	beq.n	8002da0 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50
 8002d94:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f980 	bl	80030a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc8:	4013      	ands	r3, r2
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd4:	651a      	str	r2, [r3, #80]	; 0x50
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f968 	bl	80030b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00f      	beq.n	8002e0e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e00:	651a      	str	r2, [r3, #80]	; 0x50
 8002e02:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f969 	bl	80030e0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_FDCAN_IRQHandler+0x260>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f95e 	bl	80030f4 <HAL_FDCAN_TimestampWraparoundCallback>
 8002e38:	e004      	b.n	8002e44 <HAL_FDCAN_IRQHandler+0x268>
 8002e3a:	bf00      	nop
 8002e3c:	4000a800 	.word	0x4000a800
 8002e40:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002e60:	651a      	str	r2, [r3, #80]	; 0x50
 8002e62:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_FDCAN_IRQHandler+0x48c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f94d 	bl	8003108 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e8c:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_FDCAN_IRQHandler+0x48c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_FDCAN_IRQHandler+0x490>)
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	6513      	str	r3, [r2, #80]	; 0x50
 8002eb4:	4a6c      	ldr	r2, [pc, #432]	; (8003068 <HAL_FDCAN_IRQHandler+0x48c>)
 8002eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb8:	0f9b      	lsrs	r3, r3, #30
 8002eba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f940 	bl	8003144 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d011      	beq.n	8002eee <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ed0:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_FDCAN_IRQHandler+0x490>)
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	6513      	str	r3, [r2, #80]	; 0x50
 8002ed6:	4a64      	ldr	r2, [pc, #400]	; (8003068 <HAL_FDCAN_IRQHandler+0x48c>)
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	0f9b      	lsrs	r3, r3, #30
 8002edc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5f      	ldr	r2, [pc, #380]	; (8003070 <HAL_FDCAN_IRQHandler+0x494>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	f040 80aa 	bne.w	800304e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a2 	beq.w	800304e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1e:	4013      	ands	r3, r2
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f36:	4013      	ands	r3, r2
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	4013      	ands	r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002f5c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	6a3a      	ldr	r2, [r7, #32]
 8002f66:	4013      	ands	r3, r2
 8002f68:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002f74:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8d9 	bl	800315a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f8d9 	bl	8003170 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d019      	beq.n	8002ffc <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d014      	beq.n	8002ffc <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8c5 	bl	8003186 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800300a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8c6 	bl	800319e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f869 	bl	8003130 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800305e:	bf00      	nop
 8003060:	3758      	adds	r7, #88	; 0x58
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	4000a800 	.word	0x4000a800
 800306c:	3fcfffff 	.word	0x3fcfffff
 8003070:	4000a000 	.word	0x4000a000

08003074 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80031ca:	4ba7      	ldr	r3, [pc, #668]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	0091      	lsls	r1, r2, #2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	4413      	add	r3, r2
 8003200:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800320a:	4b97      	ldr	r3, [pc, #604]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800320c:	4013      	ands	r3, r2
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	0091      	lsls	r1, r2, #2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	430b      	orrs	r3, r1
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800324c:	4b86      	ldr	r3, [pc, #536]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800324e:	4013      	ands	r3, r2
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	0091      	lsls	r1, r2, #2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	430b      	orrs	r3, r1
 800325a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003266:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	041a      	lsls	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003294:	4b74      	ldr	r3, [pc, #464]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	0091      	lsls	r1, r2, #2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	041a      	lsls	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80032dc:	4b62      	ldr	r3, [pc, #392]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032de:	4013      	ands	r3, r2
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	0091      	lsls	r1, r2, #2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003308:	4b57      	ldr	r3, [pc, #348]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800330a:	4013      	ands	r3, r2
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	0091      	lsls	r1, r2, #2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003322:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	041a      	lsls	r2, r3, #16
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	4413      	add	r3, r2
 8003340:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800334c:	4013      	ands	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	0091      	lsls	r1, r2, #2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	430b      	orrs	r3, r1
 8003358:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003364:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003380:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003388:	061a      	lsls	r2, r3, #24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800339a:	4413      	add	r3, r2
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d915      	bls.n	8003490 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003464:	e006      	b.n	8003474 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003466:	bf00      	nop
 8003468:	ffff0003 	.word	0xffff0003
 800346c:	10002b00 	.word	0x10002b00
 8003470:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2203      	movs	r2, #3
 8003488:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e010      	b.n	80034b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e005      	b.n	80034a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3f3      	bcc.n	8003498 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80034de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e00a      	b.n	8003502 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80034f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80034fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80034fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003500:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800350c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003512:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003518:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3304      	adds	r3, #4
 8003542:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	3304      	adds	r3, #4
 800354e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e020      	b.n	8003598 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3303      	adds	r3, #3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3302      	adds	r3, #2
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	440b      	add	r3, r1
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800356e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	440b      	add	r3, r1
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800357c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	440a      	add	r2, r1
 8003584:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003586:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	3304      	adds	r3, #4
 8003590:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3304      	adds	r3, #4
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <FDCAN_CopyMessageToRAM+0xf8>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	461a      	mov	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d3d5      	bcc.n	8003556 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	3724      	adds	r7, #36	; 0x24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	080089d0 	.word	0x080089d0

080035bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035ca:	4b89      	ldr	r3, [pc, #548]	; (80037f0 <HAL_GPIO_Init+0x234>)
 80035cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035ce:	e194      	b.n	80038fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8186 	beq.w	80038f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d005      	beq.n	8003600 <HAL_GPIO_Init+0x44>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d130      	bne.n	8003662 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003636:	2201      	movs	r2, #1
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 0201 	and.w	r2, r3, #1
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b03      	cmp	r3, #3
 800366c:	d017      	beq.n	800369e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d123      	bne.n	80036f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	69b9      	ldr	r1, [r7, #24]
 80036ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0203 	and.w	r2, r3, #3
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80e0 	beq.w	80038f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_GPIO_Init+0x238>)
 8003736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800373a:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <HAL_GPIO_Init+0x238>)
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_GPIO_Init+0x238>)
 8003746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <HAL_GPIO_Init+0x23c>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_GPIO_Init+0x240>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d052      	beq.n	8003824 <HAL_GPIO_Init+0x268>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_GPIO_Init+0x244>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_GPIO_Init+0x22e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <HAL_GPIO_Init+0x248>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02b      	beq.n	80037e6 <HAL_GPIO_Init+0x22a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_GPIO_Init+0x24c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d025      	beq.n	80037e2 <HAL_GPIO_Init+0x226>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_GPIO_Init+0x250>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <HAL_GPIO_Init+0x222>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_GPIO_Init+0x254>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d019      	beq.n	80037da <HAL_GPIO_Init+0x21e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_GPIO_Init+0x258>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_GPIO_Init+0x21a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_GPIO_Init+0x25c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00d      	beq.n	80037d2 <HAL_GPIO_Init+0x216>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_GPIO_Init+0x260>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x212>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a17      	ldr	r2, [pc, #92]	; (8003820 <HAL_GPIO_Init+0x264>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_GPIO_Init+0x20e>
 80037c6:	2309      	movs	r3, #9
 80037c8:	e02d      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037ca:	230a      	movs	r3, #10
 80037cc:	e02b      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037ce:	2308      	movs	r3, #8
 80037d0:	e029      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037d2:	2307      	movs	r3, #7
 80037d4:	e027      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037d6:	2306      	movs	r3, #6
 80037d8:	e025      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037da:	2305      	movs	r3, #5
 80037dc:	e023      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037de:	2304      	movs	r3, #4
 80037e0:	e021      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e01f      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e01d      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e01b      	b.n	8003826 <HAL_GPIO_Init+0x26a>
 80037ee:	bf00      	nop
 80037f0:	58000080 	.word	0x58000080
 80037f4:	58024400 	.word	0x58024400
 80037f8:	58000400 	.word	0x58000400
 80037fc:	58020000 	.word	0x58020000
 8003800:	58020400 	.word	0x58020400
 8003804:	58020800 	.word	0x58020800
 8003808:	58020c00 	.word	0x58020c00
 800380c:	58021000 	.word	0x58021000
 8003810:	58021400 	.word	0x58021400
 8003814:	58021800 	.word	0x58021800
 8003818:	58021c00 	.word	0x58021c00
 800381c:	58022000 	.word	0x58022000
 8003820:	58022400 	.word	0x58022400
 8003824:	2300      	movs	r3, #0
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	f002 0203 	and.w	r2, r2, #3
 800382c:	0092      	lsls	r2, r2, #2
 800382e:	4093      	lsls	r3, r2
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003836:	4938      	ldr	r1, [pc, #224]	; (8003918 <HAL_GPIO_Init+0x35c>)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	3302      	adds	r3, #2
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800386a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3301      	adds	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f47f ae63 	bne.w	80035d0 <HAL_GPIO_Init+0x14>
  }
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	3724      	adds	r7, #36	; 0x24
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	58000400 	.word	0x58000400

0800391c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
 8003928:	4613      	mov	r3, r2
 800392a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800392c:	787b      	ldrb	r3, [r7, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003938:	e003      	b.n	8003942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	619a      	str	r2, [r3, #24]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_PWREx_ConfigSupply+0x70>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b04      	cmp	r3, #4
 8003962:	d00a      	beq.n	800397a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e01f      	b.n	80039b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e01d      	b.n	80039b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_PWREx_ConfigSupply+0x70>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0207 	bic.w	r2, r3, #7
 8003982:	490f      	ldr	r1, [pc, #60]	; (80039c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800398a:	f7fd fdb5 	bl	80014f8 <HAL_GetTick>
 800398e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003990:	e009      	b.n	80039a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003992:	f7fd fdb1 	bl	80014f8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a0:	d901      	bls.n	80039a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e007      	b.n	80039b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_PWREx_ConfigSupply+0x70>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b2:	d1ee      	bne.n	8003992 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	58024800 	.word	0x58024800

080039c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08c      	sub	sp, #48	; 0x30
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f000 bc48 	b.w	8004268 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8088 	beq.w	8003af6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b99      	ldr	r3, [pc, #612]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f0:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d007      	beq.n	8003a0c <HAL_RCC_OscConfig+0x48>
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	2b18      	cmp	r3, #24
 8003a00:	d111      	bne.n	8003a26 <HAL_RCC_OscConfig+0x62>
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d10c      	bne.n	8003a26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	4b8f      	ldr	r3, [pc, #572]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d06d      	beq.n	8003af4 <HAL_RCC_OscConfig+0x130>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d169      	bne.n	8003af4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f000 bc21 	b.w	8004268 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x7a>
 8003a30:	4b86      	ldr	r3, [pc, #536]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a85      	ldr	r2, [pc, #532]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e02e      	b.n	8003a9c <HAL_RCC_OscConfig+0xd8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x9c>
 8003a46:	4b81      	ldr	r3, [pc, #516]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a80      	ldr	r2, [pc, #512]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b7e      	ldr	r3, [pc, #504]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7d      	ldr	r2, [pc, #500]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e01d      	b.n	8003a9c <HAL_RCC_OscConfig+0xd8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0xc0>
 8003a6a:	4b78      	ldr	r3, [pc, #480]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a77      	ldr	r2, [pc, #476]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b75      	ldr	r3, [pc, #468]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a74      	ldr	r2, [pc, #464]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0xd8>
 8003a84:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a70      	ldr	r2, [pc, #448]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b6e      	ldr	r3, [pc, #440]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6d      	ldr	r2, [pc, #436]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fd28 	bl	80014f8 <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fd fd24 	bl	80014f8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e3d4      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0xe8>
 8003aca:	e014      	b.n	8003af6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd fd14 	bl	80014f8 <HAL_GetTick>
 8003ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fd fd10 	bl	80014f8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e3c0      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ae6:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x110>
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80ca 	beq.w	8003c98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b04:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b0e:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_RCC_OscConfig+0x166>
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2b18      	cmp	r3, #24
 8003b1e:	d156      	bne.n	8003bce <HAL_RCC_OscConfig+0x20a>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d151      	bne.n	8003bce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2a:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x17e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e392      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b42:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 0219 	bic.w	r2, r3, #25
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	493f      	ldr	r1, [pc, #252]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fcd0 	bl	80014f8 <HAL_GetTick>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fd fccc 	bl	80014f8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e37c      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	f7fd fced 	bl	8001558 <HAL_GetREVID>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d817      	bhi.n	8003bb8 <HAL_RCC_OscConfig+0x1f4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d108      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x1de>
 8003b90:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba0:	e07a      	b.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	031b      	lsls	r3, r3, #12
 8003bb0:	4926      	ldr	r1, [pc, #152]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb6:	e06f      	b.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	4921      	ldr	r1, [pc, #132]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bcc:	e064      	b.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d047      	beq.n	8003c66 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0219 	bic.w	r2, r3, #25
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	491a      	ldr	r1, [pc, #104]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fc86 	bl	80014f8 <HAL_GetTick>
 8003bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fd fc82 	bl	80014f8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e332      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	f7fd fca3 	bl	8001558 <HAL_GetREVID>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d819      	bhi.n	8003c50 <HAL_RCC_OscConfig+0x28c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d108      	bne.n	8003c36 <HAL_RCC_OscConfig+0x272>
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c32:	6053      	str	r3, [r2, #4]
 8003c34:	e030      	b.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	031b      	lsls	r3, r3, #12
 8003c44:	4901      	ldr	r1, [pc, #4]	; (8003c4c <HAL_RCC_OscConfig+0x288>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
 8003c4a:	e025      	b.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	4b9a      	ldr	r3, [pc, #616]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4997      	ldr	r1, [pc, #604]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	e018      	b.n	8003c98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b95      	ldr	r3, [pc, #596]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a94      	ldr	r2, [pc, #592]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fc41 	bl	80014f8 <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fc3d 	bl	80014f8 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e2ed      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c8c:	4b8b      	ldr	r3, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a9 	beq.w	8003df8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cb0:	4b82      	ldr	r3, [pc, #520]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d007      	beq.n	8003ccc <HAL_RCC_OscConfig+0x308>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b18      	cmp	r3, #24
 8003cc0:	d13a      	bne.n	8003d38 <HAL_RCC_OscConfig+0x374>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d135      	bne.n	8003d38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ccc:	4b7b      	ldr	r3, [pc, #492]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x320>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e2c1      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ce4:	f7fd fc38 	bl	8001558 <HAL_GetREVID>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d817      	bhi.n	8003d22 <HAL_RCC_OscConfig+0x35e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCC_OscConfig+0x348>
 8003cfa:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d02:	4a6e      	ldr	r2, [pc, #440]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d0a:	e075      	b.n	8003df8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d0c:	4b6b      	ldr	r3, [pc, #428]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	069b      	lsls	r3, r3, #26
 8003d1a:	4968      	ldr	r1, [pc, #416]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d20:	e06a      	b.n	8003df8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d22:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	4962      	ldr	r1, [pc, #392]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d36:	e05f      	b.n	8003df8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d042      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d40:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fbd4 	bl	80014f8 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d54:	f7fd fbd0 	bl	80014f8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e280      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d66:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d72:	f7fd fbf1 	bl	8001558 <HAL_GetREVID>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d817      	bhi.n	8003db0 <HAL_RCC_OscConfig+0x3ec>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d108      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3d6>
 8003d88:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d90:	4a4a      	ldr	r2, [pc, #296]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d96:	6053      	str	r3, [r2, #4]
 8003d98:	e02e      	b.n	8003df8 <HAL_RCC_OscConfig+0x434>
 8003d9a:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	069b      	lsls	r3, r3, #26
 8003da8:	4944      	ldr	r1, [pc, #272]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
 8003dae:	e023      	b.n	8003df8 <HAL_RCC_OscConfig+0x434>
 8003db0:	4b42      	ldr	r3, [pc, #264]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	493f      	ldr	r1, [pc, #252]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60cb      	str	r3, [r1, #12]
 8003dc4:	e018      	b.n	8003df8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fb91 	bl	80014f8 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dda:	f7fd fb8d 	bl	80014f8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e23d      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dec:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d036      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fd fb6e 	bl	80014f8 <HAL_GetTick>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fd fb6a 	bl	80014f8 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e21a      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x45c>
 8003e3e:	e018      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fb54 	bl	80014f8 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fd fb50 	bl	80014f8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e200      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d039      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01c      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e92:	f7fd fb31 	bl	80014f8 <HAL_GetTick>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e9a:	f7fd fb2d 	bl	80014f8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1dd      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_RCC_OscConfig+0x4f8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x4d6>
 8003eb8:	e01b      	b.n	8003ef2 <HAL_RCC_OscConfig+0x52e>
 8003eba:	bf00      	nop
 8003ebc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec0:	4b9b      	ldr	r3, [pc, #620]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a9a      	ldr	r2, [pc, #616]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fb14 	bl	80014f8 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed4:	f7fd fb10 	bl	80014f8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e1c0      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ee6:	4b92      	ldr	r3, [pc, #584]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8081 	beq.w	8004002 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f00:	4b8c      	ldr	r3, [pc, #560]	; (8004134 <HAL_RCC_OscConfig+0x770>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a8b      	ldr	r2, [pc, #556]	; (8004134 <HAL_RCC_OscConfig+0x770>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd faf4 	bl	80014f8 <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f14:	f7fd faf0 	bl	80014f8 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1a0      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f26:	4b83      	ldr	r3, [pc, #524]	; (8004134 <HAL_RCC_OscConfig+0x770>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d106      	bne.n	8003f48 <HAL_RCC_OscConfig+0x584>
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	; 0x70
 8003f46:	e02d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x5e0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5a6>
 8003f50:	4b77      	ldr	r3, [pc, #476]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a76      	ldr	r2, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a73      	ldr	r2, [pc, #460]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f62:	f023 0304 	bic.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	e01c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x5e0>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c8>
 8003f72:	4b6f      	ldr	r3, [pc, #444]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a6e      	ldr	r2, [pc, #440]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a6b      	ldr	r2, [pc, #428]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x5e0>
 8003f8c:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	4a67      	ldr	r2, [pc, #412]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	6713      	str	r3, [r2, #112]	; 0x70
 8003f98:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a64      	ldr	r2, [pc, #400]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	f023 0304 	bic.w	r3, r3, #4
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fd faa4 	bl	80014f8 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fd faa0 	bl	80014f8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e14e      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ee      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x5f0>
 8003fd6:	e014      	b.n	8004002 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fd fa8e 	bl	80014f8 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fa8a 	bl	80014f8 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e138      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1ee      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 812d 	beq.w	8004266 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800400c:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004014:	2b18      	cmp	r3, #24
 8004016:	f000 80bd 	beq.w	8004194 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b02      	cmp	r3, #2
 8004020:	f040 809e 	bne.w	8004160 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b42      	ldr	r3, [pc, #264]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a41      	ldr	r2, [pc, #260]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fa62 	bl	80014f8 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fa5e 	bl	80014f8 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e10e      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCC_OscConfig+0x774>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	430a      	orrs	r2, r1
 800406a:	4931      	ldr	r1, [pc, #196]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 800406c:	4313      	orrs	r3, r2
 800406e:	628b      	str	r3, [r1, #40]	; 0x28
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	3b01      	subs	r3, #1
 8004076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	3b01      	subs	r3, #1
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	b29b      	uxth	r3, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	3b01      	subs	r3, #1
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	3b01      	subs	r3, #1
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040a0:	4923      	ldr	r1, [pc, #140]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040b2:	4b1f      	ldr	r3, [pc, #124]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCC_OscConfig+0x778>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040be:	00d2      	lsls	r2, r2, #3
 80040c0:	491b      	ldr	r1, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f023 020c 	bic.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4917      	ldr	r1, [pc, #92]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	f023 0202 	bic.w	r2, r3, #2
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	4912      	ldr	r1, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	4a10      	ldr	r2, [pc, #64]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	4a07      	ldr	r2, [pc, #28]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_RCC_OscConfig+0x76c>)
 8004120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd f9e7 	bl	80014f8 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800412c:	e011      	b.n	8004152 <HAL_RCC_OscConfig+0x78e>
 800412e:	bf00      	nop
 8004130:	58024400 	.word	0x58024400
 8004134:	58024800 	.word	0x58024800
 8004138:	fffffc0c 	.word	0xfffffc0c
 800413c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd f9da 	bl	80014f8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e08a      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x77c>
 800415e:	e082      	b.n	8004266 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a42      	ldr	r2, [pc, #264]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd f9c4 	bl	80014f8 <HAL_GetTick>
 8004170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fd f9c0 	bl	80014f8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e070      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004186:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x7b0>
 8004192:	e068      	b.n	8004266 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800419a:	4b35      	ldr	r3, [pc, #212]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d031      	beq.n	800420c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0203 	and.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d12a      	bne.n	800420c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d122      	bne.n	800420c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d11a      	bne.n	800420c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	0a5b      	lsrs	r3, r3, #9
 80041da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d111      	bne.n	800420c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d108      	bne.n	800420c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0e1b      	lsrs	r3, r3, #24
 80041fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e02b      	b.n	8004268 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004210:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800421a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d01f      	beq.n	8004266 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4a11      	ldr	r2, [pc, #68]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004232:	f7fd f961 	bl	80014f8 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004238:	bf00      	nop
 800423a:	f7fd f95d 	bl	80014f8 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	4293      	cmp	r3, r2
 8004244:	d0f9      	beq.n	800423a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_RCC_OscConfig+0x8b0>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004252:	00d2      	lsls	r2, r2, #3
 8004254:	4906      	ldr	r1, [pc, #24]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004256:	4313      	orrs	r3, r2
 8004258:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_RCC_OscConfig+0x8ac>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3730      	adds	r7, #48	; 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	58024400 	.word	0x58024400
 8004274:	ffff0007 	.word	0xffff0007

08004278 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e19c      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d910      	bls.n	80042bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 020f 	bic.w	r2, r3, #15
 80042a2:	4985      	ldr	r1, [pc, #532]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b83      	ldr	r3, [pc, #524]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e184      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d908      	bls.n	80042ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042d8:	4b78      	ldr	r3, [pc, #480]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	4975      	ldr	r1, [pc, #468]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	4b70      	ldr	r3, [pc, #448]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004302:	429a      	cmp	r2, r3
 8004304:	d908      	bls.n	8004318 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	496a      	ldr	r1, [pc, #424]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004314:	4313      	orrs	r3, r2
 8004316:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	4b64      	ldr	r3, [pc, #400]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004330:	429a      	cmp	r2, r3
 8004332:	d908      	bls.n	8004346 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	495e      	ldr	r1, [pc, #376]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004342:	4313      	orrs	r3, r2
 8004344:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d010      	beq.n	8004374 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435e:	429a      	cmp	r2, r3
 8004360:	d908      	bls.n	8004374 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4953      	ldr	r1, [pc, #332]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004370:	4313      	orrs	r3, r2
 8004372:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	4b4d      	ldr	r3, [pc, #308]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	429a      	cmp	r2, r3
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f023 020f 	bic.w	r2, r3, #15
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4947      	ldr	r1, [pc, #284]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d055      	beq.n	800445a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4940      	ldr	r1, [pc, #256]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043c8:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d121      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0f6      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d115      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0ea      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043f8:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0de      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0d6      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004418:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f023 0207 	bic.w	r2, r3, #7
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4925      	ldr	r1, [pc, #148]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442a:	f7fd f865 	bl	80014f8 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004430:	e00a      	b.n	8004448 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004432:	f7fd f861 	bl	80014f8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0be      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	429a      	cmp	r2, r3
 8004458:	d1eb      	bne.n	8004432 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	429a      	cmp	r2, r3
 8004474:	d208      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f023 020f 	bic.w	r2, r3, #15
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	490e      	ldr	r1, [pc, #56]	; (80044bc <HAL_RCC_ClockConfig+0x244>)
 8004484:	4313      	orrs	r3, r2
 8004486:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d214      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 020f 	bic.w	r2, r3, #15
 800449e:	4906      	ldr	r1, [pc, #24]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_RCC_ClockConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e086      	b.n	80045c6 <HAL_RCC_ClockConfig+0x34e>
 80044b8:	52002000 	.word	0x52002000
 80044bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d010      	beq.n	80044ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044d8:	429a      	cmp	r2, r3
 80044da:	d208      	bcs.n	80044ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044dc:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	4939      	ldr	r1, [pc, #228]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d010      	beq.n	800451c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004506:	429a      	cmp	r2, r3
 8004508:	d208      	bcs.n	800451c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	492e      	ldr	r1, [pc, #184]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004518:	4313      	orrs	r3, r2
 800451a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699a      	ldr	r2, [r3, #24]
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004534:	429a      	cmp	r2, r3
 8004536:	d208      	bcs.n	800454a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4922      	ldr	r1, [pc, #136]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004546:	4313      	orrs	r3, r2
 8004548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d010      	beq.n	8004578 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004562:	429a      	cmp	r2, r3
 8004564:	d208      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4917      	ldr	r1, [pc, #92]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004574:	4313      	orrs	r3, r2
 8004576:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004578:	f000 f834 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	4912      	ldr	r1, [pc, #72]	; (80045d4 <HAL_RCC_ClockConfig+0x35c>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004596:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <HAL_RCC_ClockConfig+0x358>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <HAL_RCC_ClockConfig+0x35c>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_RCC_ClockConfig+0x360>)
 80045ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x364>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x368>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc ff52 	bl	8001464 <HAL_InitTick>
 80045c0:	4603      	mov	r3, r0
 80045c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400
 80045d4:	080089c0 	.word	0x080089c0
 80045d8:	24000004 	.word	0x24000004
 80045dc:	24000000 	.word	0x24000000
 80045e0:	24000008 	.word	0x24000008

080045e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ea:	4bb3      	ldr	r3, [pc, #716]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f2:	2b18      	cmp	r3, #24
 80045f4:	f200 8155 	bhi.w	80048a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004665 	.word	0x08004665
 8004604:	080048a3 	.word	0x080048a3
 8004608:	080048a3 	.word	0x080048a3
 800460c:	080048a3 	.word	0x080048a3
 8004610:	080048a3 	.word	0x080048a3
 8004614:	080048a3 	.word	0x080048a3
 8004618:	080048a3 	.word	0x080048a3
 800461c:	080048a3 	.word	0x080048a3
 8004620:	0800468b 	.word	0x0800468b
 8004624:	080048a3 	.word	0x080048a3
 8004628:	080048a3 	.word	0x080048a3
 800462c:	080048a3 	.word	0x080048a3
 8004630:	080048a3 	.word	0x080048a3
 8004634:	080048a3 	.word	0x080048a3
 8004638:	080048a3 	.word	0x080048a3
 800463c:	080048a3 	.word	0x080048a3
 8004640:	08004691 	.word	0x08004691
 8004644:	080048a3 	.word	0x080048a3
 8004648:	080048a3 	.word	0x080048a3
 800464c:	080048a3 	.word	0x080048a3
 8004650:	080048a3 	.word	0x080048a3
 8004654:	080048a3 	.word	0x080048a3
 8004658:	080048a3 	.word	0x080048a3
 800465c:	080048a3 	.word	0x080048a3
 8004660:	08004697 	.word	0x08004697
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004670:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	4a90      	ldr	r2, [pc, #576]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004682:	e111      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004684:	4b8d      	ldr	r3, [pc, #564]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004686:	61bb      	str	r3, [r7, #24]
      break;
 8004688:	e10e      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800468a:	4b8d      	ldr	r3, [pc, #564]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800468c:	61bb      	str	r3, [r7, #24]
      break;
 800468e:	e10b      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004690:	4b8c      	ldr	r3, [pc, #560]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004692:	61bb      	str	r3, [r7, #24]
      break;
 8004694:	e108      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004696:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046a0:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046ac:	4b82      	ldr	r3, [pc, #520]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046b6:	4b80      	ldr	r3, [pc, #512]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80e1 	beq.w	800489c <HAL_RCC_GetSysClockFreq+0x2b8>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f000 8083 	beq.w	80047e8 <HAL_RCC_GetSysClockFreq+0x204>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f200 80a1 	bhi.w	800482c <HAL_RCC_GetSysClockFreq+0x248>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x114>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d056      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046f6:	e099      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f8:	4b6f      	ldr	r3, [pc, #444]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02d      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	4a6b      	ldr	r2, [pc, #428]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004742:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800475e:	e087      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800476e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004782:	ed97 6a02 	vldr	s12, [r7, #8]
 8004786:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800478a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047a2:	e065      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047e6:	e043      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a02 	vldr	s12, [r7, #8]
 800480e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800482a:	e021      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004852:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800486e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	0a5b      	lsrs	r3, r3, #9
 8004876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487a:	3301      	adds	r3, #1
 800487c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004888:	edd7 6a07 	vldr	s13, [r7, #28]
 800488c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004894:	ee17 3a90 	vmov	r3, s15
 8004898:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800489a:	e005      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
      break;
 80048a0:	e002      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048a4:	61bb      	str	r3, [r7, #24]
      break;
 80048a6:	bf00      	nop
  }

  return sysclockfreq;
 80048a8:	69bb      	ldr	r3, [r7, #24]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	; 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	58024400 	.word	0x58024400
 80048bc:	03d09000 	.word	0x03d09000
 80048c0:	003d0900 	.word	0x003d0900
 80048c4:	007a1200 	.word	0x007a1200
 80048c8:	46000000 	.word	0x46000000
 80048cc:	4c742400 	.word	0x4c742400
 80048d0:	4a742400 	.word	0x4a742400
 80048d4:	4af42400 	.word	0x4af42400

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048de:	f7ff fe81 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCC_GetHCLKFreq+0x50>)
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490f      	ldr	r1, [pc, #60]	; (800492c <HAL_RCC_GetHCLKFreq+0x54>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	fa22 f303 	lsr.w	r3, r2, r3
 80048fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_RCC_GetHCLKFreq+0x50>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <HAL_RCC_GetHCLKFreq+0x54>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <HAL_RCC_GetHCLKFreq+0x58>)
 8004914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004916:	4a07      	ldr	r2, [pc, #28]	; (8004934 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <HAL_RCC_GetHCLKFreq+0x58>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	58024400 	.word	0x58024400
 800492c:	080089c0 	.word	0x080089c0
 8004930:	24000004 	.word	0x24000004
 8004934:	24000000 	.word	0x24000000

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800493c:	f7ff ffcc 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4904      	ldr	r1, [pc, #16]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	58024400 	.word	0x58024400
 8004960:	080089c0 	.word	0x080089c0

08004964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004968:	f7ff ffb6 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4904      	ldr	r1, [pc, #16]	; (800498c <HAL_RCC_GetPCLK2Freq+0x28>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	58024400 	.word	0x58024400
 800498c:	080089c0 	.word	0x080089c0

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004994:	b0ca      	sub	sp, #296	; 0x128
 8004996:	af00      	add	r7, sp, #0
 8004998:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80049b4:	2500      	movs	r5, #0
 80049b6:	ea54 0305 	orrs.w	r3, r4, r5
 80049ba:	d049      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049c6:	d02f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80049c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049cc:	d828      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d2:	d01a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d8:	d822      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d007      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049e4:	e01c      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e6:	4bb8      	ldr	r3, [pc, #736]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	4ab7      	ldr	r2, [pc, #732]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049f2:	e01a      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f8:	3308      	adds	r3, #8
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 fc8f 	bl	8006320 <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a08:	e00f      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0e:	3328      	adds	r3, #40	; 0x28
 8004a10:	2102      	movs	r1, #2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 fd36 	bl	8006484 <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a1e:	e004      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a32:	4ba5      	ldr	r3, [pc, #660]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a40:	4aa1      	ldr	r2, [pc, #644]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6513      	str	r3, [r2, #80]	; 0x50
 8004a46:	e003      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004a5c:	f04f 0900 	mov.w	r9, #0
 8004a60:	ea58 0309 	orrs.w	r3, r8, r9
 8004a64:	d047      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d82a      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004a8d 	.word	0x08004a8d
 8004a7c:	08004a9b 	.word	0x08004a9b
 8004a80:	08004ab1 	.word	0x08004ab1
 8004a84:	08004acf 	.word	0x08004acf
 8004a88:	08004acf 	.word	0x08004acf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8c:	4b8e      	ldr	r3, [pc, #568]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a8d      	ldr	r2, [pc, #564]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a98:	e01a      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 fc3c 	bl	8006320 <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aae:	e00f      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	3328      	adds	r3, #40	; 0x28
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fce3 	bl	8006484 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ad8:	4b7b      	ldr	r3, [pc, #492]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	f023 0107 	bic.w	r1, r3, #7
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	4a78      	ldr	r2, [pc, #480]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6513      	str	r3, [r2, #80]	; 0x50
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004b02:	f04f 0b00 	mov.w	fp, #0
 8004b06:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b0a:	d04c      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d030      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1c:	d829      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b20:	d02d      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b22:	2bc0      	cmp	r3, #192	; 0xc0
 8004b24:	d825      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d018      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d821      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d007      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004b36:	e01c      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b38:	4b63      	ldr	r3, [pc, #396]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a62      	ldr	r2, [pc, #392]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b44:	e01c      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 fbe6 	bl	8006320 <RCCEx_PLL2_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b5a:	e011      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b60:	3328      	adds	r3, #40	; 0x28
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 fc8d 	bl	8006484 <RCCEx_PLL3_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b70:	e006      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b78:	e002      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b88:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	4a4c      	ldr	r2, [pc, #304]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8004b9c:	e003      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	d053      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd2:	d035      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd8:	d82e      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bde:	d031      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004be0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004be4:	d828      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bea:	d01a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf0:	d822      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfa:	d007      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004bfc:	e01c      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfe:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	4a31      	ldr	r2, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c0a:	e01c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	3308      	adds	r3, #8
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fb83 	bl	8006320 <RCCEx_PLL2_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c20:	e011      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c26:	3328      	adds	r3, #40	; 0x28
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fc2a 	bl	8006484 <RCCEx_PLL3_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c36:	e006      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c52:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6593      	str	r3, [r2, #88]	; 0x58
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004c7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c84:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	d056      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c9a:	d038      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca0:	d831      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ca2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ca6:	d034      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ca8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cac:	d82b      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb8:	d825      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004cc4:	e01f      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cc6:	bf00      	nop
 8004cc8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ccc:	4ba2      	ldr	r3, [pc, #648]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	4aa1      	ldr	r2, [pc, #644]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e01c      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cde:	3308      	adds	r3, #8
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fb1c 	bl	8006320 <RCCEx_PLL2_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cee:	e011      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf4:	3328      	adds	r3, #40	; 0x28
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fbc3 	bl	8006484 <RCCEx_PLL3_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d0c:	e002      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d1c:	4b8e      	ldr	r3, [pc, #568]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d2c:	4a8a      	ldr	r2, [pc, #552]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	6593      	str	r3, [r2, #88]	; 0x58
 8004d32:	e003      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d03a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d01f      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004d66:	2b30      	cmp	r3, #48	; 0x30
 8004d68:	d819      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d00c      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d815      	bhi.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d019      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d111      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7a:	4b77      	ldr	r3, [pc, #476]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a76      	ldr	r2, [pc, #472]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d86:	e011      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fac5 	bl	8006320 <RCCEx_PLL2_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d9c:	e006      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004da4:	e002      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	4a65      	ldr	r2, [pc, #404]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004de8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4313      	orrs	r3, r2
 8004df0:	d051      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfc:	d035      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e02:	d82e      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e08:	d031      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e0e:	d828      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e14:	d01a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1a:	d822      	bhi.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d007      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e26:	e01c      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e34:	e01c      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fa6e 	bl	8006320 <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e4a:	e011      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	3328      	adds	r3, #40	; 0x28
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fb15 	bl	8006484 <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e60:	e006      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e78:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	4a34      	ldr	r2, [pc, #208]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6513      	str	r3, [r2, #80]	; 0x50
 8004e8c:	e003      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004eac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	d056      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec0:	d033      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec6:	d82c      	bhi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ec8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ecc:	d02f      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ed2:	d826      	bhi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ed8:	d02b      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004eda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ede:	d820      	bhi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee4:	d012      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eea:	d81a      	bhi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d022      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d115      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efa:	3308      	adds	r3, #8
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 fa0e 	bl	8006320 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f0a:	e015      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f10:	3328      	adds	r3, #40	; 0x28
 8004f12:	2101      	movs	r1, #1
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 fab5 	bl	8006484 <RCCEx_PLL3_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f20:	e00a      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f2a:	bf00      	nop
 8004f2c:	e004      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4e:	4a02      	ldr	r2, [pc, #8]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6513      	str	r3, [r2, #80]	; 0x50
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	d055      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f90:	d033      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f96:	d82c      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d02f      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d826      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fa8:	d02b      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004faa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fae:	d820      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb4:	d012      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fba:	d81a      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d022      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc4:	d115      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fca:	3308      	adds	r3, #8
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f9a6 	bl	8006320 <RCCEx_PLL2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fda:	e015      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	3328      	adds	r3, #40	; 0x28
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 fa4d 	bl	8006484 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ff0:	e00a      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ff8:	e006      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e004      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ffe:	bf00      	nop
 8005000:	e002      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005010:	4ba3      	ldr	r3, [pc, #652]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005020:	4a9f      	ldr	r2, [pc, #636]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005022:	430b      	orrs	r3, r1
 8005024:	6593      	str	r3, [r2, #88]	; 0x58
 8005026:	e003      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800502c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800503c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d037      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505a:	d00e      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005060:	d816      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506a:	d111      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506c:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4a8b      	ldr	r2, [pc, #556]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005078:	e00f      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	3308      	adds	r3, #8
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f94c 	bl	8006320 <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800508e:	e004      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050a2:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	4a7b      	ldr	r2, [pc, #492]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6513      	str	r3, [r2, #80]	; 0x50
 80050b6:	e003      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80050cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80050da:	460b      	mov	r3, r1
 80050dc:	4313      	orrs	r3, r2
 80050de:	d039      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d81c      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80050ea:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	0800512d 	.word	0x0800512d
 80050f4:	08005101 	.word	0x08005101
 80050f8:	0800510f 	.word	0x0800510f
 80050fc:	0800512d 	.word	0x0800512d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b67      	ldr	r3, [pc, #412]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a66      	ldr	r2, [pc, #408]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800510c:	e00f      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005112:	3308      	adds	r3, #8
 8005114:	2102      	movs	r1, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f902 	bl	8006320 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005122:	e004      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800512a:	e000      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800512c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005136:	4b5a      	ldr	r3, [pc, #360]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	f023 0103 	bic.w	r1, r3, #3
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005144:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005146:	430b      	orrs	r3, r1
 8005148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800516a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	f000 809f 	beq.w	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005176:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4a      	ldr	r2, [pc, #296]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800517c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005180:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005182:	f7fc f9b9 	bl	80014f8 <HAL_GetTick>
 8005186:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800518a:	e00b      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518c:	f7fc f9b4 	bl	80014f8 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b64      	cmp	r3, #100	; 0x64
 800519a:	d903      	bls.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051a2:	e005      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a4:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ed      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80051b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d179      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051c4:	4053      	eors	r3, r2
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d015      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051ce:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051e6:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	4a2d      	ldr	r2, [pc, #180]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051f2:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	d118      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc f976 	bl	80014f8 <HAL_GetTick>
 800520c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005210:	e00d      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fc f971 	bl	80014f8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800521c:	1ad2      	subs	r2, r2, r3
 800521e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005222:	429a      	cmp	r2, r3
 8005224:	d903      	bls.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800522c:	e005      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800522e:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0eb      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800523a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800523e:	2b00      	cmp	r3, #0
 8005240:	d129      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005252:	d10e      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800525c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005264:	091a      	lsrs	r2, r3, #4
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005268:	4013      	ands	r3, r2
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800526c:	430b      	orrs	r3, r1
 800526e:	6113      	str	r3, [r2, #16]
 8005270:	e005      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800527c:	6113      	str	r3, [r2, #16]
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005280:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800528a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528e:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	430b      	orrs	r3, r1
 8005292:	6713      	str	r3, [r2, #112]	; 0x70
 8005294:	e00e      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800529e:	e009      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80052a0:	58024400 	.word	0x58024400
 80052a4:	58024800 	.word	0x58024800
 80052a8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f002 0301 	and.w	r3, r2, #1
 80052c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f000 8089 	beq.w	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052dc:	2b28      	cmp	r3, #40	; 0x28
 80052de:	d86b      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	080053c1 	.word	0x080053c1
 80052ec:	080053b9 	.word	0x080053b9
 80052f0:	080053b9 	.word	0x080053b9
 80052f4:	080053b9 	.word	0x080053b9
 80052f8:	080053b9 	.word	0x080053b9
 80052fc:	080053b9 	.word	0x080053b9
 8005300:	080053b9 	.word	0x080053b9
 8005304:	080053b9 	.word	0x080053b9
 8005308:	0800538d 	.word	0x0800538d
 800530c:	080053b9 	.word	0x080053b9
 8005310:	080053b9 	.word	0x080053b9
 8005314:	080053b9 	.word	0x080053b9
 8005318:	080053b9 	.word	0x080053b9
 800531c:	080053b9 	.word	0x080053b9
 8005320:	080053b9 	.word	0x080053b9
 8005324:	080053b9 	.word	0x080053b9
 8005328:	080053a3 	.word	0x080053a3
 800532c:	080053b9 	.word	0x080053b9
 8005330:	080053b9 	.word	0x080053b9
 8005334:	080053b9 	.word	0x080053b9
 8005338:	080053b9 	.word	0x080053b9
 800533c:	080053b9 	.word	0x080053b9
 8005340:	080053b9 	.word	0x080053b9
 8005344:	080053b9 	.word	0x080053b9
 8005348:	080053c1 	.word	0x080053c1
 800534c:	080053b9 	.word	0x080053b9
 8005350:	080053b9 	.word	0x080053b9
 8005354:	080053b9 	.word	0x080053b9
 8005358:	080053b9 	.word	0x080053b9
 800535c:	080053b9 	.word	0x080053b9
 8005360:	080053b9 	.word	0x080053b9
 8005364:	080053b9 	.word	0x080053b9
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053b9 	.word	0x080053b9
 8005370:	080053b9 	.word	0x080053b9
 8005374:	080053b9 	.word	0x080053b9
 8005378:	080053b9 	.word	0x080053b9
 800537c:	080053b9 	.word	0x080053b9
 8005380:	080053b9 	.word	0x080053b9
 8005384:	080053b9 	.word	0x080053b9
 8005388:	080053c1 	.word	0x080053c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800538c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005390:	3308      	adds	r3, #8
 8005392:	2101      	movs	r1, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f000 ffc3 	bl	8006320 <RCCEx_PLL2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053a0:	e00f      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a6:	3328      	adds	r3, #40	; 0x28
 80053a8:	2101      	movs	r1, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 f86a 	bl	8006484 <RCCEx_PLL3_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053b6:	e004      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053ca:	4bbf      	ldr	r3, [pc, #764]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d8:	4abb      	ldr	r2, [pc, #748]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053da:	430b      	orrs	r3, r1
 80053dc:	6553      	str	r3, [r2, #84]	; 0x54
 80053de:	e003      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f002 0302 	and.w	r3, r2, #2
 80053f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d041      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540e:	2b05      	cmp	r3, #5
 8005410:	d824      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005465 	.word	0x08005465
 800541c:	08005431 	.word	0x08005431
 8005420:	08005447 	.word	0x08005447
 8005424:	08005465 	.word	0x08005465
 8005428:	08005465 	.word	0x08005465
 800542c:	08005465 	.word	0x08005465
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	3308      	adds	r3, #8
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 ff71 	bl	8006320 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005444:	e00f      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	3328      	adds	r3, #40	; 0x28
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f001 f818 	bl	8006484 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800545a:	e004      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800546e:	4b96      	ldr	r3, [pc, #600]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f023 0107 	bic.w	r1, r3, #7
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547c:	4a92      	ldr	r2, [pc, #584]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6553      	str	r3, [r2, #84]	; 0x54
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f002 0304 	and.w	r3, r2, #4
 8005498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800549c:	2300      	movs	r3, #0
 800549e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4313      	orrs	r3, r2
 80054aa:	d044      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	d825      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	0800550d 	.word	0x0800550d
 80054c4:	080054d9 	.word	0x080054d9
 80054c8:	080054ef 	.word	0x080054ef
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	0800550d 	.word	0x0800550d
 80054d4:	0800550d 	.word	0x0800550d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	3308      	adds	r3, #8
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ff1d 	bl	8006320 <RCCEx_PLL2_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054ec:	e00f      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f2:	3328      	adds	r3, #40	; 0x28
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 ffc4 	bl	8006484 <RCCEx_PLL3_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005502:	e004      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800550a:	e000      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800550c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005516:	4b6c      	ldr	r3, [pc, #432]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	f023 0107 	bic.w	r1, r3, #7
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	4a68      	ldr	r2, [pc, #416]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005528:	430b      	orrs	r3, r1
 800552a:	6593      	str	r3, [r2, #88]	; 0x58
 800552c:	e003      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f002 0320 	and.w	r3, r2, #32
 8005542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005546:	2300      	movs	r3, #0
 8005548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800554c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d055      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005562:	d033      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005568:	d82c      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d02f      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d826      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800557a:	d02b      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800557c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005580:	d820      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005586:	d012      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558c:	d81a      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d022      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005596:	d115      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	3308      	adds	r3, #8
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 febd 	bl	8006320 <RCCEx_PLL2_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055ac:	e015      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b2:	3328      	adds	r3, #40	; 0x28
 80055b4:	2102      	movs	r1, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 ff64 	bl	8006484 <RCCEx_PLL3_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055c2:	e00a      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ca:	e006      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055cc:	bf00      	nop
 80055ce:	e004      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055d0:	bf00      	nop
 80055d2:	e002      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e2:	4b39      	ldr	r3, [pc, #228]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6553      	str	r3, [r2, #84]	; 0x54
 80055f8:	e003      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800560e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005612:	2300      	movs	r3, #0
 8005614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005618:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800561c:	460b      	mov	r3, r1
 800561e:	4313      	orrs	r3, r2
 8005620:	d058      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800562e:	d033      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005630:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005634:	d82c      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d02f      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d826      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005646:	d02b      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800564c:	d820      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800564e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005652:	d012      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005658:	d81a      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d022      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005662:	d115      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005668:	3308      	adds	r3, #8
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fe57 	bl	8006320 <RCCEx_PLL2_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005678:	e015      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567e:	3328      	adds	r3, #40	; 0x28
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fefe 	bl	8006484 <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800568e:	e00a      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005696:	e006      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005698:	bf00      	nop
 800569a:	e004      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800569c:	bf00      	nop
 800569e:	e002      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056a0:	bf00      	nop
 80056a2:	e000      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80056a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10e      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056be:	4a02      	ldr	r2, [pc, #8]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6593      	str	r3, [r2, #88]	; 0x58
 80056c4:	e006      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80056e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d055      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005700:	d033      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005702:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005706:	d82c      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	d02f      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005712:	d826      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005714:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005718:	d02b      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800571a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800571e:	d820      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005724:	d012      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572a:	d81a      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d022      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d115      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573a:	3308      	adds	r3, #8
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fdee 	bl	8006320 <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800574a:	e015      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	3328      	adds	r3, #40	; 0x28
 8005752:	2102      	movs	r1, #2
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fe95 	bl	8006484 <RCCEx_PLL3_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005760:	e00a      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005768:	e006      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800576a:	bf00      	nop
 800576c:	e004      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800576e:	bf00      	nop
 8005770:	e002      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005772:	bf00      	nop
 8005774:	e000      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005780:	4ba1      	ldr	r3, [pc, #644]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005790:	4a9d      	ldr	r2, [pc, #628]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6593      	str	r3, [r2, #88]	; 0x58
 8005796:	e003      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800579c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	f002 0308 	and.w	r3, r2, #8
 80057ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80057ba:	460b      	mov	r3, r1
 80057bc:	4313      	orrs	r3, r2
 80057be:	d01e      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d2:	3328      	adds	r3, #40	; 0x28
 80057d4:	2102      	movs	r1, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fe54 	bl	8006484 <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057e8:	4b87      	ldr	r3, [pc, #540]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f8:	4a83      	ldr	r2, [pc, #524]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057fa:	430b      	orrs	r3, r1
 80057fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f002 0310 	and.w	r3, r2, #16
 800580a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800580e:	2300      	movs	r3, #0
 8005810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005814:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005818:	460b      	mov	r3, r1
 800581a:	4313      	orrs	r3, r2
 800581c:	d01e      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582a:	d10c      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005830:	3328      	adds	r3, #40	; 0x28
 8005832:	2102      	movs	r1, #2
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fe25 	bl	8006484 <RCCEx_PLL3_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005846:	4b70      	ldr	r3, [pc, #448]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005856:	4a6c      	ldr	r2, [pc, #432]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005858:	430b      	orrs	r3, r1
 800585a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005872:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	d03e      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005888:	d022      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800588a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588e:	d81b      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d00b      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800589a:	e015      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a0:	3308      	adds	r3, #8
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fd3b 	bl	8006320 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058b0:	e00f      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	3328      	adds	r3, #40	; 0x28
 80058b8:	2102      	movs	r1, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fde2 	bl	8006484 <RCCEx_PLL3_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058c6:	e004      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ce:	e000      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80058d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058da:	4b4b      	ldr	r3, [pc, #300]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058ea:	4a47      	ldr	r2, [pc, #284]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	6593      	str	r3, [r2, #88]	; 0x58
 80058f0:	e003      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005906:	67bb      	str	r3, [r7, #120]	; 0x78
 8005908:	2300      	movs	r3, #0
 800590a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800590c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d03b      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005922:	d01f      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005928:	d818      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005936:	e011      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005938:	4b33      	ldr	r3, [pc, #204]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	4a32      	ldr	r2, [pc, #200]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005944:	e00f      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800594a:	3328      	adds	r3, #40	; 0x28
 800594c:	2101      	movs	r1, #1
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fd98 	bl	8006484 <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800596e:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005980:	430b      	orrs	r3, r1
 8005982:	6553      	str	r3, [r2, #84]	; 0x54
 8005984:	e003      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800598a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800599a:	673b      	str	r3, [r7, #112]	; 0x70
 800599c:	2300      	movs	r3, #0
 800599e:	677b      	str	r3, [r7, #116]	; 0x74
 80059a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80059a4:	460b      	mov	r3, r1
 80059a6:	4313      	orrs	r3, r2
 80059a8:	d034      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d007      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80059ba:	e011      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059bc:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a11      	ldr	r2, [pc, #68]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059c8:	e00e      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ce:	3308      	adds	r3, #8
 80059d0:	2102      	movs	r1, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fca4 	bl	8006320 <RCCEx_PLL2_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059de:	e003      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10d      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	4a02      	ldr	r2, [pc, #8]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a00:	430b      	orrs	r3, r1
 8005a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005a06:	bf00      	nop
 8005a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a22:	2300      	movs	r3, #0
 8005a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	d00c      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a34:	3328      	adds	r3, #40	; 0x28
 8005a36:	2102      	movs	r1, #2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fd23 	bl	8006484 <RCCEx_PLL3_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a56:	663b      	str	r3, [r7, #96]	; 0x60
 8005a58:	2300      	movs	r3, #0
 8005a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005a60:	460b      	mov	r3, r1
 8005a62:	4313      	orrs	r3, r2
 8005a64:	d038      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a72:	d018      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a78:	d811      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7e:	d014      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a84:	d80b      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d011      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a90:	4bc3      	ldr	r3, [pc, #780]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4ac2      	ldr	r2, [pc, #776]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005aa6:	bf00      	nop
 8005aa8:	e002      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab8:	4bb9      	ldr	r3, [pc, #740]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac8:	4ab5      	ldr	r2, [pc, #724]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aca:	430b      	orrs	r3, r1
 8005acc:	6553      	str	r3, [r2, #84]	; 0x54
 8005ace:	e003      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005aee:	460b      	mov	r3, r1
 8005af0:	4313      	orrs	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005af4:	4baa      	ldr	r3, [pc, #680]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b02:	4aa7      	ldr	r2, [pc, #668]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b04:	430b      	orrs	r3, r1
 8005b06:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005b14:	653b      	str	r3, [r7, #80]	; 0x50
 8005b16:	2300      	movs	r3, #0
 8005b18:	657b      	str	r3, [r7, #84]	; 0x54
 8005b1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	d00a      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b24:	4b9e      	ldr	r3, [pc, #632]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b34:	4a9a      	ldr	r2, [pc, #616]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b48:	2300      	movs	r3, #0
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b56:	4b92      	ldr	r3, [pc, #584]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b64:	4a8e      	ldr	r2, [pc, #568]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b76:	643b      	str	r3, [r7, #64]	; 0x40
 8005b78:	2300      	movs	r3, #0
 8005b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b86:	4b86      	ldr	r3, [pc, #536]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	4a85      	ldr	r2, [pc, #532]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b90:	6113      	str	r3, [r2, #16]
 8005b92:	4b83      	ldr	r3, [pc, #524]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b94:	6919      	ldr	r1, [r3, #16]
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b9e:	4a80      	ldr	r2, [pc, #512]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bc0:	4b77      	ldr	r3, [pc, #476]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	4a74      	ldr	r2, [pc, #464]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
 8005be2:	2300      	movs	r3, #0
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
 8005be6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d00a      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bf0:	4b6b      	ldr	r3, [pc, #428]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	4a67      	ldr	r2, [pc, #412]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d011      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	3308      	adds	r3, #8
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fb78 	bl	8006320 <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6239      	str	r1, [r7, #32]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
 8005c58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	d011      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c66:	3308      	adds	r3, #8
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fb58 	bl	8006320 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	2100      	movs	r1, #0
 8005c90:	61b9      	str	r1, [r7, #24]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	d011      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fb38 	bl	8006320 <RCCEx_PLL2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6139      	str	r1, [r7, #16]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	d011      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce6:	3328      	adds	r3, #40	; 0x28
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fbca 	bl	8006484 <RCCEx_PLL3_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d011      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d26:	3328      	adds	r3, #40	; 0x28
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fbaa 	bl	8006484 <RCCEx_PLL3_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d011      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d66:	3328      	adds	r3, #40	; 0x28
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fb8a 	bl	8006484 <RCCEx_PLL3_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005d86:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da0:	58024400 	.word	0x58024400

08005da4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005da8:	f7fe fd96 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	4904      	ldr	r1, [pc, #16]	; (8005dcc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005dba:	5ccb      	ldrb	r3, [r1, r3]
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	080089c0 	.word	0x080089c0

08005dd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b089      	sub	sp, #36	; 0x24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dd8:	4ba1      	ldr	r3, [pc, #644]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005de2:	4b9f      	ldr	r3, [pc, #636]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	0b1b      	lsrs	r3, r3, #12
 8005de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dee:	4b9c      	ldr	r3, [pc, #624]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	091b      	lsrs	r3, r3, #4
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005dfa:	4b99      	ldr	r3, [pc, #612]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8111 	beq.w	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	f000 8083 	beq.w	8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	f200 80a1 	bhi.w	8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d056      	beq.n	8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e3a:	e099      	b.n	8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3c:	4b88      	ldr	r3, [pc, #544]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d02d      	beq.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e48:	4b85      	ldr	r3, [pc, #532]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	08db      	lsrs	r3, r3, #3
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	4a84      	ldr	r2, [pc, #528]	; (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
 8005e58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e72:	4b7b      	ldr	r3, [pc, #492]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ea2:	e087      	b.n	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b6a      	ldr	r3, [pc, #424]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ee6:	e065      	b.n	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	4b59      	ldr	r3, [pc, #356]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f2a:	e043      	b.n	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b48      	ldr	r3, [pc, #288]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f6e:	e021      	b.n	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005fb4:	4b2a      	ldr	r3, [pc, #168]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	0a5b      	lsrs	r3, r3, #9
 8005fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fda:	ee17 2a90 	vmov	r2, s15
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fe2:	4b1f      	ldr	r3, [pc, #124]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006008:	ee17 2a90 	vmov	r2, s15
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006010:	4b13      	ldr	r3, [pc, #76]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	0e1b      	lsrs	r3, r3, #24
 8006016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800602a:	edd7 6a07 	vldr	s13, [r7, #28]
 800602e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006036:	ee17 2a90 	vmov	r2, s15
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800603e:	e008      	b.n	8006052 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	609a      	str	r2, [r3, #8]
}
 8006052:	bf00      	nop
 8006054:	3724      	adds	r7, #36	; 0x24
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
 8006064:	03d09000 	.word	0x03d09000
 8006068:	46000000 	.word	0x46000000
 800606c:	4c742400 	.word	0x4c742400
 8006070:	4a742400 	.word	0x4a742400
 8006074:	4af42400 	.word	0x4af42400

08006078 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006078:	b480      	push	{r7}
 800607a:	b089      	sub	sp, #36	; 0x24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006080:	4ba1      	ldr	r3, [pc, #644]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800608a:	4b9f      	ldr	r3, [pc, #636]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	0d1b      	lsrs	r3, r3, #20
 8006090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006094:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006096:	4b9c      	ldr	r3, [pc, #624]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80060a2:	4b99      	ldr	r3, [pc, #612]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	08db      	lsrs	r3, r3, #3
 80060a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8111 	beq.w	80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f000 8083 	beq.w	80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	f200 80a1 	bhi.w	8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d056      	beq.n	8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060e2:	e099      	b.n	8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e4:	4b88      	ldr	r3, [pc, #544]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02d      	beq.n	800614c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060f0:	4b85      	ldr	r3, [pc, #532]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	08db      	lsrs	r3, r3, #3
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	4a84      	ldr	r2, [pc, #528]	; (800630c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006100:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611a:	4b7b      	ldr	r3, [pc, #492]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612a:	ed97 6a03 	vldr	s12, [r7, #12]
 800612e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800614a:	e087      	b.n	800625c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006156:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615e:	4b6a      	ldr	r3, [pc, #424]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006172:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800618e:	e065      	b.n	800625c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800619e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a2:	4b59      	ldr	r3, [pc, #356]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061d2:	e043      	b.n	800625c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800631c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e6:	4b48      	ldr	r3, [pc, #288]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006216:	e021      	b.n	800625c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622a:	4b37      	ldr	r3, [pc, #220]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a03 	vldr	s12, [r7, #12]
 800623e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800625c:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	0a5b      	lsrs	r3, r3, #9
 8006262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006276:	edd7 6a07 	vldr	s13, [r7, #28]
 800627a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006282:	ee17 2a90 	vmov	r2, s15
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800628a:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	0c1b      	lsrs	r3, r3, #16
 8006290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b0:	ee17 2a90 	vmov	r2, s15
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	0e1b      	lsrs	r3, r3, #24
 80062be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062de:	ee17 2a90 	vmov	r2, s15
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062e6:	e008      	b.n	80062fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	609a      	str	r2, [r3, #8]
}
 80062fa:	bf00      	nop
 80062fc:	3724      	adds	r7, #36	; 0x24
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	58024400 	.word	0x58024400
 800630c:	03d09000 	.word	0x03d09000
 8006310:	46000000 	.word	0x46000000
 8006314:	4c742400 	.word	0x4c742400
 8006318:	4a742400 	.word	0x4a742400
 800631c:	4af42400 	.word	0x4af42400

08006320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800632e:	4b53      	ldr	r3, [pc, #332]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d101      	bne.n	800633e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e099      	b.n	8006472 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800633e:	4b4f      	ldr	r3, [pc, #316]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4e      	ldr	r2, [pc, #312]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006344:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800634a:	f7fb f8d5 	bl	80014f8 <HAL_GetTick>
 800634e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006350:	e008      	b.n	8006364 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006352:	f7fb f8d1 	bl	80014f8 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e086      	b.n	8006472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006364:	4b45      	ldr	r3, [pc, #276]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006370:	4b42      	ldr	r3, [pc, #264]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	493f      	ldr	r1, [pc, #252]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006380:	4313      	orrs	r3, r2
 8006382:	628b      	str	r3, [r1, #40]	; 0x28
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	3b01      	subs	r3, #1
 800638a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	3b01      	subs	r3, #1
 8006394:	025b      	lsls	r3, r3, #9
 8006396:	b29b      	uxth	r3, r3
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	3b01      	subs	r3, #1
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	061b      	lsls	r3, r3, #24
 80063b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063b4:	4931      	ldr	r1, [pc, #196]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063ba:	4b30      	ldr	r3, [pc, #192]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	492d      	ldr	r1, [pc, #180]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063cc:	4b2b      	ldr	r3, [pc, #172]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	f023 0220 	bic.w	r2, r3, #32
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	4928      	ldr	r1, [pc, #160]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063de:	4b27      	ldr	r3, [pc, #156]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a26      	ldr	r2, [pc, #152]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063e4:	f023 0310 	bic.w	r3, r3, #16
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <RCCEx_PLL2_Config+0x160>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	69d2      	ldr	r2, [r2, #28]
 80063f6:	00d2      	lsls	r2, r2, #3
 80063f8:	4920      	ldr	r1, [pc, #128]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063fe:	4b1f      	ldr	r3, [pc, #124]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	4a1e      	ldr	r2, [pc, #120]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006404:	f043 0310 	orr.w	r3, r3, #16
 8006408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006410:	4b1a      	ldr	r3, [pc, #104]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a19      	ldr	r2, [pc, #100]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800641c:	e00f      	b.n	800643e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d106      	bne.n	8006432 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006424:	4b15      	ldr	r3, [pc, #84]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 800642a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006430:	e005      	b.n	800643e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006436:	4a11      	ldr	r2, [pc, #68]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800643c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800643e:	4b0f      	ldr	r3, [pc, #60]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a0e      	ldr	r2, [pc, #56]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644a:	f7fb f855 	bl	80014f8 <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006450:	e008      	b.n	8006464 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006452:	f7fb f851 	bl	80014f8 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e006      	b.n	8006472 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006464:	4b05      	ldr	r3, [pc, #20]	; (800647c <RCCEx_PLL2_Config+0x15c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	58024400 	.word	0x58024400
 8006480:	ffff0007 	.word	0xffff0007

08006484 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006492:	4b53      	ldr	r3, [pc, #332]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d101      	bne.n	80064a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e099      	b.n	80065d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064a2:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a4e      	ldr	r2, [pc, #312]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80064a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ae:	f7fb f823 	bl	80014f8 <HAL_GetTick>
 80064b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064b4:	e008      	b.n	80064c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064b6:	f7fb f81f 	bl	80014f8 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e086      	b.n	80065d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c8:	4b45      	ldr	r3, [pc, #276]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f0      	bne.n	80064b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064d4:	4b42      	ldr	r3, [pc, #264]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	493f      	ldr	r1, [pc, #252]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	628b      	str	r3, [r1, #40]	; 0x28
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	025b      	lsls	r3, r3, #9
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	3b01      	subs	r3, #1
 8006504:	041b      	lsls	r3, r3, #16
 8006506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	3b01      	subs	r3, #1
 8006512:	061b      	lsls	r3, r3, #24
 8006514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006518:	4931      	ldr	r1, [pc, #196]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800651a:	4313      	orrs	r3, r2
 800651c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800651e:	4b30      	ldr	r3, [pc, #192]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	492d      	ldr	r1, [pc, #180]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006530:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	4928      	ldr	r1, [pc, #160]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006542:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4a26      	ldr	r2, [pc, #152]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800654c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <RCCEx_PLL3_Config+0x160>)
 8006554:	4013      	ands	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	69d2      	ldr	r2, [r2, #28]
 800655a:	00d2      	lsls	r2, r2, #3
 800655c:	4920      	ldr	r1, [pc, #128]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800655e:	4313      	orrs	r3, r2
 8006560:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006562:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800656c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006574:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800657a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800657e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006580:	e00f      	b.n	80065a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d106      	bne.n	8006596 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	4a14      	ldr	r2, [pc, #80]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800658e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006594:	e005      	b.n	80065a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 800659c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065a2:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a0e      	ldr	r2, [pc, #56]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80065a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ae:	f7fa ffa3 	bl	80014f8 <HAL_GetTick>
 80065b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065b4:	e008      	b.n	80065c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065b6:	f7fa ff9f 	bl	80014f8 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e006      	b.n	80065d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <RCCEx_PLL3_Config+0x15c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
 80065e4:	ffff0007 	.word	0xffff0007

080065e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e042      	b.n	8006680 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7fa fd4b 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2224      	movs	r2, #36	; 0x24
 8006616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fc06 	bl	8006e3c <UART_SetConfig>
 8006630:	4603      	mov	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e022      	b.n	8006680 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 f962 	bl	800790c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f9e9 	bl	8007a50 <UART_CheckIdleState>
 800667e:	4603      	mov	r3, r0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0ba      	sub	sp, #232	; 0xe8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80066b6:	4013      	ands	r3, r2
 80066b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11b      	bne.n	80066fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8377 	beq.w	8006de0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      }
      return;
 80066fa:	e371      	b.n	8006de0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8123 	beq.w	800694c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006706:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800670a:	4b8d      	ldr	r3, [pc, #564]	; (8006940 <HAL_UART_IRQHandler+0x2b8>)
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006716:	4b8b      	ldr	r3, [pc, #556]	; (8006944 <HAL_UART_IRQHandler+0x2bc>)
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8116 	beq.w	800694c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d011      	beq.n	8006750 <HAL_UART_IRQHandler+0xc8>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2201      	movs	r2, #1
 800673e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006746:	f043 0201 	orr.w	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_UART_IRQHandler+0xf8>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2202      	movs	r2, #2
 800676e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d011      	beq.n	80067b0 <HAL_UART_IRQHandler+0x128>
 800678c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2204      	movs	r2, #4
 800679e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a6:	f043 0202 	orr.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d017      	beq.n	80067ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067cc:	4b5c      	ldr	r3, [pc, #368]	; (8006940 <HAL_UART_IRQHandler+0x2b8>)
 80067ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2208      	movs	r2, #8
 80067da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e2:	f043 0208 	orr.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <HAL_UART_IRQHandler+0x196>
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 82dd 	beq.w	8006de4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d013      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d105      	bne.n	800684e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800687a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d054      	beq.n	800692c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 f9f6 	bl	8007c74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d146      	bne.n	8006924 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d9      	bne.n	8006896 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d017      	beq.n	800691c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f2:	4a15      	ldr	r2, [pc, #84]	; (8006948 <HAL_UART_IRQHandler+0x2c0>)
 80068f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fb fa65 	bl	8001dcc <HAL_DMA_Abort_IT>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d019      	beq.n	800693c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800690e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006916:	4610      	mov	r0, r2
 8006918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	e00f      	b.n	800693c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa77 	bl	8006e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006922:	e00b      	b.n	800693c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa73 	bl	8006e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692a:	e007      	b.n	800693c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa6f 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800693a:	e253      	b.n	8006de4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693c:	bf00      	nop
    return;
 800693e:	e251      	b.n	8006de4 <HAL_UART_IRQHandler+0x75c>
 8006940:	10000001 	.word	0x10000001
 8006944:	04000120 	.word	0x04000120
 8006948:	08007d41 	.word	0x08007d41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006950:	2b01      	cmp	r3, #1
 8006952:	f040 81e7 	bne.w	8006d24 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 81e0 	beq.w	8006d24 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 81d9 	beq.w	8006d24 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2210      	movs	r2, #16
 8006978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	f040 8151 	bne.w	8006c2c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a96      	ldr	r2, [pc, #600]	; (8006bec <HAL_UART_IRQHandler+0x564>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d068      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a93      	ldr	r2, [pc, #588]	; (8006bf0 <HAL_UART_IRQHandler+0x568>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d061      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a91      	ldr	r2, [pc, #580]	; (8006bf4 <HAL_UART_IRQHandler+0x56c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d05a      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a8e      	ldr	r2, [pc, #568]	; (8006bf8 <HAL_UART_IRQHandler+0x570>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d053      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a8c      	ldr	r2, [pc, #560]	; (8006bfc <HAL_UART_IRQHandler+0x574>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d04c      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a89      	ldr	r2, [pc, #548]	; (8006c00 <HAL_UART_IRQHandler+0x578>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d045      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a87      	ldr	r2, [pc, #540]	; (8006c04 <HAL_UART_IRQHandler+0x57c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d03e      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a84      	ldr	r2, [pc, #528]	; (8006c08 <HAL_UART_IRQHandler+0x580>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d037      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a82      	ldr	r2, [pc, #520]	; (8006c0c <HAL_UART_IRQHandler+0x584>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d030      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a7f      	ldr	r2, [pc, #508]	; (8006c10 <HAL_UART_IRQHandler+0x588>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d029      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7d      	ldr	r2, [pc, #500]	; (8006c14 <HAL_UART_IRQHandler+0x58c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a7a      	ldr	r2, [pc, #488]	; (8006c18 <HAL_UART_IRQHandler+0x590>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01b      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a78      	ldr	r2, [pc, #480]	; (8006c1c <HAL_UART_IRQHandler+0x594>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d014      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a75      	ldr	r2, [pc, #468]	; (8006c20 <HAL_UART_IRQHandler+0x598>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00d      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a73      	ldr	r2, [pc, #460]	; (8006c24 <HAL_UART_IRQHandler+0x59c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d006      	beq.n	8006a6a <HAL_UART_IRQHandler+0x3e2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a70      	ldr	r2, [pc, #448]	; (8006c28 <HAL_UART_IRQHandler+0x5a0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d106      	bne.n	8006a78 <HAL_UART_IRQHandler+0x3f0>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	e005      	b.n	8006a84 <HAL_UART_IRQHandler+0x3fc>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 81ab 	beq.w	8006de8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f080 81a3 	bcs.w	8006de8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab8:	f000 8087 	beq.w	8006bca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1da      	bne.n	8006abc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e1      	bne.n	8006b06 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b98:	f023 0310 	bic.w	r3, r3, #16
 8006b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e4      	bne.n	8006b88 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fa fde3 	bl	8001790 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f91d 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bea:	e0fd      	b.n	8006de8 <HAL_UART_IRQHandler+0x760>
 8006bec:	40020010 	.word	0x40020010
 8006bf0:	40020028 	.word	0x40020028
 8006bf4:	40020040 	.word	0x40020040
 8006bf8:	40020058 	.word	0x40020058
 8006bfc:	40020070 	.word	0x40020070
 8006c00:	40020088 	.word	0x40020088
 8006c04:	400200a0 	.word	0x400200a0
 8006c08:	400200b8 	.word	0x400200b8
 8006c0c:	40020410 	.word	0x40020410
 8006c10:	40020428 	.word	0x40020428
 8006c14:	40020440 	.word	0x40020440
 8006c18:	40020458 	.word	0x40020458
 8006c1c:	40020470 	.word	0x40020470
 8006c20:	40020488 	.word	0x40020488
 8006c24:	400204a0 	.word	0x400204a0
 8006c28:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80cf 	beq.w	8006dec <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80ca 	beq.w	8006dec <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e4      	bne.n	8006c58 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	4b55      	ldr	r3, [pc, #340]	; (8006df8 <HAL_UART_IRQHandler+0x770>)
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e3      	bne.n	8006c8e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	69b9      	ldr	r1, [r7, #24]
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e4      	bne.n	8006cda <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f881 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d22:	e063      	b.n	8006dec <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <HAL_UART_IRQHandler+0x6c6>
 8006d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f83b 	bl	8007dc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d4c:	e051      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03a      	beq.n	8006df0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
    }
    return;
 8006d82:	e035      	b.n	8006df0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <HAL_UART_IRQHandler+0x71c>
 8006d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 ffe5 	bl	8007d6c <UART_EndTransmit_IT>
    return;
 8006da2:	e026      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x73c>
 8006db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f814 	bl	8007dea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dc2:	e016      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <HAL_UART_IRQHandler+0x76a>
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	da0c      	bge.n	8006df2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fffc 	bl	8007dd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dde:	e008      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006de0:	bf00      	nop
 8006de2:	e006      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006de4:	bf00      	nop
 8006de6:	e004      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006de8:	bf00      	nop
 8006dea:	e002      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006df0:	bf00      	nop
  }
}
 8006df2:	37e8      	adds	r7, #232	; 0xe8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	effffffe 	.word	0xeffffffe

08006dfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e40:	b092      	sub	sp, #72	; 0x48
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	431a      	orrs	r2, r3
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4bbe      	ldr	r3, [pc, #760]	; (8007164 <UART_SetConfig+0x328>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4ab3      	ldr	r2, [pc, #716]	; (8007168 <UART_SetConfig+0x32c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	4baf      	ldr	r3, [pc, #700]	; (800716c <UART_SetConfig+0x330>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	f023 010f 	bic.w	r1, r3, #15
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4aa6      	ldr	r2, [pc, #664]	; (8007170 <UART_SetConfig+0x334>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d177      	bne.n	8006fcc <UART_SetConfig+0x190>
 8006edc:	4ba5      	ldr	r3, [pc, #660]	; (8007174 <UART_SetConfig+0x338>)
 8006ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee4:	2b28      	cmp	r3, #40	; 0x28
 8006ee6:	d86d      	bhi.n	8006fc4 <UART_SetConfig+0x188>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0xb4>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f95 	.word	0x08006f95
 8006ef4:	08006fc5 	.word	0x08006fc5
 8006ef8:	08006fc5 	.word	0x08006fc5
 8006efc:	08006fc5 	.word	0x08006fc5
 8006f00:	08006fc5 	.word	0x08006fc5
 8006f04:	08006fc5 	.word	0x08006fc5
 8006f08:	08006fc5 	.word	0x08006fc5
 8006f0c:	08006fc5 	.word	0x08006fc5
 8006f10:	08006f9d 	.word	0x08006f9d
 8006f14:	08006fc5 	.word	0x08006fc5
 8006f18:	08006fc5 	.word	0x08006fc5
 8006f1c:	08006fc5 	.word	0x08006fc5
 8006f20:	08006fc5 	.word	0x08006fc5
 8006f24:	08006fc5 	.word	0x08006fc5
 8006f28:	08006fc5 	.word	0x08006fc5
 8006f2c:	08006fc5 	.word	0x08006fc5
 8006f30:	08006fa5 	.word	0x08006fa5
 8006f34:	08006fc5 	.word	0x08006fc5
 8006f38:	08006fc5 	.word	0x08006fc5
 8006f3c:	08006fc5 	.word	0x08006fc5
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	08006fc5 	.word	0x08006fc5
 8006f48:	08006fc5 	.word	0x08006fc5
 8006f4c:	08006fc5 	.word	0x08006fc5
 8006f50:	08006fad 	.word	0x08006fad
 8006f54:	08006fc5 	.word	0x08006fc5
 8006f58:	08006fc5 	.word	0x08006fc5
 8006f5c:	08006fc5 	.word	0x08006fc5
 8006f60:	08006fc5 	.word	0x08006fc5
 8006f64:	08006fc5 	.word	0x08006fc5
 8006f68:	08006fc5 	.word	0x08006fc5
 8006f6c:	08006fc5 	.word	0x08006fc5
 8006f70:	08006fb5 	.word	0x08006fb5
 8006f74:	08006fc5 	.word	0x08006fc5
 8006f78:	08006fc5 	.word	0x08006fc5
 8006f7c:	08006fc5 	.word	0x08006fc5
 8006f80:	08006fc5 	.word	0x08006fc5
 8006f84:	08006fc5 	.word	0x08006fc5
 8006f88:	08006fc5 	.word	0x08006fc5
 8006f8c:	08006fc5 	.word	0x08006fc5
 8006f90:	08006fbd 	.word	0x08006fbd
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9a:	e222      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa2:	e21e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006faa:	e21a      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006fac:	2310      	movs	r3, #16
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb2:	e216      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006fb4:	2320      	movs	r3, #32
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e212      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006fbc:	2340      	movs	r3, #64	; 0x40
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e20e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e20a      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a69      	ldr	r2, [pc, #420]	; (8007178 <UART_SetConfig+0x33c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d130      	bne.n	8007038 <UART_SetConfig+0x1fc>
 8006fd6:	4b67      	ldr	r3, [pc, #412]	; (8007174 <UART_SetConfig+0x338>)
 8006fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d826      	bhi.n	8007030 <UART_SetConfig+0x1f4>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <UART_SetConfig+0x1ac>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	08007001 	.word	0x08007001
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007029 	.word	0x08007029
 8007000:	2300      	movs	r3, #0
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007006:	e1ec      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007008:	2304      	movs	r3, #4
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700e:	e1e8      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007010:	2308      	movs	r3, #8
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e1e4      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007018:	2310      	movs	r3, #16
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e1e0      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007020:	2320      	movs	r3, #32
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e1dc      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e1d8      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e1d4      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a4f      	ldr	r2, [pc, #316]	; (800717c <UART_SetConfig+0x340>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d130      	bne.n	80070a4 <UART_SetConfig+0x268>
 8007042:	4b4c      	ldr	r3, [pc, #304]	; (8007174 <UART_SetConfig+0x338>)
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	2b05      	cmp	r3, #5
 800704c:	d826      	bhi.n	800709c <UART_SetConfig+0x260>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0x218>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	0800706d 	.word	0x0800706d
 8007058:	08007075 	.word	0x08007075
 800705c:	0800707d 	.word	0x0800707d
 8007060:	08007085 	.word	0x08007085
 8007064:	0800708d 	.word	0x0800708d
 8007068:	08007095 	.word	0x08007095
 800706c:	2300      	movs	r3, #0
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e1b6      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007074:	2304      	movs	r3, #4
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e1b2      	b.n	80073e2 <UART_SetConfig+0x5a6>
 800707c:	2308      	movs	r3, #8
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e1ae      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007084:	2310      	movs	r3, #16
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e1aa      	b.n	80073e2 <UART_SetConfig+0x5a6>
 800708c:	2320      	movs	r3, #32
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e1a6      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007094:	2340      	movs	r3, #64	; 0x40
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e1a2      	b.n	80073e2 <UART_SetConfig+0x5a6>
 800709c:	2380      	movs	r3, #128	; 0x80
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e19e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a35      	ldr	r2, [pc, #212]	; (8007180 <UART_SetConfig+0x344>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d130      	bne.n	8007110 <UART_SetConfig+0x2d4>
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <UART_SetConfig+0x338>)
 80070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d826      	bhi.n	8007108 <UART_SetConfig+0x2cc>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <UART_SetConfig+0x284>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070d9 	.word	0x080070d9
 80070c4:	080070e1 	.word	0x080070e1
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	080070f9 	.word	0x080070f9
 80070d4:	08007101 	.word	0x08007101
 80070d8:	2300      	movs	r3, #0
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e180      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80070e0:	2304      	movs	r3, #4
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e17c      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80070e8:	2308      	movs	r3, #8
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e178      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80070f0:	2310      	movs	r3, #16
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e174      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80070f8:	2320      	movs	r3, #32
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e170      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007106:	e16c      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007108:	2380      	movs	r3, #128	; 0x80
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e168      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <UART_SetConfig+0x348>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d142      	bne.n	80071a0 <UART_SetConfig+0x364>
 800711a:	4b16      	ldr	r3, [pc, #88]	; (8007174 <UART_SetConfig+0x338>)
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	2b05      	cmp	r3, #5
 8007124:	d838      	bhi.n	8007198 <UART_SetConfig+0x35c>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <UART_SetConfig+0x2f0>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007145 	.word	0x08007145
 8007130:	0800714d 	.word	0x0800714d
 8007134:	08007155 	.word	0x08007155
 8007138:	0800715d 	.word	0x0800715d
 800713c:	08007189 	.word	0x08007189
 8007140:	08007191 	.word	0x08007191
 8007144:	2300      	movs	r3, #0
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e14a      	b.n	80073e2 <UART_SetConfig+0x5a6>
 800714c:	2304      	movs	r3, #4
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e146      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007154:	2308      	movs	r3, #8
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e142      	b.n	80073e2 <UART_SetConfig+0x5a6>
 800715c:	2310      	movs	r3, #16
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e13e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007164:	cfff69f3 	.word	0xcfff69f3
 8007168:	58000c00 	.word	0x58000c00
 800716c:	11fff4ff 	.word	0x11fff4ff
 8007170:	40011000 	.word	0x40011000
 8007174:	58024400 	.word	0x58024400
 8007178:	40004400 	.word	0x40004400
 800717c:	40004800 	.word	0x40004800
 8007180:	40004c00 	.word	0x40004c00
 8007184:	40005000 	.word	0x40005000
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e128      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e124      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e120      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4acb      	ldr	r2, [pc, #812]	; (80074d4 <UART_SetConfig+0x698>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d176      	bne.n	8007298 <UART_SetConfig+0x45c>
 80071aa:	4bcb      	ldr	r3, [pc, #812]	; (80074d8 <UART_SetConfig+0x69c>)
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071b2:	2b28      	cmp	r3, #40	; 0x28
 80071b4:	d86c      	bhi.n	8007290 <UART_SetConfig+0x454>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x380>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	08007261 	.word	0x08007261
 80071c0:	08007291 	.word	0x08007291
 80071c4:	08007291 	.word	0x08007291
 80071c8:	08007291 	.word	0x08007291
 80071cc:	08007291 	.word	0x08007291
 80071d0:	08007291 	.word	0x08007291
 80071d4:	08007291 	.word	0x08007291
 80071d8:	08007291 	.word	0x08007291
 80071dc:	08007269 	.word	0x08007269
 80071e0:	08007291 	.word	0x08007291
 80071e4:	08007291 	.word	0x08007291
 80071e8:	08007291 	.word	0x08007291
 80071ec:	08007291 	.word	0x08007291
 80071f0:	08007291 	.word	0x08007291
 80071f4:	08007291 	.word	0x08007291
 80071f8:	08007291 	.word	0x08007291
 80071fc:	08007271 	.word	0x08007271
 8007200:	08007291 	.word	0x08007291
 8007204:	08007291 	.word	0x08007291
 8007208:	08007291 	.word	0x08007291
 800720c:	08007291 	.word	0x08007291
 8007210:	08007291 	.word	0x08007291
 8007214:	08007291 	.word	0x08007291
 8007218:	08007291 	.word	0x08007291
 800721c:	08007279 	.word	0x08007279
 8007220:	08007291 	.word	0x08007291
 8007224:	08007291 	.word	0x08007291
 8007228:	08007291 	.word	0x08007291
 800722c:	08007291 	.word	0x08007291
 8007230:	08007291 	.word	0x08007291
 8007234:	08007291 	.word	0x08007291
 8007238:	08007291 	.word	0x08007291
 800723c:	08007281 	.word	0x08007281
 8007240:	08007291 	.word	0x08007291
 8007244:	08007291 	.word	0x08007291
 8007248:	08007291 	.word	0x08007291
 800724c:	08007291 	.word	0x08007291
 8007250:	08007291 	.word	0x08007291
 8007254:	08007291 	.word	0x08007291
 8007258:	08007291 	.word	0x08007291
 800725c:	08007289 	.word	0x08007289
 8007260:	2301      	movs	r3, #1
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e0bc      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007268:	2304      	movs	r3, #4
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e0b8      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007270:	2308      	movs	r3, #8
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e0b4      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007278:	2310      	movs	r3, #16
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e0b0      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007280:	2320      	movs	r3, #32
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e0ac      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007288:	2340      	movs	r3, #64	; 0x40
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e0a8      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e0a4      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a8f      	ldr	r2, [pc, #572]	; (80074dc <UART_SetConfig+0x6a0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d130      	bne.n	8007304 <UART_SetConfig+0x4c8>
 80072a2:	4b8d      	ldr	r3, [pc, #564]	; (80074d8 <UART_SetConfig+0x69c>)
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d826      	bhi.n	80072fc <UART_SetConfig+0x4c0>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <UART_SetConfig+0x478>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072cd 	.word	0x080072cd
 80072b8:	080072d5 	.word	0x080072d5
 80072bc:	080072dd 	.word	0x080072dd
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e086      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80072d4:	2304      	movs	r3, #4
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072da:	e082      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80072dc:	2308      	movs	r3, #8
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e07e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ea:	e07a      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80072ec:	2320      	movs	r3, #32
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f2:	e076      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80072f4:	2340      	movs	r3, #64	; 0x40
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fa:	e072      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80072fc:	2380      	movs	r3, #128	; 0x80
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007302:	e06e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a75      	ldr	r2, [pc, #468]	; (80074e0 <UART_SetConfig+0x6a4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d130      	bne.n	8007370 <UART_SetConfig+0x534>
 800730e:	4b72      	ldr	r3, [pc, #456]	; (80074d8 <UART_SetConfig+0x69c>)
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b05      	cmp	r3, #5
 8007318:	d826      	bhi.n	8007368 <UART_SetConfig+0x52c>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x4e4>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007339 	.word	0x08007339
 8007324:	08007341 	.word	0x08007341
 8007328:	08007349 	.word	0x08007349
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	2300      	movs	r3, #0
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e050      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e04c      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e048      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007356:	e044      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007358:	2320      	movs	r3, #32
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735e:	e040      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007366:	e03c      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736e:	e038      	b.n	80073e2 <UART_SetConfig+0x5a6>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a5b      	ldr	r2, [pc, #364]	; (80074e4 <UART_SetConfig+0x6a8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d130      	bne.n	80073dc <UART_SetConfig+0x5a0>
 800737a:	4b57      	ldr	r3, [pc, #348]	; (80074d8 <UART_SetConfig+0x69c>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	2b05      	cmp	r3, #5
 8007384:	d826      	bhi.n	80073d4 <UART_SetConfig+0x598>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x550>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073a5 	.word	0x080073a5
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073b5 	.word	0x080073b5
 8007398:	080073bd 	.word	0x080073bd
 800739c:	080073c5 	.word	0x080073c5
 80073a0:	080073cd 	.word	0x080073cd
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e01a      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073ac:	2304      	movs	r3, #4
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e016      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073b4:	2308      	movs	r3, #8
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e012      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073bc:	2310      	movs	r3, #16
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e00e      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073c4:	2320      	movs	r3, #32
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e00a      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073cc:	2340      	movs	r3, #64	; 0x40
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d2:	e006      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073da:	e002      	b.n	80073e2 <UART_SetConfig+0x5a6>
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a3f      	ldr	r2, [pc, #252]	; (80074e4 <UART_SetConfig+0x6a8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	f040 80f8 	bne.w	80075de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	dc46      	bgt.n	8007484 <UART_SetConfig+0x648>
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f2c0 8082 	blt.w	8007500 <UART_SetConfig+0x6c4>
 80073fc:	3b02      	subs	r3, #2
 80073fe:	2b1e      	cmp	r3, #30
 8007400:	d87e      	bhi.n	8007500 <UART_SetConfig+0x6c4>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <UART_SetConfig+0x5cc>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800748b 	.word	0x0800748b
 800740c:	08007501 	.word	0x08007501
 8007410:	08007493 	.word	0x08007493
 8007414:	08007501 	.word	0x08007501
 8007418:	08007501 	.word	0x08007501
 800741c:	08007501 	.word	0x08007501
 8007420:	080074a3 	.word	0x080074a3
 8007424:	08007501 	.word	0x08007501
 8007428:	08007501 	.word	0x08007501
 800742c:	08007501 	.word	0x08007501
 8007430:	08007501 	.word	0x08007501
 8007434:	08007501 	.word	0x08007501
 8007438:	08007501 	.word	0x08007501
 800743c:	08007501 	.word	0x08007501
 8007440:	080074b3 	.word	0x080074b3
 8007444:	08007501 	.word	0x08007501
 8007448:	08007501 	.word	0x08007501
 800744c:	08007501 	.word	0x08007501
 8007450:	08007501 	.word	0x08007501
 8007454:	08007501 	.word	0x08007501
 8007458:	08007501 	.word	0x08007501
 800745c:	08007501 	.word	0x08007501
 8007460:	08007501 	.word	0x08007501
 8007464:	08007501 	.word	0x08007501
 8007468:	08007501 	.word	0x08007501
 800746c:	08007501 	.word	0x08007501
 8007470:	08007501 	.word	0x08007501
 8007474:	08007501 	.word	0x08007501
 8007478:	08007501 	.word	0x08007501
 800747c:	08007501 	.word	0x08007501
 8007480:	080074f3 	.word	0x080074f3
 8007484:	2b40      	cmp	r3, #64	; 0x40
 8007486:	d037      	beq.n	80074f8 <UART_SetConfig+0x6bc>
 8007488:	e03a      	b.n	8007500 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800748a:	f7fe fc8b 	bl	8005da4 <HAL_RCCEx_GetD3PCLK1Freq>
 800748e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007490:	e03c      	b.n	800750c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fc9a 	bl	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074a0:	e034      	b.n	800750c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a2:	f107 0318 	add.w	r3, r7, #24
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fde6 	bl	8006078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074b0:	e02c      	b.n	800750c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <UART_SetConfig+0x69c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074be:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <UART_SetConfig+0x69c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	08db      	lsrs	r3, r3, #3
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	4a07      	ldr	r2, [pc, #28]	; (80074e8 <UART_SetConfig+0x6ac>)
 80074ca:	fa22 f303 	lsr.w	r3, r2, r3
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074d0:	e01c      	b.n	800750c <UART_SetConfig+0x6d0>
 80074d2:	bf00      	nop
 80074d4:	40011400 	.word	0x40011400
 80074d8:	58024400 	.word	0x58024400
 80074dc:	40007800 	.word	0x40007800
 80074e0:	40007c00 	.word	0x40007c00
 80074e4:	58000c00 	.word	0x58000c00
 80074e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80074ec:	4b9d      	ldr	r3, [pc, #628]	; (8007764 <UART_SetConfig+0x928>)
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074f0:	e00c      	b.n	800750c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074f2:	4b9d      	ldr	r3, [pc, #628]	; (8007768 <UART_SetConfig+0x92c>)
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074f6:	e009      	b.n	800750c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074fe:	e005      	b.n	800750c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800750a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 81de 	beq.w	80078d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	4a94      	ldr	r2, [pc, #592]	; (800776c <UART_SetConfig+0x930>)
 800751a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800751e:	461a      	mov	r2, r3
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	fbb3 f3f2 	udiv	r3, r3, r2
 8007526:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007534:	429a      	cmp	r2, r3
 8007536:	d305      	bcc.n	8007544 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800753e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007540:	429a      	cmp	r2, r3
 8007542:	d903      	bls.n	800754c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800754a:	e1c1      	b.n	80078d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2200      	movs	r2, #0
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	60fa      	str	r2, [r7, #12]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	4a84      	ldr	r2, [pc, #528]	; (800776c <UART_SetConfig+0x930>)
 800755a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755e:	b29b      	uxth	r3, r3
 8007560:	2200      	movs	r2, #0
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	607a      	str	r2, [r7, #4]
 8007566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800756e:	f7f8 ff07 	bl	8000380 <__aeabi_uldivmod>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	020b      	lsls	r3, r1, #8
 8007584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007588:	0202      	lsls	r2, r0, #8
 800758a:	6979      	ldr	r1, [r7, #20]
 800758c:	6849      	ldr	r1, [r1, #4]
 800758e:	0849      	lsrs	r1, r1, #1
 8007590:	2000      	movs	r0, #0
 8007592:	460c      	mov	r4, r1
 8007594:	4605      	mov	r5, r0
 8007596:	eb12 0804 	adds.w	r8, r2, r4
 800759a:	eb43 0905 	adc.w	r9, r3, r5
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	469a      	mov	sl, r3
 80075a6:	4693      	mov	fp, r2
 80075a8:	4652      	mov	r2, sl
 80075aa:	465b      	mov	r3, fp
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f8 fee6 	bl	8000380 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4613      	mov	r3, r2
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c2:	d308      	bcc.n	80075d6 <UART_SetConfig+0x79a>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ca:	d204      	bcs.n	80075d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d2:	60da      	str	r2, [r3, #12]
 80075d4:	e17c      	b.n	80078d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075dc:	e178      	b.n	80078d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e6:	f040 80c5 	bne.w	8007774 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80075ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	dc48      	bgt.n	8007684 <UART_SetConfig+0x848>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	db7b      	blt.n	80076ee <UART_SetConfig+0x8b2>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d879      	bhi.n	80076ee <UART_SetConfig+0x8b2>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x7c4>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	0800768b 	.word	0x0800768b
 8007604:	08007693 	.word	0x08007693
 8007608:	080076ef 	.word	0x080076ef
 800760c:	080076ef 	.word	0x080076ef
 8007610:	0800769b 	.word	0x0800769b
 8007614:	080076ef 	.word	0x080076ef
 8007618:	080076ef 	.word	0x080076ef
 800761c:	080076ef 	.word	0x080076ef
 8007620:	080076ab 	.word	0x080076ab
 8007624:	080076ef 	.word	0x080076ef
 8007628:	080076ef 	.word	0x080076ef
 800762c:	080076ef 	.word	0x080076ef
 8007630:	080076ef 	.word	0x080076ef
 8007634:	080076ef 	.word	0x080076ef
 8007638:	080076ef 	.word	0x080076ef
 800763c:	080076ef 	.word	0x080076ef
 8007640:	080076bb 	.word	0x080076bb
 8007644:	080076ef 	.word	0x080076ef
 8007648:	080076ef 	.word	0x080076ef
 800764c:	080076ef 	.word	0x080076ef
 8007650:	080076ef 	.word	0x080076ef
 8007654:	080076ef 	.word	0x080076ef
 8007658:	080076ef 	.word	0x080076ef
 800765c:	080076ef 	.word	0x080076ef
 8007660:	080076ef 	.word	0x080076ef
 8007664:	080076ef 	.word	0x080076ef
 8007668:	080076ef 	.word	0x080076ef
 800766c:	080076ef 	.word	0x080076ef
 8007670:	080076ef 	.word	0x080076ef
 8007674:	080076ef 	.word	0x080076ef
 8007678:	080076ef 	.word	0x080076ef
 800767c:	080076ef 	.word	0x080076ef
 8007680:	080076e1 	.word	0x080076e1
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d02e      	beq.n	80076e6 <UART_SetConfig+0x8aa>
 8007688:	e031      	b.n	80076ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800768a:	f7fd f955 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 800768e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007690:	e033      	b.n	80076fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007692:	f7fd f967 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8007696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007698:	e02f      	b.n	80076fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800769a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fb96 	bl	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a8:	e027      	b.n	80076fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076aa:	f107 0318 	add.w	r3, r7, #24
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fce2 	bl	8006078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076b8:	e01f      	b.n	80076fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076ba:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <UART_SetConfig+0x934>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076c6:	4b2a      	ldr	r3, [pc, #168]	; (8007770 <UART_SetConfig+0x934>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	4a24      	ldr	r2, [pc, #144]	; (8007764 <UART_SetConfig+0x928>)
 80076d2:	fa22 f303 	lsr.w	r3, r2, r3
 80076d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076d8:	e00f      	b.n	80076fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80076da:	4b22      	ldr	r3, [pc, #136]	; (8007764 <UART_SetConfig+0x928>)
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076de:	e00c      	b.n	80076fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076e0:	4b21      	ldr	r3, [pc, #132]	; (8007768 <UART_SetConfig+0x92c>)
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076e4:	e009      	b.n	80076fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ec:	e005      	b.n	80076fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80e7 	beq.w	80078d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	4a19      	ldr	r2, [pc, #100]	; (800776c <UART_SetConfig+0x930>)
 8007708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800770c:	461a      	mov	r2, r3
 800770e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007710:	fbb3 f3f2 	udiv	r3, r3, r2
 8007714:	005a      	lsls	r2, r3, #1
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	441a      	add	r2, r3
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d916      	bls.n	800775c <UART_SetConfig+0x920>
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d212      	bcs.n	800775c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	b29b      	uxth	r3, r3
 800773a:	f023 030f 	bic.w	r3, r3, #15
 800773e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	b29a      	uxth	r2, r3
 800774c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800774e:	4313      	orrs	r3, r2
 8007750:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	e0b9      	b.n	80078d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007762:	e0b5      	b.n	80078d0 <UART_SetConfig+0xa94>
 8007764:	03d09000 	.word	0x03d09000
 8007768:	003d0900 	.word	0x003d0900
 800776c:	080089e0 	.word	0x080089e0
 8007770:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007774:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007778:	2b20      	cmp	r3, #32
 800777a:	dc49      	bgt.n	8007810 <UART_SetConfig+0x9d4>
 800777c:	2b00      	cmp	r3, #0
 800777e:	db7c      	blt.n	800787a <UART_SetConfig+0xa3e>
 8007780:	2b20      	cmp	r3, #32
 8007782:	d87a      	bhi.n	800787a <UART_SetConfig+0xa3e>
 8007784:	a201      	add	r2, pc, #4	; (adr r2, 800778c <UART_SetConfig+0x950>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	08007817 	.word	0x08007817
 8007790:	0800781f 	.word	0x0800781f
 8007794:	0800787b 	.word	0x0800787b
 8007798:	0800787b 	.word	0x0800787b
 800779c:	08007827 	.word	0x08007827
 80077a0:	0800787b 	.word	0x0800787b
 80077a4:	0800787b 	.word	0x0800787b
 80077a8:	0800787b 	.word	0x0800787b
 80077ac:	08007837 	.word	0x08007837
 80077b0:	0800787b 	.word	0x0800787b
 80077b4:	0800787b 	.word	0x0800787b
 80077b8:	0800787b 	.word	0x0800787b
 80077bc:	0800787b 	.word	0x0800787b
 80077c0:	0800787b 	.word	0x0800787b
 80077c4:	0800787b 	.word	0x0800787b
 80077c8:	0800787b 	.word	0x0800787b
 80077cc:	08007847 	.word	0x08007847
 80077d0:	0800787b 	.word	0x0800787b
 80077d4:	0800787b 	.word	0x0800787b
 80077d8:	0800787b 	.word	0x0800787b
 80077dc:	0800787b 	.word	0x0800787b
 80077e0:	0800787b 	.word	0x0800787b
 80077e4:	0800787b 	.word	0x0800787b
 80077e8:	0800787b 	.word	0x0800787b
 80077ec:	0800787b 	.word	0x0800787b
 80077f0:	0800787b 	.word	0x0800787b
 80077f4:	0800787b 	.word	0x0800787b
 80077f8:	0800787b 	.word	0x0800787b
 80077fc:	0800787b 	.word	0x0800787b
 8007800:	0800787b 	.word	0x0800787b
 8007804:	0800787b 	.word	0x0800787b
 8007808:	0800787b 	.word	0x0800787b
 800780c:	0800786d 	.word	0x0800786d
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d02e      	beq.n	8007872 <UART_SetConfig+0xa36>
 8007814:	e031      	b.n	800787a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007816:	f7fd f88f 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 800781a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800781c:	e033      	b.n	8007886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781e:	f7fd f8a1 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8007822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007824:	e02f      	b.n	8007886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fad0 	bl	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007834:	e027      	b.n	8007886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fc1c 	bl	8006078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007844:	e01f      	b.n	8007886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007846:	4b2d      	ldr	r3, [pc, #180]	; (80078fc <UART_SetConfig+0xac0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007852:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <UART_SetConfig+0xac0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	08db      	lsrs	r3, r3, #3
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	4a28      	ldr	r2, [pc, #160]	; (8007900 <UART_SetConfig+0xac4>)
 800785e:	fa22 f303 	lsr.w	r3, r2, r3
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007864:	e00f      	b.n	8007886 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <UART_SetConfig+0xac4>)
 8007868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786a:	e00c      	b.n	8007886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <UART_SetConfig+0xac8>)
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007884:	bf00      	nop
    }

    if (pclk != 0U)
 8007886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d021      	beq.n	80078d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	4a1d      	ldr	r2, [pc, #116]	; (8007908 <UART_SetConfig+0xacc>)
 8007892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007896:	461a      	mov	r2, r3
 8007898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789a:	fbb3 f2f2 	udiv	r2, r3, r2
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	2b0f      	cmp	r3, #15
 80078b4:	d909      	bls.n	80078ca <UART_SetConfig+0xa8e>
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078bc:	d205      	bcs.n	80078ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60da      	str	r2, [r3, #12]
 80078c8:	e002      	b.n	80078d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2201      	movs	r2, #1
 80078dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2200      	movs	r2, #0
 80078e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2200      	movs	r2, #0
 80078ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80078ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3748      	adds	r7, #72	; 0x48
 80078f4:	46bd      	mov	sp, r7
 80078f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
 8007900:	03d09000 	.word	0x03d09000
 8007904:	003d0900 	.word	0x003d0900
 8007908:	080089e0 	.word	0x080089e0

0800790c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01a      	beq.n	8007a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d10a      	bne.n	8007a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	605a      	str	r2, [r3, #4]
  }
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b098      	sub	sp, #96	; 0x60
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a60:	f7f9 fd4a 	bl	80014f8 <HAL_GetTick>
 8007a64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0308 	and.w	r3, r3, #8
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d12f      	bne.n	8007ad4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f88e 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d022      	beq.n	8007ad4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aac:	647b      	str	r3, [r7, #68]	; 0x44
 8007aae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e6      	bne.n	8007a8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e063      	b.n	8007b9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d149      	bne.n	8007b76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aea:	2200      	movs	r2, #0
 8007aec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f857 	bl	8007ba4 <UART_WaitOnFlagUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d03c      	beq.n	8007b76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	623b      	str	r3, [r7, #32]
   return(result);
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b4e:	61fa      	str	r2, [r7, #28]
 8007b50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	69b9      	ldr	r1, [r7, #24]
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e012      	b.n	8007b9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3758      	adds	r7, #88	; 0x58
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb4:	e049      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d045      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bbe:	f7f9 fc9b 	bl	80014f8 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e048      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d031      	beq.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d110      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f839 	bl	8007c74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2208      	movs	r2, #8
 8007c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e029      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c24:	d111      	bne.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f81f 	bl	8007c74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e00f      	b.n	8007c6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4013      	ands	r3, r2
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	bf0c      	ite	eq
 8007c5a:	2301      	moveq	r3, #1
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d0a6      	beq.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b095      	sub	sp, #84	; 0x54
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e6      	bne.n	8007c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	4b1e      	ldr	r3, [pc, #120]	; (8007d3c <UART_EndRxTransfer+0xc8>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e5      	bne.n	8007cae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d118      	bne.n	8007d1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f023 0310 	bic.w	r3, r3, #16
 8007cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6979      	ldr	r1, [r7, #20]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	613b      	str	r3, [r7, #16]
   return(result);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e6      	bne.n	8007cea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d30:	bf00      	nop
 8007d32:	3754      	adds	r7, #84	; 0x54
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	effffffe 	.word	0xeffffffe

08007d40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff f856 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6979      	ldr	r1, [r7, #20]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e6      	bne.n	8007d74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff f821 	bl	8006dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dba:	bf00      	nop
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e027      	b.n	8007e64 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e02d      	b.n	8007ee4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	; 0x24
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f84f 	bl	8007f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e02d      	b.n	8007f60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2224      	movs	r2, #36	; 0x24
 8007f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0201 	bic.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f811 	bl	8007f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d108      	bne.n	8007f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f88:	e031      	b.n	8007fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f8a:	2310      	movs	r3, #16
 8007f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f8e:	2310      	movs	r3, #16
 8007f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	0e5b      	lsrs	r3, r3, #25
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	0f5b      	lsrs	r3, r3, #29
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	7b3a      	ldrb	r2, [r7, #12]
 8007fb6:	4911      	ldr	r1, [pc, #68]	; (8007ffc <UARTEx_SetNbDataToProcess+0x94>)
 8007fb8:	5c8a      	ldrb	r2, [r1, r2]
 8007fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fbe:	7b3a      	ldrb	r2, [r7, #12]
 8007fc0:	490f      	ldr	r1, [pc, #60]	; (8008000 <UARTEx_SetNbDataToProcess+0x98>)
 8007fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	7b7a      	ldrb	r2, [r7, #13]
 8007fd4:	4909      	ldr	r1, [pc, #36]	; (8007ffc <UARTEx_SetNbDataToProcess+0x94>)
 8007fd6:	5c8a      	ldrb	r2, [r1, r2]
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	4908      	ldr	r1, [pc, #32]	; (8008000 <UARTEx_SetNbDataToProcess+0x98>)
 8007fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	080089f8 	.word	0x080089f8
 8008000:	08008a00 	.word	0x08008a00

08008004 <siprintf>:
 8008004:	b40e      	push	{r1, r2, r3}
 8008006:	b500      	push	{lr}
 8008008:	b09c      	sub	sp, #112	; 0x70
 800800a:	ab1d      	add	r3, sp, #116	; 0x74
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9006      	str	r0, [sp, #24]
 8008010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008014:	4809      	ldr	r0, [pc, #36]	; (800803c <siprintf+0x38>)
 8008016:	9107      	str	r1, [sp, #28]
 8008018:	9104      	str	r1, [sp, #16]
 800801a:	4909      	ldr	r1, [pc, #36]	; (8008040 <siprintf+0x3c>)
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	6800      	ldr	r0, [r0, #0]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	a902      	add	r1, sp, #8
 8008028:	f000 f9a0 	bl	800836c <_svfiprintf_r>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	b01c      	add	sp, #112	; 0x70
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	2400005c 	.word	0x2400005c
 8008040:	ffff0208 	.word	0xffff0208

08008044 <memset>:
 8008044:	4402      	add	r2, r0
 8008046:	4603      	mov	r3, r0
 8008048:	4293      	cmp	r3, r2
 800804a:	d100      	bne.n	800804e <memset+0xa>
 800804c:	4770      	bx	lr
 800804e:	f803 1b01 	strb.w	r1, [r3], #1
 8008052:	e7f9      	b.n	8008048 <memset+0x4>

08008054 <__errno>:
 8008054:	4b01      	ldr	r3, [pc, #4]	; (800805c <__errno+0x8>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	2400005c 	.word	0x2400005c

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	; (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	; (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	; (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	; (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 fc6a 	bl	800894c <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	08008a44 	.word	0x08008a44
 800809c:	08008a44 	.word	0x08008a44
 80080a0:	08008a44 	.word	0x08008a44
 80080a4:	08008a48 	.word	0x08008a48

080080a8 <__retarget_lock_acquire_recursive>:
 80080a8:	4770      	bx	lr

080080aa <__retarget_lock_release_recursive>:
 80080aa:	4770      	bx	lr

080080ac <memcpy>:
 80080ac:	440a      	add	r2, r1
 80080ae:	4291      	cmp	r1, r2
 80080b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b4:	d100      	bne.n	80080b8 <memcpy+0xc>
 80080b6:	4770      	bx	lr
 80080b8:	b510      	push	{r4, lr}
 80080ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080c2:	4291      	cmp	r1, r2
 80080c4:	d1f9      	bne.n	80080ba <memcpy+0xe>
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <_free_r>:
 80080c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ca:	2900      	cmp	r1, #0
 80080cc:	d044      	beq.n	8008158 <_free_r+0x90>
 80080ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d2:	9001      	str	r0, [sp, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f1a1 0404 	sub.w	r4, r1, #4
 80080da:	bfb8      	it	lt
 80080dc:	18e4      	addlt	r4, r4, r3
 80080de:	f000 f8df 	bl	80082a0 <__malloc_lock>
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <_free_r+0x94>)
 80080e4:	9801      	ldr	r0, [sp, #4]
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	b933      	cbnz	r3, 80080f8 <_free_r+0x30>
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6014      	str	r4, [r2, #0]
 80080ee:	b003      	add	sp, #12
 80080f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f4:	f000 b8da 	b.w	80082ac <__malloc_unlock>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d908      	bls.n	800810e <_free_r+0x46>
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	428b      	cmp	r3, r1
 8008102:	bf01      	itttt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	1949      	addeq	r1, r1, r5
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	e7ed      	b.n	80080ea <_free_r+0x22>
 800810e:	461a      	mov	r2, r3
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b10b      	cbz	r3, 8008118 <_free_r+0x50>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x46>
 8008118:	6811      	ldr	r1, [r2, #0]
 800811a:	1855      	adds	r5, r2, r1
 800811c:	42a5      	cmp	r5, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x70>
 8008120:	6824      	ldr	r4, [r4, #0]
 8008122:	4421      	add	r1, r4
 8008124:	1854      	adds	r4, r2, r1
 8008126:	42a3      	cmp	r3, r4
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	d1e0      	bne.n	80080ee <_free_r+0x26>
 800812c:	681c      	ldr	r4, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	440c      	add	r4, r1
 8008134:	6014      	str	r4, [r2, #0]
 8008136:	e7da      	b.n	80080ee <_free_r+0x26>
 8008138:	d902      	bls.n	8008140 <_free_r+0x78>
 800813a:	230c      	movs	r3, #12
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	e7d6      	b.n	80080ee <_free_r+0x26>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf04      	itt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1949      	addeq	r1, r1, r5
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	6054      	str	r4, [r2, #4]
 8008156:	e7ca      	b.n	80080ee <_free_r+0x26>
 8008158:	b003      	add	sp, #12
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	24000458 	.word	0x24000458

08008160 <sbrk_aligned>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4e0e      	ldr	r6, [pc, #56]	; (800819c <sbrk_aligned+0x3c>)
 8008164:	460c      	mov	r4, r1
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	b911      	cbnz	r1, 8008172 <sbrk_aligned+0x12>
 800816c:	f000 fba6 	bl	80088bc <_sbrk_r>
 8008170:	6030      	str	r0, [r6, #0]
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f000 fba1 	bl	80088bc <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d00a      	beq.n	8008194 <sbrk_aligned+0x34>
 800817e:	1cc4      	adds	r4, r0, #3
 8008180:	f024 0403 	bic.w	r4, r4, #3
 8008184:	42a0      	cmp	r0, r4
 8008186:	d007      	beq.n	8008198 <sbrk_aligned+0x38>
 8008188:	1a21      	subs	r1, r4, r0
 800818a:	4628      	mov	r0, r5
 800818c:	f000 fb96 	bl	80088bc <_sbrk_r>
 8008190:	3001      	adds	r0, #1
 8008192:	d101      	bne.n	8008198 <sbrk_aligned+0x38>
 8008194:	f04f 34ff 	mov.w	r4, #4294967295
 8008198:	4620      	mov	r0, r4
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	2400045c 	.word	0x2400045c

080081a0 <_malloc_r>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4607      	mov	r7, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d905      	bls.n	80081c8 <_malloc_r+0x28>
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	2600      	movs	r6, #0
 80081c2:	4630      	mov	r0, r6
 80081c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800829c <_malloc_r+0xfc>
 80081cc:	f000 f868 	bl	80082a0 <__malloc_lock>
 80081d0:	f8d8 3000 	ldr.w	r3, [r8]
 80081d4:	461c      	mov	r4, r3
 80081d6:	bb5c      	cbnz	r4, 8008230 <_malloc_r+0x90>
 80081d8:	4629      	mov	r1, r5
 80081da:	4638      	mov	r0, r7
 80081dc:	f7ff ffc0 	bl	8008160 <sbrk_aligned>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	4604      	mov	r4, r0
 80081e4:	d155      	bne.n	8008292 <_malloc_r+0xf2>
 80081e6:	f8d8 4000 	ldr.w	r4, [r8]
 80081ea:	4626      	mov	r6, r4
 80081ec:	2e00      	cmp	r6, #0
 80081ee:	d145      	bne.n	800827c <_malloc_r+0xdc>
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d048      	beq.n	8008286 <_malloc_r+0xe6>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	4631      	mov	r1, r6
 80081f8:	4638      	mov	r0, r7
 80081fa:	eb04 0903 	add.w	r9, r4, r3
 80081fe:	f000 fb5d 	bl	80088bc <_sbrk_r>
 8008202:	4581      	cmp	r9, r0
 8008204:	d13f      	bne.n	8008286 <_malloc_r+0xe6>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	1a6d      	subs	r5, r5, r1
 800820a:	4629      	mov	r1, r5
 800820c:	4638      	mov	r0, r7
 800820e:	f7ff ffa7 	bl	8008160 <sbrk_aligned>
 8008212:	3001      	adds	r0, #1
 8008214:	d037      	beq.n	8008286 <_malloc_r+0xe6>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	442b      	add	r3, r5
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	f8d8 3000 	ldr.w	r3, [r8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d038      	beq.n	8008296 <_malloc_r+0xf6>
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	42a2      	cmp	r2, r4
 8008228:	d12b      	bne.n	8008282 <_malloc_r+0xe2>
 800822a:	2200      	movs	r2, #0
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	e00f      	b.n	8008250 <_malloc_r+0xb0>
 8008230:	6822      	ldr	r2, [r4, #0]
 8008232:	1b52      	subs	r2, r2, r5
 8008234:	d41f      	bmi.n	8008276 <_malloc_r+0xd6>
 8008236:	2a0b      	cmp	r2, #11
 8008238:	d917      	bls.n	800826a <_malloc_r+0xca>
 800823a:	1961      	adds	r1, r4, r5
 800823c:	42a3      	cmp	r3, r4
 800823e:	6025      	str	r5, [r4, #0]
 8008240:	bf18      	it	ne
 8008242:	6059      	strne	r1, [r3, #4]
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	bf08      	it	eq
 8008248:	f8c8 1000 	streq.w	r1, [r8]
 800824c:	5162      	str	r2, [r4, r5]
 800824e:	604b      	str	r3, [r1, #4]
 8008250:	4638      	mov	r0, r7
 8008252:	f104 060b 	add.w	r6, r4, #11
 8008256:	f000 f829 	bl	80082ac <__malloc_unlock>
 800825a:	f026 0607 	bic.w	r6, r6, #7
 800825e:	1d23      	adds	r3, r4, #4
 8008260:	1af2      	subs	r2, r6, r3
 8008262:	d0ae      	beq.n	80081c2 <_malloc_r+0x22>
 8008264:	1b9b      	subs	r3, r3, r6
 8008266:	50a3      	str	r3, [r4, r2]
 8008268:	e7ab      	b.n	80081c2 <_malloc_r+0x22>
 800826a:	42a3      	cmp	r3, r4
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	d1dd      	bne.n	800822c <_malloc_r+0x8c>
 8008270:	f8c8 2000 	str.w	r2, [r8]
 8008274:	e7ec      	b.n	8008250 <_malloc_r+0xb0>
 8008276:	4623      	mov	r3, r4
 8008278:	6864      	ldr	r4, [r4, #4]
 800827a:	e7ac      	b.n	80081d6 <_malloc_r+0x36>
 800827c:	4634      	mov	r4, r6
 800827e:	6876      	ldr	r6, [r6, #4]
 8008280:	e7b4      	b.n	80081ec <_malloc_r+0x4c>
 8008282:	4613      	mov	r3, r2
 8008284:	e7cc      	b.n	8008220 <_malloc_r+0x80>
 8008286:	230c      	movs	r3, #12
 8008288:	603b      	str	r3, [r7, #0]
 800828a:	4638      	mov	r0, r7
 800828c:	f000 f80e 	bl	80082ac <__malloc_unlock>
 8008290:	e797      	b.n	80081c2 <_malloc_r+0x22>
 8008292:	6025      	str	r5, [r4, #0]
 8008294:	e7dc      	b.n	8008250 <_malloc_r+0xb0>
 8008296:	605b      	str	r3, [r3, #4]
 8008298:	deff      	udf	#255	; 0xff
 800829a:	bf00      	nop
 800829c:	24000458 	.word	0x24000458

080082a0 <__malloc_lock>:
 80082a0:	4801      	ldr	r0, [pc, #4]	; (80082a8 <__malloc_lock+0x8>)
 80082a2:	f7ff bf01 	b.w	80080a8 <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	24000454 	.word	0x24000454

080082ac <__malloc_unlock>:
 80082ac:	4801      	ldr	r0, [pc, #4]	; (80082b4 <__malloc_unlock+0x8>)
 80082ae:	f7ff befc 	b.w	80080aa <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	24000454 	.word	0x24000454

080082b8 <__ssputs_r>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	688e      	ldr	r6, [r1, #8]
 80082be:	461f      	mov	r7, r3
 80082c0:	42be      	cmp	r6, r7
 80082c2:	680b      	ldr	r3, [r1, #0]
 80082c4:	4682      	mov	sl, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	4690      	mov	r8, r2
 80082ca:	d82c      	bhi.n	8008326 <__ssputs_r+0x6e>
 80082cc:	898a      	ldrh	r2, [r1, #12]
 80082ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082d2:	d026      	beq.n	8008322 <__ssputs_r+0x6a>
 80082d4:	6965      	ldr	r5, [r4, #20]
 80082d6:	6909      	ldr	r1, [r1, #16]
 80082d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082dc:	eba3 0901 	sub.w	r9, r3, r1
 80082e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082e4:	1c7b      	adds	r3, r7, #1
 80082e6:	444b      	add	r3, r9
 80082e8:	106d      	asrs	r5, r5, #1
 80082ea:	429d      	cmp	r5, r3
 80082ec:	bf38      	it	cc
 80082ee:	461d      	movcc	r5, r3
 80082f0:	0553      	lsls	r3, r2, #21
 80082f2:	d527      	bpl.n	8008344 <__ssputs_r+0x8c>
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7ff ff53 	bl	80081a0 <_malloc_r>
 80082fa:	4606      	mov	r6, r0
 80082fc:	b360      	cbz	r0, 8008358 <__ssputs_r+0xa0>
 80082fe:	6921      	ldr	r1, [r4, #16]
 8008300:	464a      	mov	r2, r9
 8008302:	f7ff fed3 	bl	80080ac <memcpy>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800830c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	6126      	str	r6, [r4, #16]
 8008314:	6165      	str	r5, [r4, #20]
 8008316:	444e      	add	r6, r9
 8008318:	eba5 0509 	sub.w	r5, r5, r9
 800831c:	6026      	str	r6, [r4, #0]
 800831e:	60a5      	str	r5, [r4, #8]
 8008320:	463e      	mov	r6, r7
 8008322:	42be      	cmp	r6, r7
 8008324:	d900      	bls.n	8008328 <__ssputs_r+0x70>
 8008326:	463e      	mov	r6, r7
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	4632      	mov	r2, r6
 800832c:	4641      	mov	r1, r8
 800832e:	f000 faab 	bl	8008888 <memmove>
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	1b9b      	subs	r3, r3, r6
 8008336:	60a3      	str	r3, [r4, #8]
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	4433      	add	r3, r6
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	2000      	movs	r0, #0
 8008340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008344:	462a      	mov	r2, r5
 8008346:	f000 fac9 	bl	80088dc <_realloc_r>
 800834a:	4606      	mov	r6, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	d1e0      	bne.n	8008312 <__ssputs_r+0x5a>
 8008350:	6921      	ldr	r1, [r4, #16]
 8008352:	4650      	mov	r0, sl
 8008354:	f7ff feb8 	bl	80080c8 <_free_r>
 8008358:	230c      	movs	r3, #12
 800835a:	f8ca 3000 	str.w	r3, [sl]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	f04f 30ff 	mov.w	r0, #4294967295
 800836a:	e7e9      	b.n	8008340 <__ssputs_r+0x88>

0800836c <_svfiprintf_r>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4698      	mov	r8, r3
 8008372:	898b      	ldrh	r3, [r1, #12]
 8008374:	061b      	lsls	r3, r3, #24
 8008376:	b09d      	sub	sp, #116	; 0x74
 8008378:	4607      	mov	r7, r0
 800837a:	460d      	mov	r5, r1
 800837c:	4614      	mov	r4, r2
 800837e:	d50e      	bpl.n	800839e <_svfiprintf_r+0x32>
 8008380:	690b      	ldr	r3, [r1, #16]
 8008382:	b963      	cbnz	r3, 800839e <_svfiprintf_r+0x32>
 8008384:	2140      	movs	r1, #64	; 0x40
 8008386:	f7ff ff0b 	bl	80081a0 <_malloc_r>
 800838a:	6028      	str	r0, [r5, #0]
 800838c:	6128      	str	r0, [r5, #16]
 800838e:	b920      	cbnz	r0, 800839a <_svfiprintf_r+0x2e>
 8008390:	230c      	movs	r3, #12
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e0d0      	b.n	800853c <_svfiprintf_r+0x1d0>
 800839a:	2340      	movs	r3, #64	; 0x40
 800839c:	616b      	str	r3, [r5, #20]
 800839e:	2300      	movs	r3, #0
 80083a0:	9309      	str	r3, [sp, #36]	; 0x24
 80083a2:	2320      	movs	r3, #32
 80083a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ac:	2330      	movs	r3, #48	; 0x30
 80083ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008554 <_svfiprintf_r+0x1e8>
 80083b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083b6:	f04f 0901 	mov.w	r9, #1
 80083ba:	4623      	mov	r3, r4
 80083bc:	469a      	mov	sl, r3
 80083be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c2:	b10a      	cbz	r2, 80083c8 <_svfiprintf_r+0x5c>
 80083c4:	2a25      	cmp	r2, #37	; 0x25
 80083c6:	d1f9      	bne.n	80083bc <_svfiprintf_r+0x50>
 80083c8:	ebba 0b04 	subs.w	fp, sl, r4
 80083cc:	d00b      	beq.n	80083e6 <_svfiprintf_r+0x7a>
 80083ce:	465b      	mov	r3, fp
 80083d0:	4622      	mov	r2, r4
 80083d2:	4629      	mov	r1, r5
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff ff6f 	bl	80082b8 <__ssputs_r>
 80083da:	3001      	adds	r0, #1
 80083dc:	f000 80a9 	beq.w	8008532 <_svfiprintf_r+0x1c6>
 80083e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083e2:	445a      	add	r2, fp
 80083e4:	9209      	str	r2, [sp, #36]	; 0x24
 80083e6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 80a1 	beq.w	8008532 <_svfiprintf_r+0x1c6>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f04f 32ff 	mov.w	r2, #4294967295
 80083f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083fa:	f10a 0a01 	add.w	sl, sl, #1
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	9307      	str	r3, [sp, #28]
 8008402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008406:	931a      	str	r3, [sp, #104]	; 0x68
 8008408:	4654      	mov	r4, sl
 800840a:	2205      	movs	r2, #5
 800840c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008410:	4850      	ldr	r0, [pc, #320]	; (8008554 <_svfiprintf_r+0x1e8>)
 8008412:	f7f7 ff65 	bl	80002e0 <memchr>
 8008416:	9a04      	ldr	r2, [sp, #16]
 8008418:	b9d8      	cbnz	r0, 8008452 <_svfiprintf_r+0xe6>
 800841a:	06d0      	lsls	r0, r2, #27
 800841c:	bf44      	itt	mi
 800841e:	2320      	movmi	r3, #32
 8008420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008424:	0711      	lsls	r1, r2, #28
 8008426:	bf44      	itt	mi
 8008428:	232b      	movmi	r3, #43	; 0x2b
 800842a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800842e:	f89a 3000 	ldrb.w	r3, [sl]
 8008432:	2b2a      	cmp	r3, #42	; 0x2a
 8008434:	d015      	beq.n	8008462 <_svfiprintf_r+0xf6>
 8008436:	9a07      	ldr	r2, [sp, #28]
 8008438:	4654      	mov	r4, sl
 800843a:	2000      	movs	r0, #0
 800843c:	f04f 0c0a 	mov.w	ip, #10
 8008440:	4621      	mov	r1, r4
 8008442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008446:	3b30      	subs	r3, #48	; 0x30
 8008448:	2b09      	cmp	r3, #9
 800844a:	d94d      	bls.n	80084e8 <_svfiprintf_r+0x17c>
 800844c:	b1b0      	cbz	r0, 800847c <_svfiprintf_r+0x110>
 800844e:	9207      	str	r2, [sp, #28]
 8008450:	e014      	b.n	800847c <_svfiprintf_r+0x110>
 8008452:	eba0 0308 	sub.w	r3, r0, r8
 8008456:	fa09 f303 	lsl.w	r3, r9, r3
 800845a:	4313      	orrs	r3, r2
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	46a2      	mov	sl, r4
 8008460:	e7d2      	b.n	8008408 <_svfiprintf_r+0x9c>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	1d19      	adds	r1, r3, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9103      	str	r1, [sp, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfbb      	ittet	lt
 800846e:	425b      	neglt	r3, r3
 8008470:	f042 0202 	orrlt.w	r2, r2, #2
 8008474:	9307      	strge	r3, [sp, #28]
 8008476:	9307      	strlt	r3, [sp, #28]
 8008478:	bfb8      	it	lt
 800847a:	9204      	strlt	r2, [sp, #16]
 800847c:	7823      	ldrb	r3, [r4, #0]
 800847e:	2b2e      	cmp	r3, #46	; 0x2e
 8008480:	d10c      	bne.n	800849c <_svfiprintf_r+0x130>
 8008482:	7863      	ldrb	r3, [r4, #1]
 8008484:	2b2a      	cmp	r3, #42	; 0x2a
 8008486:	d134      	bne.n	80084f2 <_svfiprintf_r+0x186>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	1d1a      	adds	r2, r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	9203      	str	r2, [sp, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	bfb8      	it	lt
 8008494:	f04f 33ff 	movlt.w	r3, #4294967295
 8008498:	3402      	adds	r4, #2
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008564 <_svfiprintf_r+0x1f8>
 80084a0:	7821      	ldrb	r1, [r4, #0]
 80084a2:	2203      	movs	r2, #3
 80084a4:	4650      	mov	r0, sl
 80084a6:	f7f7 ff1b 	bl	80002e0 <memchr>
 80084aa:	b138      	cbz	r0, 80084bc <_svfiprintf_r+0x150>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	eba0 000a 	sub.w	r0, r0, sl
 80084b2:	2240      	movs	r2, #64	; 0x40
 80084b4:	4082      	lsls	r2, r0
 80084b6:	4313      	orrs	r3, r2
 80084b8:	3401      	adds	r4, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c0:	4825      	ldr	r0, [pc, #148]	; (8008558 <_svfiprintf_r+0x1ec>)
 80084c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084c6:	2206      	movs	r2, #6
 80084c8:	f7f7 ff0a 	bl	80002e0 <memchr>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d038      	beq.n	8008542 <_svfiprintf_r+0x1d6>
 80084d0:	4b22      	ldr	r3, [pc, #136]	; (800855c <_svfiprintf_r+0x1f0>)
 80084d2:	bb1b      	cbnz	r3, 800851c <_svfiprintf_r+0x1b0>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	3307      	adds	r3, #7
 80084d8:	f023 0307 	bic.w	r3, r3, #7
 80084dc:	3308      	adds	r3, #8
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e2:	4433      	add	r3, r6
 80084e4:	9309      	str	r3, [sp, #36]	; 0x24
 80084e6:	e768      	b.n	80083ba <_svfiprintf_r+0x4e>
 80084e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ec:	460c      	mov	r4, r1
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7a6      	b.n	8008440 <_svfiprintf_r+0xd4>
 80084f2:	2300      	movs	r3, #0
 80084f4:	3401      	adds	r4, #1
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f04f 0c0a 	mov.w	ip, #10
 80084fe:	4620      	mov	r0, r4
 8008500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008504:	3a30      	subs	r2, #48	; 0x30
 8008506:	2a09      	cmp	r2, #9
 8008508:	d903      	bls.n	8008512 <_svfiprintf_r+0x1a6>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0c6      	beq.n	800849c <_svfiprintf_r+0x130>
 800850e:	9105      	str	r1, [sp, #20]
 8008510:	e7c4      	b.n	800849c <_svfiprintf_r+0x130>
 8008512:	fb0c 2101 	mla	r1, ip, r1, r2
 8008516:	4604      	mov	r4, r0
 8008518:	2301      	movs	r3, #1
 800851a:	e7f0      	b.n	80084fe <_svfiprintf_r+0x192>
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	462a      	mov	r2, r5
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <_svfiprintf_r+0x1f4>)
 8008524:	a904      	add	r1, sp, #16
 8008526:	4638      	mov	r0, r7
 8008528:	f3af 8000 	nop.w
 800852c:	1c42      	adds	r2, r0, #1
 800852e:	4606      	mov	r6, r0
 8008530:	d1d6      	bne.n	80084e0 <_svfiprintf_r+0x174>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	065b      	lsls	r3, r3, #25
 8008536:	f53f af2d 	bmi.w	8008394 <_svfiprintf_r+0x28>
 800853a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800853c:	b01d      	add	sp, #116	; 0x74
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	462a      	mov	r2, r5
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <_svfiprintf_r+0x1f4>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	4638      	mov	r0, r7
 800854e:	f000 f879 	bl	8008644 <_printf_i>
 8008552:	e7eb      	b.n	800852c <_svfiprintf_r+0x1c0>
 8008554:	08008a08 	.word	0x08008a08
 8008558:	08008a12 	.word	0x08008a12
 800855c:	00000000 	.word	0x00000000
 8008560:	080082b9 	.word	0x080082b9
 8008564:	08008a0e 	.word	0x08008a0e

08008568 <_printf_common>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	4616      	mov	r6, r2
 800856e:	4699      	mov	r9, r3
 8008570:	688a      	ldr	r2, [r1, #8]
 8008572:	690b      	ldr	r3, [r1, #16]
 8008574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008578:	4293      	cmp	r3, r2
 800857a:	bfb8      	it	lt
 800857c:	4613      	movlt	r3, r2
 800857e:	6033      	str	r3, [r6, #0]
 8008580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008584:	4607      	mov	r7, r0
 8008586:	460c      	mov	r4, r1
 8008588:	b10a      	cbz	r2, 800858e <_printf_common+0x26>
 800858a:	3301      	adds	r3, #1
 800858c:	6033      	str	r3, [r6, #0]
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	0699      	lsls	r1, r3, #26
 8008592:	bf42      	ittt	mi
 8008594:	6833      	ldrmi	r3, [r6, #0]
 8008596:	3302      	addmi	r3, #2
 8008598:	6033      	strmi	r3, [r6, #0]
 800859a:	6825      	ldr	r5, [r4, #0]
 800859c:	f015 0506 	ands.w	r5, r5, #6
 80085a0:	d106      	bne.n	80085b0 <_printf_common+0x48>
 80085a2:	f104 0a19 	add.w	sl, r4, #25
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	6832      	ldr	r2, [r6, #0]
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc26      	bgt.n	80085fe <_printf_common+0x96>
 80085b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085b4:	1e13      	subs	r3, r2, #0
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	0692      	lsls	r2, r2, #26
 80085be:	d42b      	bmi.n	8008618 <_printf_common+0xb0>
 80085c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c4:	4649      	mov	r1, r9
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c0      	blx	r8
 80085ca:	3001      	adds	r0, #1
 80085cc:	d01e      	beq.n	800860c <_printf_common+0xa4>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6922      	ldr	r2, [r4, #16]
 80085d2:	f003 0306 	and.w	r3, r3, #6
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	bf02      	ittt	eq
 80085da:	68e5      	ldreq	r5, [r4, #12]
 80085dc:	6833      	ldreq	r3, [r6, #0]
 80085de:	1aed      	subeq	r5, r5, r3
 80085e0:	68a3      	ldr	r3, [r4, #8]
 80085e2:	bf0c      	ite	eq
 80085e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e8:	2500      	movne	r5, #0
 80085ea:	4293      	cmp	r3, r2
 80085ec:	bfc4      	itt	gt
 80085ee:	1a9b      	subgt	r3, r3, r2
 80085f0:	18ed      	addgt	r5, r5, r3
 80085f2:	2600      	movs	r6, #0
 80085f4:	341a      	adds	r4, #26
 80085f6:	42b5      	cmp	r5, r6
 80085f8:	d11a      	bne.n	8008630 <_printf_common+0xc8>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e008      	b.n	8008610 <_printf_common+0xa8>
 80085fe:	2301      	movs	r3, #1
 8008600:	4652      	mov	r2, sl
 8008602:	4649      	mov	r1, r9
 8008604:	4638      	mov	r0, r7
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d103      	bne.n	8008614 <_printf_common+0xac>
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008614:	3501      	adds	r5, #1
 8008616:	e7c6      	b.n	80085a6 <_printf_common+0x3e>
 8008618:	18e1      	adds	r1, r4, r3
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	2030      	movs	r0, #48	; 0x30
 800861e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008622:	4422      	add	r2, r4
 8008624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800862c:	3302      	adds	r3, #2
 800862e:	e7c7      	b.n	80085c0 <_printf_common+0x58>
 8008630:	2301      	movs	r3, #1
 8008632:	4622      	mov	r2, r4
 8008634:	4649      	mov	r1, r9
 8008636:	4638      	mov	r0, r7
 8008638:	47c0      	blx	r8
 800863a:	3001      	adds	r0, #1
 800863c:	d0e6      	beq.n	800860c <_printf_common+0xa4>
 800863e:	3601      	adds	r6, #1
 8008640:	e7d9      	b.n	80085f6 <_printf_common+0x8e>
	...

08008644 <_printf_i>:
 8008644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	7e0f      	ldrb	r7, [r1, #24]
 800864a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800864c:	2f78      	cmp	r7, #120	; 0x78
 800864e:	4691      	mov	r9, r2
 8008650:	4680      	mov	r8, r0
 8008652:	460c      	mov	r4, r1
 8008654:	469a      	mov	sl, r3
 8008656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800865a:	d807      	bhi.n	800866c <_printf_i+0x28>
 800865c:	2f62      	cmp	r7, #98	; 0x62
 800865e:	d80a      	bhi.n	8008676 <_printf_i+0x32>
 8008660:	2f00      	cmp	r7, #0
 8008662:	f000 80d4 	beq.w	800880e <_printf_i+0x1ca>
 8008666:	2f58      	cmp	r7, #88	; 0x58
 8008668:	f000 80c0 	beq.w	80087ec <_printf_i+0x1a8>
 800866c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008674:	e03a      	b.n	80086ec <_printf_i+0xa8>
 8008676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800867a:	2b15      	cmp	r3, #21
 800867c:	d8f6      	bhi.n	800866c <_printf_i+0x28>
 800867e:	a101      	add	r1, pc, #4	; (adr r1, 8008684 <_printf_i+0x40>)
 8008680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008684:	080086dd 	.word	0x080086dd
 8008688:	080086f1 	.word	0x080086f1
 800868c:	0800866d 	.word	0x0800866d
 8008690:	0800866d 	.word	0x0800866d
 8008694:	0800866d 	.word	0x0800866d
 8008698:	0800866d 	.word	0x0800866d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800866d 	.word	0x0800866d
 80086a4:	0800866d 	.word	0x0800866d
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	080087f5 	.word	0x080087f5
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	080087af 	.word	0x080087af
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	08008817 	.word	0x08008817
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087b7 	.word	0x080087b7
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	1d1a      	adds	r2, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ec:	2301      	movs	r3, #1
 80086ee:	e09f      	b.n	8008830 <_printf_i+0x1ec>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	0607      	lsls	r7, r0, #24
 80086f6:	f103 0104 	add.w	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	d501      	bpl.n	8008702 <_printf_i+0xbe>
 80086fe:	681e      	ldr	r6, [r3, #0]
 8008700:	e003      	b.n	800870a <_printf_i+0xc6>
 8008702:	0646      	lsls	r6, r0, #25
 8008704:	d5fb      	bpl.n	80086fe <_printf_i+0xba>
 8008706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800870a:	2e00      	cmp	r6, #0
 800870c:	da03      	bge.n	8008716 <_printf_i+0xd2>
 800870e:	232d      	movs	r3, #45	; 0x2d
 8008710:	4276      	negs	r6, r6
 8008712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008716:	485a      	ldr	r0, [pc, #360]	; (8008880 <_printf_i+0x23c>)
 8008718:	230a      	movs	r3, #10
 800871a:	e012      	b.n	8008742 <_printf_i+0xfe>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	6029      	str	r1, [r5, #0]
 8008724:	0605      	lsls	r5, r0, #24
 8008726:	d501      	bpl.n	800872c <_printf_i+0xe8>
 8008728:	681e      	ldr	r6, [r3, #0]
 800872a:	e002      	b.n	8008732 <_printf_i+0xee>
 800872c:	0641      	lsls	r1, r0, #25
 800872e:	d5fb      	bpl.n	8008728 <_printf_i+0xe4>
 8008730:	881e      	ldrh	r6, [r3, #0]
 8008732:	4853      	ldr	r0, [pc, #332]	; (8008880 <_printf_i+0x23c>)
 8008734:	2f6f      	cmp	r7, #111	; 0x6f
 8008736:	bf0c      	ite	eq
 8008738:	2308      	moveq	r3, #8
 800873a:	230a      	movne	r3, #10
 800873c:	2100      	movs	r1, #0
 800873e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008742:	6865      	ldr	r5, [r4, #4]
 8008744:	60a5      	str	r5, [r4, #8]
 8008746:	2d00      	cmp	r5, #0
 8008748:	bfa2      	ittt	ge
 800874a:	6821      	ldrge	r1, [r4, #0]
 800874c:	f021 0104 	bicge.w	r1, r1, #4
 8008750:	6021      	strge	r1, [r4, #0]
 8008752:	b90e      	cbnz	r6, 8008758 <_printf_i+0x114>
 8008754:	2d00      	cmp	r5, #0
 8008756:	d04b      	beq.n	80087f0 <_printf_i+0x1ac>
 8008758:	4615      	mov	r5, r2
 800875a:	fbb6 f1f3 	udiv	r1, r6, r3
 800875e:	fb03 6711 	mls	r7, r3, r1, r6
 8008762:	5dc7      	ldrb	r7, [r0, r7]
 8008764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008768:	4637      	mov	r7, r6
 800876a:	42bb      	cmp	r3, r7
 800876c:	460e      	mov	r6, r1
 800876e:	d9f4      	bls.n	800875a <_printf_i+0x116>
 8008770:	2b08      	cmp	r3, #8
 8008772:	d10b      	bne.n	800878c <_printf_i+0x148>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	07de      	lsls	r6, r3, #31
 8008778:	d508      	bpl.n	800878c <_printf_i+0x148>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	6861      	ldr	r1, [r4, #4]
 800877e:	4299      	cmp	r1, r3
 8008780:	bfde      	ittt	le
 8008782:	2330      	movle	r3, #48	; 0x30
 8008784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800878c:	1b52      	subs	r2, r2, r5
 800878e:	6122      	str	r2, [r4, #16]
 8008790:	f8cd a000 	str.w	sl, [sp]
 8008794:	464b      	mov	r3, r9
 8008796:	aa03      	add	r2, sp, #12
 8008798:	4621      	mov	r1, r4
 800879a:	4640      	mov	r0, r8
 800879c:	f7ff fee4 	bl	8008568 <_printf_common>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d14a      	bne.n	800883a <_printf_i+0x1f6>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b004      	add	sp, #16
 80087aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	f043 0320 	orr.w	r3, r3, #32
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	4833      	ldr	r0, [pc, #204]	; (8008884 <_printf_i+0x240>)
 80087b8:	2778      	movs	r7, #120	; 0x78
 80087ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6829      	ldr	r1, [r5, #0]
 80087c2:	061f      	lsls	r7, r3, #24
 80087c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087c8:	d402      	bmi.n	80087d0 <_printf_i+0x18c>
 80087ca:	065f      	lsls	r7, r3, #25
 80087cc:	bf48      	it	mi
 80087ce:	b2b6      	uxthmi	r6, r6
 80087d0:	07df      	lsls	r7, r3, #31
 80087d2:	bf48      	it	mi
 80087d4:	f043 0320 	orrmi.w	r3, r3, #32
 80087d8:	6029      	str	r1, [r5, #0]
 80087da:	bf48      	it	mi
 80087dc:	6023      	strmi	r3, [r4, #0]
 80087de:	b91e      	cbnz	r6, 80087e8 <_printf_i+0x1a4>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	f023 0320 	bic.w	r3, r3, #32
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	2310      	movs	r3, #16
 80087ea:	e7a7      	b.n	800873c <_printf_i+0xf8>
 80087ec:	4824      	ldr	r0, [pc, #144]	; (8008880 <_printf_i+0x23c>)
 80087ee:	e7e4      	b.n	80087ba <_printf_i+0x176>
 80087f0:	4615      	mov	r5, r2
 80087f2:	e7bd      	b.n	8008770 <_printf_i+0x12c>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6826      	ldr	r6, [r4, #0]
 80087f8:	6961      	ldr	r1, [r4, #20]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6028      	str	r0, [r5, #0]
 80087fe:	0635      	lsls	r5, r6, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1c4>
 8008804:	6019      	str	r1, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1ca>
 8008808:	0670      	lsls	r0, r6, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1c0>
 800880c:	8019      	strh	r1, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4615      	mov	r5, r2
 8008814:	e7bc      	b.n	8008790 <_printf_i+0x14c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	602a      	str	r2, [r5, #0]
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4628      	mov	r0, r5
 8008824:	f7f7 fd5c 	bl	80002e0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1ea>
 800882a:	1b40      	subs	r0, r0, r5
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	e7aa      	b.n	8008790 <_printf_i+0x14c>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	462a      	mov	r2, r5
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ad      	beq.n	80087a4 <_printf_i+0x160>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x232>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a6      	b.n	80087a8 <_printf_i+0x164>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09d      	beq.n	80087a4 <_printf_i+0x160>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x216>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x20a>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x226>
 800887e:	bf00      	nop
 8008880:	08008a19 	.word	0x08008a19
 8008884:	08008a2a 	.word	0x08008a2a

08008888 <memmove>:
 8008888:	4288      	cmp	r0, r1
 800888a:	b510      	push	{r4, lr}
 800888c:	eb01 0402 	add.w	r4, r1, r2
 8008890:	d902      	bls.n	8008898 <memmove+0x10>
 8008892:	4284      	cmp	r4, r0
 8008894:	4623      	mov	r3, r4
 8008896:	d807      	bhi.n	80088a8 <memmove+0x20>
 8008898:	1e43      	subs	r3, r0, #1
 800889a:	42a1      	cmp	r1, r4
 800889c:	d008      	beq.n	80088b0 <memmove+0x28>
 800889e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088a6:	e7f8      	b.n	800889a <memmove+0x12>
 80088a8:	4402      	add	r2, r0
 80088aa:	4601      	mov	r1, r0
 80088ac:	428a      	cmp	r2, r1
 80088ae:	d100      	bne.n	80088b2 <memmove+0x2a>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ba:	e7f7      	b.n	80088ac <memmove+0x24>

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	; (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f8 fca8 	bl	800121c <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	24000450 	.word	0x24000450

080088dc <_realloc_r>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	4680      	mov	r8, r0
 80088e2:	4614      	mov	r4, r2
 80088e4:	460e      	mov	r6, r1
 80088e6:	b921      	cbnz	r1, 80088f2 <_realloc_r+0x16>
 80088e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	4611      	mov	r1, r2
 80088ee:	f7ff bc57 	b.w	80081a0 <_malloc_r>
 80088f2:	b92a      	cbnz	r2, 8008900 <_realloc_r+0x24>
 80088f4:	f7ff fbe8 	bl	80080c8 <_free_r>
 80088f8:	4625      	mov	r5, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	f000 f81b 	bl	800893a <_malloc_usable_size_r>
 8008904:	4284      	cmp	r4, r0
 8008906:	4607      	mov	r7, r0
 8008908:	d802      	bhi.n	8008910 <_realloc_r+0x34>
 800890a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800890e:	d812      	bhi.n	8008936 <_realloc_r+0x5a>
 8008910:	4621      	mov	r1, r4
 8008912:	4640      	mov	r0, r8
 8008914:	f7ff fc44 	bl	80081a0 <_malloc_r>
 8008918:	4605      	mov	r5, r0
 800891a:	2800      	cmp	r0, #0
 800891c:	d0ed      	beq.n	80088fa <_realloc_r+0x1e>
 800891e:	42bc      	cmp	r4, r7
 8008920:	4622      	mov	r2, r4
 8008922:	4631      	mov	r1, r6
 8008924:	bf28      	it	cs
 8008926:	463a      	movcs	r2, r7
 8008928:	f7ff fbc0 	bl	80080ac <memcpy>
 800892c:	4631      	mov	r1, r6
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fbca 	bl	80080c8 <_free_r>
 8008934:	e7e1      	b.n	80088fa <_realloc_r+0x1e>
 8008936:	4635      	mov	r5, r6
 8008938:	e7df      	b.n	80088fa <_realloc_r+0x1e>

0800893a <_malloc_usable_size_r>:
 800893a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893e:	1f18      	subs	r0, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfbc      	itt	lt
 8008944:	580b      	ldrlt	r3, [r1, r0]
 8008946:	18c0      	addlt	r0, r0, r3
 8008948:	4770      	bx	lr
	...

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
