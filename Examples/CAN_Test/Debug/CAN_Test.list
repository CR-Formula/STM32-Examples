
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  08009ffc  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a05c  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  24000120  0800a0bc  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000b1c  0800a0bc  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d997  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e97  00000000  00000000  0003db28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  000409c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f26  00000000  00000000  00041d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038c4d  00000000  00000000  00042c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b79  00000000  00000000  0007b8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001692ca  00000000  00000000  0009542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c8  00000000  00000000  001fe6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  002040c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e94 	.word	0x08009e94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08009e94 	.word	0x08009e94

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// FDCAN1 Callback for interrupt
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d014      	beq.n	80006ba <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f002 fe6c 	bl	8003374 <HAL_FDCAN_GetRxMessage>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80006a2:	f000 fc25 	bl	8000ef0 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f002 ffd0 	bl	8003650 <HAL_FDCAN_ActivateNotification>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80006b6:	f000 fc1b 	bl	8000ef0 <Error_Handler>
    }
  }
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000958 	.word	0x24000958
 80006c8:	24000928 	.word	0x24000928

080006cc <HAL_FDCAN_RxFifo1Callback>:

// FDCAN2 Callback for interrupt
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d028      	beq.n	8000732 <HAL_FDCAN_RxFifo1Callback+0x66>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_FDCAN_RxFifo1Callback+0x70>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80006e4:	2141      	movs	r1, #65	; 0x41
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f002 fe44 	bl	8003374 <HAL_FDCAN_GetRxMessage>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80006f2:	f000 fbfd 	bl	8000ef0 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f002 ffa8 	bl	8003650 <HAL_FDCAN_ActivateNotification>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000706:	f000 fbf3 	bl	8000ef0 <Error_Handler>
    }

	  sprintf ((char *)TxData2, "CAN2 %d", indx++);
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_FDCAN_RxFifo1Callback+0x78>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000712:	600a      	str	r2, [r1, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	490c      	ldr	r1, [pc, #48]	; (8000748 <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <HAL_FDCAN_RxFifo1Callback+0x80>)
 800071a:	f008 ff17 	bl	800954c <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000720:	490b      	ldr	r1, [pc, #44]	; (8000750 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000724:	f002 fdcb 	bl	80032be <HAL_FDCAN_AddMessageToTxFifoQ>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_FDCAN_RxFifo1Callback+0x66>
	  {
		  Error_Handler();
 800072e:	f000 fbdf 	bl	8000ef0 <Error_Handler>
	  }
  }
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	240009b4 	.word	0x240009b4
 8000740:	24000984 	.word	0x24000984
 8000744:	240009bc 	.word	0x240009bc
 8000748:	08009eac 	.word	0x08009eac
 800074c:	240009ac 	.word	0x240009ac
 8000750:	24000960 	.word	0x24000960
 8000754:	240002c4 	.word	0x240002c4

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 ffc2 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f8a0 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 fae8 	bl	8000d38 <MX_GPIO_Init>
  MX_ETH_Init();
 8000768:	f000 f91c 	bl	80009a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800076c:	f000 fa66 	bl	8000c3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000770:	f000 fab0 	bl	8000cd4 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8000774:	f000 f962 	bl	8000a3c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000778:	f000 f9e0 	bl	8000b3c <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  // Start FDCAN 1 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800077c:	4840      	ldr	r0, [pc, #256]	; (8000880 <main+0x128>)
 800077e:	f002 fd73 	bl	8003268 <HAL_FDCAN_Start>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x34>
	  Error_Handler();
 8000788:	f000 fbb2 	bl	8000ef0 <Error_Handler>
  }

  // Start FDCAN 2 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800078c:	483d      	ldr	r0, [pc, #244]	; (8000884 <main+0x12c>)
 800078e:	f002 fd6b 	bl	8003268 <HAL_FDCAN_Start>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <main+0x44>
	  Error_Handler();
 8000798:	f000 fbaa 	bl	8000ef0 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1 which triggers the Interrupt
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	4837      	ldr	r0, [pc, #220]	; (8000880 <main+0x128>)
 80007a2:	f002 ff55 	bl	8003650 <HAL_FDCAN_ActivateNotification>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <main+0x58>
	  Error_Handler();
 80007ac:	f000 fba0 	bl	8000ef0 <Error_Handler>
  }


  // Activate the notification for new data in FIFO1 for FDCAN2 which triggers the Interrupt
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4833      	ldr	r0, [pc, #204]	; (8000884 <main+0x12c>)
 80007b6:	f002 ff4b 	bl	8003650 <HAL_FDCAN_ActivateNotification>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <main+0x6c>
	  Error_Handler();
 80007c0:	f000 fb96 	bl	8000ef0 <Error_Handler>
  }

  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11; // ID of the Transmitter, which is going to be 0x11 for the FDCAN1
 80007c4:	4b30      	ldr	r3, [pc, #192]	; (8000888 <main+0x130>)
 80007c6:	2211      	movs	r2, #17
 80007c8:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID; // Type of CAN ID
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <main+0x130>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME; // Implies whether we are sending a Data frame or Remote frame
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <main+0x130>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8; // This is the length of the actual Data we are going to send
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <main+0x130>)
 80007d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007dc:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Will notify us if there is any error in transmission
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <main+0x130>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF; // Using the same bitrate for both Arbitration and Data Fields
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <main+0x130>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN; // Implies whether you want to use the standard CAN or FD CAN
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <main+0x130>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // Not using TXEvent or MessageMarker
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <main+0x130>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x130>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]


  // Configure TX Header for FDCAN2
  TxHeader2.Identifier = 0x22;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <main+0x134>)
 80007fe:	2222      	movs	r2, #34	; 0x22
 8000800:	601a      	str	r2, [r3, #0]
  TxHeader2.IdType = FDCAN_STANDARD_ID;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <main+0x134>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <main+0x134>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <main+0x134>)
 8000810:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000814:	60da      	str	r2, [r3, #12]
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <main+0x134>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0x134>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <main+0x134>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <main+0x134>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <main+0x134>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf ((char *)TxData1, "CAN1 %d", indx++); // Add data to the TX Buffer
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <main+0x138>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	4915      	ldr	r1, [pc, #84]	; (8000890 <main+0x138>)
 800083c:	600a      	str	r2, [r1, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	4914      	ldr	r1, [pc, #80]	; (8000894 <main+0x13c>)
 8000842:	4815      	ldr	r0, [pc, #84]	; (8000898 <main+0x140>)
 8000844:	f008 fe82 	bl	800954c <siprintf>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK) { // Add the message to the TX Queue and send it
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <main+0x140>)
 800084a:	490f      	ldr	r1, [pc, #60]	; (8000888 <main+0x130>)
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <main+0x128>)
 800084e:	f002 fd36 	bl	80032be <HAL_FDCAN_AddMessageToTxFifoQ>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <main+0x104>
		  Error_Handler();
 8000858:	f000 fb4a 	bl	8000ef0 <Error_Handler>
	  }

	  HAL_Delay (1000); // Delay for 1 Second
 800085c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000860:	f000 ffd2 	bl	8001808 <HAL_Delay>

	  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_BUFFER0, &RxHeader2, RxData2);
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <main+0x144>)
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <main+0x148>)
 8000868:	2100      	movs	r1, #0
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <main+0x12c>)
 800086c:	f002 fd82 	bl	8003374 <HAL_FDCAN_GetRxMessage>
	  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader2, RxData2);
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <main+0x144>)
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <main+0x148>)
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <main+0x12c>)
 8000878:	f002 fd7c 	bl	8003374 <HAL_FDCAN_GetRxMessage>
	  sprintf ((char *)TxData1, "CAN1 %d", indx++); // Add data to the TX Buffer
 800087c:	e7da      	b.n	8000834 <main+0xdc>
 800087e:	bf00      	nop
 8000880:	24000224 	.word	0x24000224
 8000884:	240002c4 	.word	0x240002c4
 8000888:	24000904 	.word	0x24000904
 800088c:	24000960 	.word	0x24000960
 8000890:	240009bc 	.word	0x240009bc
 8000894:	08009eb4 	.word	0x08009eb4
 8000898:	24000950 	.word	0x24000950
 800089c:	240009b4 	.word	0x240009b4
 80008a0:	24000984 	.word	0x24000984

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	; 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	224c      	movs	r2, #76	; 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f008 fe6a 	bl	800958c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fe64 	bl	800958c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f003 ff3f 	bl	8004748 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <SystemClock_Config+0xf8>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	4a32      	ldr	r2, [pc, #200]	; (800099c <SystemClock_Config+0xf8>)
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <SystemClock_Config+0xf8>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <SystemClock_Config+0xfc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ec:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <SystemClock_Config+0xfc>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <SystemClock_Config+0xfc>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <SystemClock_Config+0xfc>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000910:	2303      	movs	r3, #3
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091a:	2301      	movs	r3, #1
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	2302      	movs	r3, #2
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800092e:	2312      	movs	r3, #18
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000936:	2303      	movs	r3, #3
 8000938:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093e:	230c      	movs	r3, #12
 8000940:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000942:	2302      	movs	r3, #2
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000946:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800094a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4618      	mov	r0, r3
 8000952:	f003 ff43 	bl	80047dc <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800095c:	f000 fac8 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	233f      	movs	r3, #63	; 0x3f
 8000962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f004 fb83 	bl	8005090 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000990:	f000 faae 	bl	8000ef0 <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3770      	adds	r7, #112	; 0x70
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	58000400 	.word	0x58000400
 80009a0:	58024800 	.word	0x58024800

080009a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_ETH_Init+0x80>)
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <MX_ETH_Init+0x84>)
 80009ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_ETH_Init+0x88>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ETH_Init+0x88>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_ETH_Init+0x88>)
 80009bc:	22e1      	movs	r2, #225	; 0xe1
 80009be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ETH_Init+0x88>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_ETH_Init+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_ETH_Init+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_ETH_Init+0x80>)
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_ETH_Init+0x88>)
 80009d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_ETH_Init+0x80>)
 80009da:	2201      	movs	r2, #1
 80009dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_ETH_Init+0x80>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_ETH_Init+0x8c>)
 80009e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_ETH_Init+0x80>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_ETH_Init+0x90>)
 80009e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_ETH_Init+0x80>)
 80009ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_ETH_Init+0x80>)
 80009f4:	f001 fdc0 	bl	8002578 <HAL_ETH_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009fe:	f000 fa77 	bl	8000ef0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a02:	2238      	movs	r2, #56	; 0x38
 8000a04:	2100      	movs	r1, #0
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a08:	f008 fdc0 	bl	800958c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a18:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_ETH_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000174 	.word	0x24000174
 8000a28:	40028000 	.word	0x40028000
 8000a2c:	240009c0 	.word	0x240009c0
 8000a30:	240000c0 	.word	0x240000c0
 8000a34:	24000060 	.word	0x24000060
 8000a38:	2400013c 	.word	0x2400013c

08000a3c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a44:	4a3c      	ldr	r2, [pc, #240]	; (8000b38 <MX_FDCAN1_Init+0xfc>)
 8000a46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a50:	2203      	movs	r2, #3
 8000a52:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a66:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a6e:	220d      	movs	r2, #13
 8000a70:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a74:	2256      	movs	r2, #86	; 0x56
 8000a76:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a7a:	220d      	movs	r2, #13
 8000a7c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a80:	2219      	movs	r2, #25
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000abc:	2204      	movs	r2, #4
 8000abe:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000aec:	f002 f968 	bl	8002dc0 <HAL_FDCAN_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000af6:	f000 f9fb 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000b02:	2302      	movs	r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; // Send the data to FIFO 0
 8000b06:	2301      	movs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x22;
 8000b0a:	2322      	movs	r3, #34	; 0x22
 8000b0c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 8000b0e:	2311      	movs	r3, #17
 8000b10:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_FDCAN1_Init+0xf8>)
 8000b1c:	f002 fb2e 	bl	800317c <HAL_FDCAN_ConfigFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_FDCAN1_Init+0xee>
  	Error_Handler();
 8000b26:	f000 f9e3 	bl	8000ef0 <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000224 	.word	0x24000224
 8000b38:	4000a000 	.word	0x4000a000

08000b3c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b42:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b44:	4a3c      	ldr	r2, [pc, #240]	; (8000c38 <MX_FDCAN2_Init+0xfc>)
 8000b46:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b50:	2203      	movs	r2, #3
 8000b52:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000b54:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b5a:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b60:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b6e:	220d      	movs	r2, #13
 8000b70:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b74:	2256      	movs	r2, #86	; 0x56
 8000b76:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b7a:	220d      	movs	r2, #13
 8000b7c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b80:	2219      	movs	r2, #25
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 10;
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000bec:	f002 f8e8 	bl	8002dc0 <HAL_FDCAN_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000bf6:	f000 f97b 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1; // Send the Data to FIFO 1
 8000c06:	2302      	movs	r3, #2
 8000c08:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 8000c0a:	2311      	movs	r3, #17
 8000c0c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x22;
 8000c0e:	2322      	movs	r3, #34	; 0x22
 8000c10:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_FDCAN2_Init+0xf8>)
 8000c1c:	f002 faae 	bl	800317c <HAL_FDCAN_ConfigFilter>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_FDCAN2_Init+0xee>
    Error_Handler();
 8000c26:	f000 f963 	bl	8000ef0 <Error_Handler>
  }

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	240002c4 	.word	0x240002c4
 8000c38:	4000a400 	.word	0x4000a400

08000c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <MX_USART3_UART_Init+0x94>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c86:	f006 fbbb 	bl	8007400 <HAL_UART_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 f92e 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c98:	f008 f884 	bl	8008da4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca2:	f000 f925 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000caa:	f008 f8b9 	bl	8008e20 <HAL_UARTEx_SetRxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f000 f91c 	bl	8000ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_USART3_UART_Init+0x90>)
 8000cba:	f008 f83a 	bl	8008d32 <HAL_UARTEx_DisableFifoMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 f914 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	24000364 	.word	0x24000364
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce0:	2209      	movs	r2, #9
 8000ce2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1c:	f003 fbcb 	bl	80044b6 <HAL_PCD_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d26:	f000 f8e3 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240003f8 	.word	0x240003f8
 8000d34:	40080000 	.word	0x40080000

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b62      	ldr	r3, [pc, #392]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	4a60      	ldr	r2, [pc, #384]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6c:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	4a59      	ldr	r2, [pc, #356]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7c:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b4b      	ldr	r3, [pc, #300]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a42      	ldr	r2, [pc, #264]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de4:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a3b      	ldr	r2, [pc, #236]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e02:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <MX_GPIO_Init+0x1a0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e26:	482d      	ldr	r0, [pc, #180]	; (8000edc <MX_GPIO_Init+0x1a4>)
 8000e28:	f003 fb2c 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x1a8>)
 8000e34:	f003 fb26 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <MX_GPIO_Init+0x1ac>)
 8000e3e:	f003 fb21 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <MX_GPIO_Init+0x1b0>)
 8000e58:	f003 f964 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e5c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <MX_GPIO_Init+0x1a4>)
 8000e76:	f003 f955 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_GPIO_Init+0x1a8>)
 8000e94:	f003 f946 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <MX_GPIO_Init+0x1b4>)
 8000eae:	f003 f939 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_GPIO_Init+0x1ac>)
 8000eca:	f003 f92b 	bl	8004124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020400 	.word	0x58020400
 8000ee0:	58020c00 	.word	0x58020c00
 8000ee4:	58021000 	.word	0x58021000
 8000ee8:	58020800 	.word	0x58020800
 8000eec:	58021800 	.word	0x58021800

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef6:	b672      	cpsid	i
}
 8000ef8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t eMessage[16];
  sprintf((char*) &eMessage, "Error\n");
 8000efa:	463b      	mov	r3, r7
 8000efc:	4905      	ldr	r1, [pc, #20]	; (8000f14 <Error_Handler+0x24>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f008 fb24 	bl	800954c <siprintf>
  HAL_UART_Transmit(&huart3, eMessage, sizeof(eMessage), HAL_MAX_DELAY);
 8000f04:	4639      	mov	r1, r7
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	2210      	movs	r2, #16
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <Error_Handler+0x28>)
 8000f0e:	f006 fac7 	bl	80074a0 <HAL_UART_Transmit>
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <Error_Handler+0x22>
 8000f14:	08009ebc 	.word	0x08009ebc
 8000f18:	24000364 	.word	0x24000364

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_MspInit+0x30>)
 8000f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_MspInit+0x30>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	58024400 	.word	0x58024400

08000f50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_ETH_MspInit+0x184>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 80ab 	bne.w	80010ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f84:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f92:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb6:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc0:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001046:	2332      	movs	r3, #50	; 0x32
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001056:	230b      	movs	r3, #11
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <HAL_ETH_MspInit+0x18c>)
 8001062:	f003 f85f 	bl	8004124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001066:	2386      	movs	r3, #134	; 0x86
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001076:	230b      	movs	r3, #11
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <HAL_ETH_MspInit+0x190>)
 8001082:	f003 f84f 	bl	8004124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001098:	230b      	movs	r3, #11
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <HAL_ETH_MspInit+0x194>)
 80010a4:	f003 f83e 	bl	8004124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ba:	230b      	movs	r3, #11
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <HAL_ETH_MspInit+0x198>)
 80010c6:	f003 f82d 	bl	8004124 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40028000 	.word	0x40028000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58020800 	.word	0x58020800
 80010e0:	58020000 	.word	0x58020000
 80010e4:	58020400 	.word	0x58020400
 80010e8:	58021800 	.word	0x58021800

080010ec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0bc      	sub	sp, #240	; 0xf0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	22c0      	movs	r2, #192	; 0xc0
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f008 fa3d 	bl	800958c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5e      	ldr	r2, [pc, #376]	; (8001290 <HAL_FDCAN_MspInit+0x1a4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d158      	bne.n	80011ce <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800111c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800112c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fb37 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001140:	f7ff fed6 	bl	8000ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_FDCAN_MspInit+0x1a8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_FDCAN_MspInit+0x1a8>)
 800114c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800114e:	4b51      	ldr	r3, [pc, #324]	; (8001294 <HAL_FDCAN_MspInit+0x1a8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10e      	bne.n	8001174 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001158:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800115c:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001166:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001168:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b48      	ldr	r3, [pc, #288]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011aa:	2309      	movs	r3, #9
 80011ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011b4:	4619      	mov	r1, r3
 80011b6:	4839      	ldr	r0, [pc, #228]	; (800129c <HAL_FDCAN_MspInit+0x1b0>)
 80011b8:	f002 ffb4 	bl	8004124 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2013      	movs	r0, #19
 80011c2:	f000 fc40 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011c6:	2013      	movs	r0, #19
 80011c8:	f000 fc57 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80011cc:	e05c      	b.n	8001288 <HAL_FDCAN_MspInit+0x19c>
  else if(hfdcan->Instance==FDCAN2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <HAL_FDCAN_MspInit+0x1b4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d157      	bne.n	8001288 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fad9 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 80011fc:	f7ff fe78 	bl	8000ef0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_FDCAN_MspInit+0x1a8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <HAL_FDCAN_MspInit+0x1a8>)
 8001208:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_FDCAN_MspInit+0x1a8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d10e      	bne.n	8001230 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001214:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001218:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001224:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_FDCAN_MspInit+0x1ac>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001266:	2309      	movs	r3, #9
 8001268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001270:	4619      	mov	r1, r3
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <HAL_FDCAN_MspInit+0x1b8>)
 8001274:	f002 ff56 	bl	8004124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2014      	movs	r0, #20
 800127e:	f000 fbe2 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001282:	2014      	movs	r0, #20
 8001284:	f000 fbf9 	bl	8001a7a <HAL_NVIC_EnableIRQ>
}
 8001288:	bf00      	nop
 800128a:	37f0      	adds	r7, #240	; 0xf0
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	4000a000 	.word	0x4000a000
 8001294:	240009c8 	.word	0x240009c8
 8001298:	58024400 	.word	0x58024400
 800129c:	58020c00 	.word	0x58020c00
 80012a0:	4000a400 	.word	0x4000a400
 80012a4:	58020400 	.word	0x58020400

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ba      	sub	sp, #232	; 0xe8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	22c0      	movs	r2, #192	; 0xc0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f008 f95f 	bl	800958c <memset>
  if(huart->Instance==USART3)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <HAL_UART_MspInit+0xd8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d14e      	bne.n	8001376 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d8:	f04f 0202 	mov.w	r2, #2
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fa5a 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012fa:	f7ff fdf9 	bl	8000ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_UART_MspInit+0xdc>)
 8001300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_UART_MspInit+0xdc>)
 8001306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_UART_MspInit+0xdc>)
 8001310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_UART_MspInit+0xdc>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_UART_MspInit+0xdc>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0xdc>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800133a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001354:	2307      	movs	r3, #7
 8001356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800135e:	4619      	mov	r1, r3
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <HAL_UART_MspInit+0xe0>)
 8001362:	f002 fedf 	bl	8004124 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2027      	movs	r0, #39	; 0x27
 800136c:	f000 fb6b 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001370:	2027      	movs	r0, #39	; 0x27
 8001372:	f000 fb82 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	37e8      	adds	r7, #232	; 0xe8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40004800 	.word	0x40004800
 8001384:	58024400 	.word	0x58024400
 8001388:	58020c00 	.word	0x58020c00

0800138c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	; 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	; 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 f8ed 	bl	800958c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_PCD_MspInit+0xec>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d159      	bne.n	8001470 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 f9e7 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013e0:	f7ff fd86 	bl	8000ef0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013e4:	f003 f9ea 	bl	80047bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_PCD_MspInit+0xf0>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <HAL_PCD_MspInit+0xf0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_PCD_MspInit+0xf0>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001406:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800140a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001420:	230a      	movs	r3, #10
 8001422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800142a:	4619      	mov	r1, r3
 800142c:	4814      	ldr	r0, [pc, #80]	; (8001480 <HAL_PCD_MspInit+0xf4>)
 800142e:	f002 fe79 	bl	8004124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <HAL_PCD_MspInit+0xf4>)
 800144e:	f002 fe69 	bl	8004124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_PCD_MspInit+0xf0>)
 8001454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_PCD_MspInit+0xf0>)
 800145a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800145e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_PCD_MspInit+0xf0>)
 8001464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	37e8      	adds	r7, #232	; 0xe8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40080000 	.word	0x40080000
 800147c:	58024400 	.word	0x58024400
 8001480:	58020000 	.word	0x58020000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f97a 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80014de:	f002 f931 	bl	8003744 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000224 	.word	0x24000224

080014ec <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <FDCAN2_IT0_IRQHandler+0x10>)
 80014f2:	f002 f927 	bl	8003744 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	240002c4 	.word	0x240002c4

08001500 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART3_IRQHandler+0x10>)
 8001506:	f006 f859 	bl	80075bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	24000364 	.word	0x24000364

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f008 f82a 	bl	800959c <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	24080000 	.word	0x24080000
 8001574:	00000400 	.word	0x00000400
 8001578:	240009cc 	.word	0x240009cc
 800157c:	24000b20 	.word	0x24000b20

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <SystemInit+0xe4>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a36      	ldr	r2, [pc, #216]	; (8001664 <SystemInit+0xe4>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <SystemInit+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	2b06      	cmp	r3, #6
 800159e:	d807      	bhi.n	80015b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <SystemInit+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 030f 	bic.w	r3, r3, #15
 80015a8:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <SystemInit+0xe8>)
 80015aa:	f043 0307 	orr.w	r3, r3, #7
 80015ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <SystemInit+0xec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <SystemInit+0xec>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <SystemInit+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <SystemInit+0xec>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4929      	ldr	r1, [pc, #164]	; (800166c <SystemInit+0xec>)
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <SystemInit+0xf0>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <SystemInit+0xe8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <SystemInit+0xe8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 030f 	bic.w	r3, r3, #15
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <SystemInit+0xe8>)
 80015e4:	f043 0307 	orr.w	r3, r3, #7
 80015e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <SystemInit+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <SystemInit+0xec>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <SystemInit+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <SystemInit+0xec>)
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <SystemInit+0xf4>)
 8001600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <SystemInit+0xec>)
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <SystemInit+0xf8>)
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <SystemInit+0xec>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <SystemInit+0xfc>)
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <SystemInit+0xec>)
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <SystemInit+0xfc>)
 8001618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <SystemInit+0xec>)
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <SystemInit+0xfc>)
 8001624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <SystemInit+0xec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <SystemInit+0xec>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <SystemInit+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <SystemInit+0x100>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <SystemInit+0x104>)
 8001644:	4013      	ands	r3, r2
 8001646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800164a:	d202      	bcs.n	8001652 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <SystemInit+0x108>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <SystemInit+0x10c>)
 8001654:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001658:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	52002000 	.word	0x52002000
 800166c:	58024400 	.word	0x58024400
 8001670:	eaf6ed7f 	.word	0xeaf6ed7f
 8001674:	02020200 	.word	0x02020200
 8001678:	01ff0000 	.word	0x01ff0000
 800167c:	01010280 	.word	0x01010280
 8001680:	5c001000 	.word	0x5c001000
 8001684:	ffff0000 	.word	0xffff0000
 8001688:	51008108 	.word	0x51008108
 800168c:	52004000 	.word	0x52004000

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff ff74 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	; (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	; (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f007 ff73 	bl	80095a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff f849 	bl	8000758 <main>
  bx  lr
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016d0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016d4:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 80016d8:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80016dc:	24000b1c 	.word	0x24000b1c

080016e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC3_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f000 f9a0 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f0:	f003 fe84 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_Init+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	4913      	ldr	r1, [pc, #76]	; (8001750 <HAL_Init+0x6c>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_Init+0x6c>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_Init+0x70>)
 8001726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_Init+0x74>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f814 	bl	800175c <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e002      	b.n	8001744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fbed 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58024400 	.word	0x58024400
 8001750:	08009f10 	.word	0x08009f10
 8001754:	24000004 	.word	0x24000004
 8001758:	24000000 	.word	0x24000000

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_InitTick+0x60>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e021      	b.n	80017b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_InitTick+0x64>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_InitTick+0x60>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f985 	bl	8001a96 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f94f 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x68>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2400000c 	.word	0x2400000c
 80017c0:	24000000 	.word	0x24000000
 80017c4:	24000008 	.word	0x24000008

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2400000c 	.word	0x2400000c
 80017ec:	240009d0 	.word	0x240009d0

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	240009d0 	.word	0x240009d0

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2400000c 	.word	0x2400000c

08001850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetREVID+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0c1b      	lsrs	r3, r3, #16
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	5c001000 	.word	0x5c001000

08001868 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001878:	4904      	ldr	r1, [pc, #16]	; (800188c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	58000400 	.word	0x58000400

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <__NVIC_SetPriorityGrouping+0x40>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x40>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00
 80018d4:	05fa0000 	.word	0x05fa0000

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff40 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff90 	bl	8001984 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5f 	bl	8001930 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff33 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa4 	bl	80019ec <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fe9a 	bl	80017f0 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e2dc      	b.n	8002082 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d008      	beq.n	8001ae6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e2cd      	b.n	8002082 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a76      	ldr	r2, [pc, #472]	; (8001cc4 <HAL_DMA_Abort+0x214>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d04a      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <HAL_DMA_Abort+0x218>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d045      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a73      	ldr	r2, [pc, #460]	; (8001ccc <HAL_DMA_Abort+0x21c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d040      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_DMA_Abort+0x220>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d03b      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a70      	ldr	r2, [pc, #448]	; (8001cd4 <HAL_DMA_Abort+0x224>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d036      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_DMA_Abort+0x228>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6d      	ldr	r2, [pc, #436]	; (8001cdc <HAL_DMA_Abort+0x22c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d02c      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_DMA_Abort+0x230>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d027      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_DMA_Abort+0x234>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a68      	ldr	r2, [pc, #416]	; (8001ce8 <HAL_DMA_Abort+0x238>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01d      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_DMA_Abort+0x23c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d018      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_DMA_Abort+0x240>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a64      	ldr	r2, [pc, #400]	; (8001cf4 <HAL_DMA_Abort+0x244>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00e      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a62      	ldr	r2, [pc, #392]	; (8001cf8 <HAL_DMA_Abort+0x248>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d009      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a61      	ldr	r2, [pc, #388]	; (8001cfc <HAL_DMA_Abort+0x24c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d004      	beq.n	8001b86 <HAL_DMA_Abort+0xd6>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5f      	ldr	r2, [pc, #380]	; (8001d00 <HAL_DMA_Abort+0x250>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_DMA_Abort+0xda>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_DMA_Abort+0xdc>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 021e 	bic.w	r2, r2, #30
 8001b9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e00a      	b.n	8001bce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 020e 	bic.w	r2, r2, #14
 8001bc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <HAL_DMA_Abort+0x214>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d072      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <HAL_DMA_Abort+0x218>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d06d      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <HAL_DMA_Abort+0x21c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d068      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a37      	ldr	r2, [pc, #220]	; (8001cd0 <HAL_DMA_Abort+0x220>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d063      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <HAL_DMA_Abort+0x224>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d05e      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_DMA_Abort+0x228>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d059      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a33      	ldr	r2, [pc, #204]	; (8001cdc <HAL_DMA_Abort+0x22c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d054      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <HAL_DMA_Abort+0x230>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04f      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <HAL_DMA_Abort+0x234>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04a      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_DMA_Abort+0x238>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d045      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_DMA_Abort+0x23c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d040      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_DMA_Abort+0x240>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d03b      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <HAL_DMA_Abort+0x244>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d036      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a28      	ldr	r2, [pc, #160]	; (8001cf8 <HAL_DMA_Abort+0x248>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_DMA_Abort+0x24c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d02c      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_DMA_Abort+0x250>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d027      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <HAL_DMA_Abort+0x254>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_DMA_Abort+0x258>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01d      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <HAL_DMA_Abort+0x25c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d018      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_DMA_Abort+0x260>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <HAL_DMA_Abort+0x264>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00e      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_DMA_Abort+0x268>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d009      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_DMA_Abort+0x26c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_Abort+0x20e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_DMA_Abort+0x270>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d132      	bne.n	8001d24 <HAL_DMA_Abort+0x274>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e031      	b.n	8001d26 <HAL_DMA_Abort+0x276>
 8001cc2:	bf00      	nop
 8001cc4:	40020010 	.word	0x40020010
 8001cc8:	40020028 	.word	0x40020028
 8001ccc:	40020040 	.word	0x40020040
 8001cd0:	40020058 	.word	0x40020058
 8001cd4:	40020070 	.word	0x40020070
 8001cd8:	40020088 	.word	0x40020088
 8001cdc:	400200a0 	.word	0x400200a0
 8001ce0:	400200b8 	.word	0x400200b8
 8001ce4:	40020410 	.word	0x40020410
 8001ce8:	40020428 	.word	0x40020428
 8001cec:	40020440 	.word	0x40020440
 8001cf0:	40020458 	.word	0x40020458
 8001cf4:	40020470 	.word	0x40020470
 8001cf8:	40020488 	.word	0x40020488
 8001cfc:	400204a0 	.word	0x400204a0
 8001d00:	400204b8 	.word	0x400204b8
 8001d04:	58025408 	.word	0x58025408
 8001d08:	5802541c 	.word	0x5802541c
 8001d0c:	58025430 	.word	0x58025430
 8001d10:	58025444 	.word	0x58025444
 8001d14:	58025458 	.word	0x58025458
 8001d18:	5802546c 	.word	0x5802546c
 8001d1c:	58025480 	.word	0x58025480
 8001d20:	58025494 	.word	0x58025494
 8001d24:	2300      	movs	r3, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6d      	ldr	r2, [pc, #436]	; (8001ef4 <HAL_DMA_Abort+0x444>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d04a      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_DMA_Abort+0x448>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d045      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <HAL_DMA_Abort+0x44c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d040      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a68      	ldr	r2, [pc, #416]	; (8001f00 <HAL_DMA_Abort+0x450>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d03b      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_DMA_Abort+0x454>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d036      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_DMA_Abort+0x458>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d031      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a64      	ldr	r2, [pc, #400]	; (8001f0c <HAL_DMA_Abort+0x45c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d02c      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <HAL_DMA_Abort+0x460>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d027      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a61      	ldr	r2, [pc, #388]	; (8001f14 <HAL_DMA_Abort+0x464>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5f      	ldr	r2, [pc, #380]	; (8001f18 <HAL_DMA_Abort+0x468>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01d      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5e      	ldr	r2, [pc, #376]	; (8001f1c <HAL_DMA_Abort+0x46c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_DMA_Abort+0x470>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5b      	ldr	r2, [pc, #364]	; (8001f24 <HAL_DMA_Abort+0x474>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00e      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a59      	ldr	r2, [pc, #356]	; (8001f28 <HAL_DMA_Abort+0x478>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_DMA_Abort+0x47c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_DMA_Abort+0x32a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_DMA_Abort+0x480>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d108      	bne.n	8001dec <HAL_DMA_Abort+0x33c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_DMA_Abort+0x34c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dfc:	e013      	b.n	8001e26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dfe:	f7ff fcf7 	bl	80017f0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d90c      	bls.n	8001e26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2203      	movs	r2, #3
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e12d      	b.n	8002082 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1e5      	bne.n	8001dfe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_DMA_Abort+0x444>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04a      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <HAL_DMA_Abort+0x448>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d045      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <HAL_DMA_Abort+0x44c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d040      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_DMA_Abort+0x450>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d03b      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <HAL_DMA_Abort+0x454>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d036      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_DMA_Abort+0x458>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d031      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <HAL_DMA_Abort+0x45c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d02c      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <HAL_DMA_Abort+0x460>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d027      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <HAL_DMA_Abort+0x464>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d022      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <HAL_DMA_Abort+0x468>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01d      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <HAL_DMA_Abort+0x46c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_DMA_Abort+0x470>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_DMA_Abort+0x474>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_DMA_Abort+0x478>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_DMA_Abort+0x47c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Abort+0x422>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_DMA_Abort+0x480>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_DMA_Abort+0x426>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_DMA_Abort+0x428>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	223f      	movs	r2, #63	; 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	e02a      	b.n	8001f4a <HAL_DMA_Abort+0x49a>
 8001ef4:	40020010 	.word	0x40020010
 8001ef8:	40020028 	.word	0x40020028
 8001efc:	40020040 	.word	0x40020040
 8001f00:	40020058 	.word	0x40020058
 8001f04:	40020070 	.word	0x40020070
 8001f08:	40020088 	.word	0x40020088
 8001f0c:	400200a0 	.word	0x400200a0
 8001f10:	400200b8 	.word	0x400200b8
 8001f14:	40020410 	.word	0x40020410
 8001f18:	40020428 	.word	0x40020428
 8001f1c:	40020440 	.word	0x40020440
 8001f20:	40020458 	.word	0x40020458
 8001f24:	40020470 	.word	0x40020470
 8001f28:	40020488 	.word	0x40020488
 8001f2c:	400204a0 	.word	0x400204a0
 8001f30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2201      	movs	r2, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4f      	ldr	r2, [pc, #316]	; (800208c <HAL_DMA_Abort+0x5dc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d072      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4d      	ldr	r2, [pc, #308]	; (8002090 <HAL_DMA_Abort+0x5e0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d06d      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <HAL_DMA_Abort+0x5e4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d068      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	; (8002098 <HAL_DMA_Abort+0x5e8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d063      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a49      	ldr	r2, [pc, #292]	; (800209c <HAL_DMA_Abort+0x5ec>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d05e      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a47      	ldr	r2, [pc, #284]	; (80020a0 <HAL_DMA_Abort+0x5f0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d059      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_DMA_Abort+0x5f4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d054      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a44      	ldr	r2, [pc, #272]	; (80020a8 <HAL_DMA_Abort+0x5f8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04f      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a43      	ldr	r2, [pc, #268]	; (80020ac <HAL_DMA_Abort+0x5fc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04a      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <HAL_DMA_Abort+0x600>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d045      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a40      	ldr	r2, [pc, #256]	; (80020b4 <HAL_DMA_Abort+0x604>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d040      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <HAL_DMA_Abort+0x608>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d03b      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <HAL_DMA_Abort+0x60c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d036      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a3b      	ldr	r2, [pc, #236]	; (80020c0 <HAL_DMA_Abort+0x610>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d031      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a3a      	ldr	r2, [pc, #232]	; (80020c4 <HAL_DMA_Abort+0x614>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d02c      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <HAL_DMA_Abort+0x618>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d027      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a37      	ldr	r2, [pc, #220]	; (80020cc <HAL_DMA_Abort+0x61c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d022      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a35      	ldr	r2, [pc, #212]	; (80020d0 <HAL_DMA_Abort+0x620>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <HAL_DMA_Abort+0x624>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a32      	ldr	r2, [pc, #200]	; (80020d8 <HAL_DMA_Abort+0x628>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a31      	ldr	r2, [pc, #196]	; (80020dc <HAL_DMA_Abort+0x62c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2f      	ldr	r2, [pc, #188]	; (80020e0 <HAL_DMA_Abort+0x630>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_DMA_Abort+0x634>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_DMA_Abort+0x58a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <HAL_DMA_Abort+0x638>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_DMA_Abort+0x58e>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_DMA_Abort+0x590>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800204c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002064:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800206e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020010 	.word	0x40020010
 8002090:	40020028 	.word	0x40020028
 8002094:	40020040 	.word	0x40020040
 8002098:	40020058 	.word	0x40020058
 800209c:	40020070 	.word	0x40020070
 80020a0:	40020088 	.word	0x40020088
 80020a4:	400200a0 	.word	0x400200a0
 80020a8:	400200b8 	.word	0x400200b8
 80020ac:	40020410 	.word	0x40020410
 80020b0:	40020428 	.word	0x40020428
 80020b4:	40020440 	.word	0x40020440
 80020b8:	40020458 	.word	0x40020458
 80020bc:	40020470 	.word	0x40020470
 80020c0:	40020488 	.word	0x40020488
 80020c4:	400204a0 	.word	0x400204a0
 80020c8:	400204b8 	.word	0x400204b8
 80020cc:	58025408 	.word	0x58025408
 80020d0:	5802541c 	.word	0x5802541c
 80020d4:	58025430 	.word	0x58025430
 80020d8:	58025444 	.word	0x58025444
 80020dc:	58025458 	.word	0x58025458
 80020e0:	5802546c 	.word	0x5802546c
 80020e4:	58025480 	.word	0x58025480
 80020e8:	58025494 	.word	0x58025494

080020ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e237      	b.n	800256e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d004      	beq.n	8002114 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e22c      	b.n	800256e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5c      	ldr	r2, [pc, #368]	; (800228c <HAL_DMA_Abort_IT+0x1a0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d04a      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_DMA_Abort_IT+0x1a4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d045      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a59      	ldr	r2, [pc, #356]	; (8002294 <HAL_DMA_Abort_IT+0x1a8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d040      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_DMA_Abort_IT+0x1ac>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d03b      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_DMA_Abort_IT+0x1b0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d036      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_DMA_Abort_IT+0x1b4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_DMA_Abort_IT+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02c      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d027      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_DMA_Abort_IT+0x1c0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d022      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01d      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_DMA_Abort_IT+0x1c8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d018      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_DMA_Abort_IT+0x1cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_DMA_Abort_IT+0x1d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00e      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_DMA_Abort_IT+0x1d4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_DMA_Abort_IT+0x1d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a46      	ldr	r2, [pc, #280]	; (80022c8 <HAL_DMA_Abort_IT+0x1dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_DMA_Abort_IT+0xcc>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_DMA_Abort_IT+0xce>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8086 	beq.w	80022cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2204      	movs	r2, #4
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <HAL_DMA_Abort_IT+0x1a0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d04a      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <HAL_DMA_Abort_IT+0x1a4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d045      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <HAL_DMA_Abort_IT+0x1a8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d040      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <HAL_DMA_Abort_IT+0x1ac>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d03b      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_DMA_Abort_IT+0x1b0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d036      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_DMA_Abort_IT+0x1b4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d031      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_DMA_Abort_IT+0x1b8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02c      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d027      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_DMA_Abort_IT+0x1c0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d022      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d01d      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <HAL_DMA_Abort_IT+0x1c8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d018      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_DMA_Abort_IT+0x1cc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_DMA_Abort_IT+0x1d0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_DMA_Abort_IT+0x1d4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_DMA_Abort_IT+0x1d8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_DMA_Abort_IT+0x17c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_DMA_Abort_IT+0x1dc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <HAL_DMA_Abort_IT+0x18e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e178      	b.n	800256c <HAL_DMA_Abort_IT+0x480>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e16f      	b.n	800256c <HAL_DMA_Abort_IT+0x480>
 800228c:	40020010 	.word	0x40020010
 8002290:	40020028 	.word	0x40020028
 8002294:	40020040 	.word	0x40020040
 8002298:	40020058 	.word	0x40020058
 800229c:	40020070 	.word	0x40020070
 80022a0:	40020088 	.word	0x40020088
 80022a4:	400200a0 	.word	0x400200a0
 80022a8:	400200b8 	.word	0x400200b8
 80022ac:	40020410 	.word	0x40020410
 80022b0:	40020428 	.word	0x40020428
 80022b4:	40020440 	.word	0x40020440
 80022b8:	40020458 	.word	0x40020458
 80022bc:	40020470 	.word	0x40020470
 80022c0:	40020488 	.word	0x40020488
 80022c4:	400204a0 	.word	0x400204a0
 80022c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 020e 	bic.w	r2, r2, #14
 80022da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6c      	ldr	r2, [pc, #432]	; (8002494 <HAL_DMA_Abort_IT+0x3a8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d04a      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <HAL_DMA_Abort_IT+0x3ac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d045      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_DMA_Abort_IT+0x3b0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d040      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a68      	ldr	r2, [pc, #416]	; (80024a0 <HAL_DMA_Abort_IT+0x3b4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d03b      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a66      	ldr	r2, [pc, #408]	; (80024a4 <HAL_DMA_Abort_IT+0x3b8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d036      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a65      	ldr	r2, [pc, #404]	; (80024a8 <HAL_DMA_Abort_IT+0x3bc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d031      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a63      	ldr	r2, [pc, #396]	; (80024ac <HAL_DMA_Abort_IT+0x3c0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d02c      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a62      	ldr	r2, [pc, #392]	; (80024b0 <HAL_DMA_Abort_IT+0x3c4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d027      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_DMA_Abort_IT+0x3c8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d022      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <HAL_DMA_Abort_IT+0x3cc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d01d      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_DMA_Abort_IT+0x3d0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d018      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5c      	ldr	r2, [pc, #368]	; (80024c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_DMA_Abort_IT+0x3d8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00e      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_DMA_Abort_IT+0x3e0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_DMA_Abort_IT+0x290>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_DMA_Abort_IT+0x3e4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d108      	bne.n	800238e <HAL_DMA_Abort_IT+0x2a2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e007      	b.n	800239e <HAL_DMA_Abort_IT+0x2b2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3c      	ldr	r2, [pc, #240]	; (8002494 <HAL_DMA_Abort_IT+0x3a8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d072      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <HAL_DMA_Abort_IT+0x3ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d06d      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a39      	ldr	r2, [pc, #228]	; (800249c <HAL_DMA_Abort_IT+0x3b0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d068      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a37      	ldr	r2, [pc, #220]	; (80024a0 <HAL_DMA_Abort_IT+0x3b4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d063      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a36      	ldr	r2, [pc, #216]	; (80024a4 <HAL_DMA_Abort_IT+0x3b8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d05e      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_DMA_Abort_IT+0x3bc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d059      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a33      	ldr	r2, [pc, #204]	; (80024ac <HAL_DMA_Abort_IT+0x3c0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d054      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a31      	ldr	r2, [pc, #196]	; (80024b0 <HAL_DMA_Abort_IT+0x3c4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d04f      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a30      	ldr	r2, [pc, #192]	; (80024b4 <HAL_DMA_Abort_IT+0x3c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04a      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <HAL_DMA_Abort_IT+0x3cc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d045      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <HAL_DMA_Abort_IT+0x3d0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d040      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d03b      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_DMA_Abort_IT+0x3d8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d036      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_DMA_Abort_IT+0x3e0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d02c      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_DMA_Abort_IT+0x3e4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d027      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_DMA_Abort_IT+0x3e8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_DMA_Abort_IT+0x3ec>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01d      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_DMA_Abort_IT+0x3f0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d018      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <HAL_DMA_Abort_IT+0x3f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_DMA_Abort_IT+0x3f8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_DMA_Abort_IT+0x3fc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_DMA_Abort_IT+0x400>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_DMA_Abort_IT+0x3a2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_DMA_Abort_IT+0x404>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d132      	bne.n	80024f4 <HAL_DMA_Abort_IT+0x408>
 800248e:	2301      	movs	r3, #1
 8002490:	e031      	b.n	80024f6 <HAL_DMA_Abort_IT+0x40a>
 8002492:	bf00      	nop
 8002494:	40020010 	.word	0x40020010
 8002498:	40020028 	.word	0x40020028
 800249c:	40020040 	.word	0x40020040
 80024a0:	40020058 	.word	0x40020058
 80024a4:	40020070 	.word	0x40020070
 80024a8:	40020088 	.word	0x40020088
 80024ac:	400200a0 	.word	0x400200a0
 80024b0:	400200b8 	.word	0x400200b8
 80024b4:	40020410 	.word	0x40020410
 80024b8:	40020428 	.word	0x40020428
 80024bc:	40020440 	.word	0x40020440
 80024c0:	40020458 	.word	0x40020458
 80024c4:	40020470 	.word	0x40020470
 80024c8:	40020488 	.word	0x40020488
 80024cc:	400204a0 	.word	0x400204a0
 80024d0:	400204b8 	.word	0x400204b8
 80024d4:	58025408 	.word	0x58025408
 80024d8:	5802541c 	.word	0x5802541c
 80024dc:	58025430 	.word	0x58025430
 80024e0:	58025444 	.word	0x58025444
 80024e4:	58025458 	.word	0x58025458
 80024e8:	5802546c 	.word	0x5802546c
 80024ec:	58025480 	.word	0x58025480
 80024f0:	58025494 	.word	0x58025494
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d028      	beq.n	800254c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002508:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002528:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002540:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800254a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0cf      	b.n	800272a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2223      	movs	r2, #35	; 0x23
 8002598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe fcd7 	bl	8000f50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_ETH_Init+0x1bc>)
 80025a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025a8:	4a62      	ldr	r2, [pc, #392]	; (8002734 <HAL_ETH_Init+0x1bc>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025b2:	4b60      	ldr	r3, [pc, #384]	; (8002734 <HAL_ETH_Init+0x1bc>)
 80025b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7a1b      	ldrb	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff f94d 	bl	8001868 <HAL_SYSCFG_ETHInterfaceSelect>
 80025ce:	e003      	b.n	80025d8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80025d0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80025d4:	f7ff f948 	bl	8001868 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_ETH_Init+0x1c0>)
 80025da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f4:	f7ff f8fc 	bl	80017f0 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80025fa:	e011      	b.n	8002620 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025fc:	f7ff f8f8 	bl	80017f0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800260a:	d909      	bls.n	8002620 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2204      	movs	r2, #4
 8002610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	22e0      	movs	r2, #224	; 0xe0
 8002618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e084      	b.n	800272a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e4      	bne.n	80025fc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f886 	bl	8002744 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002638:	f003 f85a 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 800263c:	4603      	mov	r3, r0
 800263e:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_ETH_Init+0x1c4>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9a      	lsrs	r2, r3, #18
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3a01      	subs	r2, #1
 800264c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fa71 	bl	8002b38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002662:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800266e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002672:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22e0      	movs	r2, #224	; 0xe0
 800268e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e049      	b.n	800272a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_ETH_Init+0x1c8>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6952      	ldr	r2, [r2, #20]
 80026aa:	0051      	lsls	r1, r2, #1
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	430b      	orrs	r3, r1
 80026b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fad9 	bl	8002c72 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fb1f 	bl	8002d04 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	3305      	adds	r3, #5
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	3303      	adds	r3, #3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	061a      	lsls	r2, r3, #24
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	3302      	adds	r3, #2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002704:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002712:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002714:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2210      	movs	r2, #16
 8002724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400
 8002738:	58000400 	.word	0x58000400
 800273c:	431bde83 	.word	0x431bde83
 8002740:	ffff8001 	.word	0xffff8001

08002744 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002754:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800275c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800275e:	f002 ffc7 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8002762:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d908      	bls.n	800277e <HAL_ETH_SetMDIOClockRange+0x3a>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d804      	bhi.n	800277e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e027      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d908      	bls.n	8002798 <HAL_ETH_SetMDIOClockRange+0x54>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d204      	bcs.n	8002798 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e01a      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d303      	bcc.n	80027a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d911      	bls.n	80027cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d908      	bls.n	80027c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d804      	bhi.n	80027c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e005      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e000      	b.n	80027ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	01312cff 	.word	0x01312cff
 80027e4:	02160ebf 	.word	0x02160ebf
 80027e8:	03938700 	.word	0x03938700
 80027ec:	05f5e0ff 	.word	0x05f5e0ff
 80027f0:	08f0d17f 	.word	0x08f0d17f

080027f4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800280e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
 8002814:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	7b5b      	ldrb	r3, [r3, #13]
 800281c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800281e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	7b9b      	ldrb	r3, [r3, #14]
 8002824:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7bdb      	ldrb	r3, [r3, #15]
 800282c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800282e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	7c12      	ldrb	r2, [r2, #16]
 8002834:	2a00      	cmp	r2, #0
 8002836:	d102      	bne.n	800283e <ETH_SetMACConfig+0x4a>
 8002838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800283c:	e000      	b.n	8002840 <ETH_SetMACConfig+0x4c>
 800283e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002840:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	7c52      	ldrb	r2, [r2, #17]
 8002846:	2a00      	cmp	r2, #0
 8002848:	d102      	bne.n	8002850 <ETH_SetMACConfig+0x5c>
 800284a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800284e:	e000      	b.n	8002852 <ETH_SetMACConfig+0x5e>
 8002850:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7c9b      	ldrb	r3, [r3, #18]
 8002858:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800285a:	431a      	orrs	r2, r3
               macconf->Speed |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002860:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	7f1b      	ldrb	r3, [r3, #28]
 800286c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800286e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	7f5b      	ldrb	r3, [r3, #29]
 8002874:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002876:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	7f92      	ldrb	r2, [r2, #30]
 800287c:	2a00      	cmp	r2, #0
 800287e:	d102      	bne.n	8002886 <ETH_SetMACConfig+0x92>
 8002880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002884:	e000      	b.n	8002888 <ETH_SetMACConfig+0x94>
 8002886:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002888:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7fdb      	ldrb	r3, [r3, #31]
 800288e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002890:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002898:	2a00      	cmp	r2, #0
 800289a:	d102      	bne.n	80028a2 <ETH_SetMACConfig+0xae>
 800289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a0:	e000      	b.n	80028a4 <ETH_SetMACConfig+0xb0>
 80028a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028a4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80028aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028b2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80028b4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <ETH_SetMACConfig+0x22c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028f2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80028fc:	2a00      	cmp	r2, #0
 80028fe:	d102      	bne.n	8002906 <ETH_SetMACConfig+0x112>
 8002900:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002904:	e000      	b.n	8002908 <ETH_SetMACConfig+0x114>
 8002906:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002908:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <ETH_SetMACConfig+0x230>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	430b      	orrs	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <ETH_SetMACConfig+0x234>)
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	430b      	orrs	r3, r1
 8002948:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002950:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002956:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800295e:	2a00      	cmp	r2, #0
 8002960:	d101      	bne.n	8002966 <ETH_SetMACConfig+0x172>
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	e000      	b.n	8002968 <ETH_SetMACConfig+0x174>
 8002966:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002968:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800297a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	430b      	orrs	r3, r1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002990:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002998:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f023 0103 	bic.w	r1, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80029be:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d101      	bne.n	80029e2 <ETH_SetMACConfig+0x1ee>
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	e000      	b.n	80029e4 <ETH_SetMACConfig+0x1f0>
 80029e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80029e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80029f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	00048083 	.word	0x00048083
 8002a24:	c0f88000 	.word	0xc0f88000
 8002a28:	fffffef0 	.word	0xfffffef0

08002a2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <ETH_SetDMAConfig+0xf8>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6811      	ldr	r1, [r2, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a52:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	791b      	ldrb	r3, [r3, #4]
 8002a58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7b1b      	ldrb	r3, [r3, #12]
 8002a64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <ETH_SetDMAConfig+0xfc>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a84:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7b5b      	ldrb	r3, [r3, #13]
 8002a8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <ETH_SetDMAConfig+0x100>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ab0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7d1b      	ldrb	r3, [r3, #20]
 8002abc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002abe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	7f5b      	ldrb	r3, [r3, #29]
 8002ac4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <ETH_SetDMAConfig+0x104>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	7f1b      	ldrb	r3, [r3, #28]
 8002aee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b00:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <ETH_SetDMAConfig+0x108>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b14:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	ffff87fd 	.word	0xffff87fd
 8002b28:	ffff2ffe 	.word	0xffff2ffe
 8002b2c:	fffec000 	.word	0xfffec000
 8002b30:	ffc0efef 	.word	0xffc0efef
 8002b34:	7fc0ffff 	.word	0x7fc0ffff

08002b38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0a4      	sub	sp, #144	; 0x90
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b46:	2300      	movs	r3, #0
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002b94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002be2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c12:	2300      	movs	r3, #0
 8002c14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fde6 	bl	80027f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff fee1 	bl	8002a2c <ETH_SetDMAConfig>
}
 8002c6a:	bf00      	nop
 8002c6c:	3790      	adds	r7, #144	; 0x90
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e01d      	b.n	8002cbc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68d9      	ldr	r1, [r3, #12]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	3206      	adds	r2, #6
 8002cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d9de      	bls.n	8002c80 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e023      	b.n	8002d5a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6919      	ldr	r1, [r3, #16]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	3212      	adds	r2, #18
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d9d8      	bls.n	8002d12 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d86:	461a      	mov	r2, r3
 8002d88:	2303      	movs	r3, #3
 8002d8a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b098      	sub	sp, #96	; 0x60
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002dc8:	4a84      	ldr	r2, [pc, #528]	; (8002fdc <HAL_FDCAN_Init+0x21c>)
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	4611      	mov	r1, r2
 8002dd0:	224c      	movs	r2, #76	; 0x4c
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f006 fc0e 	bl	80095f4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e1c6      	b.n	8003170 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7e      	ldr	r2, [pc, #504]	; (8002fe0 <HAL_FDCAN_Init+0x220>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d106      	bne.n	8002dfa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002df4:	461a      	mov	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe f96c 	bl	80010ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0210 	bic.w	r2, r2, #16
 8002e22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e24:	f7fe fce4 	bl	80017f0 <HAL_GetTick>
 8002e28:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e2a:	e014      	b.n	8002e56 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e2c:	f7fe fce0 	bl	80017f0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b0a      	cmp	r3, #10
 8002e38:	d90d      	bls.n	8002e56 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e18c      	b.n	8003170 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d0e3      	beq.n	8002e2c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e74:	f7fe fcbc 	bl	80017f0 <HAL_GetTick>
 8002e78:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e7a:	e014      	b.n	8002ea6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e7c:	f7fe fcb8 	bl	80017f0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b0a      	cmp	r3, #10
 8002e88:	d90d      	bls.n	8002ea6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e164      	b.n	8003170 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0e3      	beq.n	8002e7c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0202 	orr.w	r2, r2, #2
 8002ec2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c1b      	ldrb	r3, [r3, #16]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	e007      	b.n	8002eee <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7c5b      	ldrb	r3, [r3, #17]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f04:	619a      	str	r2, [r3, #24]
 8002f06:	e007      	b.n	8002f18 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f16:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7c9b      	ldrb	r3, [r3, #18]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f2e:	619a      	str	r2, [r3, #24]
 8002f30:	e007      	b.n	8002f42 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f40:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002f66:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d108      	bne.n	8002f92 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0204 	orr.w	r2, r2, #4
 8002f8e:	619a      	str	r2, [r3, #24]
 8002f90:	e030      	b.n	8002ff4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02c      	beq.n	8002ff4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d020      	beq.n	8002fe4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fb0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0210 	orr.w	r2, r2, #16
 8002fc0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d114      	bne.n	8002ff4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	619a      	str	r2, [r3, #24]
 8002fda:	e00b      	b.n	8002ff4 <HAL_FDCAN_Init+0x234>
 8002fdc:	08009ec4 	.word	0x08009ec4
 8002fe0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	3b01      	subs	r3, #1
 8003002:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003004:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800300c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	3b01      	subs	r3, #1
 8003016:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800301c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800301e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003028:	d115      	bne.n	8003056 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	3b01      	subs	r3, #1
 8003036:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003038:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	3b01      	subs	r3, #1
 8003040:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003042:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	3b01      	subs	r3, #1
 800304c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003052:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003054:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	4413      	add	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d011      	beq.n	80030a6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800308a:	f023 0107 	bic.w	r1, r3, #7
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3360      	adds	r3, #96	; 0x60
 8003096:	443b      	add	r3, r7
 8003098:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d011      	beq.n	80030d2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030b6:	f023 0107 	bic.w	r1, r3, #7
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	443b      	add	r3, r7
 80030c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	3360      	adds	r3, #96	; 0x60
 80030ee:	443b      	add	r3, r7
 80030f0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80030f4:	011a      	lsls	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003110:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	3360      	adds	r3, #96	; 0x60
 800311c:	443b      	add	r3, r7
 800311e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_FDCAN_Init+0x3b8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d107      	bne.n	8003148 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f022 0203 	bic.w	r2, r2, #3
 8003146:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fddb 	bl	8003d1c <FDCAN_CalcultateRamBlockAddresses>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800316c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003170:	4618      	mov	r0, r3
 8003172:	3760      	adds	r7, #96	; 0x60
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	4000a000 	.word	0x4000a000

0800317c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800318c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d002      	beq.n	800319a <HAL_FDCAN_ConfigFilter+0x1e>
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d157      	bne.n	800324a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d12b      	bne.n	80031fa <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b07      	cmp	r3, #7
 80031a8:	d10d      	bne.n	80031c6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80031b6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031bc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80031be:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e00e      	b.n	80031e4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031d2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80031da:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e025      	b.n	8003246 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	075a      	lsls	r2, r3, #29
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b07      	cmp	r3, #7
 800320e:	d103      	bne.n	8003218 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e006      	b.n	8003226 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	079a      	lsls	r2, r3, #30
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3304      	adds	r3, #4
 800323e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e008      	b.n	800325c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003250:	f043 0202 	orr.w	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d111      	bne.n	80032a0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e008      	b.n	80032b2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d141      	bne.n	800335a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032de:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e038      	b.n	800336c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003310:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e026      	b.n	800336c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003326:	0c1b      	lsrs	r3, r3, #16
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fe77 	bl	8004028 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800334a:	2201      	movs	r2, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e008      	b.n	800336c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003360:	f043 0208 	orr.w	r2, r3, #8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800338c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800338e:	7efb      	ldrb	r3, [r7, #27]
 8003390:	2b02      	cmp	r3, #2
 8003392:	f040 814b 	bne.w	800362c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d14d      	bne.n	8003438 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e13e      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e12c      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033ec:	0e1b      	lsrs	r3, r3, #24
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10b      	bne.n	800340e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033fe:	0fdb      	lsrs	r3, r3, #31
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003408:	d101      	bne.n	800340e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800340a:	2301      	movs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	69f9      	ldr	r1, [r7, #28]
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e069      	b.n	800350c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b41      	cmp	r3, #65	; 0x41
 800343c:	d14d      	bne.n	80034da <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003446:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e0ed      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800346a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003478:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0db      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800348e:	0e1b      	lsrs	r3, r3, #24
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10b      	bne.n	80034b0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034a0:	0fdb      	lsrs	r3, r3, #31
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034aa:	d101      	bne.n	80034b0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	69f9      	ldr	r1, [r7, #28]
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	e018      	b.n	800350c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d309      	bcc.n	80034f8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0a2      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0c9b      	lsrs	r3, r3, #18
 8003526:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e005      	b.n	800353c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	3304      	adds	r3, #4
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0e1b      	lsrs	r3, r3, #24
 800358e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0fda      	lsrs	r2, r3, #31
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	3304      	adds	r3, #4
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
 80035ae:	e00a      	b.n	80035c6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	441a      	add	r2, r3
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	440b      	add	r3, r1
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	3301      	adds	r3, #1
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d3eb      	bcc.n	80035b0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d105      	bne.n	80035ea <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80035e8:	e01e      	b.n	8003628 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b41      	cmp	r3, #65	; 0x41
 80035ee:	d105      	bne.n	80035fc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80035fa:	e015      	b.n	8003628 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b1f      	cmp	r3, #31
 8003600:	d808      	bhi.n	8003614 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	fa01 f202 	lsl.w	r2, r1, r2
 800360e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003612:	e009      	b.n	8003628 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 021f 	and.w	r2, r3, #31
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e008      	b.n	800363e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003632:	f043 0208 	orr.w	r2, r3, #8
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	372c      	adds	r7, #44	; 0x2c
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	08009f20 	.word	0x08009f20

08003650 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003662:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d002      	beq.n	8003670 <HAL_FDCAN_ActivateNotification+0x20>
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d155      	bne.n	800371c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4013      	ands	r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	65da      	str	r2, [r3, #92]	; 0x5c
 800368e:	e014      	b.n	80036ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d108      	bne.n	80036b2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0202 	orr.w	r2, r2, #2
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b0:	e003      	b.n	80036ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2203      	movs	r2, #3
 80036b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_FDCAN_ActivateNotification+0xec>)
 8003700:	4013      	ands	r3, r2
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	430b      	orrs	r3, r1
 8003708:	6553      	str	r3, [r2, #84]	; 0x54
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_FDCAN_ActivateNotification+0xf0>)
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	0f9b      	lsrs	r3, r3, #30
 8003712:	490b      	ldr	r1, [pc, #44]	; (8003740 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e008      	b.n	800372e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	3fcfffff 	.word	0x3fcfffff
 8003740:	4000a800 	.word	0x4000a800

08003744 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b096      	sub	sp, #88	; 0x58
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800374c:	4b95      	ldr	r3, [pc, #596]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	079b      	lsls	r3, r3, #30
 8003752:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003754:	4b93      	ldr	r3, [pc, #588]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	079b      	lsls	r3, r3, #30
 800375a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800375c:	4013      	ands	r3, r2
 800375e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800376a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003774:	4013      	ands	r3, r2
 8003776:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800378c:	4013      	ands	r3, r2
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037a4:	4013      	ands	r3, r2
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80037b2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037bc:	4013      	ands	r3, r2
 80037be:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d4:	4013      	ands	r3, r2
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00f      	beq.n	8003812 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003804:	651a      	str	r2, [r3, #80]	; 0x50
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa39 	bl	8003c84 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01c      	beq.n	8003856 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d017      	beq.n	8003856 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800383a:	4013      	ands	r3, r2
 800383c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003846:	651a      	str	r2, [r3, #80]	; 0x50
 8003848:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800384e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f9ee 	bl	8003c32 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_FDCAN_IRQHandler+0x264>)
 8003864:	400b      	ands	r3, r1
 8003866:	6513      	str	r3, [r2, #80]	; 0x50
 8003868:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 800386a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386c:	0f9b      	lsrs	r3, r3, #30
 800386e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9b2 	bl	8003bdc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_FDCAN_IRQHandler+0x264>)
 8003886:	400b      	ands	r3, r1
 8003888:	6513      	str	r3, [r2, #80]	; 0x50
 800388a:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 800388c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388e:	0f9b      	lsrs	r3, r3, #30
 8003890:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003892:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f9ac 	bl	8003bf2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800389a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00d      	beq.n	80038bc <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038a6:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_FDCAN_IRQHandler+0x264>)
 80038a8:	400b      	ands	r3, r1
 80038aa:	6513      	str	r3, [r2, #80]	; 0x50
 80038ac:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	0f9b      	lsrs	r3, r3, #30
 80038b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80038b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fc fee0 	bl	800067c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80038bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_FDCAN_IRQHandler+0x264>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	6513      	str	r3, [r2, #80]	; 0x50
 80038ce:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 80038d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d2:	0f9b      	lsrs	r3, r3, #30
 80038d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80038d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fc fef7 	bl	80006cc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80038de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fa:	651a      	str	r2, [r3, #80]	; 0x50
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f980 	bl	8003c08 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01c      	beq.n	800394c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	4013      	ands	r3, r2
 8003932:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800393c:	651a      	str	r2, [r3, #80]	; 0x50
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f968 	bl	8003c1c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00f      	beq.n	8003976 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003968:	651a      	str	r2, [r3, #80]	; 0x50
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f969 	bl	8003c48 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d010      	beq.n	80039ac <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003992:	651a      	str	r2, [r3, #80]	; 0x50
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_FDCAN_IRQHandler+0x260>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f95e 	bl	8003c5c <HAL_FDCAN_TimestampWraparoundCallback>
 80039a0:	e004      	b.n	80039ac <HAL_FDCAN_IRQHandler+0x268>
 80039a2:	bf00      	nop
 80039a4:	4000a800 	.word	0x4000a800
 80039a8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00f      	beq.n	80039d6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_FDCAN_IRQHandler+0x48c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f94d 	bl	8003c70 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80039d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d014      	beq.n	8003a0a <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80039e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00f      	beq.n	8003a0a <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50
 80039f4:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_FDCAN_IRQHandler+0x48c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a16:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_FDCAN_IRQHandler+0x490>)
 8003a18:	400b      	ands	r3, r1
 8003a1a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a1c:	4a6c      	ldr	r2, [pc, #432]	; (8003bd0 <HAL_FDCAN_IRQHandler+0x48c>)
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a20:	0f9b      	lsrs	r3, r3, #30
 8003a22:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f940 	bl	8003cac <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_FDCAN_IRQHandler+0x490>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a3e:	4a64      	ldr	r2, [pc, #400]	; (8003bd0 <HAL_FDCAN_IRQHandler+0x48c>)
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	0f9b      	lsrs	r3, r3, #30
 8003a44:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a5f      	ldr	r2, [pc, #380]	; (8003bd8 <HAL_FDCAN_IRQHandler+0x494>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	f040 80aa 	bne.w	8003bb6 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a2 	beq.w	8003bb6 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a86:	4013      	ands	r3, r2
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003ac4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003adc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b06:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8d9 	bl	8003cc2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8d9 	bl	8003cd8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d019      	beq.n	8003b64 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b50:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6939      	ldr	r1, [r7, #16]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8c5 	bl	8003cee <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8c6 	bl	8003d06 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f869 	bl	8003c98 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3758      	adds	r7, #88	; 0x58
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	4000a800 	.word	0x4000a800
 8003bd4:	3fcfffff 	.word	0x3fcfffff
 8003bd8:	4000a000 	.word	0x4000a000

08003bdc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d32:	4ba7      	ldr	r3, [pc, #668]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	0091      	lsls	r1, r2, #2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	041a      	lsls	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	4413      	add	r3, r2
 8003d68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d72:	4b97      	ldr	r3, [pc, #604]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	0091      	lsls	r1, r2, #2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	041a      	lsls	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003db4:	4b86      	ldr	r3, [pc, #536]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	0091      	lsls	r1, r2, #2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	041a      	lsls	r2, r3, #16
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4413      	add	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dfc:	4b74      	ldr	r3, [pc, #464]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	0091      	lsls	r1, r2, #2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e16:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	041a      	lsls	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4413      	add	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e44:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	0091      	lsls	r1, r2, #2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4413      	add	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003e70:	4b57      	ldr	r3, [pc, #348]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	0091      	lsls	r1, r2, #2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e8a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	041a      	lsls	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003eb2:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0091      	lsls	r1, r2, #2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ecc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ee8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	061a      	lsls	r2, r3, #24
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f00:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003f02:	4413      	add	r3, r2
 8003f04:	009a      	lsls	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d915      	bls.n	8003ff8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003fcc:	e006      	b.n	8003fdc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003fce:	bf00      	nop
 8003fd0:	ffff0003 	.word	0xffff0003
 8003fd4:	10002b00 	.word	0x10002b00
 8003fd8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e010      	b.n	800401a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	e005      	b.n	800400c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3304      	adds	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	429a      	cmp	r2, r3
 8004016:	d3f3      	bcc.n	8004000 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004046:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800404e:	4313      	orrs	r3, r2
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e00a      	b.n	800406a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800405c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004062:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004068:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004074:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800407a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004080:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004094:	6839      	ldr	r1, [r7, #0]
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	3304      	adds	r3, #4
 80040aa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	3304      	adds	r3, #4
 80040b6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e020      	b.n	8004100 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3303      	adds	r3, #3
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3302      	adds	r3, #2
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	440b      	add	r3, r1
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040d6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	440b      	add	r3, r1
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80040e4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	440a      	add	r2, r1
 80040ec:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80040ee:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3304      	adds	r3, #4
 80040f8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3304      	adds	r3, #4
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	4a06      	ldr	r2, [pc, #24]	; (8004120 <FDCAN_CopyMessageToRAM+0xf8>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
 800410a:	461a      	mov	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4293      	cmp	r3, r2
 8004110:	d3d5      	bcc.n	80040be <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3724      	adds	r7, #36	; 0x24
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	08009f20 	.word	0x08009f20

08004124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004124:	b480      	push	{r7}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004132:	4b89      	ldr	r3, [pc, #548]	; (8004358 <HAL_GPIO_Init+0x234>)
 8004134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004136:	e194      	b.n	8004462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa01 f303 	lsl.w	r3, r1, r3
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8186 	beq.w	800445c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d005      	beq.n	8004168 <HAL_GPIO_Init+0x44>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d130      	bne.n	80041ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4313      	orrs	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800419e:	2201      	movs	r2, #1
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0201 	and.w	r2, r3, #1
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d017      	beq.n	8004206 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d123      	bne.n	800425a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	08da      	lsrs	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3208      	adds	r2, #8
 800421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	220f      	movs	r2, #15
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	08da      	lsrs	r2, r3, #3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3208      	adds	r2, #8
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	2203      	movs	r2, #3
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0203 	and.w	r2, r3, #3
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80e0 	beq.w	800445c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800429c:	4b2f      	ldr	r3, [pc, #188]	; (800435c <HAL_GPIO_Init+0x238>)
 800429e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042a2:	4a2e      	ldr	r2, [pc, #184]	; (800435c <HAL_GPIO_Init+0x238>)
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042ac:	4b2b      	ldr	r3, [pc, #172]	; (800435c <HAL_GPIO_Init+0x238>)
 80042ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <HAL_GPIO_Init+0x23c>)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	3302      	adds	r3, #2
 80042c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	220f      	movs	r2, #15
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <HAL_GPIO_Init+0x240>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d052      	beq.n	800438c <HAL_GPIO_Init+0x268>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_GPIO_Init+0x244>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d031      	beq.n	8004352 <HAL_GPIO_Init+0x22e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_GPIO_Init+0x248>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02b      	beq.n	800434e <HAL_GPIO_Init+0x22a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <HAL_GPIO_Init+0x24c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d025      	beq.n	800434a <HAL_GPIO_Init+0x226>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <HAL_GPIO_Init+0x250>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01f      	beq.n	8004346 <HAL_GPIO_Init+0x222>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_GPIO_Init+0x254>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d019      	beq.n	8004342 <HAL_GPIO_Init+0x21e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1a      	ldr	r2, [pc, #104]	; (800437c <HAL_GPIO_Init+0x258>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_GPIO_Init+0x21a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_GPIO_Init+0x25c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00d      	beq.n	800433a <HAL_GPIO_Init+0x216>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_GPIO_Init+0x260>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <HAL_GPIO_Init+0x212>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <HAL_GPIO_Init+0x264>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_GPIO_Init+0x20e>
 800432e:	2309      	movs	r3, #9
 8004330:	e02d      	b.n	800438e <HAL_GPIO_Init+0x26a>
 8004332:	230a      	movs	r3, #10
 8004334:	e02b      	b.n	800438e <HAL_GPIO_Init+0x26a>
 8004336:	2308      	movs	r3, #8
 8004338:	e029      	b.n	800438e <HAL_GPIO_Init+0x26a>
 800433a:	2307      	movs	r3, #7
 800433c:	e027      	b.n	800438e <HAL_GPIO_Init+0x26a>
 800433e:	2306      	movs	r3, #6
 8004340:	e025      	b.n	800438e <HAL_GPIO_Init+0x26a>
 8004342:	2305      	movs	r3, #5
 8004344:	e023      	b.n	800438e <HAL_GPIO_Init+0x26a>
 8004346:	2304      	movs	r3, #4
 8004348:	e021      	b.n	800438e <HAL_GPIO_Init+0x26a>
 800434a:	2303      	movs	r3, #3
 800434c:	e01f      	b.n	800438e <HAL_GPIO_Init+0x26a>
 800434e:	2302      	movs	r3, #2
 8004350:	e01d      	b.n	800438e <HAL_GPIO_Init+0x26a>
 8004352:	2301      	movs	r3, #1
 8004354:	e01b      	b.n	800438e <HAL_GPIO_Init+0x26a>
 8004356:	bf00      	nop
 8004358:	58000080 	.word	0x58000080
 800435c:	58024400 	.word	0x58024400
 8004360:	58000400 	.word	0x58000400
 8004364:	58020000 	.word	0x58020000
 8004368:	58020400 	.word	0x58020400
 800436c:	58020800 	.word	0x58020800
 8004370:	58020c00 	.word	0x58020c00
 8004374:	58021000 	.word	0x58021000
 8004378:	58021400 	.word	0x58021400
 800437c:	58021800 	.word	0x58021800
 8004380:	58021c00 	.word	0x58021c00
 8004384:	58022000 	.word	0x58022000
 8004388:	58022400 	.word	0x58022400
 800438c:	2300      	movs	r3, #0
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	f002 0203 	and.w	r2, r2, #3
 8004394:	0092      	lsls	r2, r2, #2
 8004396:	4093      	lsls	r3, r2
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800439e:	4938      	ldr	r1, [pc, #224]	; (8004480 <HAL_GPIO_Init+0x35c>)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	3302      	adds	r3, #2
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	43db      	mvns	r3, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4013      	ands	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f ae63 	bne.w	8004138 <HAL_GPIO_Init+0x14>
  }
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	58000400 	.word	0x58000400

08004484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
 8004490:	4613      	mov	r3, r2
 8004492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044a0:	e003      	b.n	80044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b8:	b08f      	sub	sp, #60	; 0x3c
 80044ba:	af0a      	add	r7, sp, #40	; 0x28
 80044bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e116      	b.n	80046f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc ff52 	bl	800138c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2203      	movs	r2, #3
 80044ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f004 fd84 	bl	8009014 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	687e      	ldr	r6, [r7, #4]
 8004514:	466d      	mov	r5, sp
 8004516:	f106 0410 	add.w	r4, r6, #16
 800451a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800451c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800451e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004526:	e885 0003 	stmia.w	r5, {r0, r1}
 800452a:	1d33      	adds	r3, r6, #4
 800452c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	f004 fd02 	bl	8008f38 <USB_CoreInit>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0d7      	b.n	80046f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f004 fd72 	bl	8009036 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
 8004556:	e04a      	b.n	80045ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	333d      	adds	r3, #61	; 0x3d
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	333c      	adds	r3, #60	; 0x3c
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	b298      	uxth	r0, r3
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	3356      	adds	r3, #86	; 0x56
 8004594:	4602      	mov	r2, r0
 8004596:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3340      	adds	r3, #64	; 0x40
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3344      	adds	r3, #68	; 0x44
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3348      	adds	r3, #72	; 0x48
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	334c      	adds	r3, #76	; 0x4c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	3301      	adds	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	7bfa      	ldrb	r2, [r7, #15]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d3af      	bcc.n	8004558 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	e044      	b.n	8004688 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	3301      	adds	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3b5      	bcc.n	80045fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	687e      	ldr	r6, [r7, #4]
 800469a:	466d      	mov	r5, sp
 800469c:	f106 0410 	add.w	r4, r6, #16
 80046a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80046b0:	1d33      	adds	r3, r6, #4
 80046b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b4:	6838      	ldr	r0, [r7, #0]
 80046b6:	f004 fd0b 	bl	80090d0 <USB_DevInit>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e014      	b.n	80046f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f80b 	bl	8004700 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f004 fec9 	bl	8009486 <USB_DevDisconnect>

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004700 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_PCDEx_ActivateLPM+0x44>)
 8004730:	4313      	orrs	r3, r2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	10000003 	.word	0x10000003

08004748 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d00a      	beq.n	8004772 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_PWREx_ConfigSupply+0x70>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d001      	beq.n	800476e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e01f      	b.n	80047ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e01d      	b.n	80047ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_PWREx_ConfigSupply+0x70>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f023 0207 	bic.w	r2, r3, #7
 800477a:	490f      	ldr	r1, [pc, #60]	; (80047b8 <HAL_PWREx_ConfigSupply+0x70>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4313      	orrs	r3, r2
 8004780:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004782:	f7fd f835 	bl	80017f0 <HAL_GetTick>
 8004786:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004788:	e009      	b.n	800479e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800478a:	f7fd f831 	bl	80017f0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004798:	d901      	bls.n	800479e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e007      	b.n	80047ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_PWREx_ConfigSupply+0x70>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047aa:	d1ee      	bne.n	800478a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	58024800 	.word	0x58024800

080047bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ca:	60d3      	str	r3, [r2, #12]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	58024800 	.word	0x58024800

080047dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f000 bc48 	b.w	8005080 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8088 	beq.w	800490e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fe:	4b99      	ldr	r3, [pc, #612]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004808:	4b96      	ldr	r3, [pc, #600]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	2b10      	cmp	r3, #16
 8004812:	d007      	beq.n	8004824 <HAL_RCC_OscConfig+0x48>
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	2b18      	cmp	r3, #24
 8004818:	d111      	bne.n	800483e <HAL_RCC_OscConfig+0x62>
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d10c      	bne.n	800483e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d06d      	beq.n	800490c <HAL_RCC_OscConfig+0x130>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d169      	bne.n	800490c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f000 bc21 	b.w	8005080 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x7a>
 8004848:	4b86      	ldr	r3, [pc, #536]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a85      	ldr	r2, [pc, #532]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800484e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e02e      	b.n	80048b4 <HAL_RCC_OscConfig+0xd8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x9c>
 800485e:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a80      	ldr	r2, [pc, #512]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b7e      	ldr	r3, [pc, #504]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7d      	ldr	r2, [pc, #500]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xd8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0xc0>
 8004882:	4b78      	ldr	r3, [pc, #480]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a77      	ldr	r2, [pc, #476]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b75      	ldr	r3, [pc, #468]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a74      	ldr	r2, [pc, #464]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xd8>
 800489c:	4b71      	ldr	r3, [pc, #452]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a70      	ldr	r2, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b6e      	ldr	r3, [pc, #440]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a6d      	ldr	r2, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fc ff98 	bl	80017f0 <HAL_GetTick>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fc ff94 	bl	80017f0 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e3d4      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048d6:	4b63      	ldr	r3, [pc, #396]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xe8>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fc ff84 	bl	80017f0 <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fc ff80 	bl	80017f0 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e3c0      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048fe:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x110>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80ca 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491c:	4b51      	ldr	r3, [pc, #324]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004924:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004926:	4b4f      	ldr	r3, [pc, #316]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_RCC_OscConfig+0x166>
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2b18      	cmp	r3, #24
 8004936:	d156      	bne.n	80049e6 <HAL_RCC_OscConfig+0x20a>
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d151      	bne.n	80049e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004942:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x17e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e392      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800495a:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0219 	bic.w	r2, r3, #25
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	493f      	ldr	r1, [pc, #252]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fc ff40 	bl	80017f0 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fc ff3c 	bl	80017f0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e37c      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004986:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	f7fc ff5d 	bl	8001850 <HAL_GetREVID>
 8004996:	4603      	mov	r3, r0
 8004998:	f241 0203 	movw	r2, #4099	; 0x1003
 800499c:	4293      	cmp	r3, r2
 800499e:	d817      	bhi.n	80049d0 <HAL_RCC_OscConfig+0x1f4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d108      	bne.n	80049ba <HAL_RCC_OscConfig+0x1de>
 80049a8:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80049b0:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b8:	e07a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	4926      	ldr	r1, [pc, #152]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ce:	e06f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	4921      	ldr	r1, [pc, #132]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e4:	e064      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d047      	beq.n	8004a7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049ee:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 0219 	bic.w	r2, r3, #25
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	491a      	ldr	r1, [pc, #104]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fc fef6 	bl	80017f0 <HAL_GetTick>
 8004a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a08:	f7fc fef2 	bl	80017f0 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e332      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	f7fc ff13 	bl	8001850 <HAL_GetREVID>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d819      	bhi.n	8004a68 <HAL_RCC_OscConfig+0x28c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d108      	bne.n	8004a4e <HAL_RCC_OscConfig+0x272>
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a44:	4a07      	ldr	r2, [pc, #28]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4a:	6053      	str	r3, [r2, #4]
 8004a4c:	e030      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	031b      	lsls	r3, r3, #12
 8004a5c:	4901      	ldr	r1, [pc, #4]	; (8004a64 <HAL_RCC_OscConfig+0x288>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
 8004a62:	e025      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
 8004a64:	58024400 	.word	0x58024400
 8004a68:	4b9a      	ldr	r3, [pc, #616]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	4997      	ldr	r1, [pc, #604]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b95      	ldr	r3, [pc, #596]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a94      	ldr	r2, [pc, #592]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fc feb1 	bl	80017f0 <HAL_GetTick>
 8004a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fc fead 	bl	80017f0 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e2ed      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004aa4:	4b8b      	ldr	r3, [pc, #556]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80a9 	beq.w	8004c10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004abe:	4b85      	ldr	r3, [pc, #532]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ac8:	4b82      	ldr	r3, [pc, #520]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d007      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x308>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b18      	cmp	r3, #24
 8004ad8:	d13a      	bne.n	8004b50 <HAL_RCC_OscConfig+0x374>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d135      	bne.n	8004b50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ae4:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x320>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e2c1      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004afc:	f7fc fea8 	bl	8001850 <HAL_GetREVID>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d817      	bhi.n	8004b3a <HAL_RCC_OscConfig+0x35e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d108      	bne.n	8004b24 <HAL_RCC_OscConfig+0x348>
 8004b12:	4b70      	ldr	r3, [pc, #448]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b1a:	4a6e      	ldr	r2, [pc, #440]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b22:	e075      	b.n	8004c10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b24:	4b6b      	ldr	r3, [pc, #428]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	069b      	lsls	r3, r3, #26
 8004b32:	4968      	ldr	r1, [pc, #416]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b38:	e06a      	b.n	8004c10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b3a:	4b66      	ldr	r3, [pc, #408]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	4962      	ldr	r1, [pc, #392]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b4e:	e05f      	b.n	8004c10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d042      	beq.n	8004bde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b58:	4b5e      	ldr	r3, [pc, #376]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5d      	ldr	r2, [pc, #372]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fc fe44 	bl	80017f0 <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b6c:	f7fc fe40 	bl	80017f0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e280      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b7e:	4b55      	ldr	r3, [pc, #340]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b8a:	f7fc fe61 	bl	8001850 <HAL_GetREVID>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d817      	bhi.n	8004bc8 <HAL_RCC_OscConfig+0x3ec>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d108      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3d6>
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ba8:	4a4a      	ldr	r2, [pc, #296]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004baa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bae:	6053      	str	r3, [r2, #4]
 8004bb0:	e02e      	b.n	8004c10 <HAL_RCC_OscConfig+0x434>
 8004bb2:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	069b      	lsls	r3, r3, #26
 8004bc0:	4944      	ldr	r1, [pc, #272]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
 8004bc6:	e023      	b.n	8004c10 <HAL_RCC_OscConfig+0x434>
 8004bc8:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	493f      	ldr	r1, [pc, #252]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60cb      	str	r3, [r1, #12]
 8004bdc:	e018      	b.n	8004c10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bde:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fc fe01 	bl	80017f0 <HAL_GetTick>
 8004bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bf2:	f7fc fdfd 	bl	80017f0 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e23d      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c04:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d036      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d019      	beq.n	8004c58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c24:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fc fdde 	bl	80017f0 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c38:	f7fc fdda 	bl	80017f0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e21a      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c4a:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x45c>
 8004c56:	e018      	b.n	8004c8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fc fdc4 	bl	80017f0 <HAL_GetTick>
 8004c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fc fdc0 	bl	80017f0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e200      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d039      	beq.n	8004d0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01c      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ca8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004caa:	f7fc fda1 	bl	80017f0 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cb2:	f7fc fd9d 	bl	80017f0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1dd      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x4d6>
 8004cd0:	e01b      	b.n	8004d0a <HAL_RCC_OscConfig+0x52e>
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cd8:	4b9b      	ldr	r3, [pc, #620]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a9a      	ldr	r2, [pc, #616]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ce4:	f7fc fd84 	bl	80017f0 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cec:	f7fc fd80 	bl	80017f0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1c0      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cfe:	4b92      	ldr	r3, [pc, #584]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8081 	beq.w	8004e1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d18:	4b8c      	ldr	r3, [pc, #560]	; (8004f4c <HAL_RCC_OscConfig+0x770>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a8b      	ldr	r2, [pc, #556]	; (8004f4c <HAL_RCC_OscConfig+0x770>)
 8004d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d24:	f7fc fd64 	bl	80017f0 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2c:	f7fc fd60 	bl	80017f0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e1a0      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d3e:	4b83      	ldr	r3, [pc, #524]	; (8004f4c <HAL_RCC_OscConfig+0x770>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d106      	bne.n	8004d60 <HAL_RCC_OscConfig+0x584>
 8004d52:	4b7d      	ldr	r3, [pc, #500]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a7c      	ldr	r2, [pc, #496]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	e02d      	b.n	8004dbc <HAL_RCC_OscConfig+0x5e0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_OscConfig+0x5a6>
 8004d68:	4b77      	ldr	r3, [pc, #476]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	4a76      	ldr	r2, [pc, #472]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	6713      	str	r3, [r2, #112]	; 0x70
 8004d74:	4b74      	ldr	r3, [pc, #464]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	4a73      	ldr	r2, [pc, #460]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d7a:	f023 0304 	bic.w	r3, r3, #4
 8004d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d80:	e01c      	b.n	8004dbc <HAL_RCC_OscConfig+0x5e0>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x5c8>
 8004d8a:	4b6f      	ldr	r3, [pc, #444]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a6e      	ldr	r2, [pc, #440]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d90:	f043 0304 	orr.w	r3, r3, #4
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
 8004d96:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a6b      	ldr	r2, [pc, #428]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0x5e0>
 8004da4:	4b68      	ldr	r3, [pc, #416]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a67      	ldr	r2, [pc, #412]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
 8004db0:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	4a64      	ldr	r2, [pc, #400]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004db6:	f023 0304 	bic.w	r3, r3, #4
 8004dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fc fd14 	bl	80017f0 <HAL_GetTick>
 8004dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fc fd10 	bl	80017f0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e14e      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004de2:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ee      	beq.n	8004dcc <HAL_RCC_OscConfig+0x5f0>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fc fcfe 	bl	80017f0 <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fc fcfa 	bl	80017f0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e138      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e0e:	4b4e      	ldr	r3, [pc, #312]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ee      	bne.n	8004df8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 812d 	beq.w	800507e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e24:	4b48      	ldr	r3, [pc, #288]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e2c:	2b18      	cmp	r3, #24
 8004e2e:	f000 80bd 	beq.w	8004fac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	f040 809e 	bne.w	8004f78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3c:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a41      	ldr	r2, [pc, #260]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fc fcd2 	bl	80017f0 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fc fcce 	bl	80017f0 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e10e      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e62:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e6e:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <HAL_RCC_OscConfig+0x774>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	430a      	orrs	r2, r1
 8004e82:	4931      	ldr	r1, [pc, #196]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	628b      	str	r3, [r1, #40]	; 0x28
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	3b01      	subs	r3, #1
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	041b      	lsls	r3, r3, #16
 8004ea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	061b      	lsls	r3, r3, #24
 8004eb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004eb8:	4923      	ldr	r1, [pc, #140]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ece:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <HAL_RCC_OscConfig+0x778>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ed6:	00d2      	lsls	r2, r2, #3
 8004ed8:	491b      	ldr	r1, [pc, #108]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	f023 020c 	bic.w	r2, r3, #12
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	4917      	ldr	r1, [pc, #92]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f023 0202 	bic.w	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efc:	4912      	ldr	r1, [pc, #72]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fc fc57 	bl	80017f0 <HAL_GetTick>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f44:	e011      	b.n	8004f6a <HAL_RCC_OscConfig+0x78e>
 8004f46:	bf00      	nop
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	58024800 	.word	0x58024800
 8004f50:	fffffc0c 	.word	0xfffffc0c
 8004f54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc fc4a 	bl	80017f0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e08a      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x77c>
 8004f76:	e082      	b.n	800507e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f78:	4b43      	ldr	r3, [pc, #268]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a42      	ldr	r2, [pc, #264]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8004f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc fc34 	bl	80017f0 <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fc fc30 	bl	80017f0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e070      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x7b0>
 8004faa:	e068      	b.n	800507e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fb2:	4b35      	ldr	r3, [pc, #212]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d031      	beq.n	8005024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f003 0203 	and.w	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d12a      	bne.n	8005024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d122      	bne.n	8005024 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d11a      	bne.n	8005024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	0a5b      	lsrs	r3, r3, #9
 8004ff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d111      	bne.n	8005024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d108      	bne.n	8005024 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	0e1b      	lsrs	r3, r3, #24
 8005016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e02b      	b.n	8005080 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	08db      	lsrs	r3, r3, #3
 800502e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005032:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d01f      	beq.n	800507e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800504a:	f7fc fbd1 	bl	80017f0 <HAL_GetTick>
 800504e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005050:	bf00      	nop
 8005052:	f7fc fbcd 	bl	80017f0 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	4293      	cmp	r3, r2
 800505c:	d0f9      	beq.n	8005052 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8005060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_RCC_OscConfig+0x8b0>)
 8005064:	4013      	ands	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800506a:	00d2      	lsls	r2, r2, #3
 800506c:	4906      	ldr	r1, [pc, #24]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 800506e:	4313      	orrs	r3, r2
 8005070:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a04      	ldr	r2, [pc, #16]	; (8005088 <HAL_RCC_OscConfig+0x8ac>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	; 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	58024400 	.word	0x58024400
 800508c:	ffff0007 	.word	0xffff0007

08005090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e19c      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b8a      	ldr	r3, [pc, #552]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d910      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b87      	ldr	r3, [pc, #540]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 020f 	bic.w	r2, r3, #15
 80050ba:	4985      	ldr	r1, [pc, #532]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b83      	ldr	r3, [pc, #524]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e184      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	4b7b      	ldr	r3, [pc, #492]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d908      	bls.n	8005102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050f0:	4b78      	ldr	r3, [pc, #480]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4975      	ldr	r1, [pc, #468]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	4b70      	ldr	r3, [pc, #448]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800511a:	429a      	cmp	r2, r3
 800511c:	d908      	bls.n	8005130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800511e:	4b6d      	ldr	r3, [pc, #436]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	496a      	ldr	r1, [pc, #424]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800512c:	4313      	orrs	r3, r2
 800512e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005148:	429a      	cmp	r2, r3
 800514a:	d908      	bls.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800514c:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	495e      	ldr	r1, [pc, #376]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800515a:	4313      	orrs	r3, r2
 800515c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	4b59      	ldr	r3, [pc, #356]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005176:	429a      	cmp	r2, r3
 8005178:	d908      	bls.n	800518c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800517a:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	4953      	ldr	r1, [pc, #332]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005188:	4313      	orrs	r3, r2
 800518a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4b4d      	ldr	r3, [pc, #308]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d908      	bls.n	80051ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a8:	4b4a      	ldr	r3, [pc, #296]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f023 020f 	bic.w	r2, r3, #15
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4947      	ldr	r1, [pc, #284]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d055      	beq.n	8005272 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051c6:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	4940      	ldr	r1, [pc, #256]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e0:	4b3c      	ldr	r3, [pc, #240]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d121      	bne.n	8005230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0f6      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d107      	bne.n	8005208 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f8:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d115      	bne.n	8005230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0ea      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005210:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0de      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005220:	4b2c      	ldr	r3, [pc, #176]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0d6      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f023 0207 	bic.w	r2, r3, #7
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4925      	ldr	r1, [pc, #148]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800523e:	4313      	orrs	r3, r2
 8005240:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005242:	f7fc fad5 	bl	80017f0 <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005248:	e00a      	b.n	8005260 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524a:	f7fc fad1 	bl	80017f0 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	; 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e0be      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005260:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	429a      	cmp	r2, r3
 8005270:	d1eb      	bne.n	800524a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	429a      	cmp	r2, r3
 800528c:	d208      	bcs.n	80052a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528e:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f023 020f 	bic.w	r2, r3, #15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	490e      	ldr	r1, [pc, #56]	; (80052d4 <HAL_RCC_ClockConfig+0x244>)
 800529c:	4313      	orrs	r3, r2
 800529e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d214      	bcs.n	80052d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 020f 	bic.w	r2, r3, #15
 80052b6:	4906      	ldr	r1, [pc, #24]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <HAL_RCC_ClockConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e086      	b.n	80053de <HAL_RCC_ClockConfig+0x34e>
 80052d0:	52002000 	.word	0x52002000
 80052d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	4b3f      	ldr	r3, [pc, #252]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d208      	bcs.n	8005306 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052f4:	4b3c      	ldr	r3, [pc, #240]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	4939      	ldr	r1, [pc, #228]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005302:	4313      	orrs	r3, r2
 8005304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800531e:	429a      	cmp	r2, r3
 8005320:	d208      	bcs.n	8005334 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	492e      	ldr	r1, [pc, #184]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005330:	4313      	orrs	r3, r2
 8005332:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d010      	beq.n	8005362 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800534c:	429a      	cmp	r2, r3
 800534e:	d208      	bcs.n	8005362 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	4922      	ldr	r1, [pc, #136]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 800535e:	4313      	orrs	r3, r2
 8005360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800537a:	429a      	cmp	r2, r3
 800537c:	d208      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800537e:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4917      	ldr	r1, [pc, #92]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 800538c:	4313      	orrs	r3, r2
 800538e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005390:	f000 f834 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	4912      	ldr	r1, [pc, #72]	; (80053ec <HAL_RCC_ClockConfig+0x35c>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053ae:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <HAL_RCC_ClockConfig+0x358>)
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <HAL_RCC_ClockConfig+0x35c>)
 80053b8:	5cd3      	ldrb	r3, [r2, r3]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x360>)
 80053c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053c8:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <HAL_RCC_ClockConfig+0x364>)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCC_ClockConfig+0x368>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fc f9c2 	bl	800175c <HAL_InitTick>
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
 80053ec:	08009f10 	.word	0x08009f10
 80053f0:	24000004 	.word	0x24000004
 80053f4:	24000000 	.word	0x24000000
 80053f8:	24000008 	.word	0x24000008

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	; 0x24
 8005400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005402:	4bb3      	ldr	r3, [pc, #716]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800540a:	2b18      	cmp	r3, #24
 800540c:	f200 8155 	bhi.w	80056ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	0800547d 	.word	0x0800547d
 800541c:	080056bb 	.word	0x080056bb
 8005420:	080056bb 	.word	0x080056bb
 8005424:	080056bb 	.word	0x080056bb
 8005428:	080056bb 	.word	0x080056bb
 800542c:	080056bb 	.word	0x080056bb
 8005430:	080056bb 	.word	0x080056bb
 8005434:	080056bb 	.word	0x080056bb
 8005438:	080054a3 	.word	0x080054a3
 800543c:	080056bb 	.word	0x080056bb
 8005440:	080056bb 	.word	0x080056bb
 8005444:	080056bb 	.word	0x080056bb
 8005448:	080056bb 	.word	0x080056bb
 800544c:	080056bb 	.word	0x080056bb
 8005450:	080056bb 	.word	0x080056bb
 8005454:	080056bb 	.word	0x080056bb
 8005458:	080054a9 	.word	0x080054a9
 800545c:	080056bb 	.word	0x080056bb
 8005460:	080056bb 	.word	0x080056bb
 8005464:	080056bb 	.word	0x080056bb
 8005468:	080056bb 	.word	0x080056bb
 800546c:	080056bb 	.word	0x080056bb
 8005470:	080056bb 	.word	0x080056bb
 8005474:	080056bb 	.word	0x080056bb
 8005478:	080054af 	.word	0x080054af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547c:	4b94      	ldr	r3, [pc, #592]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005488:	4b91      	ldr	r3, [pc, #580]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	08db      	lsrs	r3, r3, #3
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	4a90      	ldr	r2, [pc, #576]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800549a:	e111      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800549c:	4b8d      	ldr	r3, [pc, #564]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800549e:	61bb      	str	r3, [r7, #24]
      break;
 80054a0:	e10e      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054a2:	4b8d      	ldr	r3, [pc, #564]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054a4:	61bb      	str	r3, [r7, #24]
      break;
 80054a6:	e10b      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054a8:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054aa:	61bb      	str	r3, [r7, #24]
      break;
 80054ac:	e108      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054ae:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80054b8:	4b85      	ldr	r3, [pc, #532]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054c4:	4b82      	ldr	r3, [pc, #520]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054ce:	4b80      	ldr	r3, [pc, #512]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	08db      	lsrs	r3, r3, #3
 80054d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80e1 	beq.w	80056b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	f000 8083 	beq.w	8005600 <HAL_RCC_GetSysClockFreq+0x204>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	f200 80a1 	bhi.w	8005644 <HAL_RCC_GetSysClockFreq+0x248>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x114>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d056      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800550e:	e099      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005510:	4b6f      	ldr	r3, [pc, #444]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02d      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800551c:	4b6c      	ldr	r3, [pc, #432]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	4a6b      	ldr	r2, [pc, #428]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005546:	4b62      	ldr	r3, [pc, #392]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005556:	ed97 6a02 	vldr	s12, [r7, #8]
 800555a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800555e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005572:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005576:	e087      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558a:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	ed97 6a02 	vldr	s12, [r7, #8]
 800559e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055ba:	e065      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b40      	ldr	r3, [pc, #256]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055fe:	e043      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b2f      	ldr	r3, [pc, #188]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a02 	vldr	s12, [r7, #8]
 8005626:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005642:	e021      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a02 	vldr	s12, [r7, #8]
 800566a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005686:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005688:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	0a5b      	lsrs	r3, r3, #9
 800568e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005692:	3301      	adds	r3, #1
 8005694:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ac:	ee17 3a90 	vmov	r3, s15
 80056b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80056b2:	e005      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61bb      	str	r3, [r7, #24]
      break;
 80056b8:	e002      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056bc:	61bb      	str	r3, [r7, #24]
      break;
 80056be:	bf00      	nop
  }

  return sysclockfreq;
 80056c0:	69bb      	ldr	r3, [r7, #24]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3724      	adds	r7, #36	; 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	58024400 	.word	0x58024400
 80056d4:	03d09000 	.word	0x03d09000
 80056d8:	003d0900 	.word	0x003d0900
 80056dc:	007a1200 	.word	0x007a1200
 80056e0:	46000000 	.word	0x46000000
 80056e4:	4c742400 	.word	0x4c742400
 80056e8:	4a742400 	.word	0x4a742400
 80056ec:	4af42400 	.word	0x4af42400

080056f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056f6:	f7ff fe81 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_RCC_GetHCLKFreq+0x50>)
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	0a1b      	lsrs	r3, r3, #8
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	490f      	ldr	r1, [pc, #60]	; (8005744 <HAL_RCC_GetHCLKFreq+0x54>)
 8005708:	5ccb      	ldrb	r3, [r1, r3]
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_RCC_GetHCLKFreq+0x50>)
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <HAL_RCC_GetHCLKFreq+0x54>)
 800571e:	5cd3      	ldrb	r3, [r2, r3]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	4a07      	ldr	r2, [pc, #28]	; (8005748 <HAL_RCC_GetHCLKFreq+0x58>)
 800572c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800572e:	4a07      	ldr	r2, [pc, #28]	; (800574c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <HAL_RCC_GetHCLKFreq+0x58>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	58024400 	.word	0x58024400
 8005744:	08009f10 	.word	0x08009f10
 8005748:	24000004 	.word	0x24000004
 800574c:	24000000 	.word	0x24000000

08005750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005754:	f7ff ffcc 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4904      	ldr	r1, [pc, #16]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	58024400 	.word	0x58024400
 8005778:	08009f10 	.word	0x08009f10

0800577c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005780:	f7ff ffb6 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4904      	ldr	r1, [pc, #16]	; (80057a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	58024400 	.word	0x58024400
 80057a4:	08009f10 	.word	0x08009f10

080057a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ac:	b0ca      	sub	sp, #296	; 0x128
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80057cc:	2500      	movs	r5, #0
 80057ce:	ea54 0305 	orrs.w	r3, r4, r5
 80057d2:	d049      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057de:	d02f      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057e4:	d828      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ea:	d01a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f0:	d822      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fa:	d007      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057fc:	e01c      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fe:	4bb8      	ldr	r3, [pc, #736]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	4ab7      	ldr	r2, [pc, #732]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800580a:	e01a      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800580c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005810:	3308      	adds	r3, #8
 8005812:	2102      	movs	r1, #2
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fc8f 	bl	8007138 <RCCEx_PLL2_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005820:	e00f      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005826:	3328      	adds	r3, #40	; 0x28
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fd36 	bl	800729c <RCCEx_PLL3_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005836:	e004      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800583e:	e000      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800584a:	4ba5      	ldr	r3, [pc, #660]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005858:	4aa1      	ldr	r2, [pc, #644]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585a:	430b      	orrs	r3, r1
 800585c:	6513      	str	r3, [r2, #80]	; 0x50
 800585e:	e003      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005874:	f04f 0900 	mov.w	r9, #0
 8005878:	ea58 0309 	orrs.w	r3, r8, r9
 800587c:	d047      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	2b04      	cmp	r3, #4
 8005886:	d82a      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058a5 	.word	0x080058a5
 8005894:	080058b3 	.word	0x080058b3
 8005898:	080058c9 	.word	0x080058c9
 800589c:	080058e7 	.word	0x080058e7
 80058a0:	080058e7 	.word	0x080058e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b8e      	ldr	r3, [pc, #568]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	4a8d      	ldr	r2, [pc, #564]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b0:	e01a      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fc3c 	bl	8007138 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c6:	e00f      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	3328      	adds	r3, #40	; 0x28
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fce3 	bl	800729c <RCCEx_PLL3_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058dc:	e004      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058e4:	e000      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f0:	4b7b      	ldr	r3, [pc, #492]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	f023 0107 	bic.w	r1, r3, #7
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	4a78      	ldr	r2, [pc, #480]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005900:	430b      	orrs	r3, r1
 8005902:	6513      	str	r3, [r2, #80]	; 0x50
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800591a:	f04f 0b00 	mov.w	fp, #0
 800591e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005922:	d04c      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592e:	d030      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005934:	d829      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005936:	2bc0      	cmp	r3, #192	; 0xc0
 8005938:	d02d      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800593a:	2bc0      	cmp	r3, #192	; 0xc0
 800593c:	d825      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800593e:	2b80      	cmp	r3, #128	; 0x80
 8005940:	d018      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d821      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d007      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800594e:	e01c      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005950:	4b63      	ldr	r3, [pc, #396]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4a62      	ldr	r2, [pc, #392]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800595c:	e01c      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005962:	3308      	adds	r3, #8
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fbe6 	bl	8007138 <RCCEx_PLL2_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005972:	e011      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005978:	3328      	adds	r3, #40	; 0x28
 800597a:	2100      	movs	r1, #0
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fc8d 	bl	800729c <RCCEx_PLL3_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005988:	e006      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005990:	e002      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059a0:	4b4f      	ldr	r3, [pc, #316]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ae:	4a4c      	ldr	r2, [pc, #304]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6513      	str	r3, [r2, #80]	; 0x50
 80059b4:	e003      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80059ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80059d8:	460b      	mov	r3, r1
 80059da:	4313      	orrs	r3, r2
 80059dc:	d053      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ea:	d035      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80059ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059f0:	d82e      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059f6:	d031      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80059f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059fc:	d828      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a02:	d01a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a08:	d822      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a12:	d007      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a14:	e01c      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a16:	4b32      	ldr	r3, [pc, #200]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	4a31      	ldr	r2, [pc, #196]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a22:	e01c      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a28:	3308      	adds	r3, #8
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fb83 	bl	8007138 <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a38:	e011      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fc2a 	bl	800729c <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e006      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a66:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a76:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a7c:	e003      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005a92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d056      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab2:	d038      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab8:	d831      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005aba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005abe:	d034      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005ac0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ac4:	d82b      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aca:	d01d      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad0:	d825      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005adc:	e01f      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae4:	4ba2      	ldr	r3, [pc, #648]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4aa1      	ldr	r2, [pc, #644]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af0:	e01c      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af6:	3308      	adds	r3, #8
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fb1c 	bl	8007138 <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0c:	3328      	adds	r3, #40	; 0x28
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fbc3 	bl	800729c <RCCEx_PLL3_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e006      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b24:	e002      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b34:	4b8e      	ldr	r3, [pc, #568]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b44:	4a8a      	ldr	r2, [pc, #552]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b46:	430b      	orrs	r3, r1
 8005b48:	6593      	str	r3, [r2, #88]	; 0x58
 8005b4a:	e003      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b64:	2300      	movs	r3, #0
 8005b66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4313      	orrs	r3, r2
 8005b72:	d03a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7a:	2b30      	cmp	r3, #48	; 0x30
 8005b7c:	d01f      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b7e:	2b30      	cmp	r3, #48	; 0x30
 8005b80:	d819      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d00c      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d815      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d019      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d111      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b92:	4b77      	ldr	r3, [pc, #476]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	4a76      	ldr	r2, [pc, #472]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b9e:	e011      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 fac5 	bl	8007138 <RCCEx_PLL2_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005bb4:	e006      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bbc:	e002      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bcc:	4b68      	ldr	r3, [pc, #416]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	4a65      	ldr	r2, [pc, #404]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005be0:	e003      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4313      	orrs	r3, r2
 8005c08:	d051      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c14:	d035      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c1a:	d82e      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c20:	d031      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c26:	d828      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2c:	d01a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c32:	d822      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	d007      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c3e:	e01c      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a4a      	ldr	r2, [pc, #296]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c4c:	e01c      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c52:	3308      	adds	r3, #8
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fa6e 	bl	8007138 <RCCEx_PLL2_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c62:	e011      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c68:	3328      	adds	r3, #40	; 0x28
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fb15 	bl	800729c <RCCEx_PLL3_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c82:	bf00      	nop
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c90:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	4a34      	ldr	r2, [pc, #208]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6513      	str	r3, [r2, #80]	; 0x50
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005caa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	d056      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cd8:	d033      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cde:	d82c      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ce4:	d02f      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cea:	d826      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cf0:	d02b      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005cf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cf6:	d820      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfc:	d012      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d02:	d81a      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d022      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d115      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d12:	3308      	adds	r3, #8
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 fa0e 	bl	8007138 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d22:	e015      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d28:	3328      	adds	r3, #40	; 0x28
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fab5 	bl	800729c <RCCEx_PLL3_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d38:	e00a      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d42:	bf00      	nop
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10d      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d66:	4a02      	ldr	r2, [pc, #8]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6513      	str	r3, [r2, #80]	; 0x50
 8005d6c:	e006      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d6e:	bf00      	nop
 8005d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d055      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da8:	d033      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dae:	d82c      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d02f      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d826      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc0:	d02b      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dc6:	d820      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dcc:	d012      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd2:	d81a      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d022      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ddc:	d115      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de2:	3308      	adds	r3, #8
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 f9a6 	bl	8007138 <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005df2:	e015      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df8:	3328      	adds	r3, #40	; 0x28
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fa4d 	bl	800729c <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e08:	e00a      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e12:	bf00      	nop
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e28:	4ba3      	ldr	r3, [pc, #652]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e38:	4a9f      	ldr	r2, [pc, #636]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d037      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e72:	d00e      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e78:	d816      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d018      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e82:	d111      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e84:	4b8c      	ldr	r3, [pc, #560]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a8b      	ldr	r2, [pc, #556]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e90:	e00f      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e96:	3308      	adds	r3, #8
 8005e98:	2101      	movs	r1, #1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 f94c 	bl	8007138 <RCCEx_PLL2_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ea6:	e004      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005eba:	4b7f      	ldr	r3, [pc, #508]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a7b      	ldr	r2, [pc, #492]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6513      	str	r3, [r2, #80]	; 0x50
 8005ece:	e003      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005eee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	d039      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d81c      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f45 	.word	0x08005f45
 8005f0c:	08005f19 	.word	0x08005f19
 8005f10:	08005f27 	.word	0x08005f27
 8005f14:	08005f45 	.word	0x08005f45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f18:	4b67      	ldr	r3, [pc, #412]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	4a66      	ldr	r2, [pc, #408]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f24:	e00f      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 f902 	bl	8007138 <RCCEx_PLL2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f3a:	e004      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f42:	e000      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f4e:	4b5a      	ldr	r3, [pc, #360]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	f023 0103 	bic.w	r1, r3, #3
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5c:	4a56      	ldr	r2, [pc, #344]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f000 809f 	beq.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f8e:	4b4b      	ldr	r3, [pc, #300]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a4a      	ldr	r2, [pc, #296]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f9a:	f7fb fc29 	bl	80017f0 <HAL_GetTick>
 8005f9e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa2:	e00b      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa4:	f7fb fc24 	bl	80017f0 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b64      	cmp	r3, #100	; 0x64
 8005fb2:	d903      	bls.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fba:	e005      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0ed      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d179      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fd0:	4b39      	ldr	r3, [pc, #228]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fdc:	4053      	eors	r3, r2
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d015      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe6:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ff2:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	4a30      	ldr	r2, [pc, #192]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	4a2d      	ldr	r2, [pc, #180]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006008:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800600a:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800600c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006010:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d118      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fb fbe6 	bl	80017f0 <HAL_GetTick>
 8006024:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006028:	e00d      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602a:	f7fb fbe1 	bl	80017f0 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	f241 3388 	movw	r3, #5000	; 0x1388
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006044:	e005      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0eb      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006056:	2b00      	cmp	r3, #0
 8006058:	d129      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606a:	d10e      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006078:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800607c:	091a      	lsrs	r2, r3, #4
 800607e:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006080:	4013      	ands	r3, r2
 8006082:	4a0d      	ldr	r2, [pc, #52]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6113      	str	r3, [r2, #16]
 8006088:	e005      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800608a:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006090:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006094:	6113      	str	r3, [r2, #16]
 8006096:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006098:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a6:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6713      	str	r3, [r2, #112]	; 0x70
 80060ac:	e00e      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80060b6:	e009      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80060b8:	58024400 	.word	0x58024400
 80060bc:	58024800 	.word	0x58024800
 80060c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f002 0301 	and.w	r3, r2, #1
 80060d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f000 8089 	beq.w	8006200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f4:	2b28      	cmp	r3, #40	; 0x28
 80060f6:	d86b      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	080061d9 	.word	0x080061d9
 8006104:	080061d1 	.word	0x080061d1
 8006108:	080061d1 	.word	0x080061d1
 800610c:	080061d1 	.word	0x080061d1
 8006110:	080061d1 	.word	0x080061d1
 8006114:	080061d1 	.word	0x080061d1
 8006118:	080061d1 	.word	0x080061d1
 800611c:	080061d1 	.word	0x080061d1
 8006120:	080061a5 	.word	0x080061a5
 8006124:	080061d1 	.word	0x080061d1
 8006128:	080061d1 	.word	0x080061d1
 800612c:	080061d1 	.word	0x080061d1
 8006130:	080061d1 	.word	0x080061d1
 8006134:	080061d1 	.word	0x080061d1
 8006138:	080061d1 	.word	0x080061d1
 800613c:	080061d1 	.word	0x080061d1
 8006140:	080061bb 	.word	0x080061bb
 8006144:	080061d1 	.word	0x080061d1
 8006148:	080061d1 	.word	0x080061d1
 800614c:	080061d1 	.word	0x080061d1
 8006150:	080061d1 	.word	0x080061d1
 8006154:	080061d1 	.word	0x080061d1
 8006158:	080061d1 	.word	0x080061d1
 800615c:	080061d1 	.word	0x080061d1
 8006160:	080061d9 	.word	0x080061d9
 8006164:	080061d1 	.word	0x080061d1
 8006168:	080061d1 	.word	0x080061d1
 800616c:	080061d1 	.word	0x080061d1
 8006170:	080061d1 	.word	0x080061d1
 8006174:	080061d1 	.word	0x080061d1
 8006178:	080061d1 	.word	0x080061d1
 800617c:	080061d1 	.word	0x080061d1
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061d1 	.word	0x080061d1
 8006188:	080061d1 	.word	0x080061d1
 800618c:	080061d1 	.word	0x080061d1
 8006190:	080061d1 	.word	0x080061d1
 8006194:	080061d1 	.word	0x080061d1
 8006198:	080061d1 	.word	0x080061d1
 800619c:	080061d1 	.word	0x080061d1
 80061a0:	080061d9 	.word	0x080061d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a8:	3308      	adds	r3, #8
 80061aa:	2101      	movs	r1, #1
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 ffc3 	bl	8007138 <RCCEx_PLL2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061b8:	e00f      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061be:	3328      	adds	r3, #40	; 0x28
 80061c0:	2101      	movs	r1, #1
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f86a 	bl	800729c <RCCEx_PLL3_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061ce:	e004      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061d6:	e000      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80061d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061e2:	4bbf      	ldr	r3, [pc, #764]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f0:	4abb      	ldr	r2, [pc, #748]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6553      	str	r3, [r2, #84]	; 0x54
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f002 0302 	and.w	r3, r2, #2
 800620c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006216:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d041      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006226:	2b05      	cmp	r3, #5
 8006228:	d824      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	0800627d 	.word	0x0800627d
 8006234:	08006249 	.word	0x08006249
 8006238:	0800625f 	.word	0x0800625f
 800623c:	0800627d 	.word	0x0800627d
 8006240:	0800627d 	.word	0x0800627d
 8006244:	0800627d 	.word	0x0800627d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624c:	3308      	adds	r3, #8
 800624e:	2101      	movs	r1, #1
 8006250:	4618      	mov	r0, r3
 8006252:	f000 ff71 	bl	8007138 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800625c:	e00f      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006262:	3328      	adds	r3, #40	; 0x28
 8006264:	2101      	movs	r1, #1
 8006266:	4618      	mov	r0, r3
 8006268:	f001 f818 	bl	800729c <RCCEx_PLL3_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006272:	e004      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800627a:	e000      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800627c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006286:	4b96      	ldr	r3, [pc, #600]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f023 0107 	bic.w	r1, r3, #7
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006294:	4a92      	ldr	r2, [pc, #584]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006296:	430b      	orrs	r3, r1
 8006298:	6553      	str	r3, [r2, #84]	; 0x54
 800629a:	e003      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f002 0304 	and.w	r3, r2, #4
 80062b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d044      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062cc:	2b05      	cmp	r3, #5
 80062ce:	d825      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80062d0:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	08006325 	.word	0x08006325
 80062dc:	080062f1 	.word	0x080062f1
 80062e0:	08006307 	.word	0x08006307
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006325 	.word	0x08006325
 80062ec:	08006325 	.word	0x08006325
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	3308      	adds	r3, #8
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 ff1d 	bl	8007138 <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006304:	e00f      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630a:	3328      	adds	r3, #40	; 0x28
 800630c:	2101      	movs	r1, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ffc4 	bl	800729c <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800631a:	e004      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006322:	e000      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800632e:	4b6c      	ldr	r3, [pc, #432]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006332:	f023 0107 	bic.w	r1, r3, #7
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633e:	4a68      	ldr	r2, [pc, #416]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006340:	430b      	orrs	r3, r1
 8006342:	6593      	str	r3, [r2, #88]	; 0x58
 8006344:	e003      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f002 0320 	and.w	r3, r2, #32
 800635a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800635e:	2300      	movs	r3, #0
 8006360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d055      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800637a:	d033      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800637c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006380:	d82c      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d02f      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638c:	d826      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800638e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006392:	d02b      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006394:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006398:	d820      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800639a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800639e:	d012      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80063a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a4:	d81a      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d022      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80063aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ae:	d115      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b4:	3308      	adds	r3, #8
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 febd 	bl	8007138 <RCCEx_PLL2_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063c4:	e015      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ca:	3328      	adds	r3, #40	; 0x28
 80063cc:	2102      	movs	r1, #2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 ff64 	bl	800729c <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063da:	e00a      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063e2:	e006      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063e4:	bf00      	nop
 80063e6:	e004      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063e8:	bf00      	nop
 80063ea:	e002      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10b      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063fa:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	4a35      	ldr	r2, [pc, #212]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800640c:	430b      	orrs	r3, r1
 800640e:	6553      	str	r3, [r2, #84]	; 0x54
 8006410:	e003      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800642a:	2300      	movs	r3, #0
 800642c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006430:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006434:	460b      	mov	r3, r1
 8006436:	4313      	orrs	r3, r2
 8006438:	d058      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006446:	d033      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006448:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800644c:	d82c      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006452:	d02f      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006458:	d826      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800645a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800645e:	d02b      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006464:	d820      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800646a:	d012      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800646c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006470:	d81a      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d022      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647a:	d115      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006480:	3308      	adds	r3, #8
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fe57 	bl	8007138 <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006490:	e015      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006496:	3328      	adds	r3, #40	; 0x28
 8006498:	2102      	movs	r1, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fefe 	bl	800729c <RCCEx_PLL3_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064a6:	e00a      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064ae:	e006      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064b0:	bf00      	nop
 80064b2:	e004      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064b4:	bf00      	nop
 80064b6:	e002      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10e      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d6:	4a02      	ldr	r2, [pc, #8]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d8:	430b      	orrs	r3, r1
 80064da:	6593      	str	r3, [r2, #88]	; 0x58
 80064dc:	e006      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80064de:	bf00      	nop
 80064e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006502:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d055      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006514:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006518:	d033      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800651a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800651e:	d82c      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006524:	d02f      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652a:	d826      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800652c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006530:	d02b      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006532:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006536:	d820      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800653c:	d012      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800653e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006542:	d81a      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d022      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654c:	d115      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006552:	3308      	adds	r3, #8
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fdee 	bl	8007138 <RCCEx_PLL2_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006562:	e015      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006568:	3328      	adds	r3, #40	; 0x28
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fe95 	bl	800729c <RCCEx_PLL3_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006578:	e00a      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006580:	e006      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006582:	bf00      	nop
 8006584:	e004      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006586:	bf00      	nop
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800658e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006598:	4ba1      	ldr	r3, [pc, #644]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065a8:	4a9d      	ldr	r2, [pc, #628]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065aa:	430b      	orrs	r3, r1
 80065ac:	6593      	str	r3, [r2, #88]	; 0x58
 80065ae:	e003      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f002 0308 	and.w	r3, r2, #8
 80065c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80065d2:	460b      	mov	r3, r1
 80065d4:	4313      	orrs	r3, r2
 80065d6:	d01e      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e4:	d10c      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ea:	3328      	adds	r3, #40	; 0x28
 80065ec:	2102      	movs	r1, #2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fe54 	bl	800729c <RCCEx_PLL3_Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006600:	4b87      	ldr	r3, [pc, #540]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006610:	4a83      	ldr	r2, [pc, #524]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006612:	430b      	orrs	r3, r1
 8006614:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f002 0310 	and.w	r3, r2, #16
 8006622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006626:	2300      	movs	r3, #0
 8006628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800662c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006630:	460b      	mov	r3, r1
 8006632:	4313      	orrs	r3, r2
 8006634:	d01e      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800663e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006642:	d10c      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006648:	3328      	adds	r3, #40	; 0x28
 800664a:	2102      	movs	r1, #2
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fe25 	bl	800729c <RCCEx_PLL3_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800665e:	4b70      	ldr	r3, [pc, #448]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800666e:	4a6c      	ldr	r2, [pc, #432]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800668a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d03e      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800669c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a0:	d022      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80066a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a6:	d81b      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80066ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b0:	d00b      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80066b2:	e015      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b8:	3308      	adds	r3, #8
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fd3b 	bl	8007138 <RCCEx_PLL2_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066c8:	e00f      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ce:	3328      	adds	r3, #40	; 0x28
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fde2 	bl	800729c <RCCEx_PLL3_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066de:	e004      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066e6:	e000      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80066e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066f2:	4b4b      	ldr	r3, [pc, #300]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006702:	4a47      	ldr	r2, [pc, #284]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6593      	str	r3, [r2, #88]	; 0x58
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800670e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800671e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006720:	2300      	movs	r3, #0
 8006722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006724:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d03b      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800673a:	d01f      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800673c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006740:	d818      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006746:	d003      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800674c:	d007      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800674e:	e011      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4b33      	ldr	r3, [pc, #204]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a32      	ldr	r2, [pc, #200]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800675c:	e00f      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006762:	3328      	adds	r3, #40	; 0x28
 8006764:	2101      	movs	r1, #1
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fd98 	bl	800729c <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800677c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006786:	4b26      	ldr	r3, [pc, #152]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6553      	str	r3, [r2, #84]	; 0x54
 800679c:	e003      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80067b2:	673b      	str	r3, [r7, #112]	; 0x70
 80067b4:	2300      	movs	r3, #0
 80067b6:	677b      	str	r3, [r7, #116]	; 0x74
 80067b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d034      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d007      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80067d2:	e011      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	4a11      	ldr	r2, [pc, #68]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067e0:	e00e      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e6:	3308      	adds	r3, #8
 80067e8:	2102      	movs	r1, #2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fca4 	bl	8007138 <RCCEx_PLL2_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067f6:	e003      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10d      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800680a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006816:	4a02      	ldr	r2, [pc, #8]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006818:	430b      	orrs	r3, r1
 800681a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800681c:	e006      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800681e:	bf00      	nop
 8006820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006838:	66bb      	str	r3, [r7, #104]	; 0x68
 800683a:	2300      	movs	r3, #0
 800683c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800683e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006842:	460b      	mov	r3, r1
 8006844:	4313      	orrs	r3, r2
 8006846:	d00c      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684c:	3328      	adds	r3, #40	; 0x28
 800684e:	2102      	movs	r1, #2
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fd23 	bl	800729c <RCCEx_PLL3_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800686e:	663b      	str	r3, [r7, #96]	; 0x60
 8006870:	2300      	movs	r3, #0
 8006872:	667b      	str	r3, [r7, #100]	; 0x64
 8006874:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d038      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688a:	d018      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800688c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006890:	d811      	bhi.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d014      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d80b      	bhi.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d106      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4bc3      	ldr	r3, [pc, #780]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4ac2      	ldr	r2, [pc, #776]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068b4:	e008      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068bc:	e004      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068be:	bf00      	nop
 80068c0:	e002      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068d0:	4bb9      	ldr	r3, [pc, #740]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e0:	4ab5      	ldr	r2, [pc, #724]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e2:	430b      	orrs	r3, r1
 80068e4:	6553      	str	r3, [r2, #84]	; 0x54
 80068e6:	e003      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80068fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80068fe:	2300      	movs	r3, #0
 8006900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006902:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006906:	460b      	mov	r3, r1
 8006908:	4313      	orrs	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800690c:	4baa      	ldr	r3, [pc, #680]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006910:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691a:	4aa7      	ldr	r2, [pc, #668]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800691c:	430b      	orrs	r3, r1
 800691e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
 800692e:	2300      	movs	r3, #0
 8006930:	657b      	str	r3, [r7, #84]	; 0x54
 8006932:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006936:	460b      	mov	r3, r1
 8006938:	4313      	orrs	r3, r2
 800693a:	d00a      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800693c:	4b9e      	ldr	r3, [pc, #632]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006948:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800694c:	4a9a      	ldr	r2, [pc, #616]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800694e:	430b      	orrs	r3, r1
 8006950:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006960:	2300      	movs	r3, #0
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006964:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800696e:	4b92      	ldr	r3, [pc, #584]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006972:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697c:	4a8e      	ldr	r2, [pc, #568]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800697e:	430b      	orrs	r3, r1
 8006980:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800698e:	643b      	str	r3, [r7, #64]	; 0x40
 8006990:	2300      	movs	r3, #0
 8006992:	647b      	str	r3, [r7, #68]	; 0x44
 8006994:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d00e      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800699e:	4b86      	ldr	r3, [pc, #536]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	4a85      	ldr	r2, [pc, #532]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069a8:	6113      	str	r3, [r2, #16]
 80069aa:	4b83      	ldr	r3, [pc, #524]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ac:	6919      	ldr	r1, [r3, #16]
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069b6:	4a80      	ldr	r2, [pc, #512]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80069c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ca:	2300      	movs	r3, #0
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80069d2:	460b      	mov	r3, r1
 80069d4:	4313      	orrs	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069d8:	4b77      	ldr	r3, [pc, #476]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	4a74      	ldr	r2, [pc, #464]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069e8:	430b      	orrs	r3, r1
 80069ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80069f8:	633b      	str	r3, [r7, #48]	; 0x30
 80069fa:	2300      	movs	r3, #0
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006a02:	460b      	mov	r3, r1
 8006a04:	4313      	orrs	r3, r2
 8006a06:	d00a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a08:	4b6b      	ldr	r3, [pc, #428]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a18:	4a67      	ldr	r2, [pc, #412]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	2100      	movs	r1, #0
 8006a28:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a34:	460b      	mov	r3, r1
 8006a36:	4313      	orrs	r3, r2
 8006a38:	d011      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fb78 	bl	8007138 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	2100      	movs	r1, #0
 8006a68:	6239      	str	r1, [r7, #32]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d011      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7e:	3308      	adds	r3, #8
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fb58 	bl	8007138 <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	61b9      	str	r1, [r7, #24]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d011      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	3308      	adds	r3, #8
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fb38 	bl	8007138 <RCCEx_PLL2_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6139      	str	r1, [r7, #16]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006af4:	460b      	mov	r3, r1
 8006af6:	4313      	orrs	r3, r2
 8006af8:	d011      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006afe:	3328      	adds	r3, #40	; 0x28
 8006b00:	2100      	movs	r1, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fbca 	bl	800729c <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	2100      	movs	r1, #0
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b34:	460b      	mov	r3, r1
 8006b36:	4313      	orrs	r3, r2
 8006b38:	d011      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3e:	3328      	adds	r3, #40	; 0x28
 8006b40:	2101      	movs	r1, #1
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fbaa 	bl	800729c <RCCEx_PLL3_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	2100      	movs	r1, #0
 8006b68:	6039      	str	r1, [r7, #0]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b74:	460b      	mov	r3, r1
 8006b76:	4313      	orrs	r3, r2
 8006b78:	d011      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7e:	3328      	adds	r3, #40	; 0x28
 8006b80:	2102      	movs	r1, #2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fb8a 	bl	800729c <RCCEx_PLL3_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006b9e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e000      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb8:	58024400 	.word	0x58024400

08006bbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006bc0:	f7fe fd96 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	4904      	ldr	r1, [pc, #16]	; (8006be4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	58024400 	.word	0x58024400
 8006be4:	08009f10 	.word	0x08009f10

08006be8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b089      	sub	sp, #36	; 0x24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bf0:	4ba1      	ldr	r3, [pc, #644]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006bfa:	4b9f      	ldr	r3, [pc, #636]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	0b1b      	lsrs	r3, r3, #12
 8006c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c06:	4b9c      	ldr	r3, [pc, #624]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c12:	4b99      	ldr	r3, [pc, #612]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8111 	beq.w	8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	f000 8083 	beq.w	8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f200 80a1 	bhi.w	8006d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d056      	beq.n	8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c52:	e099      	b.n	8006d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c54:	4b88      	ldr	r3, [pc, #544]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02d      	beq.n	8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c60:	4b85      	ldr	r3, [pc, #532]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	08db      	lsrs	r3, r3, #3
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	4a84      	ldr	r2, [pc, #528]	; (8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b7b      	ldr	r3, [pc, #492]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006cba:	e087      	b.n	8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b6a      	ldr	r3, [pc, #424]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ce2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfe:	e065      	b.n	8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b59      	ldr	r3, [pc, #356]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d42:	e043      	b.n	8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b48      	ldr	r3, [pc, #288]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d86:	e021      	b.n	8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b37      	ldr	r3, [pc, #220]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006dcc:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	0a5b      	lsrs	r3, r3, #9
 8006dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df2:	ee17 2a90 	vmov	r2, s15
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006dfa:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	0c1b      	lsrs	r3, r3, #16
 8006e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e20:	ee17 2a90 	vmov	r2, s15
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e28:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	0e1b      	lsrs	r3, r3, #24
 8006e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e4e:	ee17 2a90 	vmov	r2, s15
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e56:	e008      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
}
 8006e6a:	bf00      	nop
 8006e6c:	3724      	adds	r7, #36	; 0x24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	58024400 	.word	0x58024400
 8006e7c:	03d09000 	.word	0x03d09000
 8006e80:	46000000 	.word	0x46000000
 8006e84:	4c742400 	.word	0x4c742400
 8006e88:	4a742400 	.word	0x4a742400
 8006e8c:	4af42400 	.word	0x4af42400

08006e90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e98:	4ba1      	ldr	r3, [pc, #644]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006ea2:	4b9f      	ldr	r3, [pc, #636]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	0d1b      	lsrs	r3, r3, #20
 8006ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006eae:	4b9c      	ldr	r3, [pc, #624]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006eba:	4b99      	ldr	r3, [pc, #612]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8111 	beq.w	8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f000 8083 	beq.w	8006fec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	f200 80a1 	bhi.w	8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d056      	beq.n	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006efa:	e099      	b.n	8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efc:	4b88      	ldr	r3, [pc, #544]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02d      	beq.n	8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f08:	4b85      	ldr	r3, [pc, #532]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	08db      	lsrs	r3, r3, #3
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	4a84      	ldr	r2, [pc, #528]	; (8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b7b      	ldr	r3, [pc, #492]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f62:	e087      	b.n	8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800712c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b6a      	ldr	r3, [pc, #424]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa6:	e065      	b.n	8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b59      	ldr	r3, [pc, #356]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fea:	e043      	b.n	8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b48      	ldr	r3, [pc, #288]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007012:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800702e:	e021      	b.n	8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b37      	ldr	r3, [pc, #220]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a03 	vldr	s12, [r7, #12]
 8007056:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007072:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007074:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	0a5b      	lsrs	r3, r3, #9
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800708a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800709a:	ee17 2a90 	vmov	r2, s15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80070a2:	4b1f      	ldr	r3, [pc, #124]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	0c1b      	lsrs	r3, r3, #16
 80070a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80070c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c8:	ee17 2a90 	vmov	r2, s15
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80070d0:	4b13      	ldr	r3, [pc, #76]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	0e1b      	lsrs	r3, r3, #24
 80070d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f6:	ee17 2a90 	vmov	r2, s15
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070fe:	e008      	b.n	8007112 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	609a      	str	r2, [r3, #8]
}
 8007112:	bf00      	nop
 8007114:	3724      	adds	r7, #36	; 0x24
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
 8007124:	03d09000 	.word	0x03d09000
 8007128:	46000000 	.word	0x46000000
 800712c:	4c742400 	.word	0x4c742400
 8007130:	4a742400 	.word	0x4a742400
 8007134:	4af42400 	.word	0x4af42400

08007138 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007146:	4b53      	ldr	r3, [pc, #332]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d101      	bne.n	8007156 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e099      	b.n	800728a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007156:	4b4f      	ldr	r3, [pc, #316]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a4e      	ldr	r2, [pc, #312]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800715c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007162:	f7fa fb45 	bl	80017f0 <HAL_GetTick>
 8007166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007168:	e008      	b.n	800717c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800716a:	f7fa fb41 	bl	80017f0 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e086      	b.n	800728a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800717c:	4b45      	ldr	r3, [pc, #276]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f0      	bne.n	800716a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007188:	4b42      	ldr	r3, [pc, #264]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	031b      	lsls	r3, r3, #12
 8007196:	493f      	ldr	r1, [pc, #252]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	628b      	str	r3, [r1, #40]	; 0x28
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	025b      	lsls	r3, r3, #9
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	061b      	lsls	r3, r3, #24
 80071c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071cc:	4931      	ldr	r1, [pc, #196]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071d2:	4b30      	ldr	r3, [pc, #192]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	492d      	ldr	r1, [pc, #180]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071e4:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	f023 0220 	bic.w	r2, r3, #32
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	4928      	ldr	r1, [pc, #160]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071f6:	4b27      	ldr	r3, [pc, #156]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a26      	ldr	r2, [pc, #152]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 80071fc:	f023 0310 	bic.w	r3, r3, #16
 8007200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007202:	4b24      	ldr	r3, [pc, #144]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <RCCEx_PLL2_Config+0x160>)
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	69d2      	ldr	r2, [r2, #28]
 800720e:	00d2      	lsls	r2, r2, #3
 8007210:	4920      	ldr	r1, [pc, #128]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007212:	4313      	orrs	r3, r2
 8007214:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007216:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	4a1e      	ldr	r2, [pc, #120]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800721c:	f043 0310 	orr.w	r3, r3, #16
 8007220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4a19      	ldr	r2, [pc, #100]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800722e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007234:	e00f      	b.n	8007256 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d106      	bne.n	800724a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800723c:	4b15      	ldr	r3, [pc, #84]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4a14      	ldr	r2, [pc, #80]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007248:	e005      	b.n	8007256 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800724a:	4b12      	ldr	r3, [pc, #72]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	4a11      	ldr	r2, [pc, #68]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007254:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a0e      	ldr	r2, [pc, #56]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800725c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007262:	f7fa fac5 	bl	80017f0 <HAL_GetTick>
 8007266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007268:	e008      	b.n	800727c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800726a:	f7fa fac1 	bl	80017f0 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e006      	b.n	800728a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <RCCEx_PLL2_Config+0x15c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0f0      	beq.n	800726a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	58024400 	.word	0x58024400
 8007298:	ffff0007 	.word	0xffff0007

0800729c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072aa:	4b53      	ldr	r3, [pc, #332]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d101      	bne.n	80072ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e099      	b.n	80073ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80072ba:	4b4f      	ldr	r3, [pc, #316]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a4e      	ldr	r2, [pc, #312]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80072c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c6:	f7fa fa93 	bl	80017f0 <HAL_GetTick>
 80072ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072cc:	e008      	b.n	80072e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072ce:	f7fa fa8f 	bl	80017f0 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e086      	b.n	80073ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072e0:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f0      	bne.n	80072ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072ec:	4b42      	ldr	r3, [pc, #264]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	051b      	lsls	r3, r3, #20
 80072fa:	493f      	ldr	r1, [pc, #252]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	628b      	str	r3, [r1, #40]	; 0x28
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	3b01      	subs	r3, #1
 8007306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	3b01      	subs	r3, #1
 8007310:	025b      	lsls	r3, r3, #9
 8007312:	b29b      	uxth	r3, r3
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	3b01      	subs	r3, #1
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	3b01      	subs	r3, #1
 800732a:	061b      	lsls	r3, r3, #24
 800732c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007330:	4931      	ldr	r1, [pc, #196]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007332:	4313      	orrs	r3, r2
 8007334:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007336:	4b30      	ldr	r3, [pc, #192]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	492d      	ldr	r1, [pc, #180]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007344:	4313      	orrs	r3, r2
 8007346:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007348:	4b2b      	ldr	r3, [pc, #172]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	4928      	ldr	r1, [pc, #160]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007356:	4313      	orrs	r3, r2
 8007358:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800735a:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	4a26      	ldr	r2, [pc, #152]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007366:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <RCCEx_PLL3_Config+0x160>)
 800736c:	4013      	ands	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	69d2      	ldr	r2, [r2, #28]
 8007372:	00d2      	lsls	r2, r2, #3
 8007374:	4920      	ldr	r1, [pc, #128]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007376:	4313      	orrs	r3, r2
 8007378:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800737a:	4b1f      	ldr	r3, [pc, #124]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800738c:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 8007392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007398:	e00f      	b.n	80073ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d106      	bne.n	80073ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073a0:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073ac:	e005      	b.n	80073ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80073ba:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c6:	f7fa fa13 	bl	80017f0 <HAL_GetTick>
 80073ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073cc:	e008      	b.n	80073e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073ce:	f7fa fa0f 	bl	80017f0 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e006      	b.n	80073ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <RCCEx_PLL3_Config+0x15c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f0      	beq.n	80073ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	58024400 	.word	0x58024400
 80073fc:	ffff0007 	.word	0xffff0007

08007400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e042      	b.n	8007498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7f9 ff3f 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fc94 	bl	8007d70 <UART_SetConfig>
 8007448:	4603      	mov	r3, r0
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e022      	b.n	8007498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 f9f0 	bl	8008840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800746e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800747e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 fa77 	bl	8008984 <UART_CheckIdleState>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	; 0x28
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d17b      	bne.n	80075b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_UART_Transmit+0x26>
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e074      	b.n	80075b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2221      	movs	r2, #33	; 0x21
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074da:	f7fa f989 	bl	80017f0 <HAL_GetTick>
 80074de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f8:	d108      	bne.n	800750c <HAL_UART_Transmit+0x6c>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e003      	b.n	8007514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007510:	2300      	movs	r3, #0
 8007512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007514:	e030      	b.n	8007578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2200      	movs	r2, #0
 800751e:	2180      	movs	r1, #128	; 0x80
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f001 fad9 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e03d      	b.n	80075b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10b      	bne.n	8007556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800754c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	3302      	adds	r3, #2
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	e007      	b.n	8007566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3301      	adds	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1c8      	bne.n	8007516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2200      	movs	r2, #0
 800758c:	2140      	movs	r1, #64	; 0x40
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f001 faa2 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d005      	beq.n	80075a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e006      	b.n	80075b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075b2:	2302      	movs	r3, #2
  }
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b0ba      	sub	sp, #232	; 0xe8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80075ea:	4013      	ands	r3, r2
 80075ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11b      	bne.n	8007630 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d015      	beq.n	8007630 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d009      	beq.n	8007630 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8377 	beq.w	8007d14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
      }
      return;
 800762e:	e371      	b.n	8007d14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8123 	beq.w	8007880 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800763a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800763e:	4b8d      	ldr	r3, [pc, #564]	; (8007874 <HAL_UART_IRQHandler+0x2b8>)
 8007640:	4013      	ands	r3, r2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007646:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800764a:	4b8b      	ldr	r3, [pc, #556]	; (8007878 <HAL_UART_IRQHandler+0x2bc>)
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8116 	beq.w	8007880 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d011      	beq.n	8007684 <HAL_UART_IRQHandler+0xc8>
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2201      	movs	r2, #1
 8007672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	f043 0201 	orr.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d011      	beq.n	80076b4 <HAL_UART_IRQHandler+0xf8>
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2202      	movs	r2, #2
 80076a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d011      	beq.n	80076e4 <HAL_UART_IRQHandler+0x128>
 80076c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2204      	movs	r2, #4
 80076d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076da:	f043 0202 	orr.w	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d017      	beq.n	8007720 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d105      	bne.n	8007708 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007700:	4b5c      	ldr	r3, [pc, #368]	; (8007874 <HAL_UART_IRQHandler+0x2b8>)
 8007702:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2208      	movs	r2, #8
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007716:	f043 0208 	orr.w	r2, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007728:	2b00      	cmp	r3, #0
 800772a:	d012      	beq.n	8007752 <HAL_UART_IRQHandler+0x196>
 800772c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00c      	beq.n	8007752 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 82dd 	beq.w	8007d18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800775e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d013      	beq.n	8007792 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800776a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d105      	bne.n	8007782 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800777a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d005      	beq.n	80077b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d054      	beq.n	8007860 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 f9f6 	bl	8008ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d146      	bne.n	8007858 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800780e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1d9      	bne.n	80077ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d017      	beq.n	8007850 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007826:	4a15      	ldr	r2, [pc, #84]	; (800787c <HAL_UART_IRQHandler+0x2c0>)
 8007828:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007830:	4618      	mov	r0, r3
 8007832:	f7fa fc5b 	bl	80020ec <HAL_DMA_Abort_IT>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d019      	beq.n	8007870 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800784a:	4610      	mov	r0, r2
 800784c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784e:	e00f      	b.n	8007870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fa77 	bl	8007d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007856:	e00b      	b.n	8007870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fa73 	bl	8007d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785e:	e007      	b.n	8007870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa6f 	bl	8007d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800786e:	e253      	b.n	8007d18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	bf00      	nop
    return;
 8007872:	e251      	b.n	8007d18 <HAL_UART_IRQHandler+0x75c>
 8007874:	10000001 	.word	0x10000001
 8007878:	04000120 	.word	0x04000120
 800787c:	08008c75 	.word	0x08008c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007884:	2b01      	cmp	r3, #1
 8007886:	f040 81e7 	bne.w	8007c58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800788a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 81e0 	beq.w	8007c58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 81d9 	beq.w	8007c58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2210      	movs	r2, #16
 80078ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	f040 8151 	bne.w	8007b60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a96      	ldr	r2, [pc, #600]	; (8007b20 <HAL_UART_IRQHandler+0x564>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d068      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a93      	ldr	r2, [pc, #588]	; (8007b24 <HAL_UART_IRQHandler+0x568>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d061      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a91      	ldr	r2, [pc, #580]	; (8007b28 <HAL_UART_IRQHandler+0x56c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d05a      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a8e      	ldr	r2, [pc, #568]	; (8007b2c <HAL_UART_IRQHandler+0x570>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d053      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a8c      	ldr	r2, [pc, #560]	; (8007b30 <HAL_UART_IRQHandler+0x574>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d04c      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a89      	ldr	r2, [pc, #548]	; (8007b34 <HAL_UART_IRQHandler+0x578>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d045      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a87      	ldr	r2, [pc, #540]	; (8007b38 <HAL_UART_IRQHandler+0x57c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d03e      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a84      	ldr	r2, [pc, #528]	; (8007b3c <HAL_UART_IRQHandler+0x580>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d037      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a82      	ldr	r2, [pc, #520]	; (8007b40 <HAL_UART_IRQHandler+0x584>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d030      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a7f      	ldr	r2, [pc, #508]	; (8007b44 <HAL_UART_IRQHandler+0x588>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d029      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a7d      	ldr	r2, [pc, #500]	; (8007b48 <HAL_UART_IRQHandler+0x58c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d022      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a7a      	ldr	r2, [pc, #488]	; (8007b4c <HAL_UART_IRQHandler+0x590>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d01b      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a78      	ldr	r2, [pc, #480]	; (8007b50 <HAL_UART_IRQHandler+0x594>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d014      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a75      	ldr	r2, [pc, #468]	; (8007b54 <HAL_UART_IRQHandler+0x598>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00d      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a73      	ldr	r2, [pc, #460]	; (8007b58 <HAL_UART_IRQHandler+0x59c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d006      	beq.n	800799e <HAL_UART_IRQHandler+0x3e2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a70      	ldr	r2, [pc, #448]	; (8007b5c <HAL_UART_IRQHandler+0x5a0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d106      	bne.n	80079ac <HAL_UART_IRQHandler+0x3f0>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	e005      	b.n	80079b8 <HAL_UART_IRQHandler+0x3fc>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 81ab 	beq.w	8007d1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079d0:	429a      	cmp	r2, r3
 80079d2:	f080 81a3 	bcs.w	8007d1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ec:	f000 8087 	beq.w	8007afe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1da      	bne.n	80079f0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e1      	bne.n	8007a3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e3      	bne.n	8007a76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007acc:	f023 0310 	bic.w	r3, r3, #16
 8007ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ae0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e4      	bne.n	8007abc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7f9 ffd9 	bl	8001ab0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f91d 	bl	8007d58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b1e:	e0fd      	b.n	8007d1c <HAL_UART_IRQHandler+0x760>
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80cf 	beq.w	8007d20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80ca 	beq.w	8007d20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bae:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e4      	bne.n	8007b8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	4b55      	ldr	r3, [pc, #340]	; (8007d2c <HAL_UART_IRQHandler+0x770>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007be6:	633a      	str	r2, [r7, #48]	; 0x30
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e3      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0310 	bic.w	r3, r3, #16
 8007c22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	69b9      	ldr	r1, [r7, #24]
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e4      	bne.n	8007c0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f881 	bl	8007d58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c56:	e063      	b.n	8007d20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00e      	beq.n	8007c82 <HAL_UART_IRQHandler+0x6c6>
 8007c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 f83b 	bl	8008cf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c80:	e051      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d014      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d03a      	beq.n	8007d24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
    }
    return;
 8007cb6:	e035      	b.n	8007d24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x71c>
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 ffe5 	bl	8008ca0 <UART_EndTransmit_IT>
    return;
 8007cd6:	e026      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <HAL_UART_IRQHandler+0x73c>
 8007ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f814 	bl	8008d1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cf6:	e016      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d010      	beq.n	8007d26 <HAL_UART_IRQHandler+0x76a>
 8007d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	da0c      	bge.n	8007d26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fffc 	bl	8008d0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d12:	e008      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d14:	bf00      	nop
 8007d16:	e006      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
    return;
 8007d18:	bf00      	nop
 8007d1a:	e004      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d1c:	bf00      	nop
 8007d1e:	e002      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d20:	bf00      	nop
 8007d22:	e000      	b.n	8007d26 <HAL_UART_IRQHandler+0x76a>
    return;
 8007d24:	bf00      	nop
  }
}
 8007d26:	37e8      	adds	r7, #232	; 0xe8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	effffffe 	.word	0xeffffffe

08007d30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d74:	b092      	sub	sp, #72	; 0x48
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4bbe      	ldr	r3, [pc, #760]	; (8008098 <UART_SetConfig+0x328>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4ab3      	ldr	r2, [pc, #716]	; (800809c <UART_SetConfig+0x32c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d004      	beq.n	8007ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	4baf      	ldr	r3, [pc, #700]	; (80080a0 <UART_SetConfig+0x330>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	f023 010f 	bic.w	r1, r3, #15
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4aa6      	ldr	r2, [pc, #664]	; (80080a4 <UART_SetConfig+0x334>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d177      	bne.n	8007f00 <UART_SetConfig+0x190>
 8007e10:	4ba5      	ldr	r3, [pc, #660]	; (80080a8 <UART_SetConfig+0x338>)
 8007e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e18:	2b28      	cmp	r3, #40	; 0x28
 8007e1a:	d86d      	bhi.n	8007ef8 <UART_SetConfig+0x188>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0xb4>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007ec9 	.word	0x08007ec9
 8007e28:	08007ef9 	.word	0x08007ef9
 8007e2c:	08007ef9 	.word	0x08007ef9
 8007e30:	08007ef9 	.word	0x08007ef9
 8007e34:	08007ef9 	.word	0x08007ef9
 8007e38:	08007ef9 	.word	0x08007ef9
 8007e3c:	08007ef9 	.word	0x08007ef9
 8007e40:	08007ef9 	.word	0x08007ef9
 8007e44:	08007ed1 	.word	0x08007ed1
 8007e48:	08007ef9 	.word	0x08007ef9
 8007e4c:	08007ef9 	.word	0x08007ef9
 8007e50:	08007ef9 	.word	0x08007ef9
 8007e54:	08007ef9 	.word	0x08007ef9
 8007e58:	08007ef9 	.word	0x08007ef9
 8007e5c:	08007ef9 	.word	0x08007ef9
 8007e60:	08007ef9 	.word	0x08007ef9
 8007e64:	08007ed9 	.word	0x08007ed9
 8007e68:	08007ef9 	.word	0x08007ef9
 8007e6c:	08007ef9 	.word	0x08007ef9
 8007e70:	08007ef9 	.word	0x08007ef9
 8007e74:	08007ef9 	.word	0x08007ef9
 8007e78:	08007ef9 	.word	0x08007ef9
 8007e7c:	08007ef9 	.word	0x08007ef9
 8007e80:	08007ef9 	.word	0x08007ef9
 8007e84:	08007ee1 	.word	0x08007ee1
 8007e88:	08007ef9 	.word	0x08007ef9
 8007e8c:	08007ef9 	.word	0x08007ef9
 8007e90:	08007ef9 	.word	0x08007ef9
 8007e94:	08007ef9 	.word	0x08007ef9
 8007e98:	08007ef9 	.word	0x08007ef9
 8007e9c:	08007ef9 	.word	0x08007ef9
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007ee9 	.word	0x08007ee9
 8007ea8:	08007ef9 	.word	0x08007ef9
 8007eac:	08007ef9 	.word	0x08007ef9
 8007eb0:	08007ef9 	.word	0x08007ef9
 8007eb4:	08007ef9 	.word	0x08007ef9
 8007eb8:	08007ef9 	.word	0x08007ef9
 8007ebc:	08007ef9 	.word	0x08007ef9
 8007ec0:	08007ef9 	.word	0x08007ef9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e222      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e21e      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e21a      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e216      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007ee8:	2320      	movs	r3, #32
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e212      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e20e      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e20a      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a69      	ldr	r2, [pc, #420]	; (80080ac <UART_SetConfig+0x33c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d130      	bne.n	8007f6c <UART_SetConfig+0x1fc>
 8007f0a:	4b67      	ldr	r3, [pc, #412]	; (80080a8 <UART_SetConfig+0x338>)
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d826      	bhi.n	8007f64 <UART_SetConfig+0x1f4>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0x1ac>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f35 	.word	0x08007f35
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f45 	.word	0x08007f45
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f55 	.word	0x08007f55
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e1ec      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e1e8      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e1e4      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e1e0      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f54:	2320      	movs	r3, #32
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e1dc      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f5c:	2340      	movs	r3, #64	; 0x40
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e1d8      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e1d4      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a4f      	ldr	r2, [pc, #316]	; (80080b0 <UART_SetConfig+0x340>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d130      	bne.n	8007fd8 <UART_SetConfig+0x268>
 8007f76:	4b4c      	ldr	r3, [pc, #304]	; (80080a8 <UART_SetConfig+0x338>)
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d826      	bhi.n	8007fd0 <UART_SetConfig+0x260>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x218>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fa1 	.word	0x08007fa1
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fc1 	.word	0x08007fc1
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e1b6      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e1b2      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e1ae      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fbe:	e1aa      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc6:	e1a6      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fce:	e1a2      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e19e      	b.n	8008316 <UART_SetConfig+0x5a6>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a35      	ldr	r2, [pc, #212]	; (80080b4 <UART_SetConfig+0x344>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d130      	bne.n	8008044 <UART_SetConfig+0x2d4>
 8007fe2:	4b31      	ldr	r3, [pc, #196]	; (80080a8 <UART_SetConfig+0x338>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d826      	bhi.n	800803c <UART_SetConfig+0x2cc>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <UART_SetConfig+0x284>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	0800800d 	.word	0x0800800d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	0800801d 	.word	0x0800801d
 8008000:	08008025 	.word	0x08008025
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008035 	.word	0x08008035
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e180      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008014:	2304      	movs	r3, #4
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e17c      	b.n	8008316 <UART_SetConfig+0x5a6>
 800801c:	2308      	movs	r3, #8
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e178      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008024:	2310      	movs	r3, #16
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e174      	b.n	8008316 <UART_SetConfig+0x5a6>
 800802c:	2320      	movs	r3, #32
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e170      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008034:	2340      	movs	r3, #64	; 0x40
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e16c      	b.n	8008316 <UART_SetConfig+0x5a6>
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e168      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1b      	ldr	r2, [pc, #108]	; (80080b8 <UART_SetConfig+0x348>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d142      	bne.n	80080d4 <UART_SetConfig+0x364>
 800804e:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <UART_SetConfig+0x338>)
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b05      	cmp	r3, #5
 8008058:	d838      	bhi.n	80080cc <UART_SetConfig+0x35c>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <UART_SetConfig+0x2f0>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008079 	.word	0x08008079
 8008064:	08008081 	.word	0x08008081
 8008068:	08008089 	.word	0x08008089
 800806c:	08008091 	.word	0x08008091
 8008070:	080080bd 	.word	0x080080bd
 8008074:	080080c5 	.word	0x080080c5
 8008078:	2300      	movs	r3, #0
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e14a      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e146      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e142      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e13e      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008098:	cfff69f3 	.word	0xcfff69f3
 800809c:	58000c00 	.word	0x58000c00
 80080a0:	11fff4ff 	.word	0x11fff4ff
 80080a4:	40011000 	.word	0x40011000
 80080a8:	58024400 	.word	0x58024400
 80080ac:	40004400 	.word	0x40004400
 80080b0:	40004800 	.word	0x40004800
 80080b4:	40004c00 	.word	0x40004c00
 80080b8:	40005000 	.word	0x40005000
 80080bc:	2320      	movs	r3, #32
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e128      	b.n	8008316 <UART_SetConfig+0x5a6>
 80080c4:	2340      	movs	r3, #64	; 0x40
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e124      	b.n	8008316 <UART_SetConfig+0x5a6>
 80080cc:	2380      	movs	r3, #128	; 0x80
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e120      	b.n	8008316 <UART_SetConfig+0x5a6>
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4acb      	ldr	r2, [pc, #812]	; (8008408 <UART_SetConfig+0x698>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d176      	bne.n	80081cc <UART_SetConfig+0x45c>
 80080de:	4bcb      	ldr	r3, [pc, #812]	; (800840c <UART_SetConfig+0x69c>)
 80080e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080e6:	2b28      	cmp	r3, #40	; 0x28
 80080e8:	d86c      	bhi.n	80081c4 <UART_SetConfig+0x454>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x380>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008195 	.word	0x08008195
 80080f4:	080081c5 	.word	0x080081c5
 80080f8:	080081c5 	.word	0x080081c5
 80080fc:	080081c5 	.word	0x080081c5
 8008100:	080081c5 	.word	0x080081c5
 8008104:	080081c5 	.word	0x080081c5
 8008108:	080081c5 	.word	0x080081c5
 800810c:	080081c5 	.word	0x080081c5
 8008110:	0800819d 	.word	0x0800819d
 8008114:	080081c5 	.word	0x080081c5
 8008118:	080081c5 	.word	0x080081c5
 800811c:	080081c5 	.word	0x080081c5
 8008120:	080081c5 	.word	0x080081c5
 8008124:	080081c5 	.word	0x080081c5
 8008128:	080081c5 	.word	0x080081c5
 800812c:	080081c5 	.word	0x080081c5
 8008130:	080081a5 	.word	0x080081a5
 8008134:	080081c5 	.word	0x080081c5
 8008138:	080081c5 	.word	0x080081c5
 800813c:	080081c5 	.word	0x080081c5
 8008140:	080081c5 	.word	0x080081c5
 8008144:	080081c5 	.word	0x080081c5
 8008148:	080081c5 	.word	0x080081c5
 800814c:	080081c5 	.word	0x080081c5
 8008150:	080081ad 	.word	0x080081ad
 8008154:	080081c5 	.word	0x080081c5
 8008158:	080081c5 	.word	0x080081c5
 800815c:	080081c5 	.word	0x080081c5
 8008160:	080081c5 	.word	0x080081c5
 8008164:	080081c5 	.word	0x080081c5
 8008168:	080081c5 	.word	0x080081c5
 800816c:	080081c5 	.word	0x080081c5
 8008170:	080081b5 	.word	0x080081b5
 8008174:	080081c5 	.word	0x080081c5
 8008178:	080081c5 	.word	0x080081c5
 800817c:	080081c5 	.word	0x080081c5
 8008180:	080081c5 	.word	0x080081c5
 8008184:	080081c5 	.word	0x080081c5
 8008188:	080081c5 	.word	0x080081c5
 800818c:	080081c5 	.word	0x080081c5
 8008190:	080081bd 	.word	0x080081bd
 8008194:	2301      	movs	r3, #1
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e0bc      	b.n	8008316 <UART_SetConfig+0x5a6>
 800819c:	2304      	movs	r3, #4
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e0b8      	b.n	8008316 <UART_SetConfig+0x5a6>
 80081a4:	2308      	movs	r3, #8
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081aa:	e0b4      	b.n	8008316 <UART_SetConfig+0x5a6>
 80081ac:	2310      	movs	r3, #16
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e0b0      	b.n	8008316 <UART_SetConfig+0x5a6>
 80081b4:	2320      	movs	r3, #32
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ba:	e0ac      	b.n	8008316 <UART_SetConfig+0x5a6>
 80081bc:	2340      	movs	r3, #64	; 0x40
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c2:	e0a8      	b.n	8008316 <UART_SetConfig+0x5a6>
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e0a4      	b.n	8008316 <UART_SetConfig+0x5a6>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a8f      	ldr	r2, [pc, #572]	; (8008410 <UART_SetConfig+0x6a0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d130      	bne.n	8008238 <UART_SetConfig+0x4c8>
 80081d6:	4b8d      	ldr	r3, [pc, #564]	; (800840c <UART_SetConfig+0x69c>)
 80081d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	2b05      	cmp	r3, #5
 80081e0:	d826      	bhi.n	8008230 <UART_SetConfig+0x4c0>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <UART_SetConfig+0x478>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	08008201 	.word	0x08008201
 80081ec:	08008209 	.word	0x08008209
 80081f0:	08008211 	.word	0x08008211
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008221 	.word	0x08008221
 80081fc:	08008229 	.word	0x08008229
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e086      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008208:	2304      	movs	r3, #4
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820e:	e082      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008216:	e07e      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008218:	2310      	movs	r3, #16
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821e:	e07a      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008220:	2320      	movs	r3, #32
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008226:	e076      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008228:	2340      	movs	r3, #64	; 0x40
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e072      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e06e      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a75      	ldr	r2, [pc, #468]	; (8008414 <UART_SetConfig+0x6a4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d130      	bne.n	80082a4 <UART_SetConfig+0x534>
 8008242:	4b72      	ldr	r3, [pc, #456]	; (800840c <UART_SetConfig+0x69c>)
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b05      	cmp	r3, #5
 800824c:	d826      	bhi.n	800829c <UART_SetConfig+0x52c>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <UART_SetConfig+0x4e4>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	0800826d 	.word	0x0800826d
 8008258:	08008275 	.word	0x08008275
 800825c:	0800827d 	.word	0x0800827d
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008295 	.word	0x08008295
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e050      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008274:	2304      	movs	r3, #4
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e04c      	b.n	8008316 <UART_SetConfig+0x5a6>
 800827c:	2308      	movs	r3, #8
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008282:	e048      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008284:	2310      	movs	r3, #16
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828a:	e044      	b.n	8008316 <UART_SetConfig+0x5a6>
 800828c:	2320      	movs	r3, #32
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008292:	e040      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008294:	2340      	movs	r3, #64	; 0x40
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e03c      	b.n	8008316 <UART_SetConfig+0x5a6>
 800829c:	2380      	movs	r3, #128	; 0x80
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e038      	b.n	8008316 <UART_SetConfig+0x5a6>
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a5b      	ldr	r2, [pc, #364]	; (8008418 <UART_SetConfig+0x6a8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d130      	bne.n	8008310 <UART_SetConfig+0x5a0>
 80082ae:	4b57      	ldr	r3, [pc, #348]	; (800840c <UART_SetConfig+0x69c>)
 80082b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d826      	bhi.n	8008308 <UART_SetConfig+0x598>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x550>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082d9 	.word	0x080082d9
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	080082f1 	.word	0x080082f1
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	08008301 	.word	0x08008301
 80082d8:	2302      	movs	r3, #2
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e01a      	b.n	8008316 <UART_SetConfig+0x5a6>
 80082e0:	2304      	movs	r3, #4
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e016      	b.n	8008316 <UART_SetConfig+0x5a6>
 80082e8:	2308      	movs	r3, #8
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e012      	b.n	8008316 <UART_SetConfig+0x5a6>
 80082f0:	2310      	movs	r3, #16
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e00e      	b.n	8008316 <UART_SetConfig+0x5a6>
 80082f8:	2320      	movs	r3, #32
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e00a      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e006      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e002      	b.n	8008316 <UART_SetConfig+0x5a6>
 8008310:	2380      	movs	r3, #128	; 0x80
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a3f      	ldr	r2, [pc, #252]	; (8008418 <UART_SetConfig+0x6a8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	f040 80f8 	bne.w	8008512 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008322:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008326:	2b20      	cmp	r3, #32
 8008328:	dc46      	bgt.n	80083b8 <UART_SetConfig+0x648>
 800832a:	2b02      	cmp	r3, #2
 800832c:	f2c0 8082 	blt.w	8008434 <UART_SetConfig+0x6c4>
 8008330:	3b02      	subs	r3, #2
 8008332:	2b1e      	cmp	r3, #30
 8008334:	d87e      	bhi.n	8008434 <UART_SetConfig+0x6c4>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x5cc>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	080083bf 	.word	0x080083bf
 8008340:	08008435 	.word	0x08008435
 8008344:	080083c7 	.word	0x080083c7
 8008348:	08008435 	.word	0x08008435
 800834c:	08008435 	.word	0x08008435
 8008350:	08008435 	.word	0x08008435
 8008354:	080083d7 	.word	0x080083d7
 8008358:	08008435 	.word	0x08008435
 800835c:	08008435 	.word	0x08008435
 8008360:	08008435 	.word	0x08008435
 8008364:	08008435 	.word	0x08008435
 8008368:	08008435 	.word	0x08008435
 800836c:	08008435 	.word	0x08008435
 8008370:	08008435 	.word	0x08008435
 8008374:	080083e7 	.word	0x080083e7
 8008378:	08008435 	.word	0x08008435
 800837c:	08008435 	.word	0x08008435
 8008380:	08008435 	.word	0x08008435
 8008384:	08008435 	.word	0x08008435
 8008388:	08008435 	.word	0x08008435
 800838c:	08008435 	.word	0x08008435
 8008390:	08008435 	.word	0x08008435
 8008394:	08008435 	.word	0x08008435
 8008398:	08008435 	.word	0x08008435
 800839c:	08008435 	.word	0x08008435
 80083a0:	08008435 	.word	0x08008435
 80083a4:	08008435 	.word	0x08008435
 80083a8:	08008435 	.word	0x08008435
 80083ac:	08008435 	.word	0x08008435
 80083b0:	08008435 	.word	0x08008435
 80083b4:	08008427 	.word	0x08008427
 80083b8:	2b40      	cmp	r3, #64	; 0x40
 80083ba:	d037      	beq.n	800842c <UART_SetConfig+0x6bc>
 80083bc:	e03a      	b.n	8008434 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083be:	f7fe fbfd 	bl	8006bbc <HAL_RCCEx_GetD3PCLK1Freq>
 80083c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083c4:	e03c      	b.n	8008440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fc0c 	bl	8006be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d4:	e034      	b.n	8008440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d6:	f107 0318 	add.w	r3, r7, #24
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fd58 	bl	8006e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e4:	e02c      	b.n	8008440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <UART_SetConfig+0x69c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <UART_SetConfig+0x69c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	4a07      	ldr	r2, [pc, #28]	; (800841c <UART_SetConfig+0x6ac>)
 80083fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008404:	e01c      	b.n	8008440 <UART_SetConfig+0x6d0>
 8008406:	bf00      	nop
 8008408:	40011400 	.word	0x40011400
 800840c:	58024400 	.word	0x58024400
 8008410:	40007800 	.word	0x40007800
 8008414:	40007c00 	.word	0x40007c00
 8008418:	58000c00 	.word	0x58000c00
 800841c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008420:	4b9d      	ldr	r3, [pc, #628]	; (8008698 <UART_SetConfig+0x928>)
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008424:	e00c      	b.n	8008440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008426:	4b9d      	ldr	r3, [pc, #628]	; (800869c <UART_SetConfig+0x92c>)
 8008428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800842a:	e009      	b.n	8008440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008432:	e005      	b.n	8008440 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800843e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 81de 	beq.w	8008804 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	4a94      	ldr	r2, [pc, #592]	; (80086a0 <UART_SetConfig+0x930>)
 800844e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008452:	461a      	mov	r2, r3
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	fbb3 f3f2 	udiv	r3, r3, r2
 800845a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	4413      	add	r3, r2
 8008466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008468:	429a      	cmp	r2, r3
 800846a:	d305      	bcc.n	8008478 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008474:	429a      	cmp	r2, r3
 8008476:	d903      	bls.n	8008480 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800847e:	e1c1      	b.n	8008804 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008482:	2200      	movs	r2, #0
 8008484:	60bb      	str	r3, [r7, #8]
 8008486:	60fa      	str	r2, [r7, #12]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	4a84      	ldr	r2, [pc, #528]	; (80086a0 <UART_SetConfig+0x930>)
 800848e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008492:	b29b      	uxth	r3, r3
 8008494:	2200      	movs	r2, #0
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	607a      	str	r2, [r7, #4]
 800849a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800849e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084a2:	f7f7 ff6d 	bl	8000380 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4610      	mov	r0, r2
 80084ac:	4619      	mov	r1, r3
 80084ae:	f04f 0200 	mov.w	r2, #0
 80084b2:	f04f 0300 	mov.w	r3, #0
 80084b6:	020b      	lsls	r3, r1, #8
 80084b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084bc:	0202      	lsls	r2, r0, #8
 80084be:	6979      	ldr	r1, [r7, #20]
 80084c0:	6849      	ldr	r1, [r1, #4]
 80084c2:	0849      	lsrs	r1, r1, #1
 80084c4:	2000      	movs	r0, #0
 80084c6:	460c      	mov	r4, r1
 80084c8:	4605      	mov	r5, r0
 80084ca:	eb12 0804 	adds.w	r8, r2, r4
 80084ce:	eb43 0905 	adc.w	r9, r3, r5
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	469a      	mov	sl, r3
 80084da:	4693      	mov	fp, r2
 80084dc:	4652      	mov	r2, sl
 80084de:	465b      	mov	r3, fp
 80084e0:	4640      	mov	r0, r8
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f7 ff4c 	bl	8000380 <__aeabi_uldivmod>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4613      	mov	r3, r2
 80084ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084f6:	d308      	bcc.n	800850a <UART_SetConfig+0x79a>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fe:	d204      	bcs.n	800850a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008506:	60da      	str	r2, [r3, #12]
 8008508:	e17c      	b.n	8008804 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008510:	e178      	b.n	8008804 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851a:	f040 80c5 	bne.w	80086a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800851e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008522:	2b20      	cmp	r3, #32
 8008524:	dc48      	bgt.n	80085b8 <UART_SetConfig+0x848>
 8008526:	2b00      	cmp	r3, #0
 8008528:	db7b      	blt.n	8008622 <UART_SetConfig+0x8b2>
 800852a:	2b20      	cmp	r3, #32
 800852c:	d879      	bhi.n	8008622 <UART_SetConfig+0x8b2>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0x7c4>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	080085bf 	.word	0x080085bf
 8008538:	080085c7 	.word	0x080085c7
 800853c:	08008623 	.word	0x08008623
 8008540:	08008623 	.word	0x08008623
 8008544:	080085cf 	.word	0x080085cf
 8008548:	08008623 	.word	0x08008623
 800854c:	08008623 	.word	0x08008623
 8008550:	08008623 	.word	0x08008623
 8008554:	080085df 	.word	0x080085df
 8008558:	08008623 	.word	0x08008623
 800855c:	08008623 	.word	0x08008623
 8008560:	08008623 	.word	0x08008623
 8008564:	08008623 	.word	0x08008623
 8008568:	08008623 	.word	0x08008623
 800856c:	08008623 	.word	0x08008623
 8008570:	08008623 	.word	0x08008623
 8008574:	080085ef 	.word	0x080085ef
 8008578:	08008623 	.word	0x08008623
 800857c:	08008623 	.word	0x08008623
 8008580:	08008623 	.word	0x08008623
 8008584:	08008623 	.word	0x08008623
 8008588:	08008623 	.word	0x08008623
 800858c:	08008623 	.word	0x08008623
 8008590:	08008623 	.word	0x08008623
 8008594:	08008623 	.word	0x08008623
 8008598:	08008623 	.word	0x08008623
 800859c:	08008623 	.word	0x08008623
 80085a0:	08008623 	.word	0x08008623
 80085a4:	08008623 	.word	0x08008623
 80085a8:	08008623 	.word	0x08008623
 80085ac:	08008623 	.word	0x08008623
 80085b0:	08008623 	.word	0x08008623
 80085b4:	08008615 	.word	0x08008615
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d02e      	beq.n	800861a <UART_SetConfig+0x8aa>
 80085bc:	e031      	b.n	8008622 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085be:	f7fd f8c7 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 80085c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085c4:	e033      	b.n	800862e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085c6:	f7fd f8d9 	bl	800577c <HAL_RCC_GetPCLK2Freq>
 80085ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085cc:	e02f      	b.n	800862e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fb08 	bl	8006be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085dc:	e027      	b.n	800862e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085de:	f107 0318 	add.w	r3, r7, #24
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fc54 	bl	8006e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ec:	e01f      	b.n	800862e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ee:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <UART_SetConfig+0x934>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d009      	beq.n	800860e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085fa:	4b2a      	ldr	r3, [pc, #168]	; (80086a4 <UART_SetConfig+0x934>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	4a24      	ldr	r2, [pc, #144]	; (8008698 <UART_SetConfig+0x928>)
 8008606:	fa22 f303 	lsr.w	r3, r2, r3
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800860c:	e00f      	b.n	800862e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800860e:	4b22      	ldr	r3, [pc, #136]	; (8008698 <UART_SetConfig+0x928>)
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008612:	e00c      	b.n	800862e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008614:	4b21      	ldr	r3, [pc, #132]	; (800869c <UART_SetConfig+0x92c>)
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008618:	e009      	b.n	800862e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008620:	e005      	b.n	800862e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800862c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80e7 	beq.w	8008804 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <UART_SetConfig+0x930>)
 800863c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008640:	461a      	mov	r2, r3
 8008642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008644:	fbb3 f3f2 	udiv	r3, r3, r2
 8008648:	005a      	lsls	r2, r3, #1
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	085b      	lsrs	r3, r3, #1
 8008650:	441a      	add	r2, r3
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	fbb2 f3f3 	udiv	r3, r2, r3
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	2b0f      	cmp	r3, #15
 8008660:	d916      	bls.n	8008690 <UART_SetConfig+0x920>
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008668:	d212      	bcs.n	8008690 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	b29b      	uxth	r3, r3
 800866e:	f023 030f 	bic.w	r3, r3, #15
 8008672:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	b29b      	uxth	r3, r3
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	b29a      	uxth	r2, r3
 8008680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008682:	4313      	orrs	r3, r2
 8008684:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	e0b9      	b.n	8008804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008696:	e0b5      	b.n	8008804 <UART_SetConfig+0xa94>
 8008698:	03d09000 	.word	0x03d09000
 800869c:	003d0900 	.word	0x003d0900
 80086a0:	08009f30 	.word	0x08009f30
 80086a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80086a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	dc49      	bgt.n	8008744 <UART_SetConfig+0x9d4>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	db7c      	blt.n	80087ae <UART_SetConfig+0xa3e>
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d87a      	bhi.n	80087ae <UART_SetConfig+0xa3e>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <UART_SetConfig+0x950>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	0800874b 	.word	0x0800874b
 80086c4:	08008753 	.word	0x08008753
 80086c8:	080087af 	.word	0x080087af
 80086cc:	080087af 	.word	0x080087af
 80086d0:	0800875b 	.word	0x0800875b
 80086d4:	080087af 	.word	0x080087af
 80086d8:	080087af 	.word	0x080087af
 80086dc:	080087af 	.word	0x080087af
 80086e0:	0800876b 	.word	0x0800876b
 80086e4:	080087af 	.word	0x080087af
 80086e8:	080087af 	.word	0x080087af
 80086ec:	080087af 	.word	0x080087af
 80086f0:	080087af 	.word	0x080087af
 80086f4:	080087af 	.word	0x080087af
 80086f8:	080087af 	.word	0x080087af
 80086fc:	080087af 	.word	0x080087af
 8008700:	0800877b 	.word	0x0800877b
 8008704:	080087af 	.word	0x080087af
 8008708:	080087af 	.word	0x080087af
 800870c:	080087af 	.word	0x080087af
 8008710:	080087af 	.word	0x080087af
 8008714:	080087af 	.word	0x080087af
 8008718:	080087af 	.word	0x080087af
 800871c:	080087af 	.word	0x080087af
 8008720:	080087af 	.word	0x080087af
 8008724:	080087af 	.word	0x080087af
 8008728:	080087af 	.word	0x080087af
 800872c:	080087af 	.word	0x080087af
 8008730:	080087af 	.word	0x080087af
 8008734:	080087af 	.word	0x080087af
 8008738:	080087af 	.word	0x080087af
 800873c:	080087af 	.word	0x080087af
 8008740:	080087a1 	.word	0x080087a1
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	d02e      	beq.n	80087a6 <UART_SetConfig+0xa36>
 8008748:	e031      	b.n	80087ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800874a:	f7fd f801 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 800874e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008750:	e033      	b.n	80087ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008752:	f7fd f813 	bl	800577c <HAL_RCC_GetPCLK2Freq>
 8008756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008758:	e02f      	b.n	80087ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800875a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fa42 	bl	8006be8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008768:	e027      	b.n	80087ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800876a:	f107 0318 	add.w	r3, r7, #24
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fb8e 	bl	8006e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008778:	e01f      	b.n	80087ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800877a:	4b2d      	ldr	r3, [pc, #180]	; (8008830 <UART_SetConfig+0xac0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008786:	4b2a      	ldr	r3, [pc, #168]	; (8008830 <UART_SetConfig+0xac0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	08db      	lsrs	r3, r3, #3
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	4a28      	ldr	r2, [pc, #160]	; (8008834 <UART_SetConfig+0xac4>)
 8008792:	fa22 f303 	lsr.w	r3, r2, r3
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008798:	e00f      	b.n	80087ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800879a:	4b26      	ldr	r3, [pc, #152]	; (8008834 <UART_SetConfig+0xac4>)
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879e:	e00c      	b.n	80087ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <UART_SetConfig+0xac8>)
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a4:	e009      	b.n	80087ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ac:	e005      	b.n	80087ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087b8:	bf00      	nop
    }

    if (pclk != 0U)
 80087ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d021      	beq.n	8008804 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	4a1d      	ldr	r2, [pc, #116]	; (800883c <UART_SetConfig+0xacc>)
 80087c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	441a      	add	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d909      	bls.n	80087fe <UART_SetConfig+0xa8e>
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d205      	bcs.n	80087fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60da      	str	r2, [r3, #12]
 80087fc:	e002      	b.n	8008804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2201      	movs	r2, #1
 8008808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2200      	movs	r2, #0
 800881e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008820:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008824:	4618      	mov	r0, r3
 8008826:	3748      	adds	r7, #72	; 0x48
 8008828:	46bd      	mov	sp, r7
 800882a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800882e:	bf00      	nop
 8008830:	58024400 	.word	0x58024400
 8008834:	03d09000 	.word	0x03d09000
 8008838:	003d0900 	.word	0x003d0900
 800883c:	08009f30 	.word	0x08009f30

08008840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01a      	beq.n	8008956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800893e:	d10a      	bne.n	8008956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	605a      	str	r2, [r3, #4]
  }
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b098      	sub	sp, #96	; 0x60
 8008988:	af02      	add	r7, sp, #8
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008994:	f7f8 ff2c 	bl	80017f0 <HAL_GetTick>
 8008998:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d12f      	bne.n	8008a08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b0:	2200      	movs	r2, #0
 80089b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f88e 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d022      	beq.n	8008a08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d6:	653b      	str	r3, [r7, #80]	; 0x50
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e0:	647b      	str	r3, [r7, #68]	; 0x44
 80089e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e6      	bne.n	80089c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e063      	b.n	8008ad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d149      	bne.n	8008aaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f857 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d03c      	beq.n	8008aaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e6      	bne.n	8008a30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f023 0301 	bic.w	r3, r3, #1
 8008a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a82:	61fa      	str	r2, [r7, #28]
 8008a84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	69b9      	ldr	r1, [r7, #24]
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e5      	bne.n	8008a62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e012      	b.n	8008ad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3758      	adds	r7, #88	; 0x58
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae8:	e049      	b.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d045      	beq.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af2:	f7f8 fe7d 	bl	80017f0 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d302      	bcc.n	8008b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e048      	b.n	8008b9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d031      	beq.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f003 0308 	and.w	r3, r3, #8
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d110      	bne.n	8008b4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f839 	bl	8008ba8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2208      	movs	r2, #8
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e029      	b.n	8008b9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b58:	d111      	bne.n	8008b7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f81f 	bl	8008ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e00f      	b.n	8008b9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69da      	ldr	r2, [r3, #28]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4013      	ands	r3, r2
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	bf0c      	ite	eq
 8008b8e:	2301      	moveq	r3, #1
 8008b90:	2300      	movne	r3, #0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d0a6      	beq.n	8008aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b095      	sub	sp, #84	; 0x54
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bce:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e6      	bne.n	8008bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <UART_EndRxTransfer+0xc8>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e5      	bne.n	8008be2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d118      	bne.n	8008c50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f023 0310 	bic.w	r3, r3, #16
 8008c32:	647b      	str	r3, [r7, #68]	; 0x44
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	6979      	ldr	r1, [r7, #20]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	613b      	str	r3, [r7, #16]
   return(result);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e6      	bne.n	8008c1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c64:	bf00      	nop
 8008c66:	3754      	adds	r7, #84	; 0x54
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	effffffe 	.word	0xeffffffe

08008c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff f856 	bl	8007d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6979      	ldr	r1, [r7, #20]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e6      	bne.n	8008ca8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff f821 	bl	8007d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cee:	bf00      	nop
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e027      	b.n	8008d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2224      	movs	r2, #36	; 0x24
 8008d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0201 	bic.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e02d      	b.n	8008e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2224      	movs	r2, #36	; 0x24
 8008dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0201 	bic.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f84f 	bl	8008e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d101      	bne.n	8008e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e34:	2302      	movs	r3, #2
 8008e36:	e02d      	b.n	8008e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2224      	movs	r2, #36	; 0x24
 8008e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f811 	bl	8008e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d108      	bne.n	8008ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ebc:	e031      	b.n	8008f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ebe:	2310      	movs	r3, #16
 8008ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ec2:	2310      	movs	r3, #16
 8008ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	0e5b      	lsrs	r3, r3, #25
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	0f5b      	lsrs	r3, r3, #29
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	7b3a      	ldrb	r2, [r7, #12]
 8008eea:	4911      	ldr	r1, [pc, #68]	; (8008f30 <UARTEx_SetNbDataToProcess+0x94>)
 8008eec:	5c8a      	ldrb	r2, [r1, r2]
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ef2:	7b3a      	ldrb	r2, [r7, #12]
 8008ef4:	490f      	ldr	r1, [pc, #60]	; (8008f34 <UARTEx_SetNbDataToProcess+0x98>)
 8008ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	7b7a      	ldrb	r2, [r7, #13]
 8008f08:	4909      	ldr	r1, [pc, #36]	; (8008f30 <UARTEx_SetNbDataToProcess+0x94>)
 8008f0a:	5c8a      	ldrb	r2, [r1, r2]
 8008f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f10:	7b7a      	ldrb	r2, [r7, #13]
 8008f12:	4908      	ldr	r1, [pc, #32]	; (8008f34 <UARTEx_SetNbDataToProcess+0x98>)
 8008f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	08009f48 	.word	0x08009f48
 8008f34:	08009f50 	.word	0x08009f50

08008f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f38:	b084      	sub	sp, #16
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	f107 001c 	add.w	r0, r7, #28
 8008f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d120      	bne.n	8008f92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	4b2a      	ldr	r3, [pc, #168]	; (800900c <USB_CoreInit+0xd4>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d105      	bne.n	8008f86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 faac 	bl	80094e4 <USB_CoreReset>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]
 8008f90:	e01a      	b.n	8008fc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 faa0 	bl	80094e4 <USB_CoreReset>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8008fba:	e005      	b.n	8008fc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d116      	bne.n	8008ffc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <USB_CoreInit+0xd8>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f043 0206 	orr.w	r2, r3, #6
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f043 0220 	orr.w	r2, r3, #32
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009008:	b004      	add	sp, #16
 800900a:	4770      	bx	lr
 800900c:	ffbdffbf 	.word	0xffbdffbf
 8009010:	03ee0000 	.word	0x03ee0000

08009014 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f023 0201 	bic.w	r2, r3, #1
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d115      	bne.n	8009084 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009064:	2001      	movs	r0, #1
 8009066:	f7f8 fbcf 	bl	8001808 <HAL_Delay>
      ms++;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3301      	adds	r3, #1
 800906e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa29 	bl	80094c8 <USB_GetMode>
 8009076:	4603      	mov	r3, r0
 8009078:	2b01      	cmp	r3, #1
 800907a:	d01e      	beq.n	80090ba <USB_SetCurrentMode+0x84>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b31      	cmp	r3, #49	; 0x31
 8009080:	d9f0      	bls.n	8009064 <USB_SetCurrentMode+0x2e>
 8009082:	e01a      	b.n	80090ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d115      	bne.n	80090b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009096:	2001      	movs	r0, #1
 8009098:	f7f8 fbb6 	bl	8001808 <HAL_Delay>
      ms++;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3301      	adds	r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa10 	bl	80094c8 <USB_GetMode>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <USB_SetCurrentMode+0x84>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b31      	cmp	r3, #49	; 0x31
 80090b2:	d9f0      	bls.n	8009096 <USB_SetCurrentMode+0x60>
 80090b4:	e001      	b.n	80090ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e005      	b.n	80090c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b32      	cmp	r3, #50	; 0x32
 80090be:	d101      	bne.n	80090c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090d0:	b084      	sub	sp, #16
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	e009      	b.n	8009104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3340      	adds	r3, #64	; 0x40
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3301      	adds	r3, #1
 8009102:	613b      	str	r3, [r7, #16]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2b0e      	cmp	r3, #14
 8009108:	d9f2      	bls.n	80090f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800910a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d11c      	bne.n	800914a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800911e:	f043 0302 	orr.w	r3, r3, #2
 8009122:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e005      	b.n	8009156 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800915c:	461a      	mov	r2, r3
 800915e:	2300      	movs	r3, #0
 8009160:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009168:	4619      	mov	r1, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009170:	461a      	mov	r2, r3
 8009172:	680b      	ldr	r3, [r1, #0]
 8009174:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009178:	2b01      	cmp	r3, #1
 800917a:	d10c      	bne.n	8009196 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009182:	2100      	movs	r1, #0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f965 	bl	8009454 <USB_SetDevSpeed>
 800918a:	e008      	b.n	800919e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800918c:	2101      	movs	r1, #1
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f960 	bl	8009454 <USB_SetDevSpeed>
 8009194:	e003      	b.n	800919e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009196:	2103      	movs	r1, #3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f95b 	bl	8009454 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800919e:	2110      	movs	r1, #16
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8f3 	bl	800938c <USB_FlushTxFifo>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f91f 	bl	80093f4 <USB_FlushRxFifo>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	461a      	mov	r2, r3
 80091c8:	2300      	movs	r3, #0
 80091ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	461a      	mov	r2, r3
 80091d4:	2300      	movs	r3, #0
 80091d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091de:	461a      	mov	r2, r3
 80091e0:	2300      	movs	r3, #0
 80091e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091e4:	2300      	movs	r3, #0
 80091e6:	613b      	str	r3, [r7, #16]
 80091e8:	e043      	b.n	8009272 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009200:	d118      	bne.n	8009234 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	461a      	mov	r2, r3
 8009216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	e013      	b.n	8009246 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	461a      	mov	r2, r3
 800922c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e008      	b.n	8009246 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009240:	461a      	mov	r2, r3
 8009242:	2300      	movs	r3, #0
 8009244:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	461a      	mov	r2, r3
 8009254:	2300      	movs	r3, #0
 8009256:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	461a      	mov	r2, r3
 8009266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800926a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	3301      	adds	r3, #1
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	429a      	cmp	r2, r3
 8009278:	d3b7      	bcc.n	80091ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800927a:	2300      	movs	r3, #0
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	e043      	b.n	8009308 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009296:	d118      	bne.n	80092ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092aa:	461a      	mov	r2, r3
 80092ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	e013      	b.n	80092dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c0:	461a      	mov	r2, r3
 80092c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	e008      	b.n	80092dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d6:	461a      	mov	r2, r3
 80092d8:	2300      	movs	r3, #0
 80092da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	461a      	mov	r2, r3
 80092fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009300:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3301      	adds	r3, #1
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	429a      	cmp	r2, r3
 800930e:	d3b7      	bcc.n	8009280 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800931e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009322:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009330:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f043 0210 	orr.w	r2, r3, #16
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699a      	ldr	r2, [r3, #24]
 8009348:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <USB_DevInit+0x2b4>)
 800934a:	4313      	orrs	r3, r2
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	f043 0208 	orr.w	r2, r3, #8
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d105      	bne.n	8009374 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <USB_DevInit+0x2b8>)
 800936e:	4313      	orrs	r3, r2
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009380:	b004      	add	sp, #16
 8009382:	4770      	bx	lr
 8009384:	803c3800 	.word	0x803c3800
 8009388:	40000004 	.word	0x40000004

0800938c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3301      	adds	r3, #1
 800939e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a13      	ldr	r2, [pc, #76]	; (80093f0 <USB_FlushTxFifo+0x64>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d901      	bls.n	80093ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e01b      	b.n	80093e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	daf2      	bge.n	800939a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	019b      	lsls	r3, r3, #6
 80093bc:	f043 0220 	orr.w	r2, r3, #32
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4a08      	ldr	r2, [pc, #32]	; (80093f0 <USB_FlushTxFifo+0x64>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d901      	bls.n	80093d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e006      	b.n	80093e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b20      	cmp	r3, #32
 80093e0:	d0f0      	beq.n	80093c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	00030d40 	.word	0x00030d40

080093f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4a11      	ldr	r2, [pc, #68]	; (8009450 <USB_FlushRxFifo+0x5c>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d901      	bls.n	8009412 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e018      	b.n	8009444 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	daf2      	bge.n	8009400 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2210      	movs	r2, #16
 8009422:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4a08      	ldr	r2, [pc, #32]	; (8009450 <USB_FlushRxFifo+0x5c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d901      	bls.n	8009436 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e006      	b.n	8009444 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0310 	and.w	r3, r3, #16
 800943e:	2b10      	cmp	r3, #16
 8009440:	d0f0      	beq.n	8009424 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	00030d40 	.word	0x00030d40

08009454 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009474:	4313      	orrs	r3, r2
 8009476:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009486:	b480      	push	{r7}
 8009488:	b085      	sub	sp, #20
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094a0:	f023 0303 	bic.w	r3, r3, #3
 80094a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094b4:	f043 0302 	orr.w	r3, r3, #2
 80094b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	f003 0301 	and.w	r3, r3, #1
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3301      	adds	r3, #1
 80094f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a13      	ldr	r2, [pc, #76]	; (8009548 <USB_CoreReset+0x64>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d901      	bls.n	8009502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e01b      	b.n	800953a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	daf2      	bge.n	80094f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f043 0201 	orr.w	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a09      	ldr	r2, [pc, #36]	; (8009548 <USB_CoreReset+0x64>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d901      	bls.n	800952c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e006      	b.n	800953a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b01      	cmp	r3, #1
 8009536:	d0f0      	beq.n	800951a <USB_CoreReset+0x36>

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	00030d40 	.word	0x00030d40

0800954c <siprintf>:
 800954c:	b40e      	push	{r1, r2, r3}
 800954e:	b500      	push	{lr}
 8009550:	b09c      	sub	sp, #112	; 0x70
 8009552:	ab1d      	add	r3, sp, #116	; 0x74
 8009554:	9002      	str	r0, [sp, #8]
 8009556:	9006      	str	r0, [sp, #24]
 8009558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800955c:	4809      	ldr	r0, [pc, #36]	; (8009584 <siprintf+0x38>)
 800955e:	9107      	str	r1, [sp, #28]
 8009560:	9104      	str	r1, [sp, #16]
 8009562:	4909      	ldr	r1, [pc, #36]	; (8009588 <siprintf+0x3c>)
 8009564:	f853 2b04 	ldr.w	r2, [r3], #4
 8009568:	9105      	str	r1, [sp, #20]
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	a902      	add	r1, sp, #8
 8009570:	f000 f9a0 	bl	80098b4 <_svfiprintf_r>
 8009574:	9b02      	ldr	r3, [sp, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	b01c      	add	sp, #112	; 0x70
 800957c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009580:	b003      	add	sp, #12
 8009582:	4770      	bx	lr
 8009584:	2400005c 	.word	0x2400005c
 8009588:	ffff0208 	.word	0xffff0208

0800958c <memset>:
 800958c:	4402      	add	r2, r0
 800958e:	4603      	mov	r3, r0
 8009590:	4293      	cmp	r3, r2
 8009592:	d100      	bne.n	8009596 <memset+0xa>
 8009594:	4770      	bx	lr
 8009596:	f803 1b01 	strb.w	r1, [r3], #1
 800959a:	e7f9      	b.n	8009590 <memset+0x4>

0800959c <__errno>:
 800959c:	4b01      	ldr	r3, [pc, #4]	; (80095a4 <__errno+0x8>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	2400005c 	.word	0x2400005c

080095a8 <__libc_init_array>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	4d0d      	ldr	r5, [pc, #52]	; (80095e0 <__libc_init_array+0x38>)
 80095ac:	4c0d      	ldr	r4, [pc, #52]	; (80095e4 <__libc_init_array+0x3c>)
 80095ae:	1b64      	subs	r4, r4, r5
 80095b0:	10a4      	asrs	r4, r4, #2
 80095b2:	2600      	movs	r6, #0
 80095b4:	42a6      	cmp	r6, r4
 80095b6:	d109      	bne.n	80095cc <__libc_init_array+0x24>
 80095b8:	4d0b      	ldr	r5, [pc, #44]	; (80095e8 <__libc_init_array+0x40>)
 80095ba:	4c0c      	ldr	r4, [pc, #48]	; (80095ec <__libc_init_array+0x44>)
 80095bc:	f000 fc6a 	bl	8009e94 <_init>
 80095c0:	1b64      	subs	r4, r4, r5
 80095c2:	10a4      	asrs	r4, r4, #2
 80095c4:	2600      	movs	r6, #0
 80095c6:	42a6      	cmp	r6, r4
 80095c8:	d105      	bne.n	80095d6 <__libc_init_array+0x2e>
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d0:	4798      	blx	r3
 80095d2:	3601      	adds	r6, #1
 80095d4:	e7ee      	b.n	80095b4 <__libc_init_array+0xc>
 80095d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095da:	4798      	blx	r3
 80095dc:	3601      	adds	r6, #1
 80095de:	e7f2      	b.n	80095c6 <__libc_init_array+0x1e>
 80095e0:	08009f94 	.word	0x08009f94
 80095e4:	08009f94 	.word	0x08009f94
 80095e8:	08009f94 	.word	0x08009f94
 80095ec:	08009f98 	.word	0x08009f98

080095f0 <__retarget_lock_acquire_recursive>:
 80095f0:	4770      	bx	lr

080095f2 <__retarget_lock_release_recursive>:
 80095f2:	4770      	bx	lr

080095f4 <memcpy>:
 80095f4:	440a      	add	r2, r1
 80095f6:	4291      	cmp	r1, r2
 80095f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095fc:	d100      	bne.n	8009600 <memcpy+0xc>
 80095fe:	4770      	bx	lr
 8009600:	b510      	push	{r4, lr}
 8009602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800960a:	4291      	cmp	r1, r2
 800960c:	d1f9      	bne.n	8009602 <memcpy+0xe>
 800960e:	bd10      	pop	{r4, pc}

08009610 <_free_r>:
 8009610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009612:	2900      	cmp	r1, #0
 8009614:	d044      	beq.n	80096a0 <_free_r+0x90>
 8009616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800961a:	9001      	str	r0, [sp, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f1a1 0404 	sub.w	r4, r1, #4
 8009622:	bfb8      	it	lt
 8009624:	18e4      	addlt	r4, r4, r3
 8009626:	f000 f8df 	bl	80097e8 <__malloc_lock>
 800962a:	4a1e      	ldr	r2, [pc, #120]	; (80096a4 <_free_r+0x94>)
 800962c:	9801      	ldr	r0, [sp, #4]
 800962e:	6813      	ldr	r3, [r2, #0]
 8009630:	b933      	cbnz	r3, 8009640 <_free_r+0x30>
 8009632:	6063      	str	r3, [r4, #4]
 8009634:	6014      	str	r4, [r2, #0]
 8009636:	b003      	add	sp, #12
 8009638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800963c:	f000 b8da 	b.w	80097f4 <__malloc_unlock>
 8009640:	42a3      	cmp	r3, r4
 8009642:	d908      	bls.n	8009656 <_free_r+0x46>
 8009644:	6825      	ldr	r5, [r4, #0]
 8009646:	1961      	adds	r1, r4, r5
 8009648:	428b      	cmp	r3, r1
 800964a:	bf01      	itttt	eq
 800964c:	6819      	ldreq	r1, [r3, #0]
 800964e:	685b      	ldreq	r3, [r3, #4]
 8009650:	1949      	addeq	r1, r1, r5
 8009652:	6021      	streq	r1, [r4, #0]
 8009654:	e7ed      	b.n	8009632 <_free_r+0x22>
 8009656:	461a      	mov	r2, r3
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	b10b      	cbz	r3, 8009660 <_free_r+0x50>
 800965c:	42a3      	cmp	r3, r4
 800965e:	d9fa      	bls.n	8009656 <_free_r+0x46>
 8009660:	6811      	ldr	r1, [r2, #0]
 8009662:	1855      	adds	r5, r2, r1
 8009664:	42a5      	cmp	r5, r4
 8009666:	d10b      	bne.n	8009680 <_free_r+0x70>
 8009668:	6824      	ldr	r4, [r4, #0]
 800966a:	4421      	add	r1, r4
 800966c:	1854      	adds	r4, r2, r1
 800966e:	42a3      	cmp	r3, r4
 8009670:	6011      	str	r1, [r2, #0]
 8009672:	d1e0      	bne.n	8009636 <_free_r+0x26>
 8009674:	681c      	ldr	r4, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	6053      	str	r3, [r2, #4]
 800967a:	440c      	add	r4, r1
 800967c:	6014      	str	r4, [r2, #0]
 800967e:	e7da      	b.n	8009636 <_free_r+0x26>
 8009680:	d902      	bls.n	8009688 <_free_r+0x78>
 8009682:	230c      	movs	r3, #12
 8009684:	6003      	str	r3, [r0, #0]
 8009686:	e7d6      	b.n	8009636 <_free_r+0x26>
 8009688:	6825      	ldr	r5, [r4, #0]
 800968a:	1961      	adds	r1, r4, r5
 800968c:	428b      	cmp	r3, r1
 800968e:	bf04      	itt	eq
 8009690:	6819      	ldreq	r1, [r3, #0]
 8009692:	685b      	ldreq	r3, [r3, #4]
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	bf04      	itt	eq
 8009698:	1949      	addeq	r1, r1, r5
 800969a:	6021      	streq	r1, [r4, #0]
 800969c:	6054      	str	r4, [r2, #4]
 800969e:	e7ca      	b.n	8009636 <_free_r+0x26>
 80096a0:	b003      	add	sp, #12
 80096a2:	bd30      	pop	{r4, r5, pc}
 80096a4:	24000b14 	.word	0x24000b14

080096a8 <sbrk_aligned>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4e0e      	ldr	r6, [pc, #56]	; (80096e4 <sbrk_aligned+0x3c>)
 80096ac:	460c      	mov	r4, r1
 80096ae:	6831      	ldr	r1, [r6, #0]
 80096b0:	4605      	mov	r5, r0
 80096b2:	b911      	cbnz	r1, 80096ba <sbrk_aligned+0x12>
 80096b4:	f000 fba6 	bl	8009e04 <_sbrk_r>
 80096b8:	6030      	str	r0, [r6, #0]
 80096ba:	4621      	mov	r1, r4
 80096bc:	4628      	mov	r0, r5
 80096be:	f000 fba1 	bl	8009e04 <_sbrk_r>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d00a      	beq.n	80096dc <sbrk_aligned+0x34>
 80096c6:	1cc4      	adds	r4, r0, #3
 80096c8:	f024 0403 	bic.w	r4, r4, #3
 80096cc:	42a0      	cmp	r0, r4
 80096ce:	d007      	beq.n	80096e0 <sbrk_aligned+0x38>
 80096d0:	1a21      	subs	r1, r4, r0
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 fb96 	bl	8009e04 <_sbrk_r>
 80096d8:	3001      	adds	r0, #1
 80096da:	d101      	bne.n	80096e0 <sbrk_aligned+0x38>
 80096dc:	f04f 34ff 	mov.w	r4, #4294967295
 80096e0:	4620      	mov	r0, r4
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	24000b18 	.word	0x24000b18

080096e8 <_malloc_r>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	1ccd      	adds	r5, r1, #3
 80096ee:	f025 0503 	bic.w	r5, r5, #3
 80096f2:	3508      	adds	r5, #8
 80096f4:	2d0c      	cmp	r5, #12
 80096f6:	bf38      	it	cc
 80096f8:	250c      	movcc	r5, #12
 80096fa:	2d00      	cmp	r5, #0
 80096fc:	4607      	mov	r7, r0
 80096fe:	db01      	blt.n	8009704 <_malloc_r+0x1c>
 8009700:	42a9      	cmp	r1, r5
 8009702:	d905      	bls.n	8009710 <_malloc_r+0x28>
 8009704:	230c      	movs	r3, #12
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	2600      	movs	r6, #0
 800970a:	4630      	mov	r0, r6
 800970c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097e4 <_malloc_r+0xfc>
 8009714:	f000 f868 	bl	80097e8 <__malloc_lock>
 8009718:	f8d8 3000 	ldr.w	r3, [r8]
 800971c:	461c      	mov	r4, r3
 800971e:	bb5c      	cbnz	r4, 8009778 <_malloc_r+0x90>
 8009720:	4629      	mov	r1, r5
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff ffc0 	bl	80096a8 <sbrk_aligned>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	4604      	mov	r4, r0
 800972c:	d155      	bne.n	80097da <_malloc_r+0xf2>
 800972e:	f8d8 4000 	ldr.w	r4, [r8]
 8009732:	4626      	mov	r6, r4
 8009734:	2e00      	cmp	r6, #0
 8009736:	d145      	bne.n	80097c4 <_malloc_r+0xdc>
 8009738:	2c00      	cmp	r4, #0
 800973a:	d048      	beq.n	80097ce <_malloc_r+0xe6>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	4631      	mov	r1, r6
 8009740:	4638      	mov	r0, r7
 8009742:	eb04 0903 	add.w	r9, r4, r3
 8009746:	f000 fb5d 	bl	8009e04 <_sbrk_r>
 800974a:	4581      	cmp	r9, r0
 800974c:	d13f      	bne.n	80097ce <_malloc_r+0xe6>
 800974e:	6821      	ldr	r1, [r4, #0]
 8009750:	1a6d      	subs	r5, r5, r1
 8009752:	4629      	mov	r1, r5
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff ffa7 	bl	80096a8 <sbrk_aligned>
 800975a:	3001      	adds	r0, #1
 800975c:	d037      	beq.n	80097ce <_malloc_r+0xe6>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	442b      	add	r3, r5
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	f8d8 3000 	ldr.w	r3, [r8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d038      	beq.n	80097de <_malloc_r+0xf6>
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	42a2      	cmp	r2, r4
 8009770:	d12b      	bne.n	80097ca <_malloc_r+0xe2>
 8009772:	2200      	movs	r2, #0
 8009774:	605a      	str	r2, [r3, #4]
 8009776:	e00f      	b.n	8009798 <_malloc_r+0xb0>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	1b52      	subs	r2, r2, r5
 800977c:	d41f      	bmi.n	80097be <_malloc_r+0xd6>
 800977e:	2a0b      	cmp	r2, #11
 8009780:	d917      	bls.n	80097b2 <_malloc_r+0xca>
 8009782:	1961      	adds	r1, r4, r5
 8009784:	42a3      	cmp	r3, r4
 8009786:	6025      	str	r5, [r4, #0]
 8009788:	bf18      	it	ne
 800978a:	6059      	strne	r1, [r3, #4]
 800978c:	6863      	ldr	r3, [r4, #4]
 800978e:	bf08      	it	eq
 8009790:	f8c8 1000 	streq.w	r1, [r8]
 8009794:	5162      	str	r2, [r4, r5]
 8009796:	604b      	str	r3, [r1, #4]
 8009798:	4638      	mov	r0, r7
 800979a:	f104 060b 	add.w	r6, r4, #11
 800979e:	f000 f829 	bl	80097f4 <__malloc_unlock>
 80097a2:	f026 0607 	bic.w	r6, r6, #7
 80097a6:	1d23      	adds	r3, r4, #4
 80097a8:	1af2      	subs	r2, r6, r3
 80097aa:	d0ae      	beq.n	800970a <_malloc_r+0x22>
 80097ac:	1b9b      	subs	r3, r3, r6
 80097ae:	50a3      	str	r3, [r4, r2]
 80097b0:	e7ab      	b.n	800970a <_malloc_r+0x22>
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	6862      	ldr	r2, [r4, #4]
 80097b6:	d1dd      	bne.n	8009774 <_malloc_r+0x8c>
 80097b8:	f8c8 2000 	str.w	r2, [r8]
 80097bc:	e7ec      	b.n	8009798 <_malloc_r+0xb0>
 80097be:	4623      	mov	r3, r4
 80097c0:	6864      	ldr	r4, [r4, #4]
 80097c2:	e7ac      	b.n	800971e <_malloc_r+0x36>
 80097c4:	4634      	mov	r4, r6
 80097c6:	6876      	ldr	r6, [r6, #4]
 80097c8:	e7b4      	b.n	8009734 <_malloc_r+0x4c>
 80097ca:	4613      	mov	r3, r2
 80097cc:	e7cc      	b.n	8009768 <_malloc_r+0x80>
 80097ce:	230c      	movs	r3, #12
 80097d0:	603b      	str	r3, [r7, #0]
 80097d2:	4638      	mov	r0, r7
 80097d4:	f000 f80e 	bl	80097f4 <__malloc_unlock>
 80097d8:	e797      	b.n	800970a <_malloc_r+0x22>
 80097da:	6025      	str	r5, [r4, #0]
 80097dc:	e7dc      	b.n	8009798 <_malloc_r+0xb0>
 80097de:	605b      	str	r3, [r3, #4]
 80097e0:	deff      	udf	#255	; 0xff
 80097e2:	bf00      	nop
 80097e4:	24000b14 	.word	0x24000b14

080097e8 <__malloc_lock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_lock+0x8>)
 80097ea:	f7ff bf01 	b.w	80095f0 <__retarget_lock_acquire_recursive>
 80097ee:	bf00      	nop
 80097f0:	24000b10 	.word	0x24000b10

080097f4 <__malloc_unlock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_unlock+0x8>)
 80097f6:	f7ff befc 	b.w	80095f2 <__retarget_lock_release_recursive>
 80097fa:	bf00      	nop
 80097fc:	24000b10 	.word	0x24000b10

08009800 <__ssputs_r>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	688e      	ldr	r6, [r1, #8]
 8009806:	461f      	mov	r7, r3
 8009808:	42be      	cmp	r6, r7
 800980a:	680b      	ldr	r3, [r1, #0]
 800980c:	4682      	mov	sl, r0
 800980e:	460c      	mov	r4, r1
 8009810:	4690      	mov	r8, r2
 8009812:	d82c      	bhi.n	800986e <__ssputs_r+0x6e>
 8009814:	898a      	ldrh	r2, [r1, #12]
 8009816:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800981a:	d026      	beq.n	800986a <__ssputs_r+0x6a>
 800981c:	6965      	ldr	r5, [r4, #20]
 800981e:	6909      	ldr	r1, [r1, #16]
 8009820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009824:	eba3 0901 	sub.w	r9, r3, r1
 8009828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800982c:	1c7b      	adds	r3, r7, #1
 800982e:	444b      	add	r3, r9
 8009830:	106d      	asrs	r5, r5, #1
 8009832:	429d      	cmp	r5, r3
 8009834:	bf38      	it	cc
 8009836:	461d      	movcc	r5, r3
 8009838:	0553      	lsls	r3, r2, #21
 800983a:	d527      	bpl.n	800988c <__ssputs_r+0x8c>
 800983c:	4629      	mov	r1, r5
 800983e:	f7ff ff53 	bl	80096e8 <_malloc_r>
 8009842:	4606      	mov	r6, r0
 8009844:	b360      	cbz	r0, 80098a0 <__ssputs_r+0xa0>
 8009846:	6921      	ldr	r1, [r4, #16]
 8009848:	464a      	mov	r2, r9
 800984a:	f7ff fed3 	bl	80095f4 <memcpy>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	6126      	str	r6, [r4, #16]
 800985c:	6165      	str	r5, [r4, #20]
 800985e:	444e      	add	r6, r9
 8009860:	eba5 0509 	sub.w	r5, r5, r9
 8009864:	6026      	str	r6, [r4, #0]
 8009866:	60a5      	str	r5, [r4, #8]
 8009868:	463e      	mov	r6, r7
 800986a:	42be      	cmp	r6, r7
 800986c:	d900      	bls.n	8009870 <__ssputs_r+0x70>
 800986e:	463e      	mov	r6, r7
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	4632      	mov	r2, r6
 8009874:	4641      	mov	r1, r8
 8009876:	f000 faab 	bl	8009dd0 <memmove>
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	1b9b      	subs	r3, r3, r6
 800987e:	60a3      	str	r3, [r4, #8]
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	4433      	add	r3, r6
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	2000      	movs	r0, #0
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	462a      	mov	r2, r5
 800988e:	f000 fac9 	bl	8009e24 <_realloc_r>
 8009892:	4606      	mov	r6, r0
 8009894:	2800      	cmp	r0, #0
 8009896:	d1e0      	bne.n	800985a <__ssputs_r+0x5a>
 8009898:	6921      	ldr	r1, [r4, #16]
 800989a:	4650      	mov	r0, sl
 800989c:	f7ff feb8 	bl	8009610 <_free_r>
 80098a0:	230c      	movs	r3, #12
 80098a2:	f8ca 3000 	str.w	r3, [sl]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	e7e9      	b.n	8009888 <__ssputs_r+0x88>

080098b4 <_svfiprintf_r>:
 80098b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	4698      	mov	r8, r3
 80098ba:	898b      	ldrh	r3, [r1, #12]
 80098bc:	061b      	lsls	r3, r3, #24
 80098be:	b09d      	sub	sp, #116	; 0x74
 80098c0:	4607      	mov	r7, r0
 80098c2:	460d      	mov	r5, r1
 80098c4:	4614      	mov	r4, r2
 80098c6:	d50e      	bpl.n	80098e6 <_svfiprintf_r+0x32>
 80098c8:	690b      	ldr	r3, [r1, #16]
 80098ca:	b963      	cbnz	r3, 80098e6 <_svfiprintf_r+0x32>
 80098cc:	2140      	movs	r1, #64	; 0x40
 80098ce:	f7ff ff0b 	bl	80096e8 <_malloc_r>
 80098d2:	6028      	str	r0, [r5, #0]
 80098d4:	6128      	str	r0, [r5, #16]
 80098d6:	b920      	cbnz	r0, 80098e2 <_svfiprintf_r+0x2e>
 80098d8:	230c      	movs	r3, #12
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295
 80098e0:	e0d0      	b.n	8009a84 <_svfiprintf_r+0x1d0>
 80098e2:	2340      	movs	r3, #64	; 0x40
 80098e4:	616b      	str	r3, [r5, #20]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ea:	2320      	movs	r3, #32
 80098ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098f4:	2330      	movs	r3, #48	; 0x30
 80098f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a9c <_svfiprintf_r+0x1e8>
 80098fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098fe:	f04f 0901 	mov.w	r9, #1
 8009902:	4623      	mov	r3, r4
 8009904:	469a      	mov	sl, r3
 8009906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800990a:	b10a      	cbz	r2, 8009910 <_svfiprintf_r+0x5c>
 800990c:	2a25      	cmp	r2, #37	; 0x25
 800990e:	d1f9      	bne.n	8009904 <_svfiprintf_r+0x50>
 8009910:	ebba 0b04 	subs.w	fp, sl, r4
 8009914:	d00b      	beq.n	800992e <_svfiprintf_r+0x7a>
 8009916:	465b      	mov	r3, fp
 8009918:	4622      	mov	r2, r4
 800991a:	4629      	mov	r1, r5
 800991c:	4638      	mov	r0, r7
 800991e:	f7ff ff6f 	bl	8009800 <__ssputs_r>
 8009922:	3001      	adds	r0, #1
 8009924:	f000 80a9 	beq.w	8009a7a <_svfiprintf_r+0x1c6>
 8009928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800992a:	445a      	add	r2, fp
 800992c:	9209      	str	r2, [sp, #36]	; 0x24
 800992e:	f89a 3000 	ldrb.w	r3, [sl]
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80a1 	beq.w	8009a7a <_svfiprintf_r+0x1c6>
 8009938:	2300      	movs	r3, #0
 800993a:	f04f 32ff 	mov.w	r2, #4294967295
 800993e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009942:	f10a 0a01 	add.w	sl, sl, #1
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	9307      	str	r3, [sp, #28]
 800994a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800994e:	931a      	str	r3, [sp, #104]	; 0x68
 8009950:	4654      	mov	r4, sl
 8009952:	2205      	movs	r2, #5
 8009954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009958:	4850      	ldr	r0, [pc, #320]	; (8009a9c <_svfiprintf_r+0x1e8>)
 800995a:	f7f6 fcc1 	bl	80002e0 <memchr>
 800995e:	9a04      	ldr	r2, [sp, #16]
 8009960:	b9d8      	cbnz	r0, 800999a <_svfiprintf_r+0xe6>
 8009962:	06d0      	lsls	r0, r2, #27
 8009964:	bf44      	itt	mi
 8009966:	2320      	movmi	r3, #32
 8009968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996c:	0711      	lsls	r1, r2, #28
 800996e:	bf44      	itt	mi
 8009970:	232b      	movmi	r3, #43	; 0x2b
 8009972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009976:	f89a 3000 	ldrb.w	r3, [sl]
 800997a:	2b2a      	cmp	r3, #42	; 0x2a
 800997c:	d015      	beq.n	80099aa <_svfiprintf_r+0xf6>
 800997e:	9a07      	ldr	r2, [sp, #28]
 8009980:	4654      	mov	r4, sl
 8009982:	2000      	movs	r0, #0
 8009984:	f04f 0c0a 	mov.w	ip, #10
 8009988:	4621      	mov	r1, r4
 800998a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800998e:	3b30      	subs	r3, #48	; 0x30
 8009990:	2b09      	cmp	r3, #9
 8009992:	d94d      	bls.n	8009a30 <_svfiprintf_r+0x17c>
 8009994:	b1b0      	cbz	r0, 80099c4 <_svfiprintf_r+0x110>
 8009996:	9207      	str	r2, [sp, #28]
 8009998:	e014      	b.n	80099c4 <_svfiprintf_r+0x110>
 800999a:	eba0 0308 	sub.w	r3, r0, r8
 800999e:	fa09 f303 	lsl.w	r3, r9, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	46a2      	mov	sl, r4
 80099a8:	e7d2      	b.n	8009950 <_svfiprintf_r+0x9c>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	1d19      	adds	r1, r3, #4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	9103      	str	r1, [sp, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfbb      	ittet	lt
 80099b6:	425b      	neglt	r3, r3
 80099b8:	f042 0202 	orrlt.w	r2, r2, #2
 80099bc:	9307      	strge	r3, [sp, #28]
 80099be:	9307      	strlt	r3, [sp, #28]
 80099c0:	bfb8      	it	lt
 80099c2:	9204      	strlt	r2, [sp, #16]
 80099c4:	7823      	ldrb	r3, [r4, #0]
 80099c6:	2b2e      	cmp	r3, #46	; 0x2e
 80099c8:	d10c      	bne.n	80099e4 <_svfiprintf_r+0x130>
 80099ca:	7863      	ldrb	r3, [r4, #1]
 80099cc:	2b2a      	cmp	r3, #42	; 0x2a
 80099ce:	d134      	bne.n	8009a3a <_svfiprintf_r+0x186>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	1d1a      	adds	r2, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	9203      	str	r2, [sp, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfb8      	it	lt
 80099dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e0:	3402      	adds	r4, #2
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009aac <_svfiprintf_r+0x1f8>
 80099e8:	7821      	ldrb	r1, [r4, #0]
 80099ea:	2203      	movs	r2, #3
 80099ec:	4650      	mov	r0, sl
 80099ee:	f7f6 fc77 	bl	80002e0 <memchr>
 80099f2:	b138      	cbz	r0, 8009a04 <_svfiprintf_r+0x150>
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	eba0 000a 	sub.w	r0, r0, sl
 80099fa:	2240      	movs	r2, #64	; 0x40
 80099fc:	4082      	lsls	r2, r0
 80099fe:	4313      	orrs	r3, r2
 8009a00:	3401      	adds	r4, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a08:	4825      	ldr	r0, [pc, #148]	; (8009aa0 <_svfiprintf_r+0x1ec>)
 8009a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a0e:	2206      	movs	r2, #6
 8009a10:	f7f6 fc66 	bl	80002e0 <memchr>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d038      	beq.n	8009a8a <_svfiprintf_r+0x1d6>
 8009a18:	4b22      	ldr	r3, [pc, #136]	; (8009aa4 <_svfiprintf_r+0x1f0>)
 8009a1a:	bb1b      	cbnz	r3, 8009a64 <_svfiprintf_r+0x1b0>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	3307      	adds	r3, #7
 8009a20:	f023 0307 	bic.w	r3, r3, #7
 8009a24:	3308      	adds	r3, #8
 8009a26:	9303      	str	r3, [sp, #12]
 8009a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2a:	4433      	add	r3, r6
 8009a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2e:	e768      	b.n	8009902 <_svfiprintf_r+0x4e>
 8009a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a34:	460c      	mov	r4, r1
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7a6      	b.n	8009988 <_svfiprintf_r+0xd4>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	4619      	mov	r1, r3
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4620      	mov	r0, r4
 8009a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4c:	3a30      	subs	r2, #48	; 0x30
 8009a4e:	2a09      	cmp	r2, #9
 8009a50:	d903      	bls.n	8009a5a <_svfiprintf_r+0x1a6>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0c6      	beq.n	80099e4 <_svfiprintf_r+0x130>
 8009a56:	9105      	str	r1, [sp, #20]
 8009a58:	e7c4      	b.n	80099e4 <_svfiprintf_r+0x130>
 8009a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7f0      	b.n	8009a46 <_svfiprintf_r+0x192>
 8009a64:	ab03      	add	r3, sp, #12
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <_svfiprintf_r+0x1f4>)
 8009a6c:	a904      	add	r1, sp, #16
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f3af 8000 	nop.w
 8009a74:	1c42      	adds	r2, r0, #1
 8009a76:	4606      	mov	r6, r0
 8009a78:	d1d6      	bne.n	8009a28 <_svfiprintf_r+0x174>
 8009a7a:	89ab      	ldrh	r3, [r5, #12]
 8009a7c:	065b      	lsls	r3, r3, #25
 8009a7e:	f53f af2d 	bmi.w	80098dc <_svfiprintf_r+0x28>
 8009a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a84:	b01d      	add	sp, #116	; 0x74
 8009a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8a:	ab03      	add	r3, sp, #12
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	462a      	mov	r2, r5
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <_svfiprintf_r+0x1f4>)
 8009a92:	a904      	add	r1, sp, #16
 8009a94:	4638      	mov	r0, r7
 8009a96:	f000 f879 	bl	8009b8c <_printf_i>
 8009a9a:	e7eb      	b.n	8009a74 <_svfiprintf_r+0x1c0>
 8009a9c:	08009f58 	.word	0x08009f58
 8009aa0:	08009f62 	.word	0x08009f62
 8009aa4:	00000000 	.word	0x00000000
 8009aa8:	08009801 	.word	0x08009801
 8009aac:	08009f5e 	.word	0x08009f5e

08009ab0 <_printf_common>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	4699      	mov	r9, r3
 8009ab8:	688a      	ldr	r2, [r1, #8]
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	bfb8      	it	lt
 8009ac4:	4613      	movlt	r3, r2
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009acc:	4607      	mov	r7, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	b10a      	cbz	r2, 8009ad6 <_printf_common+0x26>
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	0699      	lsls	r1, r3, #26
 8009ada:	bf42      	ittt	mi
 8009adc:	6833      	ldrmi	r3, [r6, #0]
 8009ade:	3302      	addmi	r3, #2
 8009ae0:	6033      	strmi	r3, [r6, #0]
 8009ae2:	6825      	ldr	r5, [r4, #0]
 8009ae4:	f015 0506 	ands.w	r5, r5, #6
 8009ae8:	d106      	bne.n	8009af8 <_printf_common+0x48>
 8009aea:	f104 0a19 	add.w	sl, r4, #25
 8009aee:	68e3      	ldr	r3, [r4, #12]
 8009af0:	6832      	ldr	r2, [r6, #0]
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	dc26      	bgt.n	8009b46 <_printf_common+0x96>
 8009af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009afc:	1e13      	subs	r3, r2, #0
 8009afe:	6822      	ldr	r2, [r4, #0]
 8009b00:	bf18      	it	ne
 8009b02:	2301      	movne	r3, #1
 8009b04:	0692      	lsls	r2, r2, #26
 8009b06:	d42b      	bmi.n	8009b60 <_printf_common+0xb0>
 8009b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	4638      	mov	r0, r7
 8009b10:	47c0      	blx	r8
 8009b12:	3001      	adds	r0, #1
 8009b14:	d01e      	beq.n	8009b54 <_printf_common+0xa4>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	6922      	ldr	r2, [r4, #16]
 8009b1a:	f003 0306 	and.w	r3, r3, #6
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	bf02      	ittt	eq
 8009b22:	68e5      	ldreq	r5, [r4, #12]
 8009b24:	6833      	ldreq	r3, [r6, #0]
 8009b26:	1aed      	subeq	r5, r5, r3
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	bf0c      	ite	eq
 8009b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b30:	2500      	movne	r5, #0
 8009b32:	4293      	cmp	r3, r2
 8009b34:	bfc4      	itt	gt
 8009b36:	1a9b      	subgt	r3, r3, r2
 8009b38:	18ed      	addgt	r5, r5, r3
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	341a      	adds	r4, #26
 8009b3e:	42b5      	cmp	r5, r6
 8009b40:	d11a      	bne.n	8009b78 <_printf_common+0xc8>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e008      	b.n	8009b58 <_printf_common+0xa8>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4652      	mov	r2, sl
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	47c0      	blx	r8
 8009b50:	3001      	adds	r0, #1
 8009b52:	d103      	bne.n	8009b5c <_printf_common+0xac>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5c:	3501      	adds	r5, #1
 8009b5e:	e7c6      	b.n	8009aee <_printf_common+0x3e>
 8009b60:	18e1      	adds	r1, r4, r3
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	2030      	movs	r0, #48	; 0x30
 8009b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b6a:	4422      	add	r2, r4
 8009b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b74:	3302      	adds	r3, #2
 8009b76:	e7c7      	b.n	8009b08 <_printf_common+0x58>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4638      	mov	r0, r7
 8009b80:	47c0      	blx	r8
 8009b82:	3001      	adds	r0, #1
 8009b84:	d0e6      	beq.n	8009b54 <_printf_common+0xa4>
 8009b86:	3601      	adds	r6, #1
 8009b88:	e7d9      	b.n	8009b3e <_printf_common+0x8e>
	...

08009b8c <_printf_i>:
 8009b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	7e0f      	ldrb	r7, [r1, #24]
 8009b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b94:	2f78      	cmp	r7, #120	; 0x78
 8009b96:	4691      	mov	r9, r2
 8009b98:	4680      	mov	r8, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	469a      	mov	sl, r3
 8009b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ba2:	d807      	bhi.n	8009bb4 <_printf_i+0x28>
 8009ba4:	2f62      	cmp	r7, #98	; 0x62
 8009ba6:	d80a      	bhi.n	8009bbe <_printf_i+0x32>
 8009ba8:	2f00      	cmp	r7, #0
 8009baa:	f000 80d4 	beq.w	8009d56 <_printf_i+0x1ca>
 8009bae:	2f58      	cmp	r7, #88	; 0x58
 8009bb0:	f000 80c0 	beq.w	8009d34 <_printf_i+0x1a8>
 8009bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bbc:	e03a      	b.n	8009c34 <_printf_i+0xa8>
 8009bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bc2:	2b15      	cmp	r3, #21
 8009bc4:	d8f6      	bhi.n	8009bb4 <_printf_i+0x28>
 8009bc6:	a101      	add	r1, pc, #4	; (adr r1, 8009bcc <_printf_i+0x40>)
 8009bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c39 	.word	0x08009c39
 8009bd4:	08009bb5 	.word	0x08009bb5
 8009bd8:	08009bb5 	.word	0x08009bb5
 8009bdc:	08009bb5 	.word	0x08009bb5
 8009be0:	08009bb5 	.word	0x08009bb5
 8009be4:	08009c39 	.word	0x08009c39
 8009be8:	08009bb5 	.word	0x08009bb5
 8009bec:	08009bb5 	.word	0x08009bb5
 8009bf0:	08009bb5 	.word	0x08009bb5
 8009bf4:	08009bb5 	.word	0x08009bb5
 8009bf8:	08009d3d 	.word	0x08009d3d
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009cf7 	.word	0x08009cf7
 8009c04:	08009bb5 	.word	0x08009bb5
 8009c08:	08009bb5 	.word	0x08009bb5
 8009c0c:	08009d5f 	.word	0x08009d5f
 8009c10:	08009bb5 	.word	0x08009bb5
 8009c14:	08009c65 	.word	0x08009c65
 8009c18:	08009bb5 	.word	0x08009bb5
 8009c1c:	08009bb5 	.word	0x08009bb5
 8009c20:	08009cff 	.word	0x08009cff
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	1d1a      	adds	r2, r3, #4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	602a      	str	r2, [r5, #0]
 8009c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c34:	2301      	movs	r3, #1
 8009c36:	e09f      	b.n	8009d78 <_printf_i+0x1ec>
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	0607      	lsls	r7, r0, #24
 8009c3e:	f103 0104 	add.w	r1, r3, #4
 8009c42:	6029      	str	r1, [r5, #0]
 8009c44:	d501      	bpl.n	8009c4a <_printf_i+0xbe>
 8009c46:	681e      	ldr	r6, [r3, #0]
 8009c48:	e003      	b.n	8009c52 <_printf_i+0xc6>
 8009c4a:	0646      	lsls	r6, r0, #25
 8009c4c:	d5fb      	bpl.n	8009c46 <_printf_i+0xba>
 8009c4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c52:	2e00      	cmp	r6, #0
 8009c54:	da03      	bge.n	8009c5e <_printf_i+0xd2>
 8009c56:	232d      	movs	r3, #45	; 0x2d
 8009c58:	4276      	negs	r6, r6
 8009c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5e:	485a      	ldr	r0, [pc, #360]	; (8009dc8 <_printf_i+0x23c>)
 8009c60:	230a      	movs	r3, #10
 8009c62:	e012      	b.n	8009c8a <_printf_i+0xfe>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	6029      	str	r1, [r5, #0]
 8009c6c:	0605      	lsls	r5, r0, #24
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0xe8>
 8009c70:	681e      	ldr	r6, [r3, #0]
 8009c72:	e002      	b.n	8009c7a <_printf_i+0xee>
 8009c74:	0641      	lsls	r1, r0, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0xe4>
 8009c78:	881e      	ldrh	r6, [r3, #0]
 8009c7a:	4853      	ldr	r0, [pc, #332]	; (8009dc8 <_printf_i+0x23c>)
 8009c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c7e:	bf0c      	ite	eq
 8009c80:	2308      	moveq	r3, #8
 8009c82:	230a      	movne	r3, #10
 8009c84:	2100      	movs	r1, #0
 8009c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c8a:	6865      	ldr	r5, [r4, #4]
 8009c8c:	60a5      	str	r5, [r4, #8]
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	bfa2      	ittt	ge
 8009c92:	6821      	ldrge	r1, [r4, #0]
 8009c94:	f021 0104 	bicge.w	r1, r1, #4
 8009c98:	6021      	strge	r1, [r4, #0]
 8009c9a:	b90e      	cbnz	r6, 8009ca0 <_printf_i+0x114>
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	d04b      	beq.n	8009d38 <_printf_i+0x1ac>
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8009caa:	5dc7      	ldrb	r7, [r0, r7]
 8009cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cb0:	4637      	mov	r7, r6
 8009cb2:	42bb      	cmp	r3, r7
 8009cb4:	460e      	mov	r6, r1
 8009cb6:	d9f4      	bls.n	8009ca2 <_printf_i+0x116>
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d10b      	bne.n	8009cd4 <_printf_i+0x148>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	07de      	lsls	r6, r3, #31
 8009cc0:	d508      	bpl.n	8009cd4 <_printf_i+0x148>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	4299      	cmp	r1, r3
 8009cc8:	bfde      	ittt	le
 8009cca:	2330      	movle	r3, #48	; 0x30
 8009ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cd4:	1b52      	subs	r2, r2, r5
 8009cd6:	6122      	str	r2, [r4, #16]
 8009cd8:	f8cd a000 	str.w	sl, [sp]
 8009cdc:	464b      	mov	r3, r9
 8009cde:	aa03      	add	r2, sp, #12
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7ff fee4 	bl	8009ab0 <_printf_common>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d14a      	bne.n	8009d82 <_printf_i+0x1f6>
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	b004      	add	sp, #16
 8009cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	f043 0320 	orr.w	r3, r3, #32
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	4833      	ldr	r0, [pc, #204]	; (8009dcc <_printf_i+0x240>)
 8009d00:	2778      	movs	r7, #120	; 0x78
 8009d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	6829      	ldr	r1, [r5, #0]
 8009d0a:	061f      	lsls	r7, r3, #24
 8009d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d10:	d402      	bmi.n	8009d18 <_printf_i+0x18c>
 8009d12:	065f      	lsls	r7, r3, #25
 8009d14:	bf48      	it	mi
 8009d16:	b2b6      	uxthmi	r6, r6
 8009d18:	07df      	lsls	r7, r3, #31
 8009d1a:	bf48      	it	mi
 8009d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d20:	6029      	str	r1, [r5, #0]
 8009d22:	bf48      	it	mi
 8009d24:	6023      	strmi	r3, [r4, #0]
 8009d26:	b91e      	cbnz	r6, 8009d30 <_printf_i+0x1a4>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	f023 0320 	bic.w	r3, r3, #32
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	2310      	movs	r3, #16
 8009d32:	e7a7      	b.n	8009c84 <_printf_i+0xf8>
 8009d34:	4824      	ldr	r0, [pc, #144]	; (8009dc8 <_printf_i+0x23c>)
 8009d36:	e7e4      	b.n	8009d02 <_printf_i+0x176>
 8009d38:	4615      	mov	r5, r2
 8009d3a:	e7bd      	b.n	8009cb8 <_printf_i+0x12c>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6826      	ldr	r6, [r4, #0]
 8009d40:	6961      	ldr	r1, [r4, #20]
 8009d42:	1d18      	adds	r0, r3, #4
 8009d44:	6028      	str	r0, [r5, #0]
 8009d46:	0635      	lsls	r5, r6, #24
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	d501      	bpl.n	8009d50 <_printf_i+0x1c4>
 8009d4c:	6019      	str	r1, [r3, #0]
 8009d4e:	e002      	b.n	8009d56 <_printf_i+0x1ca>
 8009d50:	0670      	lsls	r0, r6, #25
 8009d52:	d5fb      	bpl.n	8009d4c <_printf_i+0x1c0>
 8009d54:	8019      	strh	r1, [r3, #0]
 8009d56:	2300      	movs	r3, #0
 8009d58:	6123      	str	r3, [r4, #16]
 8009d5a:	4615      	mov	r5, r2
 8009d5c:	e7bc      	b.n	8009cd8 <_printf_i+0x14c>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	1d1a      	adds	r2, r3, #4
 8009d62:	602a      	str	r2, [r5, #0]
 8009d64:	681d      	ldr	r5, [r3, #0]
 8009d66:	6862      	ldr	r2, [r4, #4]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f7f6 fab8 	bl	80002e0 <memchr>
 8009d70:	b108      	cbz	r0, 8009d76 <_printf_i+0x1ea>
 8009d72:	1b40      	subs	r0, r0, r5
 8009d74:	6060      	str	r0, [r4, #4]
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d80:	e7aa      	b.n	8009cd8 <_printf_i+0x14c>
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	462a      	mov	r2, r5
 8009d86:	4649      	mov	r1, r9
 8009d88:	4640      	mov	r0, r8
 8009d8a:	47d0      	blx	sl
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d0ad      	beq.n	8009cec <_printf_i+0x160>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	079b      	lsls	r3, r3, #30
 8009d94:	d413      	bmi.n	8009dbe <_printf_i+0x232>
 8009d96:	68e0      	ldr	r0, [r4, #12]
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	4298      	cmp	r0, r3
 8009d9c:	bfb8      	it	lt
 8009d9e:	4618      	movlt	r0, r3
 8009da0:	e7a6      	b.n	8009cf0 <_printf_i+0x164>
 8009da2:	2301      	movs	r3, #1
 8009da4:	4632      	mov	r2, r6
 8009da6:	4649      	mov	r1, r9
 8009da8:	4640      	mov	r0, r8
 8009daa:	47d0      	blx	sl
 8009dac:	3001      	adds	r0, #1
 8009dae:	d09d      	beq.n	8009cec <_printf_i+0x160>
 8009db0:	3501      	adds	r5, #1
 8009db2:	68e3      	ldr	r3, [r4, #12]
 8009db4:	9903      	ldr	r1, [sp, #12]
 8009db6:	1a5b      	subs	r3, r3, r1
 8009db8:	42ab      	cmp	r3, r5
 8009dba:	dcf2      	bgt.n	8009da2 <_printf_i+0x216>
 8009dbc:	e7eb      	b.n	8009d96 <_printf_i+0x20a>
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	f104 0619 	add.w	r6, r4, #25
 8009dc4:	e7f5      	b.n	8009db2 <_printf_i+0x226>
 8009dc6:	bf00      	nop
 8009dc8:	08009f69 	.word	0x08009f69
 8009dcc:	08009f7a 	.word	0x08009f7a

08009dd0 <memmove>:
 8009dd0:	4288      	cmp	r0, r1
 8009dd2:	b510      	push	{r4, lr}
 8009dd4:	eb01 0402 	add.w	r4, r1, r2
 8009dd8:	d902      	bls.n	8009de0 <memmove+0x10>
 8009dda:	4284      	cmp	r4, r0
 8009ddc:	4623      	mov	r3, r4
 8009dde:	d807      	bhi.n	8009df0 <memmove+0x20>
 8009de0:	1e43      	subs	r3, r0, #1
 8009de2:	42a1      	cmp	r1, r4
 8009de4:	d008      	beq.n	8009df8 <memmove+0x28>
 8009de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dee:	e7f8      	b.n	8009de2 <memmove+0x12>
 8009df0:	4402      	add	r2, r0
 8009df2:	4601      	mov	r1, r0
 8009df4:	428a      	cmp	r2, r1
 8009df6:	d100      	bne.n	8009dfa <memmove+0x2a>
 8009df8:	bd10      	pop	{r4, pc}
 8009dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e02:	e7f7      	b.n	8009df4 <memmove+0x24>

08009e04 <_sbrk_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	; (8009e20 <_sbrk_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f7 fb80 	bl	8001514 <_sbrk>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_sbrk_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_sbrk_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	24000b0c 	.word	0x24000b0c

08009e24 <_realloc_r>:
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	4680      	mov	r8, r0
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	460e      	mov	r6, r1
 8009e2e:	b921      	cbnz	r1, 8009e3a <_realloc_r+0x16>
 8009e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	4611      	mov	r1, r2
 8009e36:	f7ff bc57 	b.w	80096e8 <_malloc_r>
 8009e3a:	b92a      	cbnz	r2, 8009e48 <_realloc_r+0x24>
 8009e3c:	f7ff fbe8 	bl	8009610 <_free_r>
 8009e40:	4625      	mov	r5, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	f000 f81b 	bl	8009e82 <_malloc_usable_size_r>
 8009e4c:	4284      	cmp	r4, r0
 8009e4e:	4607      	mov	r7, r0
 8009e50:	d802      	bhi.n	8009e58 <_realloc_r+0x34>
 8009e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e56:	d812      	bhi.n	8009e7e <_realloc_r+0x5a>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	f7ff fc44 	bl	80096e8 <_malloc_r>
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0ed      	beq.n	8009e42 <_realloc_r+0x1e>
 8009e66:	42bc      	cmp	r4, r7
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	bf28      	it	cs
 8009e6e:	463a      	movcs	r2, r7
 8009e70:	f7ff fbc0 	bl	80095f4 <memcpy>
 8009e74:	4631      	mov	r1, r6
 8009e76:	4640      	mov	r0, r8
 8009e78:	f7ff fbca 	bl	8009610 <_free_r>
 8009e7c:	e7e1      	b.n	8009e42 <_realloc_r+0x1e>
 8009e7e:	4635      	mov	r5, r6
 8009e80:	e7df      	b.n	8009e42 <_realloc_r+0x1e>

08009e82 <_malloc_usable_size_r>:
 8009e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e86:	1f18      	subs	r0, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bfbc      	itt	lt
 8009e8c:	580b      	ldrlt	r3, [r1, r0]
 8009e8e:	18c0      	addlt	r0, r0, r3
 8009e90:	4770      	bx	lr
	...

08009e94 <_init>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr

08009ea0 <_fini>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	bf00      	nop
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr
