
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  08008334  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  08008394  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  24000120  080083f4  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000abc  080083f4  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b94f  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b37  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0003e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e85  00000000  00000000  0003f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003874b  00000000  00000000  00040755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017225  00000000  00000000  00078ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001683df  00000000  00000000  000900c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000566c  00000000  00000000  001f84a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001fdb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080081dc 	.word	0x080081dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080081dc 	.word	0x080081dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 ff31 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f87d 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 fa8d 	bl	8000ba8 <MX_GPIO_Init>
  MX_ETH_Init();
 800068e:	f000 f8f9 	bl	8000884 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000692:	f000 fa0b 	bl	8000aac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000696:	f000 fa55 	bl	8000b44 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 800069a:	f000 f93f 	bl	800091c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800069e:	f000 f9a1 	bl	80009e4 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;								// CAN ID ~Page 563
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <main+0xec>)
 80006a4:	f240 3221 	movw	r2, #801	; 0x321
 80006a8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <main+0xec>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;					// Sets the data frame
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <main+0xec>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;					// Sets the data size to 8
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <main+0xec>)
 80006b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006bc:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <main+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <main+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;					// Sets to classic CAN Message
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <main+0xec>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <main+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <main+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]

  uint8_t count = '0';
 80006dc:	2330      	movs	r3, #48	; 0x30
 80006de:	71fb      	strb	r3, [r7, #7]

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80006e0:	4822      	ldr	r0, [pc, #136]	; (800076c <main+0xf0>)
 80006e2:	f001 febd 	bl	8002460 <HAL_FDCAN_Start>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <main+0x74>
      Error_Handler();
 80006ec:	f000 fb38 	bl	8000d60 <Error_Handler>
    }

  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <main+0xf4>)
 80006f2:	f001 feb5 	bl	8002460 <HAL_FDCAN_Start>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <main+0x84>
        Error_Handler();
 80006fc:	f000 fb30 	bl	8000d60 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan2, count) == '1') { // Checks for a new CAN Message
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <main+0xf4>)
 8000706:	f002 f89f 	bl	8002848 <HAL_FDCAN_IsRxBufferMessageAvailable>
 800070a:	4603      	mov	r3, r0
 800070c:	2b31      	cmp	r3, #49	; 0x31
 800070e:	d108      	bne.n	8000722 <main+0xa6>
	  		  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData); // Gets the new CAN Message
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <main+0xf8>)
 8000712:	4a19      	ldr	r2, [pc, #100]	; (8000778 <main+0xfc>)
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <main+0xf4>)
 8000718:	f001 ff28 	bl	800256c <HAL_FDCAN_GetRxMessage>
	  		  count++;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
	  }

	  	  HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 ff71 	bl	800160c <HAL_Delay>

	  	  TxData[0]++;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <main+0x100>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <main+0x100>)
 8000734:	701a      	strb	r2, [r3, #0]
	  	  TxData[1]+=2;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <main+0x100>)
 8000738:	785b      	ldrb	r3, [r3, #1]
 800073a:	3302      	adds	r3, #2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <main+0x100>)
 8000740:	705a      	strb	r2, [r3, #1]

	  	  HAL_UART_Transmit(&huart3, &TxData[0], sizeof(TxData[0]), HAL_MAX_DELAY);
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2201      	movs	r2, #1
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <main+0x100>)
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <main+0x104>)
 800074c:	f005 fc84 	bl	8006058 <HAL_UART_Transmit>

	  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) { // Adds a new CAN message to the TX Fifo
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <main+0x100>)
 8000752:	4905      	ldr	r1, [pc, #20]	; (8000768 <main+0xec>)
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <main+0xf0>)
 8000756:	f001 feae 	bl	80024b6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0cf      	beq.n	8000700 <main+0x84>
	  		  Error_Handler(); // If the message fails, kick to Error Handler
 8000760:	f000 fafe 	bl	8000d60 <Error_Handler>
	  if(HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan2, count) == '1') { // Checks for a new CAN Message
 8000764:	e7cc      	b.n	8000700 <main+0x84>
 8000766:	bf00      	nop
 8000768:	24000934 	.word	0x24000934
 800076c:	24000224 	.word	0x24000224
 8000770:	240002c4 	.word	0x240002c4
 8000774:	2400092c 	.word	0x2400092c
 8000778:	24000904 	.word	0x24000904
 800077c:	24000958 	.word	0x24000958
 8000780:	24000364 	.word	0x24000364

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	; 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	224c      	movs	r2, #76	; 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 f89e 	bl	80078d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 f898 	bl	80078d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f002 fdab 	bl	8003300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <SystemClock_Config+0xf8>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	4a32      	ldr	r2, [pc, #200]	; (800087c <SystemClock_Config+0xf8>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <SystemClock_Config+0xf8>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <SystemClock_Config+0xfc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <SystemClock_Config+0xfc>)
 80007ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <SystemClock_Config+0xfc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xfc>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007f0:	2303      	movs	r3, #3
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	2302      	movs	r3, #2
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800080e:	2318      	movs	r3, #24
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000816:	2304      	movs	r3, #4
 8000818:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081e:	230c      	movs	r3, #12
 8000820:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000822:	2300      	movs	r3, #0
 8000824:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fdb0 	bl	8003394 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800083a:	f000 fa91 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	233f      	movs	r3, #63	; 0x3f
 8000840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2101      	movs	r1, #1
 8000862:	4618      	mov	r0, r3
 8000864:	f003 f9f0 	bl	8003c48 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800086e:	f000 fa77 	bl	8000d60 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3770      	adds	r7, #112	; 0x70
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	58000400 	.word	0x58000400
 8000880:	58024800 	.word	0x58024800

08000884 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_ETH_Init+0x80>)
 800088a:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <MX_ETH_Init+0x84>)
 800088c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_ETH_Init+0x88>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ETH_Init+0x88>)
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_ETH_Init+0x88>)
 800089c:	22e1      	movs	r2, #225	; 0xe1
 800089e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ETH_Init+0x88>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_ETH_Init+0x88>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_ETH_Init+0x88>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_ETH_Init+0x80>)
 80008b4:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_ETH_Init+0x88>)
 80008b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_ETH_Init+0x80>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_ETH_Init+0x80>)
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <MX_ETH_Init+0x8c>)
 80008c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_ETH_Init+0x80>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_ETH_Init+0x90>)
 80008c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_ETH_Init+0x80>)
 80008cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_ETH_Init+0x80>)
 80008d4:	f000 ffc2 	bl	800185c <HAL_ETH_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008de:	f000 fa3f 	bl	8000d60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e2:	2238      	movs	r2, #56	; 0x38
 80008e4:	2100      	movs	r1, #0
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_ETH_Init+0x94>)
 80008e8:	f006 fff4 	bl	80078d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_ETH_Init+0x94>)
 80008ee:	2221      	movs	r2, #33	; 0x21
 80008f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_ETH_Init+0x94>)
 80008f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_ETH_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000174 	.word	0x24000174
 8000908:	40028000 	.word	0x40028000
 800090c:	24000960 	.word	0x24000960
 8000910:	240000c0 	.word	0x240000c0
 8000914:	24000060 	.word	0x24000060
 8000918:	2400013c 	.word	0x2400013c

0800091c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000920:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <MX_FDCAN1_Init+0xc4>)
 8000924:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800092c:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000946:	2210      	movs	r2, #16
 8000948:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800094c:	2201      	movs	r2, #1
 800094e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000952:	2202      	movs	r2, #2
 8000954:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000958:	2202      	movs	r2, #2
 800095a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800095e:	2201      	movs	r2, #1
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000964:	2201      	movs	r2, #1
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800096a:	2201      	movs	r2, #1
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000970:	2201      	movs	r2, #1
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800098e:	2204      	movs	r2, #4
 8000990:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 800099a:	2204      	movs	r2, #4
 800099c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_FDCAN1_Init+0xc0>)
 80009ca:	f001 fb6b 	bl	80020a4 <HAL_FDCAN_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80009d4:	f000 f9c4 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	24000224 	.word	0x24000224
 80009e0:	4000a000 	.word	0x4000a000

080009e4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_FDCAN2_Init+0xc4>)
 80009ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a0e:	2210      	movs	r2, #16
 8000a10:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_FDCAN2_Init+0xc0>)
 8000a92:	f001 fb07 	bl	80020a4 <HAL_FDCAN_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000a9c:	f000 f960 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	240002c4 	.word	0x240002c4
 8000aa8:	4000a400 	.word	0x4000a400

08000aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000af6:	f005 fa5f 	bl	8005fb8 <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f92e 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b08:	f006 faef 	bl	80070ea <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f925 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b1a:	f006 fb24 	bl	8007166 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f91c 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b2a:	f006 faa5 	bl	8007078 <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f914 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000364 	.word	0x24000364
 8000b40:	40004800 	.word	0x40004800

08000b44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b50:	2209      	movs	r2, #9
 8000b52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	f002 fa6f 	bl	800306e <HAL_PCD_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 f8e3 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240003f8 	.word	0x240003f8
 8000ba4:	40080000 	.word	0x40080000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a60      	ldr	r2, [pc, #384]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b5e      	ldr	r3, [pc, #376]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a59      	ldr	r2, [pc, #356]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0a:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a4a      	ldr	r2, [pc, #296]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b44      	ldr	r3, [pc, #272]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a42      	ldr	r2, [pc, #264]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c54:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a3b      	ldr	r2, [pc, #236]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a33      	ldr	r2, [pc, #204]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <MX_GPIO_Init+0x1a0>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c96:	482d      	ldr	r0, [pc, #180]	; (8000d4c <MX_GPIO_Init+0x1a4>)
 8000c98:	f002 f9d0 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	482b      	ldr	r0, [pc, #172]	; (8000d50 <MX_GPIO_Init+0x1a8>)
 8000ca4:	f002 f9ca 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	4829      	ldr	r0, [pc, #164]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000cae:	f002 f9c5 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4824      	ldr	r0, [pc, #144]	; (8000d58 <MX_GPIO_Init+0x1b0>)
 8000cc8:	f002 f808 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ccc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4819      	ldr	r0, [pc, #100]	; (8000d4c <MX_GPIO_Init+0x1a4>)
 8000ce6:	f001 fff9 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <MX_GPIO_Init+0x1a8>)
 8000d04:	f001 ffea 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <MX_GPIO_Init+0x1b4>)
 8000d1e:	f001 ffdd 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_GPIO_Init+0x1ac>)
 8000d3a:	f001 ffcf 	bl	8002cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	; 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020400 	.word	0x58020400
 8000d50:	58020c00 	.word	0x58020c00
 8000d54:	58021000 	.word	0x58021000
 8000d58:	58020800 	.word	0x58020800
 8000d5c:	58021800 	.word	0x58021800

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d66:	b672      	cpsid	i
}
 8000d68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t eMessage[16];
  sprintf(eMessage, "Error\n");
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4905      	ldr	r1, [pc, #20]	; (8000d84 <Error_Handler+0x24>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 fd90 	bl	8007894 <siprintf>
  HAL_UART_Transmit(&huart3, eMessage, sizeof(eMessage), HAL_MAX_DELAY);
 8000d74:	4639      	mov	r1, r7
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <Error_Handler+0x28>)
 8000d7e:	f005 f96b 	bl	8006058 <HAL_UART_Transmit>
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <Error_Handler+0x22>
 8000d84:	080081f4 	.word	0x080081f4
 8000d88:	24000364 	.word	0x24000364

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d98:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x30>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x30>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	; 0x38
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a59      	ldr	r2, [pc, #356]	; (8000f44 <HAL_ETH_MspInit+0x184>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	f040 80ab 	bne.w	8000f3a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000de4:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	4a57      	ldr	r2, [pc, #348]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df4:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfe:	623b      	str	r3, [r7, #32]
 8000e00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e02:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e26:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a2a      	ldr	r2, [pc, #168]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eb6:	2332      	movs	r3, #50	; 0x32
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec6:	230b      	movs	r3, #11
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <HAL_ETH_MspInit+0x18c>)
 8000ed2:	f001 ff03 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ed6:	2386      	movs	r3, #134	; 0x86
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4817      	ldr	r0, [pc, #92]	; (8000f50 <HAL_ETH_MspInit+0x190>)
 8000ef2:	f001 fef3 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <HAL_ETH_MspInit+0x194>)
 8000f14:	f001 fee2 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2a:	230b      	movs	r3, #11
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <HAL_ETH_MspInit+0x198>)
 8000f36:	f001 fed1 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40028000 	.word	0x40028000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020800 	.word	0x58020800
 8000f50:	58020000 	.word	0x58020000
 8000f54:	58020400 	.word	0x58020400
 8000f58:	58021800 	.word	0x58021800

08000f5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0bc      	sub	sp, #240	; 0xf0
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	22c0      	movs	r2, #192	; 0xc0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fca9 	bl	80078d4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a56      	ldr	r2, [pc, #344]	; (80010e0 <HAL_FDCAN_MspInit+0x184>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d150      	bne.n	800102e <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f9db 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000fb0:	f7ff fed6 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fb4:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <HAL_FDCAN_MspInit+0x188>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a4a      	ldr	r2, [pc, #296]	; (80010e4 <HAL_FDCAN_MspInit+0x188>)
 8000fbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_FDCAN_MspInit+0x188>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fc6:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8000fc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8000fd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	4a3f      	ldr	r2, [pc, #252]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001002:	2303      	movs	r3, #3
 8001004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800101a:	2309      	movs	r3, #9
 800101c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001020:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001024:	4619      	mov	r1, r3
 8001026:	4831      	ldr	r0, [pc, #196]	; (80010ec <HAL_FDCAN_MspInit+0x190>)
 8001028:	f001 fe58 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800102c:	e054      	b.n	80010d8 <HAL_FDCAN_MspInit+0x17c>
  else if(hfdcan->Instance==FDCAN2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_FDCAN_MspInit+0x194>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d14f      	bne.n	80010d8 <HAL_FDCAN_MspInit+0x17c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	4618      	mov	r0, r3
 8001052:	f003 f985 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 800105c:	f7ff fe80 	bl	8000d60 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_FDCAN_MspInit+0x188>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_FDCAN_MspInit+0x188>)
 8001068:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_FDCAN_MspInit+0x188>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10e      	bne.n	8001090 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8001074:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8001084:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_FDCAN_MspInit+0x18c>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010ae:	2360      	movs	r3, #96	; 0x60
 80010b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80010c6:	2309      	movs	r3, #9
 80010c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010d0:	4619      	mov	r1, r3
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <HAL_FDCAN_MspInit+0x198>)
 80010d4:	f001 fe02 	bl	8002cdc <HAL_GPIO_Init>
}
 80010d8:	bf00      	nop
 80010da:	37f0      	adds	r7, #240	; 0xf0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	4000a000 	.word	0x4000a000
 80010e4:	24000968 	.word	0x24000968
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020c00 	.word	0x58020c00
 80010f0:	4000a400 	.word	0x4000a400
 80010f4:	58020400 	.word	0x58020400

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ba      	sub	sp, #232	; 0xe8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	22c0      	movs	r2, #192	; 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f006 fbdb 	bl	80078d4 <memset>
  if(huart->Instance==USART3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_UART_MspInit+0xc8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d146      	bne.n	80011b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001128:	f04f 0202 	mov.w	r2, #2
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f90e 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800114a:	f7ff fe09 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_UART_MspInit+0xcc>)
 8001150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_UART_MspInit+0xcc>)
 8001156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_UART_MspInit+0xcc>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_MspInit+0xcc>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0xcc>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_UART_MspInit+0xcc>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_MspInit+0xd0>)
 80011b2:	f001 fd93 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	37e8      	adds	r7, #232	; 0xe8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004800 	.word	0x40004800
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020c00 	.word	0x58020c00

080011cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ba      	sub	sp, #232	; 0xe8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	22c0      	movs	r2, #192	; 0xc0
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 fb71 	bl	80078d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <HAL_PCD_MspInit+0xec>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d159      	bne.n	80012b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800120c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f8a3 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001220:	f7ff fd9e 	bl	8000d60 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001224:	f002 f8a6 	bl	8003374 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_PCD_MspInit+0xf0>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_PCD_MspInit+0xf0>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_PCD_MspInit+0xf0>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001246:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001260:	230a      	movs	r3, #10
 8001262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800126a:	4619      	mov	r1, r3
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <HAL_PCD_MspInit+0xf4>)
 800126e:	f001 fd35 	bl	8002cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <HAL_PCD_MspInit+0xf4>)
 800128e:	f001 fd25 	bl	8002cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_PCD_MspInit+0xf0>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_PCD_MspInit+0xf0>)
 800129a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800129e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_PCD_MspInit+0xf0>)
 80012a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	37e8      	adds	r7, #232	; 0xe8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40080000 	.word	0x40080000
 80012bc:	58024400 	.word	0x58024400
 80012c0:	58020000 	.word	0x58020000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f95c 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f006 facc 	bl	80078e4 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	24080000 	.word	0x24080000
 8001378:	00000400 	.word	0x00000400
 800137c:	2400096c 	.word	0x2400096c
 8001380:	24000ac0 	.word	0x24000ac0

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <SystemInit+0xe4>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138e:	4a36      	ldr	r2, [pc, #216]	; (8001468 <SystemInit+0xe4>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <SystemInit+0xe8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	d807      	bhi.n	80013b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <SystemInit+0xe8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 030f 	bic.w	r3, r3, #15
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <SystemInit+0xe8>)
 80013ae:	f043 0307 	orr.w	r3, r3, #7
 80013b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <SystemInit+0xec>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <SystemInit+0xec>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <SystemInit+0xec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <SystemInit+0xec>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4929      	ldr	r1, [pc, #164]	; (8001470 <SystemInit+0xec>)
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <SystemInit+0xf0>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <SystemInit+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <SystemInit+0xe8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 030f 	bic.w	r3, r3, #15
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <SystemInit+0xe8>)
 80013e8:	f043 0307 	orr.w	r3, r3, #7
 80013ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <SystemInit+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <SystemInit+0xec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <SystemInit+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <SystemInit+0xec>)
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <SystemInit+0xf4>)
 8001404:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <SystemInit+0xec>)
 8001408:	4a1c      	ldr	r2, [pc, #112]	; (800147c <SystemInit+0xf8>)
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <SystemInit+0xec>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <SystemInit+0xfc>)
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <SystemInit+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <SystemInit+0xec>)
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <SystemInit+0xfc>)
 800141c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <SystemInit+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <SystemInit+0xec>)
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <SystemInit+0xfc>)
 8001428:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <SystemInit+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <SystemInit+0xec>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <SystemInit+0xec>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <SystemInit+0xec>)
 800143e:	2200      	movs	r2, #0
 8001440:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <SystemInit+0x100>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <SystemInit+0x104>)
 8001448:	4013      	ands	r3, r2
 800144a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800144e:	d202      	bcs.n	8001456 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <SystemInit+0x108>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <SystemInit+0x10c>)
 8001458:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800145c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00
 800146c:	52002000 	.word	0x52002000
 8001470:	58024400 	.word	0x58024400
 8001474:	eaf6ed7f 	.word	0xeaf6ed7f
 8001478:	02020200 	.word	0x02020200
 800147c:	01ff0000 	.word	0x01ff0000
 8001480:	01010280 	.word	0x01010280
 8001484:	5c001000 	.word	0x5c001000
 8001488:	ffff0000 	.word	0xffff0000
 800148c:	51008108 	.word	0x51008108
 8001490:	52004000 	.word	0x52004000

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001498:	f7ff ff74 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	; (80014e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f006 fa15 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff f8d9 	bl	800067c <main>
  bx  lr
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014d4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80014d8:	080082d4 	.word	0x080082d4
  ldr r2, =_sbss
 80014dc:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80014e0:	24000abc 	.word	0x24000abc

080014e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC3_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f982 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014f4:	f002 fd5e 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_Init+0x68>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	4913      	ldr	r1, [pc, #76]	; (8001554 <HAL_Init+0x6c>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_Init+0x68>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_Init+0x6c>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_Init+0x70>)
 800152a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_Init+0x74>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f814 	bl	8001560 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e002      	b.n	8001548 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001542:	f7ff fc23 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	58024400 	.word	0x58024400
 8001554:	08008248 	.word	0x08008248
 8001558:	24000004 	.word	0x24000004
 800155c:	24000000 	.word	0x24000000

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_InitTick+0x60>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e021      	b.n	80015b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_InitTick+0x64>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_InitTick+0x60>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f959 	bl	8001842 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f931 	bl	800180e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x68>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2400000c 	.word	0x2400000c
 80015c4:	24000000 	.word	0x24000000
 80015c8:	24000008 	.word	0x24000008

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	2400000c 	.word	0x2400000c
 80015f0:	24000970 	.word	0x24000970

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	24000970 	.word	0x24000970

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2400000c 	.word	0x2400000c

08001654 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetREVID+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0c1b      	lsrs	r3, r3, #16
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	5c001000 	.word	0x5c001000

0800166c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	58000400 	.word	0x58000400

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <__NVIC_SetPriorityGrouping+0x40>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <__NVIC_SetPriorityGrouping+0x40>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	60d3      	str	r3, [r2, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	05fa0000 	.word	0x05fa0000

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff47 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff5e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff90 	bl	800174c <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5f 	bl	80016f8 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffb2 	bl	80017b4 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0cf      	b.n	8001a0e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001874:	2b00      	cmp	r3, #0
 8001876:	d106      	bne.n	8001886 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2223      	movs	r2, #35	; 0x23
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fa9d 	bl	8000dc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <HAL_ETH_Init+0x1bc>)
 8001888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800188c:	4a62      	ldr	r2, [pc, #392]	; (8001a18 <HAL_ETH_Init+0x1bc>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001896:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <HAL_ETH_Init+0x1bc>)
 8001898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7a1b      	ldrb	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fedd 	bl	800166c <HAL_SYSCFG_ETHInterfaceSelect>
 80018b2:	e003      	b.n	80018bc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80018b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018b8:	f7ff fed8 	bl	800166c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80018bc:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_ETH_Init+0x1c0>)
 80018be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff fe8c 	bl	80015f4 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018de:	e011      	b.n	8001904 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018e0:	f7ff fe88 	bl	80015f4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018ee:	d909      	bls.n	8001904 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2204      	movs	r2, #4
 80018f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	22e0      	movs	r2, #224	; 0xe0
 80018fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e084      	b.n	8001a0e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e4      	bne.n	80018e0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f886 	bl	8001a28 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800191c:	f002 fcc4 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 8001920:	4603      	mov	r3, r0
 8001922:	4a3f      	ldr	r2, [pc, #252]	; (8001a20 <HAL_ETH_Init+0x1c4>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9a      	lsrs	r2, r3, #18
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3a01      	subs	r2, #1
 8001930:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fa71 	bl	8001e1c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001942:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001946:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001956:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	22e0      	movs	r2, #224	; 0xe0
 8001972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e049      	b.n	8001a0e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_ETH_Init+0x1c8>)
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6952      	ldr	r2, [r2, #20]
 800198e:	0051      	lsls	r1, r2, #1
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	430b      	orrs	r3, r1
 8001996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800199a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fad9 	bl	8001f56 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fb1f 	bl	8001fe8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	3305      	adds	r3, #5
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021a      	lsls	r2, r3, #8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	3303      	adds	r3, #3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	061a      	lsls	r2, r3, #24
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	3302      	adds	r3, #2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2210      	movs	r2, #16
 8001a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58000400 	.word	0x58000400
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	ffff8001 	.word	0xffff8001

08001a28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a42:	f002 fc31 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 8001a46:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d908      	bls.n	8001a62 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d804      	bhi.n	8001a62 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e027      	b.n	8001ab2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d908      	bls.n	8001a7c <HAL_ETH_SetMDIOClockRange+0x54>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d204      	bcs.n	8001a7c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e01a      	b.n	8001ab2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d303      	bcc.n	8001a8c <HAL_ETH_SetMDIOClockRange+0x64>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d911      	bls.n	8001ab0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d908      	bls.n	8001aa6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d804      	bhi.n	8001aa6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e005      	b.n	8001ab2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e000      	b.n	8001ab2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ab0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	01312cff 	.word	0x01312cff
 8001ac8:	02160ebf 	.word	0x02160ebf
 8001acc:	03938700 	.word	0x03938700
 8001ad0:	05f5e0ff 	.word	0x05f5e0ff
 8001ad4:	08f0d17f 	.word	0x08f0d17f

08001ad8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
 8001af8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001afa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7b5b      	ldrb	r3, [r3, #13]
 8001b00:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7b9b      	ldrb	r3, [r3, #14]
 8001b08:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7bdb      	ldrb	r3, [r3, #15]
 8001b10:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	7c12      	ldrb	r2, [r2, #16]
 8001b18:	2a00      	cmp	r2, #0
 8001b1a:	d102      	bne.n	8001b22 <ETH_SetMACConfig+0x4a>
 8001b1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b20:	e000      	b.n	8001b24 <ETH_SetMACConfig+0x4c>
 8001b22:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	7c52      	ldrb	r2, [r2, #17]
 8001b2a:	2a00      	cmp	r2, #0
 8001b2c:	d102      	bne.n	8001b34 <ETH_SetMACConfig+0x5c>
 8001b2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b32:	e000      	b.n	8001b36 <ETH_SetMACConfig+0x5e>
 8001b34:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	7c9b      	ldrb	r3, [r3, #18]
 8001b3c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b3e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b44:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7f1b      	ldrb	r3, [r3, #28]
 8001b50:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	7f5b      	ldrb	r3, [r3, #29]
 8001b58:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	7f92      	ldrb	r2, [r2, #30]
 8001b60:	2a00      	cmp	r2, #0
 8001b62:	d102      	bne.n	8001b6a <ETH_SetMACConfig+0x92>
 8001b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b68:	e000      	b.n	8001b6c <ETH_SetMACConfig+0x94>
 8001b6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	7fdb      	ldrb	r3, [r3, #31]
 8001b72:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d102      	bne.n	8001b86 <ETH_SetMACConfig+0xae>
 8001b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0xb0>
 8001b86:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b88:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b96:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b98:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <ETH_SetMACConfig+0x22c>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	68f9      	ldr	r1, [r7, #12]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bc2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bcc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001bce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bd6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001bd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d102      	bne.n	8001bea <ETH_SetMACConfig+0x112>
 8001be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be8:	e000      	b.n	8001bec <ETH_SetMACConfig+0x114>
 8001bea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <ETH_SetMACConfig+0x230>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c10:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <ETH_SetMACConfig+0x234>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c34:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d101      	bne.n	8001c4a <ETH_SetMACConfig+0x172>
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	e000      	b.n	8001c4c <ETH_SetMACConfig+0x174>
 8001c4a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c4c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c52:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c5e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c74:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c7c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f023 0103 	bic.w	r1, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001ca2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d101      	bne.n	8001cc6 <ETH_SetMACConfig+0x1ee>
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	e000      	b.n	8001cc8 <ETH_SetMACConfig+0x1f0>
 8001cc6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001cc8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001cd0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001cda:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001ce8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	00048083 	.word	0x00048083
 8001d08:	c0f88000 	.word	0xc0f88000
 8001d0c:	fffffef0 	.word	0xfffffef0

08001d10 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <ETH_SetDMAConfig+0xf8>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	6811      	ldr	r1, [r2, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d36:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	791b      	ldrb	r3, [r3, #4]
 8001d3c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d42:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7b1b      	ldrb	r3, [r3, #12]
 8001d48:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <ETH_SetDMAConfig+0xfc>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d68:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	7b5b      	ldrb	r3, [r3, #13]
 8001d6e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <ETH_SetDMAConfig+0x100>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d94:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	7d1b      	ldrb	r3, [r3, #20]
 8001da0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001da2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7f5b      	ldrb	r3, [r3, #29]
 8001da8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <ETH_SetDMAConfig+0x104>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	7f1b      	ldrb	r3, [r3, #28]
 8001dd2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <ETH_SetDMAConfig+0x108>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	430b      	orrs	r3, r1
 8001df4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001df8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	ffff87fd 	.word	0xffff87fd
 8001e0c:	ffff2ffe 	.word	0xffff2ffe
 8001e10:	fffec000 	.word	0xfffec000
 8001e14:	ffc0efef 	.word	0xffc0efef
 8001e18:	7fc0ffff 	.word	0x7fc0ffff

08001e1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0a4      	sub	sp, #144	; 0x90
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e74:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e78:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e96:	2300      	movs	r3, #0
 8001e98:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ec6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ecc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fde6 	bl	8001ad8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f3c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fee1 	bl	8001d10 <ETH_SetDMAConfig>
}
 8001f4e:	bf00      	nop
 8001f50:	3790      	adds	r7, #144	; 0x90
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e01d      	b.n	8001fa0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	3206      	adds	r2, #6
 8001f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d9de      	bls.n	8001f64 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e023      	b.n	800203e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	3212      	adds	r2, #18
 8002034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d9d8      	bls.n	8001ff6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	461a      	mov	r2, r3
 800206c:	2303      	movs	r3, #3
 800206e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002092:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b098      	sub	sp, #96	; 0x60
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80020ac:	4a84      	ldr	r2, [pc, #528]	; (80022c0 <HAL_FDCAN_Init+0x21c>)
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	4611      	mov	r1, r2
 80020b4:	224c      	movs	r2, #76	; 0x4c
 80020b6:	4618      	mov	r0, r3
 80020b8:	f005 fc40 	bl	800793c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c6      	b.n	8002454 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7e      	ldr	r2, [pc, #504]	; (80022c4 <HAL_FDCAN_Init+0x220>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d106      	bne.n	80020de <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe ff32 	bl	8000f5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0210 	bic.w	r2, r2, #16
 8002106:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002108:	f7ff fa74 	bl	80015f4 <HAL_GetTick>
 800210c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800210e:	e014      	b.n	800213a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002110:	f7ff fa70 	bl	80015f4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b0a      	cmp	r3, #10
 800211c:	d90d      	bls.n	800213a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e18c      	b.n	8002454 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b08      	cmp	r3, #8
 8002146:	d0e3      	beq.n	8002110 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002158:	f7ff fa4c 	bl	80015f4 <HAL_GetTick>
 800215c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800215e:	e014      	b.n	800218a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002160:	f7ff fa48 	bl	80015f4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b0a      	cmp	r3, #10
 800216c:	d90d      	bls.n	800218a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e164      	b.n	8002454 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0e3      	beq.n	8002160 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0202 	orr.w	r2, r2, #2
 80021a6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7c1b      	ldrb	r3, [r3, #16]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d108      	bne.n	80021c2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	e007      	b.n	80021d2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7c5b      	ldrb	r3, [r3, #17]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d108      	bne.n	80021ec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e8:	619a      	str	r2, [r3, #24]
 80021ea:	e007      	b.n	80021fc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7c9b      	ldrb	r3, [r3, #18]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002212:	619a      	str	r2, [r3, #24]
 8002214:	e007      	b.n	8002226 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002224:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800224a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0210 	bic.w	r2, r2, #16
 800225a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d108      	bne.n	8002276 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0204 	orr.w	r2, r2, #4
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	e030      	b.n	80022d8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02c      	beq.n	80022d8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d020      	beq.n	80022c8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002294:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0210 	orr.w	r2, r2, #16
 80022a4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d114      	bne.n	80022d8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	e00b      	b.n	80022d8 <HAL_FDCAN_Init+0x234>
 80022c0:	080081fc 	.word	0x080081fc
 80022c4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0220 	orr.w	r2, r2, #32
 80022d6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	3b01      	subs	r3, #1
 80022de:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022e8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022f0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002300:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002302:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800230c:	d115      	bne.n	800233a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	3b01      	subs	r3, #1
 800231a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800231c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	3b01      	subs	r3, #1
 8002324:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002326:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	3b01      	subs	r3, #1
 8002330:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002336:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002338:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	4413      	add	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d011      	beq.n	800238a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800236e:	f023 0107 	bic.w	r1, r3, #7
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	3360      	adds	r3, #96	; 0x60
 800237a:	443b      	add	r3, r7
 800237c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d011      	beq.n	80023b6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800239a:	f023 0107 	bic.w	r1, r3, #7
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	3360      	adds	r3, #96	; 0x60
 80023a6:	443b      	add	r3, r7
 80023a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80023c6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3360      	adds	r3, #96	; 0x60
 80023d2:	443b      	add	r3, r7
 80023d4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80023d8:	011a      	lsls	r2, r3, #4
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80023f4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3360      	adds	r3, #96	; 0x60
 8002400:	443b      	add	r3, r7
 8002402:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_FDCAN_Init+0x3b8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d107      	bne.n	800242c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f022 0203 	bic.w	r2, r2, #3
 800242a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa45 	bl	80028d4 <FDCAN_CalcultateRamBlockAddresses>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002450:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002454:	4618      	mov	r0, r3
 8002456:	3760      	adds	r7, #96	; 0x60
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	4000a000 	.word	0x4000a000

08002460 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d111      	bne.n	8002498 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e008      	b.n	80024aa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d141      	bne.n	8002552 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024d6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e038      	b.n	8002564 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002508:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e026      	b.n	8002564 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fb57 	bl	8002be0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	fa01 f202 	lsl.w	r2, r1, r2
 800253e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002542:	2201      	movs	r2, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e008      	b.n	8002564 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002558:	f043 0208 	orr.w	r2, r3, #8
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800256c:	b480      	push	{r7}
 800256e:	b08b      	sub	sp, #44	; 0x2c
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002584:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002586:	7efb      	ldrb	r3, [r7, #27]
 8002588:	2b02      	cmp	r3, #2
 800258a:	f040 814b 	bne.w	8002824 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d14d      	bne.n	8002630 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800259c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e13e      	b.n	8002836 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e12c      	b.n	8002836 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025e4:	0e1b      	lsrs	r3, r3, #24
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10b      	bne.n	8002606 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025f6:	0fdb      	lsrs	r3, r3, #31
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002600:	d101      	bne.n	8002606 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	69f9      	ldr	r1, [r7, #28]
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	e069      	b.n	8002704 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b41      	cmp	r3, #65	; 0x41
 8002634:	d14d      	bne.n	80026d2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800263e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0ed      	b.n	8002836 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0db      	b.n	8002836 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002686:	0e1b      	lsrs	r3, r3, #24
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10b      	bne.n	80026a8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002698:	0fdb      	lsrs	r3, r3, #31
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a2:	d101      	bne.n	80026a8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	69f9      	ldr	r1, [r7, #28]
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	e018      	b.n	8002704 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d309      	bcc.n	80026f0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0a2      	b.n	8002836 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0c9b      	lsrs	r3, r3, #18
 800271e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e005      	b.n	8002734 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3304      	adds	r3, #4
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0fda      	lsrs	r2, r3, #31
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	3304      	adds	r3, #4
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	e00a      	b.n	80027be <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	441a      	add	r2, r3
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	440b      	add	r3, r1
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	3301      	adds	r3, #1
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	461a      	mov	r2, r3
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d3eb      	bcc.n	80027a8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d105      	bne.n	80027e2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80027e0:	e01e      	b.n	8002820 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b41      	cmp	r3, #65	; 0x41
 80027e6:	d105      	bne.n	80027f4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80027f2:	e015      	b.n	8002820 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b1f      	cmp	r3, #31
 80027f8:	d808      	bhi.n	800280c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800280a:	e009      	b.n	8002820 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e008      	b.n	8002836 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800282a:	f043 0208 	orr.w	r2, r3, #8
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	372c      	adds	r7, #44	; 0x2c
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	08008258 	.word	0x08008258

08002848 <HAL_FDCAN_IsRxBufferMessageAvailable>:
  * @retval Status
  *          - 0 : No new message on RxBufferIndex.
  *          - 1 : New message received on RxBufferIndex.
  */
uint32_t HAL_FDCAN_IsRxBufferMessageAvailable(FDCAN_HandleTypeDef *hfdcan, uint32_t RxBufferIndex)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(RxBufferIndex, 63U));
  uint32_t NewData1 = hfdcan->Instance->NDAT1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800285a:	60fb      	str	r3, [r7, #12]
  uint32_t NewData2 = hfdcan->Instance->NDAT2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002864:	60bb      	str	r3, [r7, #8]

  /* Check new message reception on the selected buffer */
  if (((RxBufferIndex < 32U) && ((NewData1 & (uint32_t)((uint32_t)1 << RxBufferIndex)) == 0U)) ||
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b1f      	cmp	r3, #31
 800286a:	d807      	bhi.n	800287c <HAL_FDCAN_IsRxBufferMessageAvailable+0x34>
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <HAL_FDCAN_IsRxBufferMessageAvailable+0x4e>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b1f      	cmp	r3, #31
 8002880:	d90b      	bls.n	800289a <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
      ((RxBufferIndex >= 32U) && ((NewData2 & (uint32_t)((uint32_t)1 << (RxBufferIndex & 0x1FU))) == 0U)))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
  {
    return 0;
 8002896:	2300      	movs	r3, #0
 8002898:	e016      	b.n	80028c8 <HAL_FDCAN_IsRxBufferMessageAvailable+0x80>
  }

  /* Clear the New Data flag of the current Rx buffer */
  if (RxBufferIndex < 32U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b1f      	cmp	r3, #31
 800289e:	d808      	bhi.n	80028b2 <HAL_FDCAN_IsRxBufferMessageAvailable+0x6a>
  {
    hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxBufferIndex);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80028b0:	e009      	b.n	80028c6 <HAL_FDCAN_IsRxBufferMessageAvailable+0x7e>
  }
  else /* 32 <= RxBufferIndex <= 63 */
  {
    hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxBufferIndex & 0x1FU));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f202 	lsl.w	r2, r1, r2
 80028c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  return 1;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80028ea:	4ba7      	ldr	r3, [pc, #668]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	0091      	lsls	r1, r2, #2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002904:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	4413      	add	r3, r2
 8002920:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800292a:	4b97      	ldr	r3, [pc, #604]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800292c:	4013      	ands	r3, r2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	0091      	lsls	r1, r2, #2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	430b      	orrs	r3, r1
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4413      	add	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800296c:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800296e:	4013      	ands	r3, r2
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	0091      	lsls	r1, r2, #2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002986:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	041a      	lsls	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4413      	add	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029b4:	4b74      	ldr	r3, [pc, #464]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	0091      	lsls	r1, r2, #2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029ce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	041a      	lsls	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4413      	add	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80029fc:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	0091      	lsls	r1, r2, #2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002a28:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	0091      	lsls	r1, r2, #2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a42:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	041a      	lsls	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	0091      	lsls	r1, r2, #2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	430b      	orrs	r3, r1
 8002a78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a84:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002aa0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	061a      	lsls	r2, r3, #24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab8:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002aba:	4413      	add	r3, r2
 8002abc:	009a      	lsls	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	441a      	add	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	441a      	add	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d915      	bls.n	8002bb0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002b84:	e006      	b.n	8002b94 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002b86:	bf00      	nop
 8002b88:	ffff0003 	.word	0xffff0003
 8002b8c:	10002b00 	.word	0x10002b00
 8002b90:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e010      	b.n	8002bd2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e005      	b.n	8002bc4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3f3      	bcc.n	8002bb8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002bfe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e00a      	b.n	8002c22 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002c14:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002c1a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c20:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002c2c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002c32:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002c38:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3304      	adds	r3, #4
 8002c62:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e020      	b.n	8002cb8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3303      	adds	r3, #3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3302      	adds	r3, #2
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	440b      	add	r3, r1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002c8e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3301      	adds	r3, #1
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	440b      	add	r3, r1
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002c9c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002ca6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <FDCAN_CopyMessageToRAM+0xf8>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d3d5      	bcc.n	8002c76 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	3724      	adds	r7, #36	; 0x24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	08008258 	.word	0x08008258

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cea:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <HAL_GPIO_Init+0x234>)
 8002cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cee:	e194      	b.n	800301a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8186 	beq.w	8003014 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d005      	beq.n	8002d20 <HAL_GPIO_Init+0x44>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d130      	bne.n	8002d82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d56:	2201      	movs	r2, #1
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f003 0201 	and.w	r2, r3, #1
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d017      	beq.n	8002dbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d123      	bne.n	8002e12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	220f      	movs	r2, #15
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	69b9      	ldr	r1, [r7, #24]
 8002e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80e0 	beq.w	8003014 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x238>)
 8002e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <HAL_GPIO_Init+0x238>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_GPIO_Init+0x238>)
 8002e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e72:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <HAL_GPIO_Init+0x23c>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <HAL_GPIO_Init+0x240>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d052      	beq.n	8002f44 <HAL_GPIO_Init+0x268>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_GPIO_Init+0x244>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d031      	beq.n	8002f0a <HAL_GPIO_Init+0x22e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_GPIO_Init+0x248>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02b      	beq.n	8002f06 <HAL_GPIO_Init+0x22a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_GPIO_Init+0x24c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d025      	beq.n	8002f02 <HAL_GPIO_Init+0x226>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_GPIO_Init+0x250>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01f      	beq.n	8002efe <HAL_GPIO_Init+0x222>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_GPIO_Init+0x254>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d019      	beq.n	8002efa <HAL_GPIO_Init+0x21e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_GPIO_Init+0x258>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0x21a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_GPIO_Init+0x25c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x216>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_GPIO_Init+0x260>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_Init+0x212>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_GPIO_Init+0x264>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_Init+0x20e>
 8002ee6:	2309      	movs	r3, #9
 8002ee8:	e02d      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002eea:	230a      	movs	r3, #10
 8002eec:	e02b      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	e029      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e027      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e025      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e023      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002efe:	2304      	movs	r3, #4
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002f02:	2303      	movs	r3, #3
 8002f04:	e01f      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e01d      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e01b      	b.n	8002f46 <HAL_GPIO_Init+0x26a>
 8002f0e:	bf00      	nop
 8002f10:	58000080 	.word	0x58000080
 8002f14:	58024400 	.word	0x58024400
 8002f18:	58000400 	.word	0x58000400
 8002f1c:	58020000 	.word	0x58020000
 8002f20:	58020400 	.word	0x58020400
 8002f24:	58020800 	.word	0x58020800
 8002f28:	58020c00 	.word	0x58020c00
 8002f2c:	58021000 	.word	0x58021000
 8002f30:	58021400 	.word	0x58021400
 8002f34:	58021800 	.word	0x58021800
 8002f38:	58021c00 	.word	0x58021c00
 8002f3c:	58022000 	.word	0x58022000
 8002f40:	58022400 	.word	0x58022400
 8002f44:	2300      	movs	r3, #0
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f002 0203 	and.w	r2, r2, #3
 8002f4c:	0092      	lsls	r2, r2, #2
 8002f4e:	4093      	lsls	r3, r2
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f56:	4938      	ldr	r1, [pc, #224]	; (8003038 <HAL_GPIO_Init+0x35c>)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3301      	adds	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	f47f ae63 	bne.w	8002cf0 <HAL_GPIO_Init+0x14>
  }
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3724      	adds	r7, #36	; 0x24
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	58000400 	.word	0x58000400

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003058:	e003      	b.n	8003062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	041a      	lsls	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	619a      	str	r2, [r3, #24]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800306e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003070:	b08f      	sub	sp, #60	; 0x3c
 8003072:	af0a      	add	r7, sp, #40	; 0x28
 8003074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e116      	b.n	80032ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe f896 	bl	80011cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 f94c 	bl	800735c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	687e      	ldr	r6, [r7, #4]
 80030cc:	466d      	mov	r5, sp
 80030ce:	f106 0410 	add.w	r4, r6, #16
 80030d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030de:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e2:	1d33      	adds	r3, r6, #4
 80030e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	f004 f8ca 	bl	8007280 <USB_CoreInit>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0d7      	b.n	80032ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f004 f93a 	bl	800737e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e04a      	b.n	80031a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	; 0x3d
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333c      	adds	r3, #60	; 0x3c
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	b298      	uxth	r0, r3
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3356      	adds	r3, #86	; 0x56
 800314c:	4602      	mov	r2, r0
 800314e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3340      	adds	r3, #64	; 0x40
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3344      	adds	r3, #68	; 0x44
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3348      	adds	r3, #72	; 0x48
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334c      	adds	r3, #76	; 0x4c
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	3301      	adds	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3af      	bcc.n	8003110 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e044      	b.n	8003240 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3301      	adds	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3b5      	bcc.n	80031b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	687e      	ldr	r6, [r7, #4]
 8003252:	466d      	mov	r5, sp
 8003254:	f106 0410 	add.w	r4, r6, #16
 8003258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003260:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003264:	e885 0003 	stmia.w	r5, {r0, r1}
 8003268:	1d33      	adds	r3, r6, #4
 800326a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	f004 f8d3 	bl	8007418 <USB_DevInit>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e014      	b.n	80032ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f80b 	bl	80032b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fa91 	bl	80077ce <USB_DevDisconnect>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_PCDEx_ActivateLPM+0x44>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	10000003 	.word	0x10000003

08003300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_PWREx_ConfigSupply+0x70>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b04      	cmp	r3, #4
 8003312:	d00a      	beq.n	800332a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_PWREx_ConfigSupply+0x70>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e01f      	b.n	8003366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e01d      	b.n	8003366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_PWREx_ConfigSupply+0x70>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f023 0207 	bic.w	r2, r3, #7
 8003332:	490f      	ldr	r1, [pc, #60]	; (8003370 <HAL_PWREx_ConfigSupply+0x70>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800333a:	f7fe f95b 	bl	80015f4 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003340:	e009      	b.n	8003356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003342:	f7fe f957 	bl	80015f4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003350:	d901      	bls.n	8003356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_PWREx_ConfigSupply+0x70>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003362:	d1ee      	bne.n	8003342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	58024800 	.word	0x58024800

08003374 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800337e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	58024800 	.word	0x58024800

08003394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f000 bc48 	b.w	8003c38 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8088 	beq.w	80034c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b6:	4b99      	ldr	r3, [pc, #612]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033c0:	4b96      	ldr	r3, [pc, #600]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d007      	beq.n	80033dc <HAL_RCC_OscConfig+0x48>
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	2b18      	cmp	r3, #24
 80033d0:	d111      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62>
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d10c      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b8f      	ldr	r3, [pc, #572]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d06d      	beq.n	80034c4 <HAL_RCC_OscConfig+0x130>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d169      	bne.n	80034c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f000 bc21 	b.w	8003c38 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x7a>
 8003400:	4b86      	ldr	r3, [pc, #536]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a85      	ldr	r2, [pc, #532]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e02e      	b.n	800346c <HAL_RCC_OscConfig+0xd8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x9c>
 8003416:	4b81      	ldr	r3, [pc, #516]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a80      	ldr	r2, [pc, #512]	; (800361c <HAL_RCC_OscConfig+0x288>)
 800341c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b7e      	ldr	r3, [pc, #504]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7d      	ldr	r2, [pc, #500]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xd8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0xc0>
 800343a:	4b78      	ldr	r3, [pc, #480]	; (800361c <HAL_RCC_OscConfig+0x288>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a77      	ldr	r2, [pc, #476]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a74      	ldr	r2, [pc, #464]	; (800361c <HAL_RCC_OscConfig+0x288>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xd8>
 8003454:	4b71      	ldr	r3, [pc, #452]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a70      	ldr	r2, [pc, #448]	; (800361c <HAL_RCC_OscConfig+0x288>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b6e      	ldr	r3, [pc, #440]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6d      	ldr	r2, [pc, #436]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f8be 	bl	80015f4 <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe f8ba 	bl	80015f4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e3d4      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xe8>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe f8aa 	bl	80015f4 <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe f8a6 	bl	80015f4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e3c0      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034b6:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x110>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80ca 	beq.w	8003668 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d4:	4b51      	ldr	r3, [pc, #324]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_RCC_OscConfig+0x166>
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	d156      	bne.n	800359e <HAL_RCC_OscConfig+0x20a>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d151      	bne.n	800359e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fa:	4b48      	ldr	r3, [pc, #288]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_RCC_OscConfig+0x17e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e392      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0219 	bic.w	r2, r3, #25
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	493f      	ldr	r1, [pc, #252]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe f866 	bl	80015f4 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe f862 	bl	80015f4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e37c      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	f7fe f883 	bl	8001654 <HAL_GetREVID>
 800354e:	4603      	mov	r3, r0
 8003550:	f241 0203 	movw	r2, #4099	; 0x1003
 8003554:	4293      	cmp	r3, r2
 8003556:	d817      	bhi.n	8003588 <HAL_RCC_OscConfig+0x1f4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d108      	bne.n	8003572 <HAL_RCC_OscConfig+0x1de>
 8003560:	4b2e      	ldr	r3, [pc, #184]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HAL_RCC_OscConfig+0x288>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003570:	e07a      	b.n	8003668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b2a      	ldr	r3, [pc, #168]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	031b      	lsls	r3, r3, #12
 8003580:	4926      	ldr	r1, [pc, #152]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003586:	e06f      	b.n	8003668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x288>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	4921      	ldr	r1, [pc, #132]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359c:	e064      	b.n	8003668 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d047      	beq.n	8003636 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0219 	bic.w	r2, r3, #25
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	491a      	ldr	r1, [pc, #104]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe f81c 	bl	80015f4 <HAL_GetTick>
 80035bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fe f818 	bl	80015f4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e332      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	f7fe f839 	bl	8001654 <HAL_GetREVID>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d819      	bhi.n	8003620 <HAL_RCC_OscConfig+0x28c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d108      	bne.n	8003606 <HAL_RCC_OscConfig+0x272>
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035fc:	4a07      	ldr	r2, [pc, #28]	; (800361c <HAL_RCC_OscConfig+0x288>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	6053      	str	r3, [r2, #4]
 8003604:	e030      	b.n	8003668 <HAL_RCC_OscConfig+0x2d4>
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	031b      	lsls	r3, r3, #12
 8003614:	4901      	ldr	r1, [pc, #4]	; (800361c <HAL_RCC_OscConfig+0x288>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
 800361a:	e025      	b.n	8003668 <HAL_RCC_OscConfig+0x2d4>
 800361c:	58024400 	.word	0x58024400
 8003620:	4b9a      	ldr	r3, [pc, #616]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	4997      	ldr	r1, [pc, #604]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e018      	b.n	8003668 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	4b95      	ldr	r3, [pc, #596]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a94      	ldr	r2, [pc, #592]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fd ffd7 	bl	80015f4 <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364a:	f7fd ffd3 	bl	80015f4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e2ed      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800365c:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80a9 	beq.w	80037c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800367e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003680:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d007      	beq.n	800369c <HAL_RCC_OscConfig+0x308>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b18      	cmp	r3, #24
 8003690:	d13a      	bne.n	8003708 <HAL_RCC_OscConfig+0x374>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d135      	bne.n	8003708 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800369c:	4b7b      	ldr	r3, [pc, #492]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_OscConfig+0x320>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b80      	cmp	r3, #128	; 0x80
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e2c1      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b4:	f7fd ffce 	bl	8001654 <HAL_GetREVID>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80036be:	4293      	cmp	r3, r2
 80036c0:	d817      	bhi.n	80036f2 <HAL_RCC_OscConfig+0x35e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d108      	bne.n	80036dc <HAL_RCC_OscConfig+0x348>
 80036ca:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036d2:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036da:	e075      	b.n	80037c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036dc:	4b6b      	ldr	r3, [pc, #428]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	069b      	lsls	r3, r3, #26
 80036ea:	4968      	ldr	r1, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036f0:	e06a      	b.n	80037c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036f2:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	4962      	ldr	r1, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003706:	e05f      	b.n	80037c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d042      	beq.n	8003796 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5d      	ldr	r2, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd ff6a 	bl	80015f4 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003724:	f7fd ff66 	bl	80015f4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e280      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003736:	4b55      	ldr	r3, [pc, #340]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003742:	f7fd ff87 	bl	8001654 <HAL_GetREVID>
 8003746:	4603      	mov	r3, r0
 8003748:	f241 0203 	movw	r2, #4099	; 0x1003
 800374c:	4293      	cmp	r3, r2
 800374e:	d817      	bhi.n	8003780 <HAL_RCC_OscConfig+0x3ec>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	2b20      	cmp	r3, #32
 8003756:	d108      	bne.n	800376a <HAL_RCC_OscConfig+0x3d6>
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003760:	4a4a      	ldr	r2, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003766:	6053      	str	r3, [r2, #4]
 8003768:	e02e      	b.n	80037c8 <HAL_RCC_OscConfig+0x434>
 800376a:	4b48      	ldr	r3, [pc, #288]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	4944      	ldr	r1, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
 800377e:	e023      	b.n	80037c8 <HAL_RCC_OscConfig+0x434>
 8003780:	4b42      	ldr	r3, [pc, #264]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	493f      	ldr	r1, [pc, #252]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
 8003794:	e018      	b.n	80037c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800379c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd ff27 	bl	80015f4 <HAL_GetTick>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037aa:	f7fd ff23 	bl	80015f4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e23d      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037bc:	4b33      	ldr	r3, [pc, #204]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d036      	beq.n	8003842 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d019      	beq.n	8003810 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80037de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e0:	4a2a      	ldr	r2, [pc, #168]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fd ff04 	bl	80015f4 <HAL_GetTick>
 80037ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f0:	f7fd ff00 	bl	80015f4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e21a      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x45c>
 800380e:	e018      	b.n	8003842 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fd feea 	bl	80015f4 <HAL_GetTick>
 8003820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7fd fee6 	bl	80015f4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e200      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d039      	beq.n	80038c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01c      	beq.n	8003890 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0c      	ldr	r2, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800385c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003862:	f7fd fec7 	bl	80015f4 <HAL_GetTick>
 8003866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800386a:	f7fd fec3 	bl	80015f4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e1dd      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_RCC_OscConfig+0x4f8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x4d6>
 8003888:	e01b      	b.n	80038c2 <HAL_RCC_OscConfig+0x52e>
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003890:	4b9b      	ldr	r3, [pc, #620]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a9a      	ldr	r2, [pc, #616]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800389a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800389c:	f7fd feaa 	bl	80015f4 <HAL_GetTick>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a4:	f7fd fea6 	bl	80015f4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1c0      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038b6:	4b92      	ldr	r3, [pc, #584]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8081 	beq.w	80039d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038d0:	4b8c      	ldr	r3, [pc, #560]	; (8003b04 <HAL_RCC_OscConfig+0x770>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a8b      	ldr	r2, [pc, #556]	; (8003b04 <HAL_RCC_OscConfig+0x770>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038dc:	f7fd fe8a 	bl	80015f4 <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e4:	f7fd fe86 	bl	80015f4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e1a0      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f6:	4b83      	ldr	r3, [pc, #524]	; (8003b04 <HAL_RCC_OscConfig+0x770>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x584>
 800390a:	4b7d      	ldr	r3, [pc, #500]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a7c      	ldr	r2, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	e02d      	b.n	8003974 <HAL_RCC_OscConfig+0x5e0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10c      	bne.n	800393a <HAL_RCC_OscConfig+0x5a6>
 8003920:	4b77      	ldr	r3, [pc, #476]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a76      	ldr	r2, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	4b74      	ldr	r3, [pc, #464]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a73      	ldr	r2, [pc, #460]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003932:	f023 0304 	bic.w	r3, r3, #4
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	e01c      	b.n	8003974 <HAL_RCC_OscConfig+0x5e0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x5c8>
 8003942:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a6e      	ldr	r2, [pc, #440]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
 800394e:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a6b      	ldr	r2, [pc, #428]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0x5e0>
 800395c:	4b68      	ldr	r3, [pc, #416]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4a67      	ldr	r2, [pc, #412]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6713      	str	r3, [r2, #112]	; 0x70
 8003968:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a64      	ldr	r2, [pc, #400]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 800396e:	f023 0304 	bic.w	r3, r3, #4
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d015      	beq.n	80039a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fd fe3a 	bl	80015f4 <HAL_GetTick>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fd fe36 	bl	80015f4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e14e      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800399a:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ee      	beq.n	8003984 <HAL_RCC_OscConfig+0x5f0>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fe24 	bl	80015f4 <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fe20 	bl	80015f4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e138      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ee      	bne.n	80039b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 812d 	beq.w	8003c36 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039dc:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e4:	2b18      	cmp	r3, #24
 80039e6:	f000 80bd 	beq.w	8003b64 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	f040 809e 	bne.w	8003b30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b42      	ldr	r3, [pc, #264]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a41      	ldr	r2, [pc, #260]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fdf8 	bl	80015f4 <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fd fdf4 	bl	80015f4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e10e      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a2a:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x774>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	4931      	ldr	r1, [pc, #196]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	3b01      	subs	r3, #1
 8003a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	025b      	lsls	r3, r3, #9
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a70:	4923      	ldr	r1, [pc, #140]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a76:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a82:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x778>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f023 020c 	bic.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4917      	ldr	r1, [pc, #92]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f023 0202 	bic.w	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	4912      	ldr	r1, [pc, #72]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_RCC_OscConfig+0x76c>)
 8003af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fd7d 	bl	80015f4 <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003afc:	e011      	b.n	8003b22 <HAL_RCC_OscConfig+0x78e>
 8003afe:	bf00      	nop
 8003b00:	58024400 	.word	0x58024400
 8003b04:	58024800 	.word	0x58024800
 8003b08:	fffffc0c 	.word	0xfffffc0c
 8003b0c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fd70 	bl	80015f4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e08a      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b22:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x77c>
 8003b2e:	e082      	b.n	8003c36 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a42      	ldr	r2, [pc, #264]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fd5a 	bl	80015f4 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fd56 	bl	80015f4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e070      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x7b0>
 8003b62:	e068      	b.n	8003c36 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b6a:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d031      	beq.n	8003bdc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d12a      	bne.n	8003bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d122      	bne.n	8003bdc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d11a      	bne.n	8003bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d108      	bne.n	8003bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e02b      	b.n	8003c38 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c02:	f7fd fcf7 	bl	80015f4 <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003c08:	bf00      	nop
 8003c0a:	f7fd fcf3 	bl	80015f4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d0f9      	beq.n	8003c0a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_OscConfig+0x8b0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	4906      	ldr	r1, [pc, #24]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_RCC_OscConfig+0x8ac>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3730      	adds	r7, #48	; 0x30
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58024400 	.word	0x58024400
 8003c44:	ffff0007 	.word	0xffff0007

08003c48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e19c      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b8a      	ldr	r3, [pc, #552]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d910      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b87      	ldr	r3, [pc, #540]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	4985      	ldr	r1, [pc, #532]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e184      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d010      	beq.n	8003cba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	4b7b      	ldr	r3, [pc, #492]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d908      	bls.n	8003cba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ca8:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	4975      	ldr	r1, [pc, #468]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	4b70      	ldr	r3, [pc, #448]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d908      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	496a      	ldr	r1, [pc, #424]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	4b64      	ldr	r3, [pc, #400]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d908      	bls.n	8003d16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d04:	4b61      	ldr	r3, [pc, #388]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	495e      	ldr	r1, [pc, #376]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d010      	beq.n	8003d44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d908      	bls.n	8003d44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d32:	4b56      	ldr	r3, [pc, #344]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4953      	ldr	r1, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d010      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4b4d      	ldr	r3, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d908      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d60:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f023 020f 	bic.w	r2, r3, #15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4947      	ldr	r1, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d055      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4940      	ldr	r1, [pc, #256]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d98:	4b3c      	ldr	r3, [pc, #240]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0f6      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db0:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d115      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0ea      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0de      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d6      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003de8:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f023 0207 	bic.w	r2, r3, #7
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4925      	ldr	r1, [pc, #148]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fd fbfb 	bl	80015f4 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e02:	f7fd fbf7 	bl	80015f4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0be      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d1eb      	bne.n	8003e02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d208      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f023 020f 	bic.w	r2, r3, #15
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCC_ClockConfig+0x244>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d214      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 020f 	bic.w	r2, r3, #15
 8003e6e:	4906      	ldr	r1, [pc, #24]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_RCC_ClockConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e086      	b.n	8003f96 <HAL_RCC_ClockConfig+0x34e>
 8003e88:	52002000 	.word	0x52002000
 8003e8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d208      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003eac:	4b3c      	ldr	r3, [pc, #240]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4939      	ldr	r1, [pc, #228]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d208      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	492e      	ldr	r1, [pc, #184]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d208      	bcs.n	8003f1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d208      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4917      	ldr	r1, [pc, #92]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f48:	f000 f834 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4912      	ldr	r1, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x35c>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x358>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <HAL_RCC_ClockConfig+0x35c>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x360>)
 8003f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <HAL_RCC_ClockConfig+0x364>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x368>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fae8 	bl	8001560 <HAL_InitTick>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	08008248 	.word	0x08008248
 8003fa8:	24000004 	.word	0x24000004
 8003fac:	24000000 	.word	0x24000000
 8003fb0:	24000008 	.word	0x24000008

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fba:	4bb3      	ldr	r3, [pc, #716]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc2:	2b18      	cmp	r3, #24
 8003fc4:	f200 8155 	bhi.w	8004272 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08004035 	.word	0x08004035
 8003fd4:	08004273 	.word	0x08004273
 8003fd8:	08004273 	.word	0x08004273
 8003fdc:	08004273 	.word	0x08004273
 8003fe0:	08004273 	.word	0x08004273
 8003fe4:	08004273 	.word	0x08004273
 8003fe8:	08004273 	.word	0x08004273
 8003fec:	08004273 	.word	0x08004273
 8003ff0:	0800405b 	.word	0x0800405b
 8003ff4:	08004273 	.word	0x08004273
 8003ff8:	08004273 	.word	0x08004273
 8003ffc:	08004273 	.word	0x08004273
 8004000:	08004273 	.word	0x08004273
 8004004:	08004273 	.word	0x08004273
 8004008:	08004273 	.word	0x08004273
 800400c:	08004273 	.word	0x08004273
 8004010:	08004061 	.word	0x08004061
 8004014:	08004273 	.word	0x08004273
 8004018:	08004273 	.word	0x08004273
 800401c:	08004273 	.word	0x08004273
 8004020:	08004273 	.word	0x08004273
 8004024:	08004273 	.word	0x08004273
 8004028:	08004273 	.word	0x08004273
 800402c:	08004273 	.word	0x08004273
 8004030:	08004067 	.word	0x08004067
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004034:	4b94      	ldr	r3, [pc, #592]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004040:	4b91      	ldr	r3, [pc, #580]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	4a90      	ldr	r2, [pc, #576]	; (800428c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004052:	e111      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004054:	4b8d      	ldr	r3, [pc, #564]	; (800428c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004056:	61bb      	str	r3, [r7, #24]
      break;
 8004058:	e10e      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800405a:	4b8d      	ldr	r3, [pc, #564]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800405c:	61bb      	str	r3, [r7, #24]
      break;
 800405e:	e10b      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004060:	4b8c      	ldr	r3, [pc, #560]	; (8004294 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004062:	61bb      	str	r3, [r7, #24]
      break;
 8004064:	e108      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004066:	4b88      	ldr	r3, [pc, #544]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004070:	4b85      	ldr	r3, [pc, #532]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800407a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004086:	4b80      	ldr	r3, [pc, #512]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	08db      	lsrs	r3, r3, #3
 800408c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80e1 	beq.w	800426c <HAL_RCC_GetSysClockFreq+0x2b8>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	f000 8083 	beq.w	80041b8 <HAL_RCC_GetSysClockFreq+0x204>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	f200 80a1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x248>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x114>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d056      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040c6:	e099      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040c8:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040d4:	4b6c      	ldr	r3, [pc, #432]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	4a6b      	ldr	r2, [pc, #428]	; (800428c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b62      	ldr	r3, [pc, #392]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004112:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800412e:	e087      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800429c <HAL_RCC_GetSysClockFreq+0x2e8>
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004152:	ed97 6a02 	vldr	s12, [r7, #8]
 8004156:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 800415a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004172:	e065      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b40      	ldr	r3, [pc, #256]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004196:	ed97 6a02 	vldr	s12, [r7, #8]
 800419a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041b6:	e043      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041da:	ed97 6a02 	vldr	s12, [r7, #8]
 80041de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041fa:	e021      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800420a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004222:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800423e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	0a5b      	lsrs	r3, r3, #9
 8004246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424a:	3301      	adds	r3, #1
 800424c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004258:	edd7 6a07 	vldr	s13, [r7, #28]
 800425c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004264:	ee17 3a90 	vmov	r3, s15
 8004268:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004274:	61bb      	str	r3, [r7, #24]
      break;
 8004276:	bf00      	nop
  }

  return sysclockfreq;
 8004278:	69bb      	ldr	r3, [r7, #24]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	; 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
 800428c:	03d09000 	.word	0x03d09000
 8004290:	003d0900 	.word	0x003d0900
 8004294:	007a1200 	.word	0x007a1200
 8004298:	46000000 	.word	0x46000000
 800429c:	4c742400 	.word	0x4c742400
 80042a0:	4a742400 	.word	0x4a742400
 80042a4:	4af42400 	.word	0x4af42400

080042a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042ae:	f7ff fe81 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	490f      	ldr	r1, [pc, #60]	; (80042fc <HAL_RCC_GetHCLKFreq+0x54>)
 80042c0:	5ccb      	ldrb	r3, [r1, r3]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_RCC_GetHCLKFreq+0x54>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <HAL_RCC_GetHCLKFreq+0x58>)
 80042e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <HAL_RCC_GetHCLKFreq+0x5c>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_RCC_GetHCLKFreq+0x58>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	58024400 	.word	0x58024400
 80042fc:	08008248 	.word	0x08008248
 8004300:	24000004 	.word	0x24000004
 8004304:	24000000 	.word	0x24000000

08004308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800430c:	f7ff ffcc 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4904      	ldr	r1, [pc, #16]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	58024400 	.word	0x58024400
 8004330:	08008248 	.word	0x08008248

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004338:	f7ff ffb6 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4904      	ldr	r1, [pc, #16]	; (800435c <HAL_RCC_GetPCLK2Freq+0x28>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	58024400 	.word	0x58024400
 800435c:	08008248 	.word	0x08008248

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b0ca      	sub	sp, #296	; 0x128
 8004366:	af00      	add	r7, sp, #0
 8004368:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004384:	2500      	movs	r5, #0
 8004386:	ea54 0305 	orrs.w	r3, r4, r5
 800438a:	d049      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800439c:	d828      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800439e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a2:	d01a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a8:	d822      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b2:	d007      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043b4:	e01c      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b6:	4bb8      	ldr	r3, [pc, #736]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	4ab7      	ldr	r2, [pc, #732]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043c2:	e01a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c8:	3308      	adds	r3, #8
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fc8f 	bl	8005cf0 <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043d8:	e00f      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	3328      	adds	r3, #40	; 0x28
 80043e0:	2102      	movs	r1, #2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fd36 	bl	8005e54 <RCCEx_PLL3_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004402:	4ba5      	ldr	r3, [pc, #660]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004410:	4aa1      	ldr	r2, [pc, #644]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004412:	430b      	orrs	r3, r1
 8004414:	6513      	str	r3, [r2, #80]	; 0x50
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800441c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800442c:	f04f 0900 	mov.w	r9, #0
 8004430:	ea58 0309 	orrs.w	r3, r8, r9
 8004434:	d047      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	2b04      	cmp	r3, #4
 800443e:	d82a      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800445d 	.word	0x0800445d
 800444c:	0800446b 	.word	0x0800446b
 8004450:	08004481 	.word	0x08004481
 8004454:	0800449f 	.word	0x0800449f
 8004458:	0800449f 	.word	0x0800449f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445c:	4b8e      	ldr	r3, [pc, #568]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	4a8d      	ldr	r2, [pc, #564]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004468:	e01a      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446e:	3308      	adds	r3, #8
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f001 fc3c 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800447e:	e00f      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	3328      	adds	r3, #40	; 0x28
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fce3 	bl	8005e54 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004494:	e004      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800449e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a8:	4b7b      	ldr	r3, [pc, #492]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	f023 0107 	bic.w	r1, r3, #7
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	4a78      	ldr	r2, [pc, #480]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6513      	str	r3, [r2, #80]	; 0x50
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80044d2:	f04f 0b00 	mov.w	fp, #0
 80044d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80044da:	d04c      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d030      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80044e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ec:	d829      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044ee:	2bc0      	cmp	r3, #192	; 0xc0
 80044f0:	d02d      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044f2:	2bc0      	cmp	r3, #192	; 0xc0
 80044f4:	d825      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d018      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d821      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d007      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004506:	e01c      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004508:	4b63      	ldr	r3, [pc, #396]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a62      	ldr	r2, [pc, #392]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004514:	e01c      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	3308      	adds	r3, #8
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fbe6 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004530:	3328      	adds	r3, #40	; 0x28
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f001 fc8d 	bl	8005e54 <RCCEx_PLL3_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800454e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004558:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004566:	4a4c      	ldr	r2, [pc, #304]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004568:	430b      	orrs	r3, r1
 800456a:	6513      	str	r3, [r2, #80]	; 0x50
 800456c:	e003      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800458c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d053      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800459e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a2:	d035      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80045a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a8:	d82e      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045ae:	d031      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80045b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045b4:	d828      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ba:	d01a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80045bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c0:	d822      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80045c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ca:	d007      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80045cc:	e01c      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ce:	4b32      	ldr	r3, [pc, #200]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	4a31      	ldr	r2, [pc, #196]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045da:	e01c      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	3308      	adds	r3, #8
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fb83 	bl	8005cf0 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045f0:	e011      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	3328      	adds	r3, #40	; 0x28
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fc2a 	bl	8005e54 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004606:	e006      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6593      	str	r3, [r2, #88]	; 0x58
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800464a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004654:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004658:	460b      	mov	r3, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	d056      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800466a:	d038      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800466c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004670:	d831      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004676:	d034      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004678:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800467c:	d82b      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800467e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004682:	d01d      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004688:	d825      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d006      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800468e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004694:	e01f      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004696:	bf00      	nop
 8004698:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469c:	4ba2      	ldr	r3, [pc, #648]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	4aa1      	ldr	r2, [pc, #644]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046a8:	e01c      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	3308      	adds	r3, #8
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 fb1c 	bl	8005cf0 <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046be:	e011      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c4:	3328      	adds	r3, #40	; 0x28
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 fbc3 	bl	8005e54 <RCCEx_PLL3_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046d4:	e006      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046dc:	e002      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046ec:	4b8e      	ldr	r3, [pc, #568]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046fc:	4a8a      	ldr	r2, [pc, #552]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
 8004702:	e003      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004722:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d03a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	2b30      	cmp	r3, #48	; 0x30
 8004734:	d01f      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d819      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800473a:	2b20      	cmp	r3, #32
 800473c:	d00c      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800473e:	2b20      	cmp	r3, #32
 8004740:	d815      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d019      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004746:	2b10      	cmp	r3, #16
 8004748:	d111      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800474a:	4b77      	ldr	r3, [pc, #476]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	4a76      	ldr	r2, [pc, #472]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475c:	3308      	adds	r3, #8
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fac5 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800477a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004784:	4b68      	ldr	r3, [pc, #416]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004788:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004792:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004794:	430b      	orrs	r3, r1
 8004796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004798:	e003      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800479e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80047ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d051      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d035      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d2:	d82e      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047d8:	d031      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047de:	d828      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d01a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	d822      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d007      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80047f6:	e01c      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004804:	e01c      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480a:	3308      	adds	r3, #8
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f001 fa6e 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800481a:	e011      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800481c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004820:	3328      	adds	r3, #40	; 0x28
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fb15 	bl	8005e54 <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004830:	e006      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004838:	e002      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800483e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004848:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004856:	4a34      	ldr	r2, [pc, #208]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004858:	430b      	orrs	r3, r1
 800485a:	6513      	str	r3, [r2, #80]	; 0x50
 800485c:	e003      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800487c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d056      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004890:	d033      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004896:	d82c      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489c:	d02f      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800489e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048a2:	d826      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a8:	d02b      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80048aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048ae:	d820      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b4:	d012      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80048b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ba:	d81a      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d022      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d115      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ca:	3308      	adds	r3, #8
 80048cc:	2101      	movs	r1, #1
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 fa0e 	bl	8005cf0 <RCCEx_PLL2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048da:	e015      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e0:	3328      	adds	r3, #40	; 0x28
 80048e2:	2101      	movs	r1, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fab5 	bl	8005e54 <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048f0:	e00a      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048fa:	bf00      	nop
 80048fc:	e004      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10d      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004914:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491e:	4a02      	ldr	r2, [pc, #8]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004920:	430b      	orrs	r3, r1
 8004922:	6513      	str	r3, [r2, #80]	; 0x50
 8004924:	e006      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004926:	bf00      	nop
 8004928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004944:	2300      	movs	r3, #0
 8004946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800494a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800494e:	460b      	mov	r3, r1
 8004950:	4313      	orrs	r3, r2
 8004952:	d055      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800495c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004960:	d033      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004966:	d82c      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d02f      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d826      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004978:	d02b      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800497a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800497e:	d820      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004984:	d012      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498a:	d81a      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d022      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004994:	d115      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499a:	3308      	adds	r3, #8
 800499c:	2101      	movs	r1, #1
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 f9a6 	bl	8005cf0 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80049aa:	e015      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	3328      	adds	r3, #40	; 0x28
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fa4d 	bl	8005e54 <RCCEx_PLL3_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80049c0:	e00a      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049c8:	e006      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ca:	bf00      	nop
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049e0:	4ba3      	ldr	r3, [pc, #652]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049f0:	4a9f      	ldr	r2, [pc, #636]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6593      	str	r3, [r2, #88]	; 0x58
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d037      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a2a:	d00e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a30:	d816      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d018      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a3a:	d111      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3c:	4b8c      	ldr	r3, [pc, #560]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4a8b      	ldr	r2, [pc, #556]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a48:	e00f      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4e:	3308      	adds	r3, #8
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 f94c 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a72:	4b7f      	ldr	r3, [pc, #508]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a7b      	ldr	r2, [pc, #492]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6513      	str	r3, [r2, #80]	; 0x50
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004aa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d039      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d81c      	bhi.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004afd 	.word	0x08004afd
 8004ac4:	08004ad1 	.word	0x08004ad1
 8004ac8:	08004adf 	.word	0x08004adf
 8004acc:	08004afd 	.word	0x08004afd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a66      	ldr	r2, [pc, #408]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004adc:	e00f      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f902 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b06:	4b5a      	ldr	r3, [pc, #360]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	f023 0103 	bic.w	r1, r3, #3
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b14:	4a56      	ldr	r2, [pc, #344]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f000 809f 	beq.w	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b46:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4a      	ldr	r2, [pc, #296]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fd4f 	bl	80015f4 <HAL_GetTick>
 8004b56:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5c:	f7fc fd4a 	bl	80015f4 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b64      	cmp	r3, #100	; 0x64
 8004b6a:	d903      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b72:	e005      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b74:	4b3f      	ldr	r3, [pc, #252]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ed      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d179      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b88:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b94:	4053      	eors	r3, r2
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d015      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a2d      	ldr	r2, [pc, #180]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	d118      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fd0c 	bl	80015f4 <HAL_GetTick>
 8004bdc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be0:	e00d      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fc fd07 	bl	80015f4 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bec:	1ad2      	subs	r2, r2, r3
 8004bee:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d903      	bls.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004bfc:	e005      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0eb      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d129      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c22:	d10e      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c34:	091a      	lsrs	r2, r3, #4
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6113      	str	r3, [r2, #16]
 8004c40:	e005      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c4c:	6113      	str	r3, [r2, #16]
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5e:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
 8004c64:	e00e      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004c6e:	e009      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004c70:	58024400 	.word	0x58024400
 8004c74:	58024800 	.word	0x58024800
 8004c78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f002 0301 	and.w	r3, r2, #1
 8004c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f000 8089 	beq.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cac:	2b28      	cmp	r3, #40	; 0x28
 8004cae:	d86b      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004d91 	.word	0x08004d91
 8004cbc:	08004d89 	.word	0x08004d89
 8004cc0:	08004d89 	.word	0x08004d89
 8004cc4:	08004d89 	.word	0x08004d89
 8004cc8:	08004d89 	.word	0x08004d89
 8004ccc:	08004d89 	.word	0x08004d89
 8004cd0:	08004d89 	.word	0x08004d89
 8004cd4:	08004d89 	.word	0x08004d89
 8004cd8:	08004d5d 	.word	0x08004d5d
 8004cdc:	08004d89 	.word	0x08004d89
 8004ce0:	08004d89 	.word	0x08004d89
 8004ce4:	08004d89 	.word	0x08004d89
 8004ce8:	08004d89 	.word	0x08004d89
 8004cec:	08004d89 	.word	0x08004d89
 8004cf0:	08004d89 	.word	0x08004d89
 8004cf4:	08004d89 	.word	0x08004d89
 8004cf8:	08004d73 	.word	0x08004d73
 8004cfc:	08004d89 	.word	0x08004d89
 8004d00:	08004d89 	.word	0x08004d89
 8004d04:	08004d89 	.word	0x08004d89
 8004d08:	08004d89 	.word	0x08004d89
 8004d0c:	08004d89 	.word	0x08004d89
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004d89 	.word	0x08004d89
 8004d18:	08004d91 	.word	0x08004d91
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004d89 	.word	0x08004d89
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	08004d89 	.word	0x08004d89
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004d91 	.word	0x08004d91
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d89 	.word	0x08004d89
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004d91 	.word	0x08004d91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d60:	3308      	adds	r3, #8
 8004d62:	2101      	movs	r1, #1
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 ffc3 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d70:	e00f      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d76:	3328      	adds	r3, #40	; 0x28
 8004d78:	2101      	movs	r1, #1
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 f86a 	bl	8005e54 <RCCEx_PLL3_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d86:	e004      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d9a:	4bbf      	ldr	r3, [pc, #764]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da8:	4abb      	ldr	r2, [pc, #748]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6553      	str	r3, [r2, #84]	; 0x54
 8004dae:	e003      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f002 0302 	and.w	r3, r2, #2
 8004dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004dce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d041      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d824      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e35 	.word	0x08004e35
 8004dec:	08004e01 	.word	0x08004e01
 8004df0:	08004e17 	.word	0x08004e17
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e35 	.word	0x08004e35
 8004dfc:	08004e35 	.word	0x08004e35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e04:	3308      	adds	r3, #8
 8004e06:	2101      	movs	r1, #1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 ff71 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e14:	e00f      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e1a:	3328      	adds	r3, #40	; 0x28
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f818 	bl	8005e54 <RCCEx_PLL3_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e004      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e3e:	4b96      	ldr	r3, [pc, #600]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f023 0107 	bic.w	r1, r3, #7
 8004e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4c:	4a92      	ldr	r2, [pc, #584]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	6553      	str	r3, [r2, #84]	; 0x54
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 0304 	and.w	r3, r2, #4
 8004e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d044      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d825      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004edd 	.word	0x08004edd
 8004e94:	08004ea9 	.word	0x08004ea9
 8004e98:	08004ebf 	.word	0x08004ebf
 8004e9c:	08004edd 	.word	0x08004edd
 8004ea0:	08004edd 	.word	0x08004edd
 8004ea4:	08004edd 	.word	0x08004edd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eac:	3308      	adds	r3, #8
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 ff1d 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e00f      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec2:	3328      	adds	r3, #40	; 0x28
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 ffc4 	bl	8005e54 <RCCEx_PLL3_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ed2:	e004      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eda:	e000      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	f023 0107 	bic.w	r1, r3, #7
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef6:	4a68      	ldr	r2, [pc, #416]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6593      	str	r3, [r2, #88]	; 0x58
 8004efc:	e003      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f002 0320 	and.w	r3, r2, #32
 8004f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d055      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f32:	d033      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f38:	d82c      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d02f      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f44:	d826      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f4a:	d02b      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f50:	d820      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f56:	d012      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5c:	d81a      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d022      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f66:	d115      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 febd 	bl	8005cf0 <RCCEx_PLL2_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f7c:	e015      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f82:	3328      	adds	r3, #40	; 0x28
 8004f84:	2102      	movs	r1, #2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 ff64 	bl	8005e54 <RCCEx_PLL3_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f92:	e00a      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f9a:	e006      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f9c:	bf00      	nop
 8004f9e:	e004      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004fa0:	bf00      	nop
 8004fa2:	e002      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb2:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	4a35      	ldr	r2, [pc, #212]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6553      	str	r3, [r2, #84]	; 0x54
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fe8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d058      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ffe:	d033      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005000:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005004:	d82c      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500a:	d02f      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800500c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005010:	d826      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005016:	d02b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800501c:	d820      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d012      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005028:	d81a      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d022      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d115      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	3308      	adds	r3, #8
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fe57 	bl	8005cf0 <RCCEx_PLL2_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005048:	e015      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800504a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504e:	3328      	adds	r3, #40	; 0x28
 8005050:	2102      	movs	r1, #2
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fefe 	bl	8005e54 <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800505e:	e00a      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005066:	e006      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005068:	bf00      	nop
 800506a:	e004      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508e:	4a02      	ldr	r2, [pc, #8]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6593      	str	r3, [r2, #88]	; 0x58
 8005094:	e006      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005096:	bf00      	nop
 8005098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80050b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80050be:	460b      	mov	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d055      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050d0:	d033      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80050d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050d6:	d82c      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d02f      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d826      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050e8:	d02b      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80050ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050ee:	d820      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f4:	d012      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80050f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050fa:	d81a      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005104:	d115      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510a:	3308      	adds	r3, #8
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fdee 	bl	8005cf0 <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800511a:	e015      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005120:	3328      	adds	r3, #40	; 0x28
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fe95 	bl	8005e54 <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005130:	e00a      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800513a:	bf00      	nop
 800513c:	e004      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005150:	4ba1      	ldr	r3, [pc, #644]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005160:	4a9d      	ldr	r2, [pc, #628]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005162:	430b      	orrs	r3, r1
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800516c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f002 0308 	and.w	r3, r2, #8
 800517c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005186:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d01e      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519c:	d10c      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a2:	3328      	adds	r3, #40	; 0x28
 80051a4:	2102      	movs	r1, #2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe54 	bl	8005e54 <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051b8:	4b87      	ldr	r3, [pc, #540]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c8:	4a83      	ldr	r2, [pc, #524]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f002 0310 	and.w	r3, r2, #16
 80051da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051de:	2300      	movs	r3, #0
 80051e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80051e8:	460b      	mov	r3, r1
 80051ea:	4313      	orrs	r3, r2
 80051ec:	d01e      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fa:	d10c      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005200:	3328      	adds	r3, #40	; 0x28
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fe25 	bl	8005e54 <RCCEx_PLL3_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005216:	4b70      	ldr	r3, [pc, #448]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005226:	4a6c      	ldr	r2, [pc, #432]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800523c:	2300      	movs	r3, #0
 800523e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005242:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005246:	460b      	mov	r3, r1
 8005248:	4313      	orrs	r3, r2
 800524a:	d03e      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005258:	d022      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800525a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800525e:	d81b      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d00b      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800526a:	e015      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005270:	3308      	adds	r3, #8
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fd3b 	bl	8005cf0 <RCCEx_PLL2_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005280:	e00f      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	3328      	adds	r3, #40	; 0x28
 8005288:	2102      	movs	r1, #2
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fde2 	bl	8005e54 <RCCEx_PLL3_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005296:	e004      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80052a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052aa:	4b4b      	ldr	r3, [pc, #300]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052ba:	4a47      	ldr	r2, [pc, #284]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052bc:	430b      	orrs	r3, r1
 80052be:	6593      	str	r3, [r2, #88]	; 0x58
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80052d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80052d8:	2300      	movs	r3, #0
 80052da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80052e0:	460b      	mov	r3, r1
 80052e2:	4313      	orrs	r3, r2
 80052e4:	d03b      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052f2:	d01f      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80052f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052f8:	d818      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fe:	d003      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005304:	d007      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005306:	e011      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b33      	ldr	r3, [pc, #204]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a32      	ldr	r2, [pc, #200]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005314:	e00f      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531a:	3328      	adds	r3, #40	; 0x28
 800531c:	2101      	movs	r1, #1
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fd98 	bl	8005e54 <RCCEx_PLL3_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800532a:	e004      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005350:	430b      	orrs	r3, r1
 8005352:	6553      	str	r3, [r2, #84]	; 0x54
 8005354:	e003      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800535a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800536a:	673b      	str	r3, [r7, #112]	; 0x70
 800536c:	2300      	movs	r3, #0
 800536e:	677b      	str	r3, [r7, #116]	; 0x74
 8005370:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005374:	460b      	mov	r3, r1
 8005376:	4313      	orrs	r3, r2
 8005378:	d034      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d007      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800538a:	e011      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005398:	e00e      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539e:	3308      	adds	r3, #8
 80053a0:	2102      	movs	r1, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fca4 	bl	8005cf0 <RCCEx_PLL2_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80053ae:	e003      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	4a02      	ldr	r2, [pc, #8]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053d4:	e006      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80053d6:	bf00      	nop
 80053d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80053f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f2:	2300      	movs	r3, #0
 80053f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80053fa:	460b      	mov	r3, r1
 80053fc:	4313      	orrs	r3, r2
 80053fe:	d00c      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005404:	3328      	adds	r3, #40	; 0x28
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fd23 	bl	8005e54 <RCCEx_PLL3_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005426:	663b      	str	r3, [r7, #96]	; 0x60
 8005428:	2300      	movs	r3, #0
 800542a:	667b      	str	r3, [r7, #100]	; 0x64
 800542c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005430:	460b      	mov	r3, r1
 8005432:	4313      	orrs	r3, r2
 8005434:	d038      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	d018      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005448:	d811      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800544a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544e:	d014      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005454:	d80b      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d011      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d106      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005460:	4bc3      	ldr	r3, [pc, #780]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4ac2      	ldr	r2, [pc, #776]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800546c:	e008      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005476:	bf00      	nop
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005488:	4bb9      	ldr	r3, [pc, #740]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005498:	4ab5      	ldr	r2, [pc, #724]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800549a:	430b      	orrs	r3, r1
 800549c:	6553      	str	r3, [r2, #84]	; 0x54
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80054b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b6:	2300      	movs	r3, #0
 80054b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80054be:	460b      	mov	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c4:	4baa      	ldr	r3, [pc, #680]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	4aa7      	ldr	r2, [pc, #668]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80054e4:	653b      	str	r3, [r7, #80]	; 0x50
 80054e6:	2300      	movs	r3, #0
 80054e8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80054ee:	460b      	mov	r3, r1
 80054f0:	4313      	orrs	r3, r2
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054f4:	4b9e      	ldr	r3, [pc, #632]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005500:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005504:	4a9a      	ldr	r2, [pc, #616]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005506:	430b      	orrs	r3, r1
 8005508:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005516:	64bb      	str	r3, [r7, #72]	; 0x48
 8005518:	2300      	movs	r3, #0
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005526:	4b92      	ldr	r3, [pc, #584]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005534:	4a8e      	ldr	r2, [pc, #568]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005536:	430b      	orrs	r3, r1
 8005538:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005546:	643b      	str	r3, [r7, #64]	; 0x40
 8005548:	2300      	movs	r3, #0
 800554a:	647b      	str	r3, [r7, #68]	; 0x44
 800554c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005556:	4b86      	ldr	r3, [pc, #536]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	4a85      	ldr	r2, [pc, #532]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800555c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005560:	6113      	str	r3, [r2, #16]
 8005562:	4b83      	ldr	r3, [pc, #524]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005564:	6919      	ldr	r1, [r3, #16]
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800556e:	4a80      	ldr	r2, [pc, #512]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005580:	63bb      	str	r3, [r7, #56]	; 0x38
 8005582:	2300      	movs	r3, #0
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005586:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800558a:	460b      	mov	r3, r1
 800558c:	4313      	orrs	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005590:	4b77      	ldr	r3, [pc, #476]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005594:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	4a74      	ldr	r2, [pc, #464]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055a0:	430b      	orrs	r3, r1
 80055a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30
 80055b2:	2300      	movs	r3, #0
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
 80055b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055c0:	4b6b      	ldr	r3, [pc, #428]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d0:	4a67      	ldr	r2, [pc, #412]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	2100      	movs	r1, #0
 80055e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80055ec:	460b      	mov	r3, r1
 80055ee:	4313      	orrs	r3, r2
 80055f0:	d011      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f6:	3308      	adds	r3, #8
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb78 	bl	8005cf0 <RCCEx_PLL2_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	2100      	movs	r1, #0
 8005620:	6239      	str	r1, [r7, #32]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
 8005628:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800562c:	460b      	mov	r3, r1
 800562e:	4313      	orrs	r3, r2
 8005630:	d011      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005636:	3308      	adds	r3, #8
 8005638:	2101      	movs	r1, #1
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fb58 	bl	8005cf0 <RCCEx_PLL2_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	2100      	movs	r1, #0
 8005660:	61b9      	str	r1, [r7, #24]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d011      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005676:	3308      	adds	r3, #8
 8005678:	2102      	movs	r1, #2
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fb38 	bl	8005cf0 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	2100      	movs	r1, #0
 80056a0:	6139      	str	r1, [r7, #16]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d011      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b6:	3328      	adds	r3, #40	; 0x28
 80056b8:	2100      	movs	r1, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fbca 	bl	8005e54 <RCCEx_PLL3_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80056c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	2100      	movs	r1, #0
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056ec:	460b      	mov	r3, r1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	d011      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f6:	3328      	adds	r3, #40	; 0x28
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fbaa 	bl	8005e54 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	2100      	movs	r1, #0
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e9d7 1200 	ldrd	r1, r2, [r7]
 800572c:	460b      	mov	r3, r1
 800572e:	4313      	orrs	r3, r2
 8005730:	d011      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005736:	3328      	adds	r3, #40	; 0x28
 8005738:	2102      	movs	r1, #2
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fb8a 	bl	8005e54 <RCCEx_PLL3_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005756:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
}
 8005764:	4618      	mov	r0, r3
 8005766:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800576a:	46bd      	mov	sp, r7
 800576c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005770:	58024400 	.word	0x58024400

08005774 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005778:	f7fe fd96 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 800577c:	4602      	mov	r2, r0
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	4904      	ldr	r1, [pc, #16]	; (800579c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800578a:	5ccb      	ldrb	r3, [r1, r3]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005794:	4618      	mov	r0, r3
 8005796:	bd80      	pop	{r7, pc}
 8005798:	58024400 	.word	0x58024400
 800579c:	08008248 	.word	0x08008248

080057a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b089      	sub	sp, #36	; 0x24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057a8:	4ba1      	ldr	r3, [pc, #644]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80057b2:	4b9f      	ldr	r3, [pc, #636]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	0b1b      	lsrs	r3, r3, #12
 80057b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80057be:	4b9c      	ldr	r3, [pc, #624]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80057ca:	4b99      	ldr	r3, [pc, #612]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	08db      	lsrs	r3, r3, #3
 80057d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8111 	beq.w	8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	f000 8083 	beq.w	80058fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	f200 80a1 	bhi.w	8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d056      	beq.n	80058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800580a:	e099      	b.n	8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580c:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02d      	beq.n	8005874 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005818:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	08db      	lsrs	r3, r3, #3
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	4a84      	ldr	r2, [pc, #528]	; (8005a34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
 8005828:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	ee07 3a90 	vmov	s15, r3
 8005830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005842:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005852:	ed97 6a03 	vldr	s12, [r7, #12]
 8005856:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800585a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005872:	e087      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005886:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005896:	ed97 6a03 	vldr	s12, [r7, #12]
 800589a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b6:	e065      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ca:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058da:	ed97 6a03 	vldr	s12, [r7, #12]
 80058de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058fa:	e043      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b48      	ldr	r3, [pc, #288]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005922:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800593e:	e021      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a03 	vldr	s12, [r7, #12]
 8005966:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005982:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005984:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	0a5b      	lsrs	r3, r3, #9
 800598a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800599a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800599e:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059aa:	ee17 2a90 	vmov	r2, s15
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80059b2:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d8:	ee17 2a90 	vmov	r2, s15
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80059e0:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	0e1b      	lsrs	r3, r3, #24
 80059e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80059fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a06:	ee17 2a90 	vmov	r2, s15
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a0e:	e008      	b.n	8005a22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
}
 8005a22:	bf00      	nop
 8005a24:	3724      	adds	r7, #36	; 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
 8005a34:	03d09000 	.word	0x03d09000
 8005a38:	46000000 	.word	0x46000000
 8005a3c:	4c742400 	.word	0x4c742400
 8005a40:	4a742400 	.word	0x4a742400
 8005a44:	4af42400 	.word	0x4af42400

08005a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a50:	4ba1      	ldr	r3, [pc, #644]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a5a:	4b9f      	ldr	r3, [pc, #636]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	0d1b      	lsrs	r3, r3, #20
 8005a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a66:	4b9c      	ldr	r3, [pc, #624]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a72:	4b99      	ldr	r3, [pc, #612]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	08db      	lsrs	r3, r3, #3
 8005a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8111 	beq.w	8005cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	f000 8083 	beq.w	8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	f200 80a1 	bhi.w	8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d056      	beq.n	8005b60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ab2:	e099      	b.n	8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab4:	4b88      	ldr	r3, [pc, #544]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02d      	beq.n	8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ac0:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	08db      	lsrs	r3, r3, #3
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	4a84      	ldr	r2, [pc, #528]	; (8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aea:	4b7b      	ldr	r3, [pc, #492]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b1a:	e087      	b.n	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b5e:	e065      	b.n	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b72:	4b59      	ldr	r3, [pc, #356]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ba2:	e043      	b.n	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b48      	ldr	r3, [pc, #288]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005be6:	e021      	b.n	8005c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b37      	ldr	r3, [pc, #220]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	0a5b      	lsrs	r3, r3, #9
 8005c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c52:	ee17 2a90 	vmov	r2, s15
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c5a:	4b1f      	ldr	r3, [pc, #124]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	0c1b      	lsrs	r3, r3, #16
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c80:	ee17 2a90 	vmov	r2, s15
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	0e1b      	lsrs	r3, r3, #24
 8005c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cae:	ee17 2a90 	vmov	r2, s15
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005cb6:	e008      	b.n	8005cca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
}
 8005cca:	bf00      	nop
 8005ccc:	3724      	adds	r7, #36	; 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	58024400 	.word	0x58024400
 8005cdc:	03d09000 	.word	0x03d09000
 8005ce0:	46000000 	.word	0x46000000
 8005ce4:	4c742400 	.word	0x4c742400
 8005ce8:	4a742400 	.word	0x4a742400
 8005cec:	4af42400 	.word	0x4af42400

08005cf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cfe:	4b53      	ldr	r3, [pc, #332]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d101      	bne.n	8005d0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e099      	b.n	8005e42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d0e:	4b4f      	ldr	r3, [pc, #316]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a4e      	ldr	r2, [pc, #312]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1a:	f7fb fc6b 	bl	80015f4 <HAL_GetTick>
 8005d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d20:	e008      	b.n	8005d34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d22:	f7fb fc67 	bl	80015f4 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e086      	b.n	8005e42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d34:	4b45      	ldr	r3, [pc, #276]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f0      	bne.n	8005d22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d40:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	493f      	ldr	r1, [pc, #252]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	628b      	str	r3, [r1, #40]	; 0x28
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	025b      	lsls	r3, r3, #9
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	061b      	lsls	r3, r3, #24
 8005d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d84:	4931      	ldr	r1, [pc, #196]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d8a:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	492d      	ldr	r1, [pc, #180]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	f023 0220 	bic.w	r2, r3, #32
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	4928      	ldr	r1, [pc, #160]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005dae:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	4a26      	ldr	r2, [pc, #152]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005db4:	f023 0310 	bic.w	r3, r3, #16
 8005db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <RCCEx_PLL2_Config+0x160>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	69d2      	ldr	r2, [r2, #28]
 8005dc6:	00d2      	lsls	r2, r2, #3
 8005dc8:	4920      	ldr	r1, [pc, #128]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005dce:	4b1f      	ldr	r3, [pc, #124]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005dd4:	f043 0310 	orr.w	r3, r3, #16
 8005dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dec:	e00f      	b.n	8005e0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d106      	bne.n	8005e02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005df4:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	4a14      	ldr	r2, [pc, #80]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e00:	e005      	b.n	8005e0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1a:	f7fb fbeb 	bl	80015f4 <HAL_GetTick>
 8005e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e20:	e008      	b.n	8005e34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e22:	f7fb fbe7 	bl	80015f4 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e006      	b.n	8005e42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <RCCEx_PLL2_Config+0x15c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	58024400 	.word	0x58024400
 8005e50:	ffff0007 	.word	0xffff0007

08005e54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e62:	4b53      	ldr	r3, [pc, #332]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d101      	bne.n	8005e72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e099      	b.n	8005fa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e72:	4b4f      	ldr	r3, [pc, #316]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a4e      	ldr	r2, [pc, #312]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7e:	f7fb fbb9 	bl	80015f4 <HAL_GetTick>
 8005e82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e84:	e008      	b.n	8005e98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e86:	f7fb fbb5 	bl	80015f4 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e086      	b.n	8005fa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e98:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f0      	bne.n	8005e86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ea4:	4b42      	ldr	r3, [pc, #264]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	051b      	lsls	r3, r3, #20
 8005eb2:	493f      	ldr	r1, [pc, #252]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	025b      	lsls	r3, r3, #9
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ee8:	4931      	ldr	r1, [pc, #196]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005eee:	4b30      	ldr	r3, [pc, #192]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	492d      	ldr	r1, [pc, #180]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f00:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	4928      	ldr	r1, [pc, #160]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f12:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <RCCEx_PLL3_Config+0x160>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	69d2      	ldr	r2, [r2, #28]
 8005f2a:	00d2      	lsls	r2, r2, #3
 8005f2c:	4920      	ldr	r1, [pc, #128]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f32:	4b1f      	ldr	r3, [pc, #124]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d106      	bne.n	8005f52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f44:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f50:	e00f      	b.n	8005f72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a14      	ldr	r2, [pc, #80]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f64:	e005      	b.n	8005f72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f66:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f72:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a0e      	ldr	r2, [pc, #56]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7e:	f7fb fb39 	bl	80015f4 <HAL_GetTick>
 8005f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f84:	e008      	b.n	8005f98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f86:	f7fb fb35 	bl	80015f4 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e006      	b.n	8005fa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <RCCEx_PLL3_Config+0x15c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0f0      	beq.n	8005f86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	ffff0007 	.word	0xffff0007

08005fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e042      	b.n	8006050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fb f88b 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2224      	movs	r2, #36	; 0x24
 8005fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8ba 	bl	8006174 <UART_SetConfig>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e022      	b.n	8006050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fe16 	bl	8006c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fe9d 	bl	8006d88 <UART_CheckIdleState>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	2b20      	cmp	r3, #32
 8006070:	d17b      	bne.n	800616a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_UART_Transmit+0x26>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e074      	b.n	800616c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2221      	movs	r2, #33	; 0x21
 800608e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fb faaf 	bl	80015f4 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d108      	bne.n	80060c4 <HAL_UART_Transmit+0x6c>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	e003      	b.n	80060cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060cc:	e030      	b.n	8006130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2200      	movs	r2, #0
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 feff 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e03d      	b.n	800616c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3302      	adds	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e007      	b.n	800611e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3301      	adds	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1c8      	bne.n	80060ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	2140      	movs	r1, #64	; 0x40
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fec8 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e006      	b.n	800616c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b092      	sub	sp, #72	; 0x48
 800617a:	af00      	add	r7, sp, #0
 800617c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	431a      	orrs	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4313      	orrs	r3, r2
 800619a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4bbe      	ldr	r3, [pc, #760]	; (800649c <UART_SetConfig+0x328>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4ab3      	ldr	r2, [pc, #716]	; (80064a0 <UART_SetConfig+0x32c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061dc:	4313      	orrs	r3, r2
 80061de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	4baf      	ldr	r3, [pc, #700]	; (80064a4 <UART_SetConfig+0x330>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	f023 010f 	bic.w	r1, r3, #15
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4aa6      	ldr	r2, [pc, #664]	; (80064a8 <UART_SetConfig+0x334>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d177      	bne.n	8006304 <UART_SetConfig+0x190>
 8006214:	4ba5      	ldr	r3, [pc, #660]	; (80064ac <UART_SetConfig+0x338>)
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800621c:	2b28      	cmp	r3, #40	; 0x28
 800621e:	d86d      	bhi.n	80062fc <UART_SetConfig+0x188>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0xb4>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	080062cd 	.word	0x080062cd
 800622c:	080062fd 	.word	0x080062fd
 8006230:	080062fd 	.word	0x080062fd
 8006234:	080062fd 	.word	0x080062fd
 8006238:	080062fd 	.word	0x080062fd
 800623c:	080062fd 	.word	0x080062fd
 8006240:	080062fd 	.word	0x080062fd
 8006244:	080062fd 	.word	0x080062fd
 8006248:	080062d5 	.word	0x080062d5
 800624c:	080062fd 	.word	0x080062fd
 8006250:	080062fd 	.word	0x080062fd
 8006254:	080062fd 	.word	0x080062fd
 8006258:	080062fd 	.word	0x080062fd
 800625c:	080062fd 	.word	0x080062fd
 8006260:	080062fd 	.word	0x080062fd
 8006264:	080062fd 	.word	0x080062fd
 8006268:	080062dd 	.word	0x080062dd
 800626c:	080062fd 	.word	0x080062fd
 8006270:	080062fd 	.word	0x080062fd
 8006274:	080062fd 	.word	0x080062fd
 8006278:	080062fd 	.word	0x080062fd
 800627c:	080062fd 	.word	0x080062fd
 8006280:	080062fd 	.word	0x080062fd
 8006284:	080062fd 	.word	0x080062fd
 8006288:	080062e5 	.word	0x080062e5
 800628c:	080062fd 	.word	0x080062fd
 8006290:	080062fd 	.word	0x080062fd
 8006294:	080062fd 	.word	0x080062fd
 8006298:	080062fd 	.word	0x080062fd
 800629c:	080062fd 	.word	0x080062fd
 80062a0:	080062fd 	.word	0x080062fd
 80062a4:	080062fd 	.word	0x080062fd
 80062a8:	080062ed 	.word	0x080062ed
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	080062fd 	.word	0x080062fd
 80062b4:	080062fd 	.word	0x080062fd
 80062b8:	080062fd 	.word	0x080062fd
 80062bc:	080062fd 	.word	0x080062fd
 80062c0:	080062fd 	.word	0x080062fd
 80062c4:	080062fd 	.word	0x080062fd
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e222      	b.n	800671a <UART_SetConfig+0x5a6>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e21e      	b.n	800671a <UART_SetConfig+0x5a6>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e21a      	b.n	800671a <UART_SetConfig+0x5a6>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e216      	b.n	800671a <UART_SetConfig+0x5a6>
 80062ec:	2320      	movs	r3, #32
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e212      	b.n	800671a <UART_SetConfig+0x5a6>
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e20e      	b.n	800671a <UART_SetConfig+0x5a6>
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e20a      	b.n	800671a <UART_SetConfig+0x5a6>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a69      	ldr	r2, [pc, #420]	; (80064b0 <UART_SetConfig+0x33c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d130      	bne.n	8006370 <UART_SetConfig+0x1fc>
 800630e:	4b67      	ldr	r3, [pc, #412]	; (80064ac <UART_SetConfig+0x338>)
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	2b05      	cmp	r3, #5
 8006318:	d826      	bhi.n	8006368 <UART_SetConfig+0x1f4>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x1ac>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006339 	.word	0x08006339
 8006324:	08006341 	.word	0x08006341
 8006328:	08006349 	.word	0x08006349
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	2300      	movs	r3, #0
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e1ec      	b.n	800671a <UART_SetConfig+0x5a6>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e1e8      	b.n	800671a <UART_SetConfig+0x5a6>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e1e4      	b.n	800671a <UART_SetConfig+0x5a6>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e1e0      	b.n	800671a <UART_SetConfig+0x5a6>
 8006358:	2320      	movs	r3, #32
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e1dc      	b.n	800671a <UART_SetConfig+0x5a6>
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e1d8      	b.n	800671a <UART_SetConfig+0x5a6>
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e1d4      	b.n	800671a <UART_SetConfig+0x5a6>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a4f      	ldr	r2, [pc, #316]	; (80064b4 <UART_SetConfig+0x340>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d130      	bne.n	80063dc <UART_SetConfig+0x268>
 800637a:	4b4c      	ldr	r3, [pc, #304]	; (80064ac <UART_SetConfig+0x338>)
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	2b05      	cmp	r3, #5
 8006384:	d826      	bhi.n	80063d4 <UART_SetConfig+0x260>
 8006386:	a201      	add	r2, pc, #4	; (adr r2, 800638c <UART_SetConfig+0x218>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	080063a5 	.word	0x080063a5
 8006390:	080063ad 	.word	0x080063ad
 8006394:	080063b5 	.word	0x080063b5
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063c5 	.word	0x080063c5
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063aa:	e1b6      	b.n	800671a <UART_SetConfig+0x5a6>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b2:	e1b2      	b.n	800671a <UART_SetConfig+0x5a6>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ba:	e1ae      	b.n	800671a <UART_SetConfig+0x5a6>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c2:	e1aa      	b.n	800671a <UART_SetConfig+0x5a6>
 80063c4:	2320      	movs	r3, #32
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e1a6      	b.n	800671a <UART_SetConfig+0x5a6>
 80063cc:	2340      	movs	r3, #64	; 0x40
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e1a2      	b.n	800671a <UART_SetConfig+0x5a6>
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e19e      	b.n	800671a <UART_SetConfig+0x5a6>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a35      	ldr	r2, [pc, #212]	; (80064b8 <UART_SetConfig+0x344>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d130      	bne.n	8006448 <UART_SetConfig+0x2d4>
 80063e6:	4b31      	ldr	r3, [pc, #196]	; (80064ac <UART_SetConfig+0x338>)
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d826      	bhi.n	8006440 <UART_SetConfig+0x2cc>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x284>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006411 	.word	0x08006411
 80063fc:	08006419 	.word	0x08006419
 8006400:	08006421 	.word	0x08006421
 8006404:	08006429 	.word	0x08006429
 8006408:	08006431 	.word	0x08006431
 800640c:	08006439 	.word	0x08006439
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e180      	b.n	800671a <UART_SetConfig+0x5a6>
 8006418:	2304      	movs	r3, #4
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e17c      	b.n	800671a <UART_SetConfig+0x5a6>
 8006420:	2308      	movs	r3, #8
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006426:	e178      	b.n	800671a <UART_SetConfig+0x5a6>
 8006428:	2310      	movs	r3, #16
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642e:	e174      	b.n	800671a <UART_SetConfig+0x5a6>
 8006430:	2320      	movs	r3, #32
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006436:	e170      	b.n	800671a <UART_SetConfig+0x5a6>
 8006438:	2340      	movs	r3, #64	; 0x40
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643e:	e16c      	b.n	800671a <UART_SetConfig+0x5a6>
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006446:	e168      	b.n	800671a <UART_SetConfig+0x5a6>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1b      	ldr	r2, [pc, #108]	; (80064bc <UART_SetConfig+0x348>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d142      	bne.n	80064d8 <UART_SetConfig+0x364>
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <UART_SetConfig+0x338>)
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b05      	cmp	r3, #5
 800645c:	d838      	bhi.n	80064d0 <UART_SetConfig+0x35c>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <UART_SetConfig+0x2f0>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	0800647d 	.word	0x0800647d
 8006468:	08006485 	.word	0x08006485
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006495 	.word	0x08006495
 8006474:	080064c1 	.word	0x080064c1
 8006478:	080064c9 	.word	0x080064c9
 800647c:	2300      	movs	r3, #0
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e14a      	b.n	800671a <UART_SetConfig+0x5a6>
 8006484:	2304      	movs	r3, #4
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e146      	b.n	800671a <UART_SetConfig+0x5a6>
 800648c:	2308      	movs	r3, #8
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006492:	e142      	b.n	800671a <UART_SetConfig+0x5a6>
 8006494:	2310      	movs	r3, #16
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649a:	e13e      	b.n	800671a <UART_SetConfig+0x5a6>
 800649c:	cfff69f3 	.word	0xcfff69f3
 80064a0:	58000c00 	.word	0x58000c00
 80064a4:	11fff4ff 	.word	0x11fff4ff
 80064a8:	40011000 	.word	0x40011000
 80064ac:	58024400 	.word	0x58024400
 80064b0:	40004400 	.word	0x40004400
 80064b4:	40004800 	.word	0x40004800
 80064b8:	40004c00 	.word	0x40004c00
 80064bc:	40005000 	.word	0x40005000
 80064c0:	2320      	movs	r3, #32
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e128      	b.n	800671a <UART_SetConfig+0x5a6>
 80064c8:	2340      	movs	r3, #64	; 0x40
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e124      	b.n	800671a <UART_SetConfig+0x5a6>
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e120      	b.n	800671a <UART_SetConfig+0x5a6>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4acb      	ldr	r2, [pc, #812]	; (800680c <UART_SetConfig+0x698>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d176      	bne.n	80065d0 <UART_SetConfig+0x45c>
 80064e2:	4bcb      	ldr	r3, [pc, #812]	; (8006810 <UART_SetConfig+0x69c>)
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ea:	2b28      	cmp	r3, #40	; 0x28
 80064ec:	d86c      	bhi.n	80065c8 <UART_SetConfig+0x454>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x380>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006599 	.word	0x08006599
 80064f8:	080065c9 	.word	0x080065c9
 80064fc:	080065c9 	.word	0x080065c9
 8006500:	080065c9 	.word	0x080065c9
 8006504:	080065c9 	.word	0x080065c9
 8006508:	080065c9 	.word	0x080065c9
 800650c:	080065c9 	.word	0x080065c9
 8006510:	080065c9 	.word	0x080065c9
 8006514:	080065a1 	.word	0x080065a1
 8006518:	080065c9 	.word	0x080065c9
 800651c:	080065c9 	.word	0x080065c9
 8006520:	080065c9 	.word	0x080065c9
 8006524:	080065c9 	.word	0x080065c9
 8006528:	080065c9 	.word	0x080065c9
 800652c:	080065c9 	.word	0x080065c9
 8006530:	080065c9 	.word	0x080065c9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065c9 	.word	0x080065c9
 800653c:	080065c9 	.word	0x080065c9
 8006540:	080065c9 	.word	0x080065c9
 8006544:	080065c9 	.word	0x080065c9
 8006548:	080065c9 	.word	0x080065c9
 800654c:	080065c9 	.word	0x080065c9
 8006550:	080065c9 	.word	0x080065c9
 8006554:	080065b1 	.word	0x080065b1
 8006558:	080065c9 	.word	0x080065c9
 800655c:	080065c9 	.word	0x080065c9
 8006560:	080065c9 	.word	0x080065c9
 8006564:	080065c9 	.word	0x080065c9
 8006568:	080065c9 	.word	0x080065c9
 800656c:	080065c9 	.word	0x080065c9
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065b9 	.word	0x080065b9
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065c9 	.word	0x080065c9
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065c1 	.word	0x080065c1
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e0bc      	b.n	800671a <UART_SetConfig+0x5a6>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e0b8      	b.n	800671a <UART_SetConfig+0x5a6>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e0b4      	b.n	800671a <UART_SetConfig+0x5a6>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e0b0      	b.n	800671a <UART_SetConfig+0x5a6>
 80065b8:	2320      	movs	r3, #32
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e0ac      	b.n	800671a <UART_SetConfig+0x5a6>
 80065c0:	2340      	movs	r3, #64	; 0x40
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e0a8      	b.n	800671a <UART_SetConfig+0x5a6>
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e0a4      	b.n	800671a <UART_SetConfig+0x5a6>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a8f      	ldr	r2, [pc, #572]	; (8006814 <UART_SetConfig+0x6a0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d130      	bne.n	800663c <UART_SetConfig+0x4c8>
 80065da:	4b8d      	ldr	r3, [pc, #564]	; (8006810 <UART_SetConfig+0x69c>)
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d826      	bhi.n	8006634 <UART_SetConfig+0x4c0>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x478>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006605 	.word	0x08006605
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	08006615 	.word	0x08006615
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	2300      	movs	r3, #0
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e086      	b.n	800671a <UART_SetConfig+0x5a6>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e082      	b.n	800671a <UART_SetConfig+0x5a6>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e07e      	b.n	800671a <UART_SetConfig+0x5a6>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e07a      	b.n	800671a <UART_SetConfig+0x5a6>
 8006624:	2320      	movs	r3, #32
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e076      	b.n	800671a <UART_SetConfig+0x5a6>
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e072      	b.n	800671a <UART_SetConfig+0x5a6>
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e06e      	b.n	800671a <UART_SetConfig+0x5a6>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a75      	ldr	r2, [pc, #468]	; (8006818 <UART_SetConfig+0x6a4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d130      	bne.n	80066a8 <UART_SetConfig+0x534>
 8006646:	4b72      	ldr	r3, [pc, #456]	; (8006810 <UART_SetConfig+0x69c>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b05      	cmp	r3, #5
 8006650:	d826      	bhi.n	80066a0 <UART_SetConfig+0x52c>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x4e4>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006671 	.word	0x08006671
 800665c:	08006679 	.word	0x08006679
 8006660:	08006681 	.word	0x08006681
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e050      	b.n	800671a <UART_SetConfig+0x5a6>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e04c      	b.n	800671a <UART_SetConfig+0x5a6>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e048      	b.n	800671a <UART_SetConfig+0x5a6>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e044      	b.n	800671a <UART_SetConfig+0x5a6>
 8006690:	2320      	movs	r3, #32
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e040      	b.n	800671a <UART_SetConfig+0x5a6>
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e03c      	b.n	800671a <UART_SetConfig+0x5a6>
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e038      	b.n	800671a <UART_SetConfig+0x5a6>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5b      	ldr	r2, [pc, #364]	; (800681c <UART_SetConfig+0x6a8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d130      	bne.n	8006714 <UART_SetConfig+0x5a0>
 80066b2:	4b57      	ldr	r3, [pc, #348]	; (8006810 <UART_SetConfig+0x69c>)
 80066b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d826      	bhi.n	800670c <UART_SetConfig+0x598>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x550>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066dd 	.word	0x080066dd
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	080066ed 	.word	0x080066ed
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	2302      	movs	r3, #2
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e01a      	b.n	800671a <UART_SetConfig+0x5a6>
 80066e4:	2304      	movs	r3, #4
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e016      	b.n	800671a <UART_SetConfig+0x5a6>
 80066ec:	2308      	movs	r3, #8
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f2:	e012      	b.n	800671a <UART_SetConfig+0x5a6>
 80066f4:	2310      	movs	r3, #16
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fa:	e00e      	b.n	800671a <UART_SetConfig+0x5a6>
 80066fc:	2320      	movs	r3, #32
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e00a      	b.n	800671a <UART_SetConfig+0x5a6>
 8006704:	2340      	movs	r3, #64	; 0x40
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e006      	b.n	800671a <UART_SetConfig+0x5a6>
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e002      	b.n	800671a <UART_SetConfig+0x5a6>
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a3f      	ldr	r2, [pc, #252]	; (800681c <UART_SetConfig+0x6a8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	f040 80f8 	bne.w	8006916 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800672a:	2b20      	cmp	r3, #32
 800672c:	dc46      	bgt.n	80067bc <UART_SetConfig+0x648>
 800672e:	2b02      	cmp	r3, #2
 8006730:	f2c0 8082 	blt.w	8006838 <UART_SetConfig+0x6c4>
 8006734:	3b02      	subs	r3, #2
 8006736:	2b1e      	cmp	r3, #30
 8006738:	d87e      	bhi.n	8006838 <UART_SetConfig+0x6c4>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x5cc>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	080067c3 	.word	0x080067c3
 8006744:	08006839 	.word	0x08006839
 8006748:	080067cb 	.word	0x080067cb
 800674c:	08006839 	.word	0x08006839
 8006750:	08006839 	.word	0x08006839
 8006754:	08006839 	.word	0x08006839
 8006758:	080067db 	.word	0x080067db
 800675c:	08006839 	.word	0x08006839
 8006760:	08006839 	.word	0x08006839
 8006764:	08006839 	.word	0x08006839
 8006768:	08006839 	.word	0x08006839
 800676c:	08006839 	.word	0x08006839
 8006770:	08006839 	.word	0x08006839
 8006774:	08006839 	.word	0x08006839
 8006778:	080067eb 	.word	0x080067eb
 800677c:	08006839 	.word	0x08006839
 8006780:	08006839 	.word	0x08006839
 8006784:	08006839 	.word	0x08006839
 8006788:	08006839 	.word	0x08006839
 800678c:	08006839 	.word	0x08006839
 8006790:	08006839 	.word	0x08006839
 8006794:	08006839 	.word	0x08006839
 8006798:	08006839 	.word	0x08006839
 800679c:	08006839 	.word	0x08006839
 80067a0:	08006839 	.word	0x08006839
 80067a4:	08006839 	.word	0x08006839
 80067a8:	08006839 	.word	0x08006839
 80067ac:	08006839 	.word	0x08006839
 80067b0:	08006839 	.word	0x08006839
 80067b4:	08006839 	.word	0x08006839
 80067b8:	0800682b 	.word	0x0800682b
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d037      	beq.n	8006830 <UART_SetConfig+0x6bc>
 80067c0:	e03a      	b.n	8006838 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80067c2:	f7fe ffd7 	bl	8005774 <HAL_RCCEx_GetD3PCLK1Freq>
 80067c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067c8:	e03c      	b.n	8006844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe ffe6 	bl	80057a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d8:	e034      	b.n	8006844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067da:	f107 0318 	add.w	r3, r7, #24
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff f932 	bl	8005a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e8:	e02c      	b.n	8006844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <UART_SetConfig+0x69c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d016      	beq.n	8006824 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <UART_SetConfig+0x69c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	08db      	lsrs	r3, r3, #3
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	4a07      	ldr	r2, [pc, #28]	; (8006820 <UART_SetConfig+0x6ac>)
 8006802:	fa22 f303 	lsr.w	r3, r2, r3
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006808:	e01c      	b.n	8006844 <UART_SetConfig+0x6d0>
 800680a:	bf00      	nop
 800680c:	40011400 	.word	0x40011400
 8006810:	58024400 	.word	0x58024400
 8006814:	40007800 	.word	0x40007800
 8006818:	40007c00 	.word	0x40007c00
 800681c:	58000c00 	.word	0x58000c00
 8006820:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006824:	4b9d      	ldr	r3, [pc, #628]	; (8006a9c <UART_SetConfig+0x928>)
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006828:	e00c      	b.n	8006844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800682a:	4b9d      	ldr	r3, [pc, #628]	; (8006aa0 <UART_SetConfig+0x92c>)
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800682e:	e009      	b.n	8006844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006836:	e005      	b.n	8006844 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006842:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 81de 	beq.w	8006c08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	4a94      	ldr	r2, [pc, #592]	; (8006aa4 <UART_SetConfig+0x930>)
 8006852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006856:	461a      	mov	r2, r3
 8006858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685a:	fbb3 f3f2 	udiv	r3, r3, r2
 800685e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4413      	add	r3, r2
 800686a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686c:	429a      	cmp	r2, r3
 800686e:	d305      	bcc.n	800687c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006882:	e1c1      	b.n	8006c08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	2200      	movs	r2, #0
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	60fa      	str	r2, [r7, #12]
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	4a84      	ldr	r2, [pc, #528]	; (8006aa4 <UART_SetConfig+0x930>)
 8006892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006896:	b29b      	uxth	r3, r3
 8006898:	2200      	movs	r2, #0
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	607a      	str	r2, [r7, #4]
 800689e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068a6:	f7f9 fd6b 	bl	8000380 <__aeabi_uldivmod>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	020b      	lsls	r3, r1, #8
 80068bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068c0:	0202      	lsls	r2, r0, #8
 80068c2:	6979      	ldr	r1, [r7, #20]
 80068c4:	6849      	ldr	r1, [r1, #4]
 80068c6:	0849      	lsrs	r1, r1, #1
 80068c8:	2000      	movs	r0, #0
 80068ca:	460c      	mov	r4, r1
 80068cc:	4605      	mov	r5, r0
 80068ce:	eb12 0804 	adds.w	r8, r2, r4
 80068d2:	eb43 0905 	adc.w	r9, r3, r5
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	469a      	mov	sl, r3
 80068de:	4693      	mov	fp, r2
 80068e0:	4652      	mov	r2, sl
 80068e2:	465b      	mov	r3, fp
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	f7f9 fd4a 	bl	8000380 <__aeabi_uldivmod>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4613      	mov	r3, r2
 80068f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068fa:	d308      	bcc.n	800690e <UART_SetConfig+0x79a>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006902:	d204      	bcs.n	800690e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800690a:	60da      	str	r2, [r3, #12]
 800690c:	e17c      	b.n	8006c08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006914:	e178      	b.n	8006c08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800691e:	f040 80c5 	bne.w	8006aac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006926:	2b20      	cmp	r3, #32
 8006928:	dc48      	bgt.n	80069bc <UART_SetConfig+0x848>
 800692a:	2b00      	cmp	r3, #0
 800692c:	db7b      	blt.n	8006a26 <UART_SetConfig+0x8b2>
 800692e:	2b20      	cmp	r3, #32
 8006930:	d879      	bhi.n	8006a26 <UART_SetConfig+0x8b2>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x7c4>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	080069c3 	.word	0x080069c3
 800693c:	080069cb 	.word	0x080069cb
 8006940:	08006a27 	.word	0x08006a27
 8006944:	08006a27 	.word	0x08006a27
 8006948:	080069d3 	.word	0x080069d3
 800694c:	08006a27 	.word	0x08006a27
 8006950:	08006a27 	.word	0x08006a27
 8006954:	08006a27 	.word	0x08006a27
 8006958:	080069e3 	.word	0x080069e3
 800695c:	08006a27 	.word	0x08006a27
 8006960:	08006a27 	.word	0x08006a27
 8006964:	08006a27 	.word	0x08006a27
 8006968:	08006a27 	.word	0x08006a27
 800696c:	08006a27 	.word	0x08006a27
 8006970:	08006a27 	.word	0x08006a27
 8006974:	08006a27 	.word	0x08006a27
 8006978:	080069f3 	.word	0x080069f3
 800697c:	08006a27 	.word	0x08006a27
 8006980:	08006a27 	.word	0x08006a27
 8006984:	08006a27 	.word	0x08006a27
 8006988:	08006a27 	.word	0x08006a27
 800698c:	08006a27 	.word	0x08006a27
 8006990:	08006a27 	.word	0x08006a27
 8006994:	08006a27 	.word	0x08006a27
 8006998:	08006a27 	.word	0x08006a27
 800699c:	08006a27 	.word	0x08006a27
 80069a0:	08006a27 	.word	0x08006a27
 80069a4:	08006a27 	.word	0x08006a27
 80069a8:	08006a27 	.word	0x08006a27
 80069ac:	08006a27 	.word	0x08006a27
 80069b0:	08006a27 	.word	0x08006a27
 80069b4:	08006a27 	.word	0x08006a27
 80069b8:	08006a19 	.word	0x08006a19
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d02e      	beq.n	8006a1e <UART_SetConfig+0x8aa>
 80069c0:	e031      	b.n	8006a26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c2:	f7fd fca1 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 80069c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c8:	e033      	b.n	8006a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ca:	f7fd fcb3 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 80069ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069d0:	e02f      	b.n	8006a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fee2 	bl	80057a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e0:	e027      	b.n	8006a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e2:	f107 0318 	add.w	r3, r7, #24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f82e 	bl	8005a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f0:	e01f      	b.n	8006a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069f2:	4b2d      	ldr	r3, [pc, #180]	; (8006aa8 <UART_SetConfig+0x934>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069fe:	4b2a      	ldr	r3, [pc, #168]	; (8006aa8 <UART_SetConfig+0x934>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	08db      	lsrs	r3, r3, #3
 8006a04:	f003 0303 	and.w	r3, r3, #3
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <UART_SetConfig+0x928>)
 8006a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a10:	e00f      	b.n	8006a32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006a12:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <UART_SetConfig+0x928>)
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a16:	e00c      	b.n	8006a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a18:	4b21      	ldr	r3, [pc, #132]	; (8006aa0 <UART_SetConfig+0x92c>)
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a1c:	e009      	b.n	8006a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a24:	e005      	b.n	8006a32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80e7 	beq.w	8006c08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <UART_SetConfig+0x930>)
 8006a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a4c:	005a      	lsls	r2, r3, #1
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	441a      	add	r2, r3
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b0f      	cmp	r3, #15
 8006a64:	d916      	bls.n	8006a94 <UART_SetConfig+0x920>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6c:	d212      	bcs.n	8006a94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f023 030f 	bic.w	r3, r3, #15
 8006a76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a86:	4313      	orrs	r3, r2
 8006a88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a90:	60da      	str	r2, [r3, #12]
 8006a92:	e0b9      	b.n	8006c08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a9a:	e0b5      	b.n	8006c08 <UART_SetConfig+0xa94>
 8006a9c:	03d09000 	.word	0x03d09000
 8006aa0:	003d0900 	.word	0x003d0900
 8006aa4:	08008268 	.word	0x08008268
 8006aa8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	dc49      	bgt.n	8006b48 <UART_SetConfig+0x9d4>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	db7c      	blt.n	8006bb2 <UART_SetConfig+0xa3e>
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d87a      	bhi.n	8006bb2 <UART_SetConfig+0xa3e>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0x950>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006b4f 	.word	0x08006b4f
 8006ac8:	08006b57 	.word	0x08006b57
 8006acc:	08006bb3 	.word	0x08006bb3
 8006ad0:	08006bb3 	.word	0x08006bb3
 8006ad4:	08006b5f 	.word	0x08006b5f
 8006ad8:	08006bb3 	.word	0x08006bb3
 8006adc:	08006bb3 	.word	0x08006bb3
 8006ae0:	08006bb3 	.word	0x08006bb3
 8006ae4:	08006b6f 	.word	0x08006b6f
 8006ae8:	08006bb3 	.word	0x08006bb3
 8006aec:	08006bb3 	.word	0x08006bb3
 8006af0:	08006bb3 	.word	0x08006bb3
 8006af4:	08006bb3 	.word	0x08006bb3
 8006af8:	08006bb3 	.word	0x08006bb3
 8006afc:	08006bb3 	.word	0x08006bb3
 8006b00:	08006bb3 	.word	0x08006bb3
 8006b04:	08006b7f 	.word	0x08006b7f
 8006b08:	08006bb3 	.word	0x08006bb3
 8006b0c:	08006bb3 	.word	0x08006bb3
 8006b10:	08006bb3 	.word	0x08006bb3
 8006b14:	08006bb3 	.word	0x08006bb3
 8006b18:	08006bb3 	.word	0x08006bb3
 8006b1c:	08006bb3 	.word	0x08006bb3
 8006b20:	08006bb3 	.word	0x08006bb3
 8006b24:	08006bb3 	.word	0x08006bb3
 8006b28:	08006bb3 	.word	0x08006bb3
 8006b2c:	08006bb3 	.word	0x08006bb3
 8006b30:	08006bb3 	.word	0x08006bb3
 8006b34:	08006bb3 	.word	0x08006bb3
 8006b38:	08006bb3 	.word	0x08006bb3
 8006b3c:	08006bb3 	.word	0x08006bb3
 8006b40:	08006bb3 	.word	0x08006bb3
 8006b44:	08006ba5 	.word	0x08006ba5
 8006b48:	2b40      	cmp	r3, #64	; 0x40
 8006b4a:	d02e      	beq.n	8006baa <UART_SetConfig+0xa36>
 8006b4c:	e031      	b.n	8006bb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4e:	f7fd fbdb 	bl	8004308 <HAL_RCC_GetPCLK1Freq>
 8006b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b54:	e033      	b.n	8006bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b56:	f7fd fbed 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8006b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b5c:	e02f      	b.n	8006bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fe1c 	bl	80057a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6c:	e027      	b.n	8006bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b6e:	f107 0318 	add.w	r3, r7, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe ff68 	bl	8005a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7c:	e01f      	b.n	8006bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b7e:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <UART_SetConfig+0xac0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	; (8006c34 <UART_SetConfig+0xac0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	08db      	lsrs	r3, r3, #3
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	4a28      	ldr	r2, [pc, #160]	; (8006c38 <UART_SetConfig+0xac4>)
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b9c:	e00f      	b.n	8006bbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006b9e:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <UART_SetConfig+0xac4>)
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba2:	e00c      	b.n	8006bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <UART_SetConfig+0xac8>)
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e009      	b.n	8006bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb0:	e005      	b.n	8006bbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006bbc:	bf00      	nop
    }

    if (pclk != 0U)
 8006bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d021      	beq.n	8006c08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <UART_SetConfig+0xacc>)
 8006bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	2b0f      	cmp	r3, #15
 8006bec:	d909      	bls.n	8006c02 <UART_SetConfig+0xa8e>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d205      	bcs.n	8006c02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60da      	str	r2, [r3, #12]
 8006c00:	e002      	b.n	8006c08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3748      	adds	r7, #72	; 0x48
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c32:	bf00      	nop
 8006c34:	58024400 	.word	0x58024400
 8006c38:	03d09000 	.word	0x03d09000
 8006c3c:	003d0900 	.word	0x003d0900
 8006c40:	08008268 	.word	0x08008268

08006c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d42:	d10a      	bne.n	8006d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b098      	sub	sp, #96	; 0x60
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d98:	f7fa fc2c 	bl	80015f4 <HAL_GetTick>
 8006d9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d12f      	bne.n	8006e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f88e 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d022      	beq.n	8006e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dda:	653b      	str	r3, [r7, #80]	; 0x50
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de4:	647b      	str	r3, [r7, #68]	; 0x44
 8006de6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e063      	b.n	8006ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d149      	bne.n	8006eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e22:	2200      	movs	r2, #0
 8006e24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f857 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d03c      	beq.n	8006eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	623b      	str	r3, [r7, #32]
   return(result);
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e52:	633b      	str	r3, [r7, #48]	; 0x30
 8006e54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e86:	61fa      	str	r2, [r7, #28]
 8006e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	69b9      	ldr	r1, [r7, #24]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	617b      	str	r3, [r7, #20]
   return(result);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e012      	b.n	8006ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3758      	adds	r7, #88	; 0x58
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eec:	e049      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d045      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef6:	f7fa fb7d 	bl	80015f4 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d302      	bcc.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e048      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d031      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d110      	bne.n	8006f4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2208      	movs	r2, #8
 8006f32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f839 	bl	8006fac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e029      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5c:	d111      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f81f 	bl	8006fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e00f      	b.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69da      	ldr	r2, [r3, #28]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d0a6      	beq.n	8006eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b095      	sub	sp, #84	; 0x54
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <UART_EndRxTransfer+0xc8>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701e:	2b01      	cmp	r3, #1
 8007020:	d118      	bne.n	8007054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0310 	bic.w	r3, r3, #16
 8007036:	647b      	str	r3, [r7, #68]	; 0x44
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6979      	ldr	r1, [r7, #20]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	613b      	str	r3, [r7, #16]
   return(result);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007068:	bf00      	nop
 800706a:	3754      	adds	r7, #84	; 0x54
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	effffffe 	.word	0xeffffffe

08007078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_UARTEx_DisableFifoMode+0x16>
 800708a:	2302      	movs	r3, #2
 800708c:	e027      	b.n	80070de <HAL_UARTEx_DisableFifoMode+0x66>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2224      	movs	r2, #36	; 0x24
 800709a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070fe:	2302      	movs	r3, #2
 8007100:	e02d      	b.n	800715e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2224      	movs	r2, #36	; 0x24
 800710e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f850 	bl	80071e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800717a:	2302      	movs	r3, #2
 800717c:	e02d      	b.n	80071da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2224      	movs	r2, #36	; 0x24
 800718a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f812 	bl	80071e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d108      	bne.n	8007206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007204:	e031      	b.n	800726a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007206:	2310      	movs	r3, #16
 8007208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800720a:	2310      	movs	r3, #16
 800720c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0e5b      	lsrs	r3, r3, #25
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	0f5b      	lsrs	r3, r3, #29
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	7b3a      	ldrb	r2, [r7, #12]
 8007232:	4911      	ldr	r1, [pc, #68]	; (8007278 <UARTEx_SetNbDataToProcess+0x94>)
 8007234:	5c8a      	ldrb	r2, [r1, r2]
 8007236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800723a:	7b3a      	ldrb	r2, [r7, #12]
 800723c:	490f      	ldr	r1, [pc, #60]	; (800727c <UARTEx_SetNbDataToProcess+0x98>)
 800723e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007240:	fb93 f3f2 	sdiv	r3, r3, r2
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	7b7a      	ldrb	r2, [r7, #13]
 8007250:	4909      	ldr	r1, [pc, #36]	; (8007278 <UARTEx_SetNbDataToProcess+0x94>)
 8007252:	5c8a      	ldrb	r2, [r1, r2]
 8007254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007258:	7b7a      	ldrb	r2, [r7, #13]
 800725a:	4908      	ldr	r1, [pc, #32]	; (800727c <UARTEx_SetNbDataToProcess+0x98>)
 800725c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800725e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	08008280 	.word	0x08008280
 800727c:	08008288 	.word	0x08008288

08007280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007280:	b084      	sub	sp, #16
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	f107 001c 	add.w	r0, r7, #28
 800728e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	2b01      	cmp	r3, #1
 8007296:	d120      	bne.n	80072da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <USB_CoreInit+0xd4>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d105      	bne.n	80072ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 faac 	bl	800782c <USB_CoreReset>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e01a      	b.n	8007310 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 faa0 	bl	800782c <USB_CoreReset>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
 8007302:	e005      	b.n	8007310 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	2b01      	cmp	r3, #1
 8007314:	d116      	bne.n	8007344 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	b29a      	uxth	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <USB_CoreInit+0xd8>)
 8007326:	4313      	orrs	r3, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f043 0206 	orr.w	r2, r3, #6
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f043 0220 	orr.w	r2, r3, #32
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007350:	b004      	add	sp, #16
 8007352:	4770      	bx	lr
 8007354:	ffbdffbf 	.word	0xffbdffbf
 8007358:	03ee0000 	.word	0x03ee0000

0800735c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f023 0201 	bic.w	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d115      	bne.n	80073cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073ac:	2001      	movs	r0, #1
 80073ae:	f7fa f92d 	bl	800160c <HAL_Delay>
      ms++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa29 	bl	8007810 <USB_GetMode>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d01e      	beq.n	8007402 <USB_SetCurrentMode+0x84>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b31      	cmp	r3, #49	; 0x31
 80073c8:	d9f0      	bls.n	80073ac <USB_SetCurrentMode+0x2e>
 80073ca:	e01a      	b.n	8007402 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d115      	bne.n	80073fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073de:	2001      	movs	r0, #1
 80073e0:	f7fa f914 	bl	800160c <HAL_Delay>
      ms++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa10 	bl	8007810 <USB_GetMode>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <USB_SetCurrentMode+0x84>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b31      	cmp	r3, #49	; 0x31
 80073fa:	d9f0      	bls.n	80073de <USB_SetCurrentMode+0x60>
 80073fc:	e001      	b.n	8007402 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e005      	b.n	800740e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b32      	cmp	r3, #50	; 0x32
 8007406:	d101      	bne.n	800740c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007418:	b084      	sub	sp, #16
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007432:	2300      	movs	r3, #0
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	e009      	b.n	800744c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3340      	adds	r3, #64	; 0x40
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	2200      	movs	r2, #0
 8007444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b0e      	cmp	r3, #14
 8007450:	d9f2      	bls.n	8007438 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11c      	bne.n	8007492 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007466:	f043 0302 	orr.w	r3, r3, #2
 800746a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	e005      	b.n	800749e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a4:	461a      	mov	r2, r3
 80074a6:	2300      	movs	r3, #0
 80074a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b0:	4619      	mov	r1, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	461a      	mov	r2, r3
 80074ba:	680b      	ldr	r3, [r1, #0]
 80074bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d10c      	bne.n	80074de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f965 	bl	800779c <USB_SetDevSpeed>
 80074d2:	e008      	b.n	80074e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074d4:	2101      	movs	r1, #1
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f960 	bl	800779c <USB_SetDevSpeed>
 80074dc:	e003      	b.n	80074e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074de:	2103      	movs	r1, #3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f95b 	bl	800779c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074e6:	2110      	movs	r1, #16
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f8f3 	bl	80076d4 <USB_FlushTxFifo>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f91f 	bl	800773c <USB_FlushRxFifo>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751a:	461a      	mov	r2, r3
 800751c:	2300      	movs	r3, #0
 800751e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	461a      	mov	r2, r3
 8007528:	2300      	movs	r3, #0
 800752a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	e043      	b.n	80075ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007548:	d118      	bne.n	800757c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	461a      	mov	r2, r3
 800755e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e013      	b.n	800758e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	461a      	mov	r2, r3
 8007574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	e008      	b.n	800758e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	461a      	mov	r2, r3
 800758a:	2300      	movs	r3, #0
 800758c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	461a      	mov	r2, r3
 800759c:	2300      	movs	r3, #0
 800759e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	461a      	mov	r2, r3
 80075ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	3301      	adds	r3, #1
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d3b7      	bcc.n	8007532 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	e043      	b.n	8007650 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075de:	d118      	bne.n	8007612 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	461a      	mov	r2, r3
 80075f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	e013      	b.n	8007624 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	461a      	mov	r2, r3
 800760a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	e008      	b.n	8007624 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	461a      	mov	r2, r3
 8007620:	2300      	movs	r3, #0
 8007622:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007630:	461a      	mov	r2, r3
 8007632:	2300      	movs	r3, #0
 8007634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007642:	461a      	mov	r2, r3
 8007644:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	3301      	adds	r3, #1
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	d3b7      	bcc.n	80075c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800766a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007678:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f043 0210 	orr.w	r2, r3, #16
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	4b0e      	ldr	r3, [pc, #56]	; (80076cc <USB_DevInit+0x2b4>)
 8007692:	4313      	orrs	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f043 0208 	orr.w	r2, r3, #8
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d105      	bne.n	80076bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <USB_DevInit+0x2b8>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c8:	b004      	add	sp, #16
 80076ca:	4770      	bx	lr
 80076cc:	803c3800 	.word	0x803c3800
 80076d0:	40000004 	.word	0x40000004

080076d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a13      	ldr	r2, [pc, #76]	; (8007738 <USB_FlushTxFifo+0x64>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e01b      	b.n	800772c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	daf2      	bge.n	80076e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	019b      	lsls	r3, r3, #6
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a08      	ldr	r2, [pc, #32]	; (8007738 <USB_FlushTxFifo+0x64>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e006      	b.n	800772c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d0f0      	beq.n	800770c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	00030d40 	.word	0x00030d40

0800773c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4a11      	ldr	r2, [pc, #68]	; (8007798 <USB_FlushRxFifo+0x5c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e018      	b.n	800778c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	daf2      	bge.n	8007748 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2210      	movs	r2, #16
 800776a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a08      	ldr	r2, [pc, #32]	; (8007798 <USB_FlushRxFifo+0x5c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e006      	b.n	800778c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b10      	cmp	r3, #16
 8007788:	d0f0      	beq.n	800776c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	00030d40 	.word	0x00030d40

0800779c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077bc:	4313      	orrs	r3, r2
 80077be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077e8:	f023 0303 	bic.w	r3, r3, #3
 80077ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f003 0301 	and.w	r3, r3, #1
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <USB_CoreReset+0x64>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d901      	bls.n	800784a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e01b      	b.n	8007882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	daf2      	bge.n	8007838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f043 0201 	orr.w	r2, r3, #1
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <USB_CoreReset+0x64>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d901      	bls.n	8007874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b01      	cmp	r3, #1
 800787e:	d0f0      	beq.n	8007862 <USB_CoreReset+0x36>

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	00030d40 	.word	0x00030d40

08007894 <siprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b500      	push	{lr}
 8007898:	b09c      	sub	sp, #112	; 0x70
 800789a:	ab1d      	add	r3, sp, #116	; 0x74
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078a4:	4809      	ldr	r0, [pc, #36]	; (80078cc <siprintf+0x38>)
 80078a6:	9107      	str	r1, [sp, #28]
 80078a8:	9104      	str	r1, [sp, #16]
 80078aa:	4909      	ldr	r1, [pc, #36]	; (80078d0 <siprintf+0x3c>)
 80078ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	6800      	ldr	r0, [r0, #0]
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	a902      	add	r1, sp, #8
 80078b8:	f000 f9a0 	bl	8007bfc <_svfiprintf_r>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	b01c      	add	sp, #112	; 0x70
 80078c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c8:	b003      	add	sp, #12
 80078ca:	4770      	bx	lr
 80078cc:	2400005c 	.word	0x2400005c
 80078d0:	ffff0208 	.word	0xffff0208

080078d4 <memset>:
 80078d4:	4402      	add	r2, r0
 80078d6:	4603      	mov	r3, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	d100      	bne.n	80078de <memset+0xa>
 80078dc:	4770      	bx	lr
 80078de:	f803 1b01 	strb.w	r1, [r3], #1
 80078e2:	e7f9      	b.n	80078d8 <memset+0x4>

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	; (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2400005c 	.word	0x2400005c

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	; (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	; (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	; (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	; (8007934 <__libc_init_array+0x44>)
 8007904:	f000 fc6a 	bl	80081dc <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	080082cc 	.word	0x080082cc
 800792c:	080082cc 	.word	0x080082cc
 8007930:	080082cc 	.word	0x080082cc
 8007934:	080082d0 	.word	0x080082d0

08007938 <__retarget_lock_acquire_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_release_recursive>:
 800793a:	4770      	bx	lr

0800793c <memcpy>:
 800793c:	440a      	add	r2, r1
 800793e:	4291      	cmp	r1, r2
 8007940:	f100 33ff 	add.w	r3, r0, #4294967295
 8007944:	d100      	bne.n	8007948 <memcpy+0xc>
 8007946:	4770      	bx	lr
 8007948:	b510      	push	{r4, lr}
 800794a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007952:	4291      	cmp	r1, r2
 8007954:	d1f9      	bne.n	800794a <memcpy+0xe>
 8007956:	bd10      	pop	{r4, pc}

08007958 <_free_r>:
 8007958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800795a:	2900      	cmp	r1, #0
 800795c:	d044      	beq.n	80079e8 <_free_r+0x90>
 800795e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007962:	9001      	str	r0, [sp, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f1a1 0404 	sub.w	r4, r1, #4
 800796a:	bfb8      	it	lt
 800796c:	18e4      	addlt	r4, r4, r3
 800796e:	f000 f8df 	bl	8007b30 <__malloc_lock>
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <_free_r+0x94>)
 8007974:	9801      	ldr	r0, [sp, #4]
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	b933      	cbnz	r3, 8007988 <_free_r+0x30>
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	6014      	str	r4, [r2, #0]
 800797e:	b003      	add	sp, #12
 8007980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007984:	f000 b8da 	b.w	8007b3c <__malloc_unlock>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d908      	bls.n	800799e <_free_r+0x46>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf01      	itttt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	e7ed      	b.n	800797a <_free_r+0x22>
 800799e:	461a      	mov	r2, r3
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	b10b      	cbz	r3, 80079a8 <_free_r+0x50>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d9fa      	bls.n	800799e <_free_r+0x46>
 80079a8:	6811      	ldr	r1, [r2, #0]
 80079aa:	1855      	adds	r5, r2, r1
 80079ac:	42a5      	cmp	r5, r4
 80079ae:	d10b      	bne.n	80079c8 <_free_r+0x70>
 80079b0:	6824      	ldr	r4, [r4, #0]
 80079b2:	4421      	add	r1, r4
 80079b4:	1854      	adds	r4, r2, r1
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	6011      	str	r1, [r2, #0]
 80079ba:	d1e0      	bne.n	800797e <_free_r+0x26>
 80079bc:	681c      	ldr	r4, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	440c      	add	r4, r1
 80079c4:	6014      	str	r4, [r2, #0]
 80079c6:	e7da      	b.n	800797e <_free_r+0x26>
 80079c8:	d902      	bls.n	80079d0 <_free_r+0x78>
 80079ca:	230c      	movs	r3, #12
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	e7d6      	b.n	800797e <_free_r+0x26>
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf04      	itt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	bf04      	itt	eq
 80079e0:	1949      	addeq	r1, r1, r5
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	6054      	str	r4, [r2, #4]
 80079e6:	e7ca      	b.n	800797e <_free_r+0x26>
 80079e8:	b003      	add	sp, #12
 80079ea:	bd30      	pop	{r4, r5, pc}
 80079ec:	24000ab4 	.word	0x24000ab4

080079f0 <sbrk_aligned>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	4e0e      	ldr	r6, [pc, #56]	; (8007a2c <sbrk_aligned+0x3c>)
 80079f4:	460c      	mov	r4, r1
 80079f6:	6831      	ldr	r1, [r6, #0]
 80079f8:	4605      	mov	r5, r0
 80079fa:	b911      	cbnz	r1, 8007a02 <sbrk_aligned+0x12>
 80079fc:	f000 fba6 	bl	800814c <_sbrk_r>
 8007a00:	6030      	str	r0, [r6, #0]
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 fba1 	bl	800814c <_sbrk_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	d00a      	beq.n	8007a24 <sbrk_aligned+0x34>
 8007a0e:	1cc4      	adds	r4, r0, #3
 8007a10:	f024 0403 	bic.w	r4, r4, #3
 8007a14:	42a0      	cmp	r0, r4
 8007a16:	d007      	beq.n	8007a28 <sbrk_aligned+0x38>
 8007a18:	1a21      	subs	r1, r4, r0
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 fb96 	bl	800814c <_sbrk_r>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d101      	bne.n	8007a28 <sbrk_aligned+0x38>
 8007a24:	f04f 34ff 	mov.w	r4, #4294967295
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	24000ab8 	.word	0x24000ab8

08007a30 <_malloc_r>:
 8007a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	1ccd      	adds	r5, r1, #3
 8007a36:	f025 0503 	bic.w	r5, r5, #3
 8007a3a:	3508      	adds	r5, #8
 8007a3c:	2d0c      	cmp	r5, #12
 8007a3e:	bf38      	it	cc
 8007a40:	250c      	movcc	r5, #12
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	4607      	mov	r7, r0
 8007a46:	db01      	blt.n	8007a4c <_malloc_r+0x1c>
 8007a48:	42a9      	cmp	r1, r5
 8007a4a:	d905      	bls.n	8007a58 <_malloc_r+0x28>
 8007a4c:	230c      	movs	r3, #12
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	2600      	movs	r6, #0
 8007a52:	4630      	mov	r0, r6
 8007a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b2c <_malloc_r+0xfc>
 8007a5c:	f000 f868 	bl	8007b30 <__malloc_lock>
 8007a60:	f8d8 3000 	ldr.w	r3, [r8]
 8007a64:	461c      	mov	r4, r3
 8007a66:	bb5c      	cbnz	r4, 8007ac0 <_malloc_r+0x90>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	f7ff ffc0 	bl	80079f0 <sbrk_aligned>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	4604      	mov	r4, r0
 8007a74:	d155      	bne.n	8007b22 <_malloc_r+0xf2>
 8007a76:	f8d8 4000 	ldr.w	r4, [r8]
 8007a7a:	4626      	mov	r6, r4
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	d145      	bne.n	8007b0c <_malloc_r+0xdc>
 8007a80:	2c00      	cmp	r4, #0
 8007a82:	d048      	beq.n	8007b16 <_malloc_r+0xe6>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	4631      	mov	r1, r6
 8007a88:	4638      	mov	r0, r7
 8007a8a:	eb04 0903 	add.w	r9, r4, r3
 8007a8e:	f000 fb5d 	bl	800814c <_sbrk_r>
 8007a92:	4581      	cmp	r9, r0
 8007a94:	d13f      	bne.n	8007b16 <_malloc_r+0xe6>
 8007a96:	6821      	ldr	r1, [r4, #0]
 8007a98:	1a6d      	subs	r5, r5, r1
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f7ff ffa7 	bl	80079f0 <sbrk_aligned>
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d037      	beq.n	8007b16 <_malloc_r+0xe6>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	442b      	add	r3, r5
 8007aaa:	6023      	str	r3, [r4, #0]
 8007aac:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d038      	beq.n	8007b26 <_malloc_r+0xf6>
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	42a2      	cmp	r2, r4
 8007ab8:	d12b      	bne.n	8007b12 <_malloc_r+0xe2>
 8007aba:	2200      	movs	r2, #0
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	e00f      	b.n	8007ae0 <_malloc_r+0xb0>
 8007ac0:	6822      	ldr	r2, [r4, #0]
 8007ac2:	1b52      	subs	r2, r2, r5
 8007ac4:	d41f      	bmi.n	8007b06 <_malloc_r+0xd6>
 8007ac6:	2a0b      	cmp	r2, #11
 8007ac8:	d917      	bls.n	8007afa <_malloc_r+0xca>
 8007aca:	1961      	adds	r1, r4, r5
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	6025      	str	r5, [r4, #0]
 8007ad0:	bf18      	it	ne
 8007ad2:	6059      	strne	r1, [r3, #4]
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	bf08      	it	eq
 8007ad8:	f8c8 1000 	streq.w	r1, [r8]
 8007adc:	5162      	str	r2, [r4, r5]
 8007ade:	604b      	str	r3, [r1, #4]
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f104 060b 	add.w	r6, r4, #11
 8007ae6:	f000 f829 	bl	8007b3c <__malloc_unlock>
 8007aea:	f026 0607 	bic.w	r6, r6, #7
 8007aee:	1d23      	adds	r3, r4, #4
 8007af0:	1af2      	subs	r2, r6, r3
 8007af2:	d0ae      	beq.n	8007a52 <_malloc_r+0x22>
 8007af4:	1b9b      	subs	r3, r3, r6
 8007af6:	50a3      	str	r3, [r4, r2]
 8007af8:	e7ab      	b.n	8007a52 <_malloc_r+0x22>
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	6862      	ldr	r2, [r4, #4]
 8007afe:	d1dd      	bne.n	8007abc <_malloc_r+0x8c>
 8007b00:	f8c8 2000 	str.w	r2, [r8]
 8007b04:	e7ec      	b.n	8007ae0 <_malloc_r+0xb0>
 8007b06:	4623      	mov	r3, r4
 8007b08:	6864      	ldr	r4, [r4, #4]
 8007b0a:	e7ac      	b.n	8007a66 <_malloc_r+0x36>
 8007b0c:	4634      	mov	r4, r6
 8007b0e:	6876      	ldr	r6, [r6, #4]
 8007b10:	e7b4      	b.n	8007a7c <_malloc_r+0x4c>
 8007b12:	4613      	mov	r3, r2
 8007b14:	e7cc      	b.n	8007ab0 <_malloc_r+0x80>
 8007b16:	230c      	movs	r3, #12
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	f000 f80e 	bl	8007b3c <__malloc_unlock>
 8007b20:	e797      	b.n	8007a52 <_malloc_r+0x22>
 8007b22:	6025      	str	r5, [r4, #0]
 8007b24:	e7dc      	b.n	8007ae0 <_malloc_r+0xb0>
 8007b26:	605b      	str	r3, [r3, #4]
 8007b28:	deff      	udf	#255	; 0xff
 8007b2a:	bf00      	nop
 8007b2c:	24000ab4 	.word	0x24000ab4

08007b30 <__malloc_lock>:
 8007b30:	4801      	ldr	r0, [pc, #4]	; (8007b38 <__malloc_lock+0x8>)
 8007b32:	f7ff bf01 	b.w	8007938 <__retarget_lock_acquire_recursive>
 8007b36:	bf00      	nop
 8007b38:	24000ab0 	.word	0x24000ab0

08007b3c <__malloc_unlock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__malloc_unlock+0x8>)
 8007b3e:	f7ff befc 	b.w	800793a <__retarget_lock_release_recursive>
 8007b42:	bf00      	nop
 8007b44:	24000ab0 	.word	0x24000ab0

08007b48 <__ssputs_r>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	688e      	ldr	r6, [r1, #8]
 8007b4e:	461f      	mov	r7, r3
 8007b50:	42be      	cmp	r6, r7
 8007b52:	680b      	ldr	r3, [r1, #0]
 8007b54:	4682      	mov	sl, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4690      	mov	r8, r2
 8007b5a:	d82c      	bhi.n	8007bb6 <__ssputs_r+0x6e>
 8007b5c:	898a      	ldrh	r2, [r1, #12]
 8007b5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b62:	d026      	beq.n	8007bb2 <__ssputs_r+0x6a>
 8007b64:	6965      	ldr	r5, [r4, #20]
 8007b66:	6909      	ldr	r1, [r1, #16]
 8007b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b6c:	eba3 0901 	sub.w	r9, r3, r1
 8007b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b74:	1c7b      	adds	r3, r7, #1
 8007b76:	444b      	add	r3, r9
 8007b78:	106d      	asrs	r5, r5, #1
 8007b7a:	429d      	cmp	r5, r3
 8007b7c:	bf38      	it	cc
 8007b7e:	461d      	movcc	r5, r3
 8007b80:	0553      	lsls	r3, r2, #21
 8007b82:	d527      	bpl.n	8007bd4 <__ssputs_r+0x8c>
 8007b84:	4629      	mov	r1, r5
 8007b86:	f7ff ff53 	bl	8007a30 <_malloc_r>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	b360      	cbz	r0, 8007be8 <__ssputs_r+0xa0>
 8007b8e:	6921      	ldr	r1, [r4, #16]
 8007b90:	464a      	mov	r2, r9
 8007b92:	f7ff fed3 	bl	800793c <memcpy>
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	6126      	str	r6, [r4, #16]
 8007ba4:	6165      	str	r5, [r4, #20]
 8007ba6:	444e      	add	r6, r9
 8007ba8:	eba5 0509 	sub.w	r5, r5, r9
 8007bac:	6026      	str	r6, [r4, #0]
 8007bae:	60a5      	str	r5, [r4, #8]
 8007bb0:	463e      	mov	r6, r7
 8007bb2:	42be      	cmp	r6, r7
 8007bb4:	d900      	bls.n	8007bb8 <__ssputs_r+0x70>
 8007bb6:	463e      	mov	r6, r7
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	4632      	mov	r2, r6
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	f000 faab 	bl	8008118 <memmove>
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	1b9b      	subs	r3, r3, r6
 8007bc6:	60a3      	str	r3, [r4, #8]
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	4433      	add	r3, r6
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	f000 fac9 	bl	800816c <_realloc_r>
 8007bda:	4606      	mov	r6, r0
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1e0      	bne.n	8007ba2 <__ssputs_r+0x5a>
 8007be0:	6921      	ldr	r1, [r4, #16]
 8007be2:	4650      	mov	r0, sl
 8007be4:	f7ff feb8 	bl	8007958 <_free_r>
 8007be8:	230c      	movs	r3, #12
 8007bea:	f8ca 3000 	str.w	r3, [sl]
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	e7e9      	b.n	8007bd0 <__ssputs_r+0x88>

08007bfc <_svfiprintf_r>:
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	4698      	mov	r8, r3
 8007c02:	898b      	ldrh	r3, [r1, #12]
 8007c04:	061b      	lsls	r3, r3, #24
 8007c06:	b09d      	sub	sp, #116	; 0x74
 8007c08:	4607      	mov	r7, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	d50e      	bpl.n	8007c2e <_svfiprintf_r+0x32>
 8007c10:	690b      	ldr	r3, [r1, #16]
 8007c12:	b963      	cbnz	r3, 8007c2e <_svfiprintf_r+0x32>
 8007c14:	2140      	movs	r1, #64	; 0x40
 8007c16:	f7ff ff0b 	bl	8007a30 <_malloc_r>
 8007c1a:	6028      	str	r0, [r5, #0]
 8007c1c:	6128      	str	r0, [r5, #16]
 8007c1e:	b920      	cbnz	r0, 8007c2a <_svfiprintf_r+0x2e>
 8007c20:	230c      	movs	r3, #12
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	e0d0      	b.n	8007dcc <_svfiprintf_r+0x1d0>
 8007c2a:	2340      	movs	r3, #64	; 0x40
 8007c2c:	616b      	str	r3, [r5, #20]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9309      	str	r3, [sp, #36]	; 0x24
 8007c32:	2320      	movs	r3, #32
 8007c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c3c:	2330      	movs	r3, #48	; 0x30
 8007c3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007de4 <_svfiprintf_r+0x1e8>
 8007c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c46:	f04f 0901 	mov.w	r9, #1
 8007c4a:	4623      	mov	r3, r4
 8007c4c:	469a      	mov	sl, r3
 8007c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c52:	b10a      	cbz	r2, 8007c58 <_svfiprintf_r+0x5c>
 8007c54:	2a25      	cmp	r2, #37	; 0x25
 8007c56:	d1f9      	bne.n	8007c4c <_svfiprintf_r+0x50>
 8007c58:	ebba 0b04 	subs.w	fp, sl, r4
 8007c5c:	d00b      	beq.n	8007c76 <_svfiprintf_r+0x7a>
 8007c5e:	465b      	mov	r3, fp
 8007c60:	4622      	mov	r2, r4
 8007c62:	4629      	mov	r1, r5
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7ff ff6f 	bl	8007b48 <__ssputs_r>
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	f000 80a9 	beq.w	8007dc2 <_svfiprintf_r+0x1c6>
 8007c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c72:	445a      	add	r2, fp
 8007c74:	9209      	str	r2, [sp, #36]	; 0x24
 8007c76:	f89a 3000 	ldrb.w	r3, [sl]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 80a1 	beq.w	8007dc2 <_svfiprintf_r+0x1c6>
 8007c80:	2300      	movs	r3, #0
 8007c82:	f04f 32ff 	mov.w	r2, #4294967295
 8007c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c8a:	f10a 0a01 	add.w	sl, sl, #1
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	9307      	str	r3, [sp, #28]
 8007c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c96:	931a      	str	r3, [sp, #104]	; 0x68
 8007c98:	4654      	mov	r4, sl
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca0:	4850      	ldr	r0, [pc, #320]	; (8007de4 <_svfiprintf_r+0x1e8>)
 8007ca2:	f7f8 fb1d 	bl	80002e0 <memchr>
 8007ca6:	9a04      	ldr	r2, [sp, #16]
 8007ca8:	b9d8      	cbnz	r0, 8007ce2 <_svfiprintf_r+0xe6>
 8007caa:	06d0      	lsls	r0, r2, #27
 8007cac:	bf44      	itt	mi
 8007cae:	2320      	movmi	r3, #32
 8007cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb4:	0711      	lsls	r1, r2, #28
 8007cb6:	bf44      	itt	mi
 8007cb8:	232b      	movmi	r3, #43	; 0x2b
 8007cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc4:	d015      	beq.n	8007cf2 <_svfiprintf_r+0xf6>
 8007cc6:	9a07      	ldr	r2, [sp, #28]
 8007cc8:	4654      	mov	r4, sl
 8007cca:	2000      	movs	r0, #0
 8007ccc:	f04f 0c0a 	mov.w	ip, #10
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd6:	3b30      	subs	r3, #48	; 0x30
 8007cd8:	2b09      	cmp	r3, #9
 8007cda:	d94d      	bls.n	8007d78 <_svfiprintf_r+0x17c>
 8007cdc:	b1b0      	cbz	r0, 8007d0c <_svfiprintf_r+0x110>
 8007cde:	9207      	str	r2, [sp, #28]
 8007ce0:	e014      	b.n	8007d0c <_svfiprintf_r+0x110>
 8007ce2:	eba0 0308 	sub.w	r3, r0, r8
 8007ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cea:	4313      	orrs	r3, r2
 8007cec:	9304      	str	r3, [sp, #16]
 8007cee:	46a2      	mov	sl, r4
 8007cf0:	e7d2      	b.n	8007c98 <_svfiprintf_r+0x9c>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	1d19      	adds	r1, r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	9103      	str	r1, [sp, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bfbb      	ittet	lt
 8007cfe:	425b      	neglt	r3, r3
 8007d00:	f042 0202 	orrlt.w	r2, r2, #2
 8007d04:	9307      	strge	r3, [sp, #28]
 8007d06:	9307      	strlt	r3, [sp, #28]
 8007d08:	bfb8      	it	lt
 8007d0a:	9204      	strlt	r2, [sp, #16]
 8007d0c:	7823      	ldrb	r3, [r4, #0]
 8007d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d10:	d10c      	bne.n	8007d2c <_svfiprintf_r+0x130>
 8007d12:	7863      	ldrb	r3, [r4, #1]
 8007d14:	2b2a      	cmp	r3, #42	; 0x2a
 8007d16:	d134      	bne.n	8007d82 <_svfiprintf_r+0x186>
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	1d1a      	adds	r2, r3, #4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	9203      	str	r2, [sp, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfb8      	it	lt
 8007d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d28:	3402      	adds	r4, #2
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007df4 <_svfiprintf_r+0x1f8>
 8007d30:	7821      	ldrb	r1, [r4, #0]
 8007d32:	2203      	movs	r2, #3
 8007d34:	4650      	mov	r0, sl
 8007d36:	f7f8 fad3 	bl	80002e0 <memchr>
 8007d3a:	b138      	cbz	r0, 8007d4c <_svfiprintf_r+0x150>
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	eba0 000a 	sub.w	r0, r0, sl
 8007d42:	2240      	movs	r2, #64	; 0x40
 8007d44:	4082      	lsls	r2, r0
 8007d46:	4313      	orrs	r3, r2
 8007d48:	3401      	adds	r4, #1
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d50:	4825      	ldr	r0, [pc, #148]	; (8007de8 <_svfiprintf_r+0x1ec>)
 8007d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d56:	2206      	movs	r2, #6
 8007d58:	f7f8 fac2 	bl	80002e0 <memchr>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d038      	beq.n	8007dd2 <_svfiprintf_r+0x1d6>
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <_svfiprintf_r+0x1f0>)
 8007d62:	bb1b      	cbnz	r3, 8007dac <_svfiprintf_r+0x1b0>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	3307      	adds	r3, #7
 8007d68:	f023 0307 	bic.w	r3, r3, #7
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d72:	4433      	add	r3, r6
 8007d74:	9309      	str	r3, [sp, #36]	; 0x24
 8007d76:	e768      	b.n	8007c4a <_svfiprintf_r+0x4e>
 8007d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	2001      	movs	r0, #1
 8007d80:	e7a6      	b.n	8007cd0 <_svfiprintf_r+0xd4>
 8007d82:	2300      	movs	r3, #0
 8007d84:	3401      	adds	r4, #1
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f04f 0c0a 	mov.w	ip, #10
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d94:	3a30      	subs	r2, #48	; 0x30
 8007d96:	2a09      	cmp	r2, #9
 8007d98:	d903      	bls.n	8007da2 <_svfiprintf_r+0x1a6>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c6      	beq.n	8007d2c <_svfiprintf_r+0x130>
 8007d9e:	9105      	str	r1, [sp, #20]
 8007da0:	e7c4      	b.n	8007d2c <_svfiprintf_r+0x130>
 8007da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007da6:	4604      	mov	r4, r0
 8007da8:	2301      	movs	r3, #1
 8007daa:	e7f0      	b.n	8007d8e <_svfiprintf_r+0x192>
 8007dac:	ab03      	add	r3, sp, #12
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	462a      	mov	r2, r5
 8007db2:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <_svfiprintf_r+0x1f4>)
 8007db4:	a904      	add	r1, sp, #16
 8007db6:	4638      	mov	r0, r7
 8007db8:	f3af 8000 	nop.w
 8007dbc:	1c42      	adds	r2, r0, #1
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	d1d6      	bne.n	8007d70 <_svfiprintf_r+0x174>
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	065b      	lsls	r3, r3, #25
 8007dc6:	f53f af2d 	bmi.w	8007c24 <_svfiprintf_r+0x28>
 8007dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dcc:	b01d      	add	sp, #116	; 0x74
 8007dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <_svfiprintf_r+0x1f4>)
 8007dda:	a904      	add	r1, sp, #16
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f000 f879 	bl	8007ed4 <_printf_i>
 8007de2:	e7eb      	b.n	8007dbc <_svfiprintf_r+0x1c0>
 8007de4:	08008290 	.word	0x08008290
 8007de8:	0800829a 	.word	0x0800829a
 8007dec:	00000000 	.word	0x00000000
 8007df0:	08007b49 	.word	0x08007b49
 8007df4:	08008296 	.word	0x08008296

08007df8 <_printf_common>:
 8007df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	4699      	mov	r9, r3
 8007e00:	688a      	ldr	r2, [r1, #8]
 8007e02:	690b      	ldr	r3, [r1, #16]
 8007e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	bfb8      	it	lt
 8007e0c:	4613      	movlt	r3, r2
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e14:	4607      	mov	r7, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	b10a      	cbz	r2, 8007e1e <_printf_common+0x26>
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	6033      	str	r3, [r6, #0]
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	0699      	lsls	r1, r3, #26
 8007e22:	bf42      	ittt	mi
 8007e24:	6833      	ldrmi	r3, [r6, #0]
 8007e26:	3302      	addmi	r3, #2
 8007e28:	6033      	strmi	r3, [r6, #0]
 8007e2a:	6825      	ldr	r5, [r4, #0]
 8007e2c:	f015 0506 	ands.w	r5, r5, #6
 8007e30:	d106      	bne.n	8007e40 <_printf_common+0x48>
 8007e32:	f104 0a19 	add.w	sl, r4, #25
 8007e36:	68e3      	ldr	r3, [r4, #12]
 8007e38:	6832      	ldr	r2, [r6, #0]
 8007e3a:	1a9b      	subs	r3, r3, r2
 8007e3c:	42ab      	cmp	r3, r5
 8007e3e:	dc26      	bgt.n	8007e8e <_printf_common+0x96>
 8007e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e44:	1e13      	subs	r3, r2, #0
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	bf18      	it	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	0692      	lsls	r2, r2, #26
 8007e4e:	d42b      	bmi.n	8007ea8 <_printf_common+0xb0>
 8007e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e54:	4649      	mov	r1, r9
 8007e56:	4638      	mov	r0, r7
 8007e58:	47c0      	blx	r8
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d01e      	beq.n	8007e9c <_printf_common+0xa4>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	6922      	ldr	r2, [r4, #16]
 8007e62:	f003 0306 	and.w	r3, r3, #6
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	bf02      	ittt	eq
 8007e6a:	68e5      	ldreq	r5, [r4, #12]
 8007e6c:	6833      	ldreq	r3, [r6, #0]
 8007e6e:	1aed      	subeq	r5, r5, r3
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	bf0c      	ite	eq
 8007e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e78:	2500      	movne	r5, #0
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	bfc4      	itt	gt
 8007e7e:	1a9b      	subgt	r3, r3, r2
 8007e80:	18ed      	addgt	r5, r5, r3
 8007e82:	2600      	movs	r6, #0
 8007e84:	341a      	adds	r4, #26
 8007e86:	42b5      	cmp	r5, r6
 8007e88:	d11a      	bne.n	8007ec0 <_printf_common+0xc8>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e008      	b.n	8007ea0 <_printf_common+0xa8>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4652      	mov	r2, sl
 8007e92:	4649      	mov	r1, r9
 8007e94:	4638      	mov	r0, r7
 8007e96:	47c0      	blx	r8
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d103      	bne.n	8007ea4 <_printf_common+0xac>
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	e7c6      	b.n	8007e36 <_printf_common+0x3e>
 8007ea8:	18e1      	adds	r1, r4, r3
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	2030      	movs	r0, #48	; 0x30
 8007eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eb2:	4422      	add	r2, r4
 8007eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	e7c7      	b.n	8007e50 <_printf_common+0x58>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d0e6      	beq.n	8007e9c <_printf_common+0xa4>
 8007ece:	3601      	adds	r6, #1
 8007ed0:	e7d9      	b.n	8007e86 <_printf_common+0x8e>
	...

08007ed4 <_printf_i>:
 8007ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	7e0f      	ldrb	r7, [r1, #24]
 8007eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007edc:	2f78      	cmp	r7, #120	; 0x78
 8007ede:	4691      	mov	r9, r2
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	469a      	mov	sl, r3
 8007ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eea:	d807      	bhi.n	8007efc <_printf_i+0x28>
 8007eec:	2f62      	cmp	r7, #98	; 0x62
 8007eee:	d80a      	bhi.n	8007f06 <_printf_i+0x32>
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	f000 80d4 	beq.w	800809e <_printf_i+0x1ca>
 8007ef6:	2f58      	cmp	r7, #88	; 0x58
 8007ef8:	f000 80c0 	beq.w	800807c <_printf_i+0x1a8>
 8007efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f04:	e03a      	b.n	8007f7c <_printf_i+0xa8>
 8007f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f0a:	2b15      	cmp	r3, #21
 8007f0c:	d8f6      	bhi.n	8007efc <_printf_i+0x28>
 8007f0e:	a101      	add	r1, pc, #4	; (adr r1, 8007f14 <_printf_i+0x40>)
 8007f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f14:	08007f6d 	.word	0x08007f6d
 8007f18:	08007f81 	.word	0x08007f81
 8007f1c:	08007efd 	.word	0x08007efd
 8007f20:	08007efd 	.word	0x08007efd
 8007f24:	08007efd 	.word	0x08007efd
 8007f28:	08007efd 	.word	0x08007efd
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007efd 	.word	0x08007efd
 8007f34:	08007efd 	.word	0x08007efd
 8007f38:	08007efd 	.word	0x08007efd
 8007f3c:	08007efd 	.word	0x08007efd
 8007f40:	08008085 	.word	0x08008085
 8007f44:	08007fad 	.word	0x08007fad
 8007f48:	0800803f 	.word	0x0800803f
 8007f4c:	08007efd 	.word	0x08007efd
 8007f50:	08007efd 	.word	0x08007efd
 8007f54:	080080a7 	.word	0x080080a7
 8007f58:	08007efd 	.word	0x08007efd
 8007f5c:	08007fad 	.word	0x08007fad
 8007f60:	08007efd 	.word	0x08007efd
 8007f64:	08007efd 	.word	0x08007efd
 8007f68:	08008047 	.word	0x08008047
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	1d1a      	adds	r2, r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	602a      	str	r2, [r5, #0]
 8007f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e09f      	b.n	80080c0 <_printf_i+0x1ec>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	0607      	lsls	r7, r0, #24
 8007f86:	f103 0104 	add.w	r1, r3, #4
 8007f8a:	6029      	str	r1, [r5, #0]
 8007f8c:	d501      	bpl.n	8007f92 <_printf_i+0xbe>
 8007f8e:	681e      	ldr	r6, [r3, #0]
 8007f90:	e003      	b.n	8007f9a <_printf_i+0xc6>
 8007f92:	0646      	lsls	r6, r0, #25
 8007f94:	d5fb      	bpl.n	8007f8e <_printf_i+0xba>
 8007f96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f9a:	2e00      	cmp	r6, #0
 8007f9c:	da03      	bge.n	8007fa6 <_printf_i+0xd2>
 8007f9e:	232d      	movs	r3, #45	; 0x2d
 8007fa0:	4276      	negs	r6, r6
 8007fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa6:	485a      	ldr	r0, [pc, #360]	; (8008110 <_printf_i+0x23c>)
 8007fa8:	230a      	movs	r3, #10
 8007faa:	e012      	b.n	8007fd2 <_printf_i+0xfe>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	6029      	str	r1, [r5, #0]
 8007fb4:	0605      	lsls	r5, r0, #24
 8007fb6:	d501      	bpl.n	8007fbc <_printf_i+0xe8>
 8007fb8:	681e      	ldr	r6, [r3, #0]
 8007fba:	e002      	b.n	8007fc2 <_printf_i+0xee>
 8007fbc:	0641      	lsls	r1, r0, #25
 8007fbe:	d5fb      	bpl.n	8007fb8 <_printf_i+0xe4>
 8007fc0:	881e      	ldrh	r6, [r3, #0]
 8007fc2:	4853      	ldr	r0, [pc, #332]	; (8008110 <_printf_i+0x23c>)
 8007fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2308      	moveq	r3, #8
 8007fca:	230a      	movne	r3, #10
 8007fcc:	2100      	movs	r1, #0
 8007fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fd2:	6865      	ldr	r5, [r4, #4]
 8007fd4:	60a5      	str	r5, [r4, #8]
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	bfa2      	ittt	ge
 8007fda:	6821      	ldrge	r1, [r4, #0]
 8007fdc:	f021 0104 	bicge.w	r1, r1, #4
 8007fe0:	6021      	strge	r1, [r4, #0]
 8007fe2:	b90e      	cbnz	r6, 8007fe8 <_printf_i+0x114>
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	d04b      	beq.n	8008080 <_printf_i+0x1ac>
 8007fe8:	4615      	mov	r5, r2
 8007fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fee:	fb03 6711 	mls	r7, r3, r1, r6
 8007ff2:	5dc7      	ldrb	r7, [r0, r7]
 8007ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ff8:	4637      	mov	r7, r6
 8007ffa:	42bb      	cmp	r3, r7
 8007ffc:	460e      	mov	r6, r1
 8007ffe:	d9f4      	bls.n	8007fea <_printf_i+0x116>
 8008000:	2b08      	cmp	r3, #8
 8008002:	d10b      	bne.n	800801c <_printf_i+0x148>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	07de      	lsls	r6, r3, #31
 8008008:	d508      	bpl.n	800801c <_printf_i+0x148>
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	6861      	ldr	r1, [r4, #4]
 800800e:	4299      	cmp	r1, r3
 8008010:	bfde      	ittt	le
 8008012:	2330      	movle	r3, #48	; 0x30
 8008014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800801c:	1b52      	subs	r2, r2, r5
 800801e:	6122      	str	r2, [r4, #16]
 8008020:	f8cd a000 	str.w	sl, [sp]
 8008024:	464b      	mov	r3, r9
 8008026:	aa03      	add	r2, sp, #12
 8008028:	4621      	mov	r1, r4
 800802a:	4640      	mov	r0, r8
 800802c:	f7ff fee4 	bl	8007df8 <_printf_common>
 8008030:	3001      	adds	r0, #1
 8008032:	d14a      	bne.n	80080ca <_printf_i+0x1f6>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	b004      	add	sp, #16
 800803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f043 0320 	orr.w	r3, r3, #32
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	4833      	ldr	r0, [pc, #204]	; (8008114 <_printf_i+0x240>)
 8008048:	2778      	movs	r7, #120	; 0x78
 800804a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	6829      	ldr	r1, [r5, #0]
 8008052:	061f      	lsls	r7, r3, #24
 8008054:	f851 6b04 	ldr.w	r6, [r1], #4
 8008058:	d402      	bmi.n	8008060 <_printf_i+0x18c>
 800805a:	065f      	lsls	r7, r3, #25
 800805c:	bf48      	it	mi
 800805e:	b2b6      	uxthmi	r6, r6
 8008060:	07df      	lsls	r7, r3, #31
 8008062:	bf48      	it	mi
 8008064:	f043 0320 	orrmi.w	r3, r3, #32
 8008068:	6029      	str	r1, [r5, #0]
 800806a:	bf48      	it	mi
 800806c:	6023      	strmi	r3, [r4, #0]
 800806e:	b91e      	cbnz	r6, 8008078 <_printf_i+0x1a4>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	f023 0320 	bic.w	r3, r3, #32
 8008076:	6023      	str	r3, [r4, #0]
 8008078:	2310      	movs	r3, #16
 800807a:	e7a7      	b.n	8007fcc <_printf_i+0xf8>
 800807c:	4824      	ldr	r0, [pc, #144]	; (8008110 <_printf_i+0x23c>)
 800807e:	e7e4      	b.n	800804a <_printf_i+0x176>
 8008080:	4615      	mov	r5, r2
 8008082:	e7bd      	b.n	8008000 <_printf_i+0x12c>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	6826      	ldr	r6, [r4, #0]
 8008088:	6961      	ldr	r1, [r4, #20]
 800808a:	1d18      	adds	r0, r3, #4
 800808c:	6028      	str	r0, [r5, #0]
 800808e:	0635      	lsls	r5, r6, #24
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	d501      	bpl.n	8008098 <_printf_i+0x1c4>
 8008094:	6019      	str	r1, [r3, #0]
 8008096:	e002      	b.n	800809e <_printf_i+0x1ca>
 8008098:	0670      	lsls	r0, r6, #25
 800809a:	d5fb      	bpl.n	8008094 <_printf_i+0x1c0>
 800809c:	8019      	strh	r1, [r3, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	6123      	str	r3, [r4, #16]
 80080a2:	4615      	mov	r5, r2
 80080a4:	e7bc      	b.n	8008020 <_printf_i+0x14c>
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	1d1a      	adds	r2, r3, #4
 80080aa:	602a      	str	r2, [r5, #0]
 80080ac:	681d      	ldr	r5, [r3, #0]
 80080ae:	6862      	ldr	r2, [r4, #4]
 80080b0:	2100      	movs	r1, #0
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7f8 f914 	bl	80002e0 <memchr>
 80080b8:	b108      	cbz	r0, 80080be <_printf_i+0x1ea>
 80080ba:	1b40      	subs	r0, r0, r5
 80080bc:	6060      	str	r0, [r4, #4]
 80080be:	6863      	ldr	r3, [r4, #4]
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	2300      	movs	r3, #0
 80080c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080c8:	e7aa      	b.n	8008020 <_printf_i+0x14c>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	462a      	mov	r2, r5
 80080ce:	4649      	mov	r1, r9
 80080d0:	4640      	mov	r0, r8
 80080d2:	47d0      	blx	sl
 80080d4:	3001      	adds	r0, #1
 80080d6:	d0ad      	beq.n	8008034 <_printf_i+0x160>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	079b      	lsls	r3, r3, #30
 80080dc:	d413      	bmi.n	8008106 <_printf_i+0x232>
 80080de:	68e0      	ldr	r0, [r4, #12]
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	4298      	cmp	r0, r3
 80080e4:	bfb8      	it	lt
 80080e6:	4618      	movlt	r0, r3
 80080e8:	e7a6      	b.n	8008038 <_printf_i+0x164>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4632      	mov	r2, r6
 80080ee:	4649      	mov	r1, r9
 80080f0:	4640      	mov	r0, r8
 80080f2:	47d0      	blx	sl
 80080f4:	3001      	adds	r0, #1
 80080f6:	d09d      	beq.n	8008034 <_printf_i+0x160>
 80080f8:	3501      	adds	r5, #1
 80080fa:	68e3      	ldr	r3, [r4, #12]
 80080fc:	9903      	ldr	r1, [sp, #12]
 80080fe:	1a5b      	subs	r3, r3, r1
 8008100:	42ab      	cmp	r3, r5
 8008102:	dcf2      	bgt.n	80080ea <_printf_i+0x216>
 8008104:	e7eb      	b.n	80080de <_printf_i+0x20a>
 8008106:	2500      	movs	r5, #0
 8008108:	f104 0619 	add.w	r6, r4, #25
 800810c:	e7f5      	b.n	80080fa <_printf_i+0x226>
 800810e:	bf00      	nop
 8008110:	080082a1 	.word	0x080082a1
 8008114:	080082b2 	.word	0x080082b2

08008118 <memmove>:
 8008118:	4288      	cmp	r0, r1
 800811a:	b510      	push	{r4, lr}
 800811c:	eb01 0402 	add.w	r4, r1, r2
 8008120:	d902      	bls.n	8008128 <memmove+0x10>
 8008122:	4284      	cmp	r4, r0
 8008124:	4623      	mov	r3, r4
 8008126:	d807      	bhi.n	8008138 <memmove+0x20>
 8008128:	1e43      	subs	r3, r0, #1
 800812a:	42a1      	cmp	r1, r4
 800812c:	d008      	beq.n	8008140 <memmove+0x28>
 800812e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008136:	e7f8      	b.n	800812a <memmove+0x12>
 8008138:	4402      	add	r2, r0
 800813a:	4601      	mov	r1, r0
 800813c:	428a      	cmp	r2, r1
 800813e:	d100      	bne.n	8008142 <memmove+0x2a>
 8008140:	bd10      	pop	{r4, pc}
 8008142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800814a:	e7f7      	b.n	800813c <memmove+0x24>

0800814c <_sbrk_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_sbrk_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7f9 f8de 	bl	8001318 <_sbrk>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_sbrk_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_sbrk_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	24000aac 	.word	0x24000aac

0800816c <_realloc_r>:
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	4680      	mov	r8, r0
 8008172:	4614      	mov	r4, r2
 8008174:	460e      	mov	r6, r1
 8008176:	b921      	cbnz	r1, 8008182 <_realloc_r+0x16>
 8008178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800817c:	4611      	mov	r1, r2
 800817e:	f7ff bc57 	b.w	8007a30 <_malloc_r>
 8008182:	b92a      	cbnz	r2, 8008190 <_realloc_r+0x24>
 8008184:	f7ff fbe8 	bl	8007958 <_free_r>
 8008188:	4625      	mov	r5, r4
 800818a:	4628      	mov	r0, r5
 800818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008190:	f000 f81b 	bl	80081ca <_malloc_usable_size_r>
 8008194:	4284      	cmp	r4, r0
 8008196:	4607      	mov	r7, r0
 8008198:	d802      	bhi.n	80081a0 <_realloc_r+0x34>
 800819a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800819e:	d812      	bhi.n	80081c6 <_realloc_r+0x5a>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4640      	mov	r0, r8
 80081a4:	f7ff fc44 	bl	8007a30 <_malloc_r>
 80081a8:	4605      	mov	r5, r0
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d0ed      	beq.n	800818a <_realloc_r+0x1e>
 80081ae:	42bc      	cmp	r4, r7
 80081b0:	4622      	mov	r2, r4
 80081b2:	4631      	mov	r1, r6
 80081b4:	bf28      	it	cs
 80081b6:	463a      	movcs	r2, r7
 80081b8:	f7ff fbc0 	bl	800793c <memcpy>
 80081bc:	4631      	mov	r1, r6
 80081be:	4640      	mov	r0, r8
 80081c0:	f7ff fbca 	bl	8007958 <_free_r>
 80081c4:	e7e1      	b.n	800818a <_realloc_r+0x1e>
 80081c6:	4635      	mov	r5, r6
 80081c8:	e7df      	b.n	800818a <_realloc_r+0x1e>

080081ca <_malloc_usable_size_r>:
 80081ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ce:	1f18      	subs	r0, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bfbc      	itt	lt
 80081d4:	580b      	ldrlt	r3, [r1, r0]
 80081d6:	18c0      	addlt	r0, r0, r3
 80081d8:	4770      	bx	lr
	...

080081dc <_init>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr

080081e8 <_fini>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr
