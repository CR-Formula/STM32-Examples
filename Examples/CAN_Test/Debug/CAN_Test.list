
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c04  08009c04  00019c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c0c  08009c0c  00019c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009c10  08009c10  00019c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08009c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  08009c74  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  08009cd4  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  24000120  08009d34  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000abc  08009d34  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d132  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e85  00000000  00000000  0003d2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00040148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0d  00000000  00000000  000414a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038a74  00000000  00000000  000423b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a8f  00000000  00000000  0007ae29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00168bfc  00000000  00000000  000948b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005944  00000000  00000000  001fd4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00202df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009b1c 	.word	0x08009b1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08009b1c 	.word	0x08009b1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 ff5d 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f87b 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 faa7 	bl	8000bdc <MX_GPIO_Init>
  MX_ETH_Init();
 800068e:	f000 f8f7 	bl	8000880 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000692:	f000 fa25 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000696:	f000 fa6f 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 800069a:	f000 f93d 	bl	8000918 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800069e:	f000 f9bb 	bl	8000a18 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x321;								// CAN ID ~Page 563
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <main+0xe8>)
 80006a4:	f240 3221 	movw	r2, #801	; 0x321
 80006a8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <main+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;					// Sets the data frame
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <main+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;					// Sets the data size to 8
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <main+0xe8>)
 80006b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006bc:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <main+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;					// Sets to classic CAN Message
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <main+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <main+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <main+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]

  uint8_t count = '0';
 80006dc:	2330      	movs	r3, #48	; 0x30
 80006de:	71fb      	strb	r3, [r7, #7]

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <main+0xec>)
 80006e2:	f002 fcef 	bl	80030c4 <HAL_FDCAN_Start>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <main+0x74>
      Error_Handler();
 80006ec:	f000 fb52 	bl	8000d94 <Error_Handler>
    }

  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80006f0:	481e      	ldr	r0, [pc, #120]	; (800076c <main+0xf0>)
 80006f2:	f002 fce7 	bl	80030c4 <HAL_FDCAN_Start>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <main+0x84>
        Error_Handler();
 80006fc:	f000 fb4a 	bl	8000d94 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan2, count) == '1') { // Checks for a new CAN Message
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4619      	mov	r1, r3
 8000704:	4819      	ldr	r0, [pc, #100]	; (800076c <main+0xf0>)
 8000706:	f002 fed1 	bl	80034ac <HAL_FDCAN_IsRxBufferMessageAvailable>
 800070a:	4603      	mov	r3, r0
 800070c:	2b31      	cmp	r3, #49	; 0x31
 800070e:	d108      	bne.n	8000722 <main+0xa6>
	  		  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData); // Gets the new CAN Message
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <main+0xf4>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <main+0xf8>)
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4815      	ldr	r0, [pc, #84]	; (800076c <main+0xf0>)
 8000718:	f002 fd5a 	bl	80031d0 <HAL_FDCAN_GetRxMessage>
	  		  count++;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
	  }

	  	  HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 ff9d 	bl	8001664 <HAL_Delay>

	  	  TxData[0]++;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <main+0xfc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0xfc>)
 8000734:	701a      	strb	r2, [r3, #0]
	  	  TxData[1]+=2;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <main+0xfc>)
 8000738:	785b      	ldrb	r3, [r3, #1]
 800073a:	3302      	adds	r3, #2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0xfc>)
 8000740:	705a      	strb	r2, [r3, #1]

	  	  HAL_UART_Transmit_IT(&huart3, &TxData[0], sizeof(TxData[0]));
 8000742:	2201      	movs	r2, #1
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <main+0xfc>)
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <main+0x100>)
 8000748:	f006 fb46 	bl	8006dd8 <HAL_UART_Transmit_IT>

	  if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) { // Adds a new CAN message to the TX Fifo TRIGGERS HAL_FDCAN_ERROR_PARAM
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <main+0xfc>)
 800074e:	4905      	ldr	r1, [pc, #20]	; (8000764 <main+0xe8>)
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <main+0xec>)
 8000752:	f002 fce2 	bl	800311a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0d1      	beq.n	8000700 <main+0x84>
	  		  Error_Handler(); // If the message fails, kick to Error Handler
 800075c:	f000 fb1a 	bl	8000d94 <Error_Handler>
	  if(HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan2, count) == '1') { // Checks for a new CAN Message
 8000760:	e7ce      	b.n	8000700 <main+0x84>
 8000762:	bf00      	nop
 8000764:	24000934 	.word	0x24000934
 8000768:	24000224 	.word	0x24000224
 800076c:	240002c4 	.word	0x240002c4
 8000770:	2400092c 	.word	0x2400092c
 8000774:	24000904 	.word	0x24000904
 8000778:	24000958 	.word	0x24000958
 800077c:	24000364 	.word	0x24000364

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	; 0x70
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	224c      	movs	r2, #76	; 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f008 fd40 	bl	8009214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2220      	movs	r2, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f008 fd3a 	bl	8009214 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f003 fbdf 	bl	8003f64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <SystemClock_Config+0xf8>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	4a32      	ldr	r2, [pc, #200]	; (8000878 <SystemClock_Config+0xf8>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <SystemClock_Config+0xf8>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <SystemClock_Config+0xfc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	4a2c      	ldr	r2, [pc, #176]	; (800087c <SystemClock_Config+0xfc>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <SystemClock_Config+0xfc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007dc:	bf00      	nop
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <SystemClock_Config+0xfc>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ea:	d1f8      	bne.n	80007de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007ec:	2303      	movs	r3, #3
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2340      	movs	r3, #64	; 0x40
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081a:	230c      	movs	r3, #12
 800081c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081e:	2300      	movs	r3, #0
 8000820:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fbe4 	bl	8003ff8 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000836:	f000 faad 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	233f      	movs	r3, #63	; 0x3f
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f004 f824 	bl	80048ac <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800086a:	f000 fa93 	bl	8000d94 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3770      	adds	r7, #112	; 0x70
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58000400 	.word	0x58000400
 800087c:	58024800 	.word	0x58024800

08000880 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_ETH_Init+0x80>)
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <MX_ETH_Init+0x84>)
 8000888:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ETH_Init+0x88>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_ETH_Init+0x88>)
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_ETH_Init+0x88>)
 8000898:	22e1      	movs	r2, #225	; 0xe1
 800089a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_ETH_Init+0x88>)
 800089e:	2200      	movs	r2, #0
 80008a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_ETH_Init+0x88>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ETH_Init+0x88>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_ETH_Init+0x80>)
 80008b0:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_ETH_Init+0x88>)
 80008b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_ETH_Init+0x80>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_ETH_Init+0x80>)
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <MX_ETH_Init+0x8c>)
 80008be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_ETH_Init+0x80>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <MX_ETH_Init+0x90>)
 80008c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_ETH_Init+0x80>)
 80008c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ETH_Init+0x80>)
 80008d0:	f001 fd80 	bl	80023d4 <HAL_ETH_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008da:	f000 fa5b 	bl	8000d94 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008de:	2238      	movs	r2, #56	; 0x38
 80008e0:	2100      	movs	r1, #0
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_ETH_Init+0x94>)
 80008e4:	f008 fc96 	bl	8009214 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_ETH_Init+0x94>)
 80008ea:	2221      	movs	r2, #33	; 0x21
 80008ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_ETH_Init+0x94>)
 80008f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_ETH_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000174 	.word	0x24000174
 8000904:	40028000 	.word	0x40028000
 8000908:	24000960 	.word	0x24000960
 800090c:	240000c0 	.word	0x240000c0
 8000910:	24000060 	.word	0x24000060
 8000914:	2400013c 	.word	0x2400013c

08000918 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000920:	4a3c      	ldr	r2, [pc, #240]	; (8000a14 <MX_FDCAN1_Init+0xfc>)
 8000922:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000932:	2200      	movs	r2, #0
 8000934:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000938:	2200      	movs	r2, #0
 800093a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800093c:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800093e:	2200      	movs	r2, #0
 8000940:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000944:	2210      	movs	r2, #16
 8000946:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800094a:	2201      	movs	r2, #1
 800094c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000950:	2202      	movs	r2, #2
 8000952:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000956:	2202      	movs	r2, #2
 8000958:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800095c:	2201      	movs	r2, #1
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000962:	2201      	movs	r2, #1
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000968:	2201      	movs	r2, #1
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800096e:	2201      	movs	r2, #1
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000974:	2200      	movs	r2, #0
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800097a:	2200      	movs	r2, #0
 800097c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000980:	2200      	movs	r2, #0
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000986:	2240      	movs	r2, #64	; 0x40
 8000988:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800098c:	2204      	movs	r2, #4
 800098e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 64;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000992:	2240      	movs	r2, #64	; 0x40
 8000994:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 8000998:	2204      	movs	r2, #4
 800099a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 64;
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009c8:	f002 f928 	bl	8002c1c <HAL_FDCAN_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80009d2:	f000 f9df 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x321;
 80009e6:	f240 3321 	movw	r3, #801	; 0x321
 80009ea:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80009ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009f0:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_FDCAN1_Init+0xf8>)
 80009f8:	f002 faee 	bl	8002fd8 <HAL_FDCAN_ConfigFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_FDCAN1_Init+0xee>
	  Error_Handler();
 8000a02:	f000 f9c7 	bl	8000d94 <Error_Handler>
    }


  /* USER CODE END FDCAN1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	24000224 	.word	0x24000224
 8000a14:	4000a000 	.word	0x4000a000

08000a18 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <MX_FDCAN2_Init+0xc4>)
 8000a20:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000a40:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000aae:	2220      	movs	r2, #32
 8000ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_FDCAN2_Init+0xc0>)
 8000ac6:	f002 f8a9 	bl	8002c1c <HAL_FDCAN_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000ad0:	f000 f960 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	240002c4 	.word	0x240002c4
 8000adc:	4000a400 	.word	0x4000a400

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <MX_USART3_UART_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b2a:	f006 f877 	bl	8006c1c <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f92e 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b3c:	f007 ff76 	bl	8008a2c <HAL_UARTEx_SetTxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f000 f925 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b4e:	f007 ffab 	bl	8008aa8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f000 f91c 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f007 ff2c 	bl	80089ba <HAL_UARTEx_DisableFifoMode>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f914 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24000364 	.word	0x24000364
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b84:	2209      	movs	r2, #9
 8000b86:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc0:	f003 f887 	bl	8003cd2 <HAL_PCD_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bca:	f000 f8e3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	240003f8 	.word	0x240003f8
 8000bd8:	40080000 	.word	0x40080000

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a60      	ldr	r2, [pc, #384]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b5e      	ldr	r3, [pc, #376]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a59      	ldr	r2, [pc, #356]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b56      	ldr	r3, [pc, #344]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a51      	ldr	r2, [pc, #324]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a4a      	ldr	r2, [pc, #296]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a42      	ldr	r2, [pc, #264]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b40      	ldr	r3, [pc, #256]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a3b      	ldr	r2, [pc, #236]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <MX_GPIO_Init+0x1a0>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cca:	482d      	ldr	r0, [pc, #180]	; (8000d80 <MX_GPIO_Init+0x1a4>)
 8000ccc:	f002 ffe8 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd6:	482b      	ldr	r0, [pc, #172]	; (8000d84 <MX_GPIO_Init+0x1a8>)
 8000cd8:	f002 ffe2 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4829      	ldr	r0, [pc, #164]	; (8000d88 <MX_GPIO_Init+0x1ac>)
 8000ce2:	f002 ffdd 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4824      	ldr	r0, [pc, #144]	; (8000d8c <MX_GPIO_Init+0x1b0>)
 8000cfc:	f002 fe20 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d00:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4819      	ldr	r0, [pc, #100]	; (8000d80 <MX_GPIO_Init+0x1a4>)
 8000d1a:	f002 fe11 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_GPIO_Init+0x1a8>)
 8000d38:	f002 fe02 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <MX_GPIO_Init+0x1b4>)
 8000d52:	f002 fdf5 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x1ac>)
 8000d6e:	f002 fde7 	bl	8003940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58020400 	.word	0x58020400
 8000d84:	58020c00 	.word	0x58020c00
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	58021800 	.word	0x58021800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9a:	b672      	cpsid	i
}
 8000d9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t eMessage[16];
  sprintf(eMessage, "Error\n");
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4905      	ldr	r1, [pc, #20]	; (8000db8 <Error_Handler+0x24>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f008 fa16 	bl	80091d4 <siprintf>
  HAL_UART_Transmit(&huart3, eMessage, sizeof(eMessage), HAL_MAX_DELAY);
 8000da8:	4639      	mov	r1, r7
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	2210      	movs	r2, #16
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <Error_Handler+0x28>)
 8000db2:	f005 ff83 	bl	8006cbc <HAL_UART_Transmit>
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <Error_Handler+0x22>
 8000db8:	08009b34 	.word	0x08009b34
 8000dbc:	24000364 	.word	0x24000364

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x30>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dcc:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x30>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x30>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a59      	ldr	r2, [pc, #356]	; (8000f78 <HAL_ETH_MspInit+0x184>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f040 80ab 	bne.w	8000f6e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1e:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e46:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e54:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5a:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e64:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a2a      	ldr	r2, [pc, #168]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eea:	2332      	movs	r3, #50	; 0x32
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efa:	230b      	movs	r3, #11
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	481e      	ldr	r0, [pc, #120]	; (8000f80 <HAL_ETH_MspInit+0x18c>)
 8000f06:	f002 fd1b 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f0a:	2386      	movs	r3, #134	; 0x86
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <HAL_ETH_MspInit+0x190>)
 8000f26:	f002 fd0b 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <HAL_ETH_MspInit+0x194>)
 8000f48:	f002 fcfa 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5e:	230b      	movs	r3, #11
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <HAL_ETH_MspInit+0x198>)
 8000f6a:	f002 fce9 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3738      	adds	r7, #56	; 0x38
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40028000 	.word	0x40028000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020800 	.word	0x58020800
 8000f84:	58020000 	.word	0x58020000
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	58021800 	.word	0x58021800

08000f90 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0bc      	sub	sp, #240	; 0xf0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	22c0      	movs	r2, #192	; 0xc0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f008 f92f 	bl	8009214 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a56      	ldr	r2, [pc, #344]	; (8001114 <HAL_FDCAN_MspInit+0x184>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d150      	bne.n	8001062 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fff3 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000fe4:	f7ff fed6 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <HAL_FDCAN_MspInit+0x188>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a4a      	ldr	r2, [pc, #296]	; (8001118 <HAL_FDCAN_MspInit+0x188>)
 8000ff0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <HAL_FDCAN_MspInit+0x188>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10e      	bne.n	8001018 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ffa:	4b48      	ldr	r3, [pc, #288]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 8000ffc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001000:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 800100c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b40      	ldr	r3, [pc, #256]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b3c      	ldr	r3, [pc, #240]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800104e:	2309      	movs	r3, #9
 8001050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001054:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001058:	4619      	mov	r1, r3
 800105a:	4831      	ldr	r0, [pc, #196]	; (8001120 <HAL_FDCAN_MspInit+0x190>)
 800105c:	f002 fc70 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001060:	e054      	b.n	800110c <HAL_FDCAN_MspInit+0x17c>
  else if(hfdcan->Instance==FDCAN2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a2f      	ldr	r2, [pc, #188]	; (8001124 <HAL_FDCAN_MspInit+0x194>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d14f      	bne.n	800110c <HAL_FDCAN_MspInit+0x17c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800106c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800107c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	4618      	mov	r0, r3
 8001086:	f003 ff9d 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 8001090:	f7ff fe80 	bl	8000d94 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_FDCAN_MspInit+0x188>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_FDCAN_MspInit+0x188>)
 800109c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <HAL_FDCAN_MspInit+0x188>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10e      	bne.n	80010c4 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 80010a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 80010b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_FDCAN_MspInit+0x18c>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80010fa:	2309      	movs	r3, #9
 80010fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001104:	4619      	mov	r1, r3
 8001106:	4808      	ldr	r0, [pc, #32]	; (8001128 <HAL_FDCAN_MspInit+0x198>)
 8001108:	f002 fc1a 	bl	8003940 <HAL_GPIO_Init>
}
 800110c:	bf00      	nop
 800110e:	37f0      	adds	r7, #240	; 0xf0
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	4000a000 	.word	0x4000a000
 8001118:	24000968 	.word	0x24000968
 800111c:	58024400 	.word	0x58024400
 8001120:	58020c00 	.word	0x58020c00
 8001124:	4000a400 	.word	0x4000a400
 8001128:	58020400 	.word	0x58020400

0800112c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0ba      	sub	sp, #232	; 0xe8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	22c0      	movs	r2, #192	; 0xc0
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f008 f861 	bl	8009214 <memset>
  if(huart->Instance==USART3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <HAL_UART_MspInit+0xd8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d14e      	bne.n	80011fa <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115c:	f04f 0202 	mov.w	r2, #2
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4618      	mov	r0, r3
 8001174:	f003 ff26 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800117e:	f7ff fe09 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_UART_MspInit+0xdc>)
 8001184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001188:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_UART_MspInit+0xdc>)
 800118a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_UART_MspInit+0xdc>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_UART_MspInit+0xdc>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_UART_MspInit+0xdc>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_UART_MspInit+0xdc>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d8:	2307      	movs	r3, #7
 80011da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <HAL_UART_MspInit+0xe0>)
 80011e6:	f002 fbab 	bl	8003940 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2027      	movs	r0, #39	; 0x27
 80011f0:	f000 fb57 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011f4:	2027      	movs	r0, #39	; 0x27
 80011f6:	f000 fb6e 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	37e8      	adds	r7, #232	; 0xe8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004800 	.word	0x40004800
 8001208:	58024400 	.word	0x58024400
 800120c:	58020c00 	.word	0x58020c00

08001210 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0ba      	sub	sp, #232	; 0xe8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	22c0      	movs	r2, #192	; 0xc0
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f007 ffef 	bl	8009214 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_PCD_MspInit+0xec>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d159      	bne.n	80012f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001240:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800124c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f003 feb3 	bl	8004fc4 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001264:	f7ff fd96 	bl	8000d94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001268:	f002 feb6 	bl	8003fd8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800128a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800128e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012a4:	230a      	movs	r3, #10
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4814      	ldr	r0, [pc, #80]	; (8001304 <HAL_PCD_MspInit+0xf4>)
 80012b2:	f002 fb45 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <HAL_PCD_MspInit+0xf4>)
 80012d2:	f002 fb35 	bl	8003940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 80012d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 80012de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_PCD_MspInit+0xf0>)
 80012e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	37e8      	adds	r7, #232	; 0xe8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40080000 	.word	0x40080000
 8001300:	58024400 	.word	0x58024400
 8001304:	58020000 	.word	0x58020000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 f966 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART3_IRQHandler+0x10>)
 8001362:	f005 fdcd 	bl	8006f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000364 	.word	0x24000364

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f007 ff40 	bl	8009224 <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	24080000 	.word	0x24080000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	2400096c 	.word	0x2400096c
 80013d8:	24000ac0 	.word	0x24000ac0

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <SystemInit+0xe4>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <SystemInit+0xe4>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <SystemInit+0xe8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	d807      	bhi.n	800140c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <SystemInit+0xe8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 030f 	bic.w	r3, r3, #15
 8001404:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <SystemInit+0xe8>)
 8001406:	f043 0307 	orr.w	r3, r3, #7
 800140a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <SystemInit+0xec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <SystemInit+0xec>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <SystemInit+0xec>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <SystemInit+0xec>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4929      	ldr	r1, [pc, #164]	; (80014c8 <SystemInit+0xec>)
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <SystemInit+0xf0>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <SystemInit+0xe8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <SystemInit+0xe8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 030f 	bic.w	r3, r3, #15
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <SystemInit+0xe8>)
 8001440:	f043 0307 	orr.w	r3, r3, #7
 8001444:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <SystemInit+0xec>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <SystemInit+0xec>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <SystemInit+0xec>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <SystemInit+0xec>)
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <SystemInit+0xf4>)
 800145c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <SystemInit+0xec>)
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <SystemInit+0xf8>)
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <SystemInit+0xec>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <SystemInit+0xfc>)
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <SystemInit+0xec>)
 800146c:	2200      	movs	r2, #0
 800146e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <SystemInit+0xec>)
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <SystemInit+0xfc>)
 8001474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <SystemInit+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <SystemInit+0xec>)
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <SystemInit+0xfc>)
 8001480:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <SystemInit+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <SystemInit+0xec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <SystemInit+0xec>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <SystemInit+0xec>)
 8001496:	2200      	movs	r2, #0
 8001498:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <SystemInit+0x100>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <SystemInit+0x104>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014a6:	d202      	bcs.n	80014ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <SystemInit+0x108>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <SystemInit+0x10c>)
 80014b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	52002000 	.word	0x52002000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d0:	02020200 	.word	0x02020200
 80014d4:	01ff0000 	.word	0x01ff0000
 80014d8:	01010280 	.word	0x01010280
 80014dc:	5c001000 	.word	0x5c001000
 80014e0:	ffff0000 	.word	0xffff0000
 80014e4:	51008108 	.word	0x51008108
 80014e8:	52004000 	.word	0x52004000

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f7ff ff74 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f007 fe89 	bl	8009230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff f8ad 	bl	800067c <main>
  bx  lr
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001528:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800152c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001530:	08009c14 	.word	0x08009c14
  ldr r2, =_sbss
 8001534:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001538:	24000abc 	.word	0x24000abc

0800153c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC3_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f9a0 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800154c:	f003 fb64 	bl	8004c18 <HAL_RCC_GetSysClockFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4913      	ldr	r1, [pc, #76]	; (80015ac <HAL_Init+0x6c>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_Init+0x68>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_Init+0x6c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_Init+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f814 	bl	80015b8 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e002      	b.n	80015a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff fc11 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400
 80015ac:	08009b88 	.word	0x08009b88
 80015b0:	24000004 	.word	0x24000004
 80015b4:	24000000 	.word	0x24000000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_InitTick+0x60>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e021      	b.n	8001610 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_InitTick+0x64>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_InitTick+0x60>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f985 	bl	80018f2 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 f94f 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x68>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400000c 	.word	0x2400000c
 800161c:	24000000 	.word	0x24000000
 8001620:	24000008 	.word	0x24000008

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2400000c 	.word	0x2400000c
 8001648:	24000970 	.word	0x24000970

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	24000970 	.word	0x24000970

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2400000c 	.word	0x2400000c

080016ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetREVID+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0c1b      	lsrs	r3, r3, #16
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	5c001000 	.word	0x5c001000

080016c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000400 	.word	0x58000400

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <__NVIC_SetPriorityGrouping+0x40>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	4313      	orrs	r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x40>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00
 8001730:	05fa0000 	.word	0x05fa0000

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff40 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff33 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa4 	bl	8001848 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff fe9a 	bl	800164c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e2dc      	b.n	8001ede <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d008      	beq.n	8001942 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e2cd      	b.n	8001ede <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a76      	ldr	r2, [pc, #472]	; (8001b20 <HAL_DMA_Abort+0x214>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d04a      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <HAL_DMA_Abort+0x218>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d045      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a73      	ldr	r2, [pc, #460]	; (8001b28 <HAL_DMA_Abort+0x21c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d040      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a71      	ldr	r2, [pc, #452]	; (8001b2c <HAL_DMA_Abort+0x220>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d03b      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a70      	ldr	r2, [pc, #448]	; (8001b30 <HAL_DMA_Abort+0x224>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d036      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_DMA_Abort+0x228>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d031      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6d      	ldr	r2, [pc, #436]	; (8001b38 <HAL_DMA_Abort+0x22c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d02c      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6b      	ldr	r2, [pc, #428]	; (8001b3c <HAL_DMA_Abort+0x230>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d027      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6a      	ldr	r2, [pc, #424]	; (8001b40 <HAL_DMA_Abort+0x234>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a68      	ldr	r2, [pc, #416]	; (8001b44 <HAL_DMA_Abort+0x238>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01d      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a67      	ldr	r2, [pc, #412]	; (8001b48 <HAL_DMA_Abort+0x23c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d018      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <HAL_DMA_Abort+0x240>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a64      	ldr	r2, [pc, #400]	; (8001b50 <HAL_DMA_Abort+0x244>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00e      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a62      	ldr	r2, [pc, #392]	; (8001b54 <HAL_DMA_Abort+0x248>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d009      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a61      	ldr	r2, [pc, #388]	; (8001b58 <HAL_DMA_Abort+0x24c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d004      	beq.n	80019e2 <HAL_DMA_Abort+0xd6>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a5f      	ldr	r2, [pc, #380]	; (8001b5c <HAL_DMA_Abort+0x250>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_DMA_Abort+0xda>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_Abort+0xdc>
 80019e6:	2300      	movs	r3, #0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 021e 	bic.w	r2, r2, #30
 80019fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e00a      	b.n	8001a2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 020e 	bic.w	r2, r2, #14
 8001a22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a3c      	ldr	r2, [pc, #240]	; (8001b20 <HAL_DMA_Abort+0x214>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d072      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <HAL_DMA_Abort+0x218>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d06d      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <HAL_DMA_Abort+0x21c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d068      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <HAL_DMA_Abort+0x220>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d063      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a36      	ldr	r2, [pc, #216]	; (8001b30 <HAL_DMA_Abort+0x224>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d05e      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a34      	ldr	r2, [pc, #208]	; (8001b34 <HAL_DMA_Abort+0x228>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d059      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_DMA_Abort+0x22c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d054      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_DMA_Abort+0x230>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d04f      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <HAL_DMA_Abort+0x234>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d04a      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2e      	ldr	r2, [pc, #184]	; (8001b44 <HAL_DMA_Abort+0x238>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d045      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_DMA_Abort+0x23c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d040      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2b      	ldr	r2, [pc, #172]	; (8001b4c <HAL_DMA_Abort+0x240>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d03b      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2a      	ldr	r2, [pc, #168]	; (8001b50 <HAL_DMA_Abort+0x244>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d036      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <HAL_DMA_Abort+0x248>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d031      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_DMA_Abort+0x24c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d02c      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <HAL_DMA_Abort+0x250>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d027      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_DMA_Abort+0x254>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d022      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_DMA_Abort+0x258>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01d      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_DMA_Abort+0x25c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d018      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_DMA_Abort+0x260>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_DMA_Abort+0x264>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <HAL_DMA_Abort+0x268>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_DMA_Abort+0x26c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d004      	beq.n	8001b1a <HAL_DMA_Abort+0x20e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_DMA_Abort+0x270>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d132      	bne.n	8001b80 <HAL_DMA_Abort+0x274>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e031      	b.n	8001b82 <HAL_DMA_Abort+0x276>
 8001b1e:	bf00      	nop
 8001b20:	40020010 	.word	0x40020010
 8001b24:	40020028 	.word	0x40020028
 8001b28:	40020040 	.word	0x40020040
 8001b2c:	40020058 	.word	0x40020058
 8001b30:	40020070 	.word	0x40020070
 8001b34:	40020088 	.word	0x40020088
 8001b38:	400200a0 	.word	0x400200a0
 8001b3c:	400200b8 	.word	0x400200b8
 8001b40:	40020410 	.word	0x40020410
 8001b44:	40020428 	.word	0x40020428
 8001b48:	40020440 	.word	0x40020440
 8001b4c:	40020458 	.word	0x40020458
 8001b50:	40020470 	.word	0x40020470
 8001b54:	40020488 	.word	0x40020488
 8001b58:	400204a0 	.word	0x400204a0
 8001b5c:	400204b8 	.word	0x400204b8
 8001b60:	58025408 	.word	0x58025408
 8001b64:	5802541c 	.word	0x5802541c
 8001b68:	58025430 	.word	0x58025430
 8001b6c:	58025444 	.word	0x58025444
 8001b70:	58025458 	.word	0x58025458
 8001b74:	5802546c 	.word	0x5802546c
 8001b78:	58025480 	.word	0x58025480
 8001b7c:	58025494 	.word	0x58025494
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_DMA_Abort+0x444>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d04a      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <HAL_DMA_Abort+0x448>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d045      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6a      	ldr	r2, [pc, #424]	; (8001d58 <HAL_DMA_Abort+0x44c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d040      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a68      	ldr	r2, [pc, #416]	; (8001d5c <HAL_DMA_Abort+0x450>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d03b      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_DMA_Abort+0x454>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d036      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_DMA_Abort+0x458>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d031      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a64      	ldr	r2, [pc, #400]	; (8001d68 <HAL_DMA_Abort+0x45c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d02c      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a62      	ldr	r2, [pc, #392]	; (8001d6c <HAL_DMA_Abort+0x460>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d027      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <HAL_DMA_Abort+0x464>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a5f      	ldr	r2, [pc, #380]	; (8001d74 <HAL_DMA_Abort+0x468>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01d      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <HAL_DMA_Abort+0x46c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d018      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a5c      	ldr	r2, [pc, #368]	; (8001d7c <HAL_DMA_Abort+0x470>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_DMA_Abort+0x474>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a59      	ldr	r2, [pc, #356]	; (8001d84 <HAL_DMA_Abort+0x478>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_DMA_Abort+0x47c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d004      	beq.n	8001c36 <HAL_DMA_Abort+0x32a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_DMA_Abort+0x480>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d108      	bne.n	8001c48 <HAL_DMA_Abort+0x33c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e007      	b.n	8001c58 <HAL_DMA_Abort+0x34c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c58:	e013      	b.n	8001c82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5a:	f7ff fcf7 	bl	800164c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d90c      	bls.n	8001c82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e12d      	b.n	8001ede <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e5      	bne.n	8001c5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <HAL_DMA_Abort+0x444>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d04a      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <HAL_DMA_Abort+0x448>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d045      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <HAL_DMA_Abort+0x44c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d040      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <HAL_DMA_Abort+0x450>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d03b      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <HAL_DMA_Abort+0x454>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d036      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <HAL_DMA_Abort+0x458>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d031      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_DMA_Abort+0x45c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d02c      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <HAL_DMA_Abort+0x460>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d027      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_DMA_Abort+0x464>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_DMA_Abort+0x468>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01d      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_DMA_Abort+0x46c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d018      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_DMA_Abort+0x470>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_DMA_Abort+0x474>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00e      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_DMA_Abort+0x478>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_DMA_Abort+0x47c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d004      	beq.n	8001d2e <HAL_DMA_Abort+0x422>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_DMA_Abort+0x480>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_DMA_Abort+0x426>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_DMA_Abort+0x428>
 8001d32:	2300      	movs	r3, #0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02b      	beq.n	8001d90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	223f      	movs	r2, #63	; 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	e02a      	b.n	8001da6 <HAL_DMA_Abort+0x49a>
 8001d50:	40020010 	.word	0x40020010
 8001d54:	40020028 	.word	0x40020028
 8001d58:	40020040 	.word	0x40020040
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	40020070 	.word	0x40020070
 8001d64:	40020088 	.word	0x40020088
 8001d68:	400200a0 	.word	0x400200a0
 8001d6c:	400200b8 	.word	0x400200b8
 8001d70:	40020410 	.word	0x40020410
 8001d74:	40020428 	.word	0x40020428
 8001d78:	40020440 	.word	0x40020440
 8001d7c:	40020458 	.word	0x40020458
 8001d80:	40020470 	.word	0x40020470
 8001d84:	40020488 	.word	0x40020488
 8001d88:	400204a0 	.word	0x400204a0
 8001d8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2201      	movs	r2, #1
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_DMA_Abort+0x5dc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d072      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_DMA_Abort+0x5e0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d06d      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4c      	ldr	r2, [pc, #304]	; (8001ef0 <HAL_DMA_Abort+0x5e4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d068      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a4a      	ldr	r2, [pc, #296]	; (8001ef4 <HAL_DMA_Abort+0x5e8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d063      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_DMA_Abort+0x5ec>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d05e      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a47      	ldr	r2, [pc, #284]	; (8001efc <HAL_DMA_Abort+0x5f0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d059      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a46      	ldr	r2, [pc, #280]	; (8001f00 <HAL_DMA_Abort+0x5f4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d054      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <HAL_DMA_Abort+0x5f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04f      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_DMA_Abort+0x5fc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d04a      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a41      	ldr	r2, [pc, #260]	; (8001f0c <HAL_DMA_Abort+0x600>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d045      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a40      	ldr	r2, [pc, #256]	; (8001f10 <HAL_DMA_Abort+0x604>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d040      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3e      	ldr	r2, [pc, #248]	; (8001f14 <HAL_DMA_Abort+0x608>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d03b      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3d      	ldr	r2, [pc, #244]	; (8001f18 <HAL_DMA_Abort+0x60c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d036      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <HAL_DMA_Abort+0x610>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d031      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_DMA_Abort+0x614>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d02c      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a38      	ldr	r2, [pc, #224]	; (8001f24 <HAL_DMA_Abort+0x618>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d027      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a37      	ldr	r2, [pc, #220]	; (8001f28 <HAL_DMA_Abort+0x61c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d022      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <HAL_DMA_Abort+0x620>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01d      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <HAL_DMA_Abort+0x624>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d018      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <HAL_DMA_Abort+0x628>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_DMA_Abort+0x62c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00e      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <HAL_DMA_Abort+0x630>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d009      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <HAL_DMA_Abort+0x634>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <HAL_DMA_Abort+0x58a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2c      	ldr	r2, [pc, #176]	; (8001f44 <HAL_DMA_Abort+0x638>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_DMA_Abort+0x58e>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_DMA_Abort+0x590>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d015      	beq.n	8001ecc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ea8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001eca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020010 	.word	0x40020010
 8001eec:	40020028 	.word	0x40020028
 8001ef0:	40020040 	.word	0x40020040
 8001ef4:	40020058 	.word	0x40020058
 8001ef8:	40020070 	.word	0x40020070
 8001efc:	40020088 	.word	0x40020088
 8001f00:	400200a0 	.word	0x400200a0
 8001f04:	400200b8 	.word	0x400200b8
 8001f08:	40020410 	.word	0x40020410
 8001f0c:	40020428 	.word	0x40020428
 8001f10:	40020440 	.word	0x40020440
 8001f14:	40020458 	.word	0x40020458
 8001f18:	40020470 	.word	0x40020470
 8001f1c:	40020488 	.word	0x40020488
 8001f20:	400204a0 	.word	0x400204a0
 8001f24:	400204b8 	.word	0x400204b8
 8001f28:	58025408 	.word	0x58025408
 8001f2c:	5802541c 	.word	0x5802541c
 8001f30:	58025430 	.word	0x58025430
 8001f34:	58025444 	.word	0x58025444
 8001f38:	58025458 	.word	0x58025458
 8001f3c:	5802546c 	.word	0x5802546c
 8001f40:	58025480 	.word	0x58025480
 8001f44:	58025494 	.word	0x58025494

08001f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e237      	b.n	80023ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e22c      	b.n	80023ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5c      	ldr	r2, [pc, #368]	; (80020e8 <HAL_DMA_Abort_IT+0x1a0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	; (80020ec <HAL_DMA_Abort_IT+0x1a4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a59      	ldr	r2, [pc, #356]	; (80020f0 <HAL_DMA_Abort_IT+0x1a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <HAL_DMA_Abort_IT+0x1ac>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_DMA_Abort_IT+0x1b0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_DMA_Abort_IT+0x1b4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a53      	ldr	r2, [pc, #332]	; (8002100 <HAL_DMA_Abort_IT+0x1b8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_DMA_Abort_IT+0x1bc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a50      	ldr	r2, [pc, #320]	; (8002108 <HAL_DMA_Abort_IT+0x1c0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	; (800210c <HAL_DMA_Abort_IT+0x1c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_DMA_Abort_IT+0x1c8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_DMA_Abort_IT+0x1cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_DMA_Abort_IT+0x1d0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_DMA_Abort_IT+0x1d4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_DMA_Abort_IT+0x1d8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a46      	ldr	r2, [pc, #280]	; (8002124 <HAL_DMA_Abort_IT+0x1dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Abort_IT+0xcc>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_DMA_Abort_IT+0xce>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8086 	beq.w	8002128 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2204      	movs	r2, #4
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <HAL_DMA_Abort_IT+0x1a0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d04a      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2e      	ldr	r2, [pc, #184]	; (80020ec <HAL_DMA_Abort_IT+0x1a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d045      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <HAL_DMA_Abort_IT+0x1a8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d040      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <HAL_DMA_Abort_IT+0x1ac>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d03b      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <HAL_DMA_Abort_IT+0x1b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d036      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_DMA_Abort_IT+0x1b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_DMA_Abort_IT+0x1b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02c      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_DMA_Abort_IT+0x1bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d027      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_DMA_Abort_IT+0x1c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d022      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Abort_IT+0x1c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01d      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_DMA_Abort_IT+0x1c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d018      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_DMA_Abort_IT+0x1cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_DMA_Abort_IT+0x1d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00e      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_DMA_Abort_IT+0x1d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_DMA_Abort_IT+0x1d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_DMA_Abort_IT+0x1dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <HAL_DMA_Abort_IT+0x18e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e178      	b.n	80023c8 <HAL_DMA_Abort_IT+0x480>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e16f      	b.n	80023c8 <HAL_DMA_Abort_IT+0x480>
 80020e8:	40020010 	.word	0x40020010
 80020ec:	40020028 	.word	0x40020028
 80020f0:	40020040 	.word	0x40020040
 80020f4:	40020058 	.word	0x40020058
 80020f8:	40020070 	.word	0x40020070
 80020fc:	40020088 	.word	0x40020088
 8002100:	400200a0 	.word	0x400200a0
 8002104:	400200b8 	.word	0x400200b8
 8002108:	40020410 	.word	0x40020410
 800210c:	40020428 	.word	0x40020428
 8002110:	40020440 	.word	0x40020440
 8002114:	40020458 	.word	0x40020458
 8002118:	40020470 	.word	0x40020470
 800211c:	40020488 	.word	0x40020488
 8002120:	400204a0 	.word	0x400204a0
 8002124:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 020e 	bic.w	r2, r2, #14
 8002136:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6c      	ldr	r2, [pc, #432]	; (80022f0 <HAL_DMA_Abort_IT+0x3a8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d04a      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6b      	ldr	r2, [pc, #428]	; (80022f4 <HAL_DMA_Abort_IT+0x3ac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d045      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d040      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a68      	ldr	r2, [pc, #416]	; (80022fc <HAL_DMA_Abort_IT+0x3b4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d03b      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a66      	ldr	r2, [pc, #408]	; (8002300 <HAL_DMA_Abort_IT+0x3b8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d036      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_DMA_Abort_IT+0x3bc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d031      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a63      	ldr	r2, [pc, #396]	; (8002308 <HAL_DMA_Abort_IT+0x3c0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02c      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a62      	ldr	r2, [pc, #392]	; (800230c <HAL_DMA_Abort_IT+0x3c4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d027      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a60      	ldr	r2, [pc, #384]	; (8002310 <HAL_DMA_Abort_IT+0x3c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d022      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5f      	ldr	r2, [pc, #380]	; (8002314 <HAL_DMA_Abort_IT+0x3cc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d01d      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_DMA_Abort_IT+0x3d0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d018      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_DMA_Abort_IT+0x3d4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <HAL_DMA_Abort_IT+0x3d8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00e      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a59      	ldr	r2, [pc, #356]	; (8002324 <HAL_DMA_Abort_IT+0x3dc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_DMA_Abort_IT+0x3e0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_DMA_Abort_IT+0x3e4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <HAL_DMA_Abort_IT+0x2a2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e007      	b.n	80021fa <HAL_DMA_Abort_IT+0x2b2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a3c      	ldr	r2, [pc, #240]	; (80022f0 <HAL_DMA_Abort_IT+0x3a8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d072      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3a      	ldr	r2, [pc, #232]	; (80022f4 <HAL_DMA_Abort_IT+0x3ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d06d      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a39      	ldr	r2, [pc, #228]	; (80022f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d068      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a37      	ldr	r2, [pc, #220]	; (80022fc <HAL_DMA_Abort_IT+0x3b4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d063      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a36      	ldr	r2, [pc, #216]	; (8002300 <HAL_DMA_Abort_IT+0x3b8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a34      	ldr	r2, [pc, #208]	; (8002304 <HAL_DMA_Abort_IT+0x3bc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d059      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a33      	ldr	r2, [pc, #204]	; (8002308 <HAL_DMA_Abort_IT+0x3c0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d054      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_DMA_Abort_IT+0x3c4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04f      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_DMA_Abort_IT+0x3c8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d04a      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <HAL_DMA_Abort_IT+0x3cc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d045      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <HAL_DMA_Abort_IT+0x3d0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d040      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a2b      	ldr	r2, [pc, #172]	; (800231c <HAL_DMA_Abort_IT+0x3d4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d03b      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <HAL_DMA_Abort_IT+0x3d8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d036      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_DMA_Abort_IT+0x3dc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d031      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_DMA_Abort_IT+0x3e0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d02c      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <HAL_DMA_Abort_IT+0x3e4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d027      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_DMA_Abort_IT+0x3e8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_DMA_Abort_IT+0x3ec>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01d      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_DMA_Abort_IT+0x3f0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d018      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_DMA_Abort_IT+0x3f4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_DMA_Abort_IT+0x3f8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00e      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_DMA_Abort_IT+0x3fc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_DMA_Abort_IT+0x400>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_DMA_Abort_IT+0x404>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d132      	bne.n	8002350 <HAL_DMA_Abort_IT+0x408>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e031      	b.n	8002352 <HAL_DMA_Abort_IT+0x40a>
 80022ee:	bf00      	nop
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
 8002330:	58025408 	.word	0x58025408
 8002334:	5802541c 	.word	0x5802541c
 8002338:	58025430 	.word	0x58025430
 800233c:	58025444 	.word	0x58025444
 8002340:	58025458 	.word	0x58025458
 8002344:	5802546c 	.word	0x5802546c
 8002348:	58025480 	.word	0x58025480
 800234c:	58025494 	.word	0x58025494
 8002350:	2300      	movs	r3, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2201      	movs	r2, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002384:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00c      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0cf      	b.n	8002586 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2223      	movs	r2, #35	; 0x23
 80023f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7fe fcfb 	bl	8000df4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_ETH_Init+0x1bc>)
 8002400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002404:	4a62      	ldr	r2, [pc, #392]	; (8002590 <HAL_ETH_Init+0x1bc>)
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800240e:	4b60      	ldr	r3, [pc, #384]	; (8002590 <HAL_ETH_Init+0x1bc>)
 8002410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7a1b      	ldrb	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff f94d 	bl	80016c4 <HAL_SYSCFG_ETHInterfaceSelect>
 800242a:	e003      	b.n	8002434 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800242c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002430:	f7ff f948 	bl	80016c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_ETH_Init+0x1c0>)
 8002436:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800244e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002450:	f7ff f8fc 	bl	800164c <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002456:	e011      	b.n	800247c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002458:	f7ff f8f8 	bl	800164c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002466:	d909      	bls.n	800247c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2204      	movs	r2, #4
 800246c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	22e0      	movs	r2, #224	; 0xe0
 8002474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e084      	b.n	8002586 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e4      	bne.n	8002458 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f886 	bl	80025a0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002494:	f002 fd3a 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8002498:	4603      	mov	r3, r0
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_ETH_Init+0x1c4>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9a      	lsrs	r2, r3, #18
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3a01      	subs	r2, #1
 80024a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa71 	bl	8002994 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80024be:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	22e0      	movs	r2, #224	; 0xe0
 80024ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e049      	b.n	8002586 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_ETH_Init+0x1c8>)
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6952      	ldr	r2, [r2, #20]
 8002506:	0051      	lsls	r1, r2, #1
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	430b      	orrs	r3, r1
 800250e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002512:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fad9 	bl	8002ace <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb1f 	bl	8002b60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	3305      	adds	r3, #5
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	3303      	adds	r3, #3
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	061a      	lsls	r2, r3, #24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	3302      	adds	r3, #2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	3301      	adds	r3, #1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002560:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800256e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002570:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2210      	movs	r2, #16
 8002580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	58024400 	.word	0x58024400
 8002594:	58000400 	.word	0x58000400
 8002598:	431bde83 	.word	0x431bde83
 800259c:	ffff8001 	.word	0xffff8001

080025a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025ba:	f002 fca7 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 80025be:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d908      	bls.n	80025da <HAL_ETH_SetMDIOClockRange+0x3a>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d804      	bhi.n	80025da <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e027      	b.n	800262a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d908      	bls.n	80025f4 <HAL_ETH_SetMDIOClockRange+0x54>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d204      	bcs.n	80025f4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e01a      	b.n	800262a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d303      	bcc.n	8002604 <HAL_ETH_SetMDIOClockRange+0x64>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d911      	bls.n	8002628 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d908      	bls.n	800261e <HAL_ETH_SetMDIOClockRange+0x7e>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d804      	bhi.n	800261e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e005      	b.n	800262a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e000      	b.n	800262a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002628:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	01312cff 	.word	0x01312cff
 8002640:	02160ebf 	.word	0x02160ebf
 8002644:	03938700 	.word	0x03938700
 8002648:	05f5e0ff 	.word	0x05f5e0ff
 800264c:	08f0d17f 	.word	0x08f0d17f

08002650 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	791b      	ldrb	r3, [r3, #4]
 8002668:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800266a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	7b1b      	ldrb	r3, [r3, #12]
 8002670:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	7b5b      	ldrb	r3, [r3, #13]
 8002678:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800267a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7b9b      	ldrb	r3, [r3, #14]
 8002680:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	7bdb      	ldrb	r3, [r3, #15]
 8002688:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800268a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	7c12      	ldrb	r2, [r2, #16]
 8002690:	2a00      	cmp	r2, #0
 8002692:	d102      	bne.n	800269a <ETH_SetMACConfig+0x4a>
 8002694:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002698:	e000      	b.n	800269c <ETH_SetMACConfig+0x4c>
 800269a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800269c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	7c52      	ldrb	r2, [r2, #17]
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	d102      	bne.n	80026ac <ETH_SetMACConfig+0x5c>
 80026a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026aa:	e000      	b.n	80026ae <ETH_SetMACConfig+0x5e>
 80026ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	7c9b      	ldrb	r3, [r3, #18]
 80026b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80026bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80026c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	7f1b      	ldrb	r3, [r3, #28]
 80026c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80026ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	7f5b      	ldrb	r3, [r3, #29]
 80026d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80026d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	7f92      	ldrb	r2, [r2, #30]
 80026d8:	2a00      	cmp	r2, #0
 80026da:	d102      	bne.n	80026e2 <ETH_SetMACConfig+0x92>
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	e000      	b.n	80026e4 <ETH_SetMACConfig+0x94>
 80026e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7fdb      	ldrb	r3, [r3, #31]
 80026ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d102      	bne.n	80026fe <ETH_SetMACConfig+0xae>
 80026f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fc:	e000      	b.n	8002700 <ETH_SetMACConfig+0xb0>
 80026fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002700:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002706:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800270e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002710:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b56      	ldr	r3, [pc, #344]	; (800287c <ETH_SetMACConfig+0x22c>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	430b      	orrs	r3, r1
 800272c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800273a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800273c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002744:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002746:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800274e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002750:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002758:	2a00      	cmp	r2, #0
 800275a:	d102      	bne.n	8002762 <ETH_SetMACConfig+0x112>
 800275c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002760:	e000      	b.n	8002764 <ETH_SetMACConfig+0x114>
 8002762:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002764:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4b42      	ldr	r3, [pc, #264]	; (8002880 <ETH_SetMACConfig+0x230>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	430b      	orrs	r3, r1
 8002780:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002788:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <ETH_SetMACConfig+0x234>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	d101      	bne.n	80027c2 <ETH_SetMACConfig+0x172>
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	e000      	b.n	80027c4 <ETH_SetMACConfig+0x174>
 80027c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80027c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80027da:	4013      	ands	r3, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80027f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f023 0103 	bic.w	r1, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	430a      	orrs	r2, r1
 800280e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800281a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002836:	2a00      	cmp	r2, #0
 8002838:	d101      	bne.n	800283e <ETH_SetMACConfig+0x1ee>
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	e000      	b.n	8002840 <ETH_SetMACConfig+0x1f0>
 800283e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002840:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002848:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800284a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002852:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002860:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	430a      	orrs	r2, r1
 800286c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	00048083 	.word	0x00048083
 8002880:	c0f88000 	.word	0xc0f88000
 8002884:	fffffef0 	.word	0xfffffef0

08002888 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b38      	ldr	r3, [pc, #224]	; (8002980 <ETH_SetDMAConfig+0xf8>)
 800289e:	4013      	ands	r3, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	791b      	ldrb	r3, [r3, #4]
 80028b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <ETH_SetDMAConfig+0xfc>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	430b      	orrs	r3, r1
 80028dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028e0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	7b5b      	ldrb	r3, [r3, #13]
 80028e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <ETH_SetDMAConfig+0x100>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	430b      	orrs	r3, r1
 8002908:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800290c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	7d1b      	ldrb	r3, [r3, #20]
 8002918:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800291a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7f5b      	ldrb	r3, [r3, #29]
 8002920:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <ETH_SetDMAConfig+0x104>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	430b      	orrs	r3, r1
 800293e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002942:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	7f1b      	ldrb	r3, [r3, #28]
 800294a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <ETH_SetDMAConfig+0x108>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	430b      	orrs	r3, r1
 800296c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002970:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	ffff87fd 	.word	0xffff87fd
 8002984:	ffff2ffe 	.word	0xffff2ffe
 8002988:	fffec000 	.word	0xfffec000
 800298c:	ffc0efef 	.word	0xffc0efef
 8002990:	7fc0ffff 	.word	0x7fc0ffff

08002994 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b0a4      	sub	sp, #144	; 0x90
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029a2:	2300      	movs	r3, #0
 80029a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80029dc:	2300      	movs	r3, #0
 80029de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80029f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029f8:	2300      	movs	r3, #0
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a16:	2300      	movs	r3, #0
 8002a18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a50:	2302      	movs	r3, #2
 8002a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fde6 	bl	8002650 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aa2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002aa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002ab4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fee1 	bl	8002888 <ETH_SetDMAConfig>
}
 8002ac6:	bf00      	nop
 8002ac8:	3790      	adds	r7, #144	; 0x90
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e01d      	b.n	8002b18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	3206      	adds	r2, #6
 8002b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d9de      	bls.n	8002adc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	e023      	b.n	8002bb6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	3212      	adds	r2, #18
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d9d8      	bls.n	8002b6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be2:	461a      	mov	r2, r3
 8002be4:	2303      	movs	r3, #3
 8002be6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b098      	sub	sp, #96	; 0x60
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002c24:	4a84      	ldr	r2, [pc, #528]	; (8002e38 <HAL_FDCAN_Init+0x21c>)
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	224c      	movs	r2, #76	; 0x4c
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f006 fb24 	bl	800927c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e1c6      	b.n	8002fcc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7e      	ldr	r2, [pc, #504]	; (8002e3c <HAL_FDCAN_Init+0x220>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d106      	bne.n	8002c56 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe f990 	bl	8000f90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0210 	bic.w	r2, r2, #16
 8002c7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe fce4 	bl	800164c <HAL_GetTick>
 8002c84:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c86:	e014      	b.n	8002cb2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c88:	f7fe fce0 	bl	800164c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d90d      	bls.n	8002cb2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e18c      	b.n	8002fcc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d0e3      	beq.n	8002c88 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd0:	f7fe fcbc 	bl	800164c <HAL_GetTick>
 8002cd4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cd6:	e014      	b.n	8002d02 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cd8:	f7fe fcb8 	bl	800164c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b0a      	cmp	r3, #10
 8002ce4:	d90d      	bls.n	8002d02 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e164      	b.n	8002fcc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0e3      	beq.n	8002cd8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0202 	orr.w	r2, r2, #2
 8002d1e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7c1b      	ldrb	r3, [r3, #16]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d36:	619a      	str	r2, [r3, #24]
 8002d38:	e007      	b.n	8002d4a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d48:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7c5b      	ldrb	r3, [r3, #17]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d60:	619a      	str	r2, [r3, #24]
 8002d62:	e007      	b.n	8002d74 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d72:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7c9b      	ldrb	r3, [r3, #18]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d108      	bne.n	8002d8e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d8a:	619a      	str	r2, [r3, #24]
 8002d8c:	e007      	b.n	8002d9e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d9c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002dc2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0210 	bic.w	r2, r2, #16
 8002dd2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0204 	orr.w	r2, r2, #4
 8002dea:	619a      	str	r2, [r3, #24]
 8002dec:	e030      	b.n	8002e50 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02c      	beq.n	8002e50 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d020      	beq.n	8002e40 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e0c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d114      	bne.n	8002e50 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	e00b      	b.n	8002e50 <HAL_FDCAN_Init+0x234>
 8002e38:	08009b3c 	.word	0x08009b3c
 8002e3c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e60:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e68:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e78:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e7a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e84:	d115      	bne.n	8002eb2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	3b01      	subs	r3, #1
 8002e92:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e94:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e9e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002eae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002eb0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	4413      	add	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d011      	beq.n	8002f02 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002ee6:	f023 0107 	bic.w	r1, r3, #7
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3360      	adds	r3, #96	; 0x60
 8002ef2:	443b      	add	r3, r7
 8002ef4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f12:	f023 0107 	bic.w	r1, r3, #7
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	443b      	add	r3, r7
 8002f20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f3e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	443b      	add	r3, r7
 8002f4c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f50:	011a      	lsls	r2, r3, #4
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f6c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	3360      	adds	r3, #96	; 0x60
 8002f78:	443b      	add	r3, r7
 8002f7a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_FDCAN_Init+0x3b8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d107      	bne.n	8002fa4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f022 0203 	bic.w	r2, r2, #3
 8002fa2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fabb 	bl	8003538 <FDCAN_CalcultateRamBlockAddresses>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002fc8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3760      	adds	r7, #96	; 0x60
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	4000a000 	.word	0x4000a000

08002fd8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002fe8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d002      	beq.n	8002ff6 <HAL_FDCAN_ConfigFilter+0x1e>
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d157      	bne.n	80030a6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12b      	bne.n	8003056 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b07      	cmp	r3, #7
 8003004:	d10d      	bne.n	8003022 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003012:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003018:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800301a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e00e      	b.n	8003040 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800302e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003036:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e025      	b.n	80030a2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	075a      	lsls	r2, r3, #29
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b07      	cmp	r3, #7
 800306a:	d103      	bne.n	8003074 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	e006      	b.n	8003082 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	079a      	lsls	r2, r3, #30
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3304      	adds	r3, #4
 800309a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e008      	b.n	80030b8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ac:	f043 0202 	orr.w	r2, r3, #2
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d111      	bne.n	80030fc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e008      	b.n	800310e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d141      	bne.n	80031b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800313a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e038      	b.n	80031c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800315e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e026      	b.n	80031c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fb57 	bl	8003844 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2101      	movs	r1, #1
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80031a6:	2201      	movs	r2, #1
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e008      	b.n	80031c8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031bc:	f043 0208 	orr.w	r2, r3, #8
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b08b      	sub	sp, #44	; 0x2c
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031e8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80031ea:	7efb      	ldrb	r3, [r7, #27]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	f040 814b 	bne.w	8003488 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d14d      	bne.n	8003294 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003200:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800320e:	f043 0220 	orr.w	r2, r3, #32
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e13e      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003232:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e12c      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003248:	0e1b      	lsrs	r3, r3, #24
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10b      	bne.n	800326a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800325a:	0fdb      	lsrs	r3, r3, #31
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003264:	d101      	bne.n	800326a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003266:	2301      	movs	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	69f9      	ldr	r1, [r7, #28]
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	e069      	b.n	8003368 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b41      	cmp	r3, #65	; 0x41
 8003298:	d14d      	bne.n	8003336 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0ed      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0db      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032ea:	0e1b      	lsrs	r3, r3, #24
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10b      	bne.n	800330c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032fc:	0fdb      	lsrs	r3, r3, #31
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003306:	d101      	bne.n	800330c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003308:	2301      	movs	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	69f9      	ldr	r1, [r7, #28]
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	e018      	b.n	8003368 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	d309      	bcc.n	8003354 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0a2      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0c9b      	lsrs	r3, r3, #18
 8003382:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e005      	b.n	8003398 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	3304      	adds	r3, #4
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e1b      	lsrs	r3, r3, #24
 80033ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0fda      	lsrs	r2, r3, #31
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	3304      	adds	r3, #4
 8003400:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	e00a      	b.n	8003422 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	441a      	add	r2, r3
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	440b      	add	r3, r1
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	3301      	adds	r3, #1
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	461a      	mov	r2, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	4293      	cmp	r3, r2
 8003432:	d3eb      	bcc.n	800340c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d105      	bne.n	8003446 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003444:	e01e      	b.n	8003484 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b41      	cmp	r3, #65	; 0x41
 800344a:	d105      	bne.n	8003458 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003456:	e015      	b.n	8003484 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b1f      	cmp	r3, #31
 800345c:	d808      	bhi.n	8003470 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800346e:	e009      	b.n	8003484 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 021f 	and.w	r2, r3, #31
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e008      	b.n	800349a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800348e:	f043 0208 	orr.w	r2, r3, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
  }
}
 800349a:	4618      	mov	r0, r3
 800349c:	372c      	adds	r7, #44	; 0x2c
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	08009b98 	.word	0x08009b98

080034ac <HAL_FDCAN_IsRxBufferMessageAvailable>:
  * @retval Status
  *          - 0 : No new message on RxBufferIndex.
  *          - 1 : New message received on RxBufferIndex.
  */
uint32_t HAL_FDCAN_IsRxBufferMessageAvailable(FDCAN_HandleTypeDef *hfdcan, uint32_t RxBufferIndex)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(RxBufferIndex, 63U));
  uint32_t NewData1 = hfdcan->Instance->NDAT1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034be:	60fb      	str	r3, [r7, #12]
  uint32_t NewData2 = hfdcan->Instance->NDAT2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c8:	60bb      	str	r3, [r7, #8]

  /* Check new message reception on the selected buffer */
  if (((RxBufferIndex < 32U) && ((NewData1 & (uint32_t)((uint32_t)1 << RxBufferIndex)) == 0U)) ||
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b1f      	cmp	r3, #31
 80034ce:	d807      	bhi.n	80034e0 <HAL_FDCAN_IsRxBufferMessageAvailable+0x34>
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <HAL_FDCAN_IsRxBufferMessageAvailable+0x4e>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b1f      	cmp	r3, #31
 80034e4:	d90b      	bls.n	80034fe <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
      ((RxBufferIndex >= 32U) && ((NewData2 & (uint32_t)((uint32_t)1 << (RxBufferIndex & 0x1FU))) == 0U)))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
  {
    return 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e016      	b.n	800352c <HAL_FDCAN_IsRxBufferMessageAvailable+0x80>
  }

  /* Clear the New Data flag of the current Rx buffer */
  if (RxBufferIndex < 32U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b1f      	cmp	r3, #31
 8003502:	d808      	bhi.n	8003516 <HAL_FDCAN_IsRxBufferMessageAvailable+0x6a>
  {
    hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxBufferIndex);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003514:	e009      	b.n	800352a <HAL_FDCAN_IsRxBufferMessageAvailable+0x7e>
  }
  else /* 32 <= RxBufferIndex <= 63 */
  {
    hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxBufferIndex & 0x1FU));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  return 1;
 800352a:	2301      	movs	r3, #1
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800354e:	4ba7      	ldr	r3, [pc, #668]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003550:	4013      	ands	r3, r2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	0091      	lsls	r1, r2, #2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	430b      	orrs	r3, r1
 800355c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003568:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	4413      	add	r3, r2
 8003584:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800358e:	4b97      	ldr	r3, [pc, #604]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003590:	4013      	ands	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	0091      	lsls	r1, r2, #2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	430b      	orrs	r3, r1
 800359c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80035d0:	4b86      	ldr	r3, [pc, #536]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	0091      	lsls	r1, r2, #2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	041a      	lsls	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4413      	add	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003618:	4b74      	ldr	r3, [pc, #464]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	0091      	lsls	r1, r2, #2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003632:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363a:	041a      	lsls	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003660:	4b62      	ldr	r3, [pc, #392]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	0091      	lsls	r1, r2, #2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800368c:	4b57      	ldr	r3, [pc, #348]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800368e:	4013      	ands	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	0091      	lsls	r1, r2, #2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	041a      	lsls	r2, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	4413      	add	r3, r2
 80036c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	0091      	lsls	r1, r2, #2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	430b      	orrs	r3, r1
 80036dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036e8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003704:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370c:	061a      	lsls	r2, r3, #24
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371c:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800371e:	4413      	add	r3, r2
 8003720:	009a      	lsls	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d915      	bls.n	8003814 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80037e8:	e006      	b.n	80037f8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80037ea:	bf00      	nop
 80037ec:	ffff0003 	.word	0xffff0003
 80037f0:	10002b00 	.word	0x10002b00
 80037f4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2203      	movs	r2, #3
 800380c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e010      	b.n	8003836 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e005      	b.n	8003828 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3304      	adds	r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d3f3      	bcc.n	800381c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop

08003844 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003862:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800386a:	4313      	orrs	r3, r2
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e00a      	b.n	8003886 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003878:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800387e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003884:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003890:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003896:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800389c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	3304      	adds	r3, #4
 80038c6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	3304      	adds	r3, #4
 80038d2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e020      	b.n	800391c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3303      	adds	r3, #3
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3302      	adds	r3, #2
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	440b      	add	r3, r1
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80038f2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	440b      	add	r3, r1
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003900:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	440a      	add	r2, r1
 8003908:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800390a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	3304      	adds	r3, #4
 8003914:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3304      	adds	r3, #4
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	4a06      	ldr	r2, [pc, #24]	; (800393c <FDCAN_CopyMessageToRAM+0xf8>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	461a      	mov	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4293      	cmp	r3, r2
 800392c:	d3d5      	bcc.n	80038da <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3724      	adds	r7, #36	; 0x24
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	08009b98 	.word	0x08009b98

08003940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800394e:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <HAL_GPIO_Init+0x234>)
 8003950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003952:	e194      	b.n	8003c7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8186 	beq.w	8003c78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d005      	beq.n	8003984 <HAL_GPIO_Init+0x44>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d130      	bne.n	80039e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ba:	2201      	movs	r2, #1
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0201 	and.w	r2, r3, #1
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d017      	beq.n	8003a22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d123      	bne.n	8003a76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	08da      	lsrs	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3208      	adds	r2, #8
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	69b9      	ldr	r1, [r7, #24]
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80e0 	beq.w	8003c78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_GPIO_Init+0x238>)
 8003aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003abe:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <HAL_GPIO_Init+0x238>)
 8003ac0:	f043 0302 	orr.w	r3, r3, #2
 8003ac4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <HAL_GPIO_Init+0x238>)
 8003aca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_GPIO_Init+0x23c>)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	3302      	adds	r3, #2
 8003ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <HAL_GPIO_Init+0x240>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d052      	beq.n	8003ba8 <HAL_GPIO_Init+0x268>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <HAL_GPIO_Init+0x244>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_GPIO_Init+0x22e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_GPIO_Init+0x248>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02b      	beq.n	8003b6a <HAL_GPIO_Init+0x22a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_GPIO_Init+0x24c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d025      	beq.n	8003b66 <HAL_GPIO_Init+0x226>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_GPIO_Init+0x250>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <HAL_GPIO_Init+0x222>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_GPIO_Init+0x254>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d019      	beq.n	8003b5e <HAL_GPIO_Init+0x21e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_GPIO_Init+0x258>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x21a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_GPIO_Init+0x25c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x216>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_GPIO_Init+0x260>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x212>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_GPIO_Init+0x264>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x20e>
 8003b4a:	2309      	movs	r3, #9
 8003b4c:	e02d      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b4e:	230a      	movs	r3, #10
 8003b50:	e02b      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b52:	2308      	movs	r3, #8
 8003b54:	e029      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b56:	2307      	movs	r3, #7
 8003b58:	e027      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	e025      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b5e:	2305      	movs	r3, #5
 8003b60:	e023      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b62:	2304      	movs	r3, #4
 8003b64:	e021      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e01f      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e01d      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e01b      	b.n	8003baa <HAL_GPIO_Init+0x26a>
 8003b72:	bf00      	nop
 8003b74:	58000080 	.word	0x58000080
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58000400 	.word	0x58000400
 8003b80:	58020000 	.word	0x58020000
 8003b84:	58020400 	.word	0x58020400
 8003b88:	58020800 	.word	0x58020800
 8003b8c:	58020c00 	.word	0x58020c00
 8003b90:	58021000 	.word	0x58021000
 8003b94:	58021400 	.word	0x58021400
 8003b98:	58021800 	.word	0x58021800
 8003b9c:	58021c00 	.word	0x58021c00
 8003ba0:	58022000 	.word	0x58022000
 8003ba4:	58022400 	.word	0x58022400
 8003ba8:	2300      	movs	r3, #0
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	f002 0203 	and.w	r2, r2, #3
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	4093      	lsls	r3, r2
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bba:	4938      	ldr	r1, [pc, #224]	; (8003c9c <HAL_GPIO_Init+0x35c>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f47f ae63 	bne.w	8003954 <HAL_GPIO_Init+0x14>
  }
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	3724      	adds	r7, #36	; 0x24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	58000400 	.word	0x58000400

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003cbc:	e003      	b.n	8003cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd4:	b08f      	sub	sp, #60	; 0x3c
 8003cd6:	af0a      	add	r7, sp, #40	; 0x28
 8003cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e116      	b.n	8003f12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fa86 	bl	8001210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2203      	movs	r2, #3
 8003d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f004 ffba 	bl	8008c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	687e      	ldr	r6, [r7, #4]
 8003d30:	466d      	mov	r5, sp
 8003d32:	f106 0410 	add.w	r4, r6, #16
 8003d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d46:	1d33      	adds	r3, r6, #4
 8003d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	f004 ff38 	bl	8008bc0 <USB_CoreInit>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0d7      	b.n	8003f12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f004 ffa8 	bl	8008cbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	e04a      	b.n	8003e0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	333d      	adds	r3, #61	; 0x3d
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	333c      	adds	r3, #60	; 0x3c
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	b298      	uxth	r0, r3
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3356      	adds	r3, #86	; 0x56
 8003db0:	4602      	mov	r2, r0
 8003db2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3340      	adds	r3, #64	; 0x40
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3344      	adds	r3, #68	; 0x44
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3348      	adds	r3, #72	; 0x48
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	334c      	adds	r3, #76	; 0x4c
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	3301      	adds	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3af      	bcc.n	8003d74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	e044      	b.n	8003ea4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3b5      	bcc.n	8003e1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	687e      	ldr	r6, [r7, #4]
 8003eb6:	466d      	mov	r5, sp
 8003eb8:	f106 0410 	add.w	r4, r6, #16
 8003ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ecc:	1d33      	adds	r3, r6, #4
 8003ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed0:	6838      	ldr	r0, [r7, #0]
 8003ed2:	f004 ff41 	bl	8008d58 <USB_DevInit>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e014      	b.n	8003f12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f80b 	bl	8003f1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 f8ff 	bl	800910e <USB_DevDisconnect>

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	10000003 	.word	0x10000003

08003f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00a      	beq.n	8003f8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f78:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d001      	beq.n	8003f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e01f      	b.n	8003fca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e01d      	b.n	8003fca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 0207 	bic.w	r2, r3, #7
 8003f96:	490f      	ldr	r1, [pc, #60]	; (8003fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f9e:	f7fd fb55 	bl	800164c <HAL_GetTick>
 8003fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fa4:	e009      	b.n	8003fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fa6:	f7fd fb51 	bl	800164c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb4:	d901      	bls.n	8003fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e007      	b.n	8003fca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	d1ee      	bne.n	8003fa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58024800 	.word	0x58024800

08003fd8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	60d3      	str	r3, [r2, #12]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	58024800 	.word	0x58024800

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08c      	sub	sp, #48	; 0x30
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f000 bc48 	b.w	800489c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8088 	beq.w	800412a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401a:	4b99      	ldr	r3, [pc, #612]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004024:	4b96      	ldr	r3, [pc, #600]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	2b10      	cmp	r3, #16
 800402e:	d007      	beq.n	8004040 <HAL_RCC_OscConfig+0x48>
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	2b18      	cmp	r3, #24
 8004034:	d111      	bne.n	800405a <HAL_RCC_OscConfig+0x62>
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d10c      	bne.n	800405a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d06d      	beq.n	8004128 <HAL_RCC_OscConfig+0x130>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d169      	bne.n	8004128 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f000 bc21 	b.w	800489c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x7a>
 8004064:	4b86      	ldr	r3, [pc, #536]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a85      	ldr	r2, [pc, #532]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e02e      	b.n	80040d0 <HAL_RCC_OscConfig+0xd8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x9c>
 800407a:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a80      	ldr	r2, [pc, #512]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b7e      	ldr	r3, [pc, #504]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7d      	ldr	r2, [pc, #500]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800408c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0xd8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 800409e:	4b78      	ldr	r3, [pc, #480]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a77      	ldr	r2, [pc, #476]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b75      	ldr	r3, [pc, #468]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a74      	ldr	r2, [pc, #464]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0xd8>
 80040b8:	4b71      	ldr	r3, [pc, #452]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b6e      	ldr	r3, [pc, #440]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6d      	ldr	r2, [pc, #436]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fab8 	bl	800164c <HAL_GetTick>
 80040dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd fab4 	bl	800164c <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e3d4      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd faa4 	bl	800164c <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004108:	f7fd faa0 	bl	800164c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e3c0      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800411a:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x110>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80ca 	beq.w	80042cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004138:	4b51      	ldr	r3, [pc, #324]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004140:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004142:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_RCC_OscConfig+0x166>
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	2b18      	cmp	r3, #24
 8004152:	d156      	bne.n	8004202 <HAL_RCC_OscConfig+0x20a>
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d151      	bne.n	8004202 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800415e:	4b48      	ldr	r3, [pc, #288]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_RCC_OscConfig+0x17e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e392      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004176:	4b42      	ldr	r3, [pc, #264]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 0219 	bic.w	r2, r3, #25
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	493f      	ldr	r1, [pc, #252]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004184:	4313      	orrs	r3, r2
 8004186:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd fa60 	bl	800164c <HAL_GetTick>
 800418c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004190:	f7fd fa5c 	bl	800164c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e37c      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	f7fd fa7d 	bl	80016ac <HAL_GetREVID>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d817      	bhi.n	80041ec <HAL_RCC_OscConfig+0x1f4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d108      	bne.n	80041d6 <HAL_RCC_OscConfig+0x1de>
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041cc:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d4:	e07a      	b.n	80042cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	031b      	lsls	r3, r3, #12
 80041e4:	4926      	ldr	r1, [pc, #152]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ea:	e06f      	b.n	80042cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	4921      	ldr	r1, [pc, #132]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004200:	e064      	b.n	80042cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d047      	beq.n	800429a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 0219 	bic.w	r2, r3, #25
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	491a      	ldr	r1, [pc, #104]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd fa16 	bl	800164c <HAL_GetTick>
 8004220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004224:	f7fd fa12 	bl	800164c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e332      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	f7fd fa33 	bl	80016ac <HAL_GetREVID>
 8004246:	4603      	mov	r3, r0
 8004248:	f241 0203 	movw	r2, #4099	; 0x1003
 800424c:	4293      	cmp	r3, r2
 800424e:	d819      	bhi.n	8004284 <HAL_RCC_OscConfig+0x28c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d108      	bne.n	800426a <HAL_RCC_OscConfig+0x272>
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004260:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	6053      	str	r3, [r2, #4]
 8004268:	e030      	b.n	80042cc <HAL_RCC_OscConfig+0x2d4>
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	031b      	lsls	r3, r3, #12
 8004278:	4901      	ldr	r1, [pc, #4]	; (8004280 <HAL_RCC_OscConfig+0x288>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
 800427e:	e025      	b.n	80042cc <HAL_RCC_OscConfig+0x2d4>
 8004280:	58024400 	.word	0x58024400
 8004284:	4b9a      	ldr	r3, [pc, #616]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	4997      	ldr	r1, [pc, #604]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	e018      	b.n	80042cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429a:	4b95      	ldr	r3, [pc, #596]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a94      	ldr	r2, [pc, #592]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd f9d1 	bl	800164c <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ae:	f7fd f9cd 	bl	800164c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e2ed      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042c0:	4b8b      	ldr	r3, [pc, #556]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a9 	beq.w	800442c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042da:	4b85      	ldr	r3, [pc, #532]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e4:	4b82      	ldr	r3, [pc, #520]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d007      	beq.n	8004300 <HAL_RCC_OscConfig+0x308>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b18      	cmp	r3, #24
 80042f4:	d13a      	bne.n	800436c <HAL_RCC_OscConfig+0x374>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d135      	bne.n	800436c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004300:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_OscConfig+0x320>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e2c1      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004318:	f7fd f9c8 	bl	80016ac <HAL_GetREVID>
 800431c:	4603      	mov	r3, r0
 800431e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004322:	4293      	cmp	r3, r2
 8004324:	d817      	bhi.n	8004356 <HAL_RCC_OscConfig+0x35e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	2b20      	cmp	r3, #32
 800432c:	d108      	bne.n	8004340 <HAL_RCC_OscConfig+0x348>
 800432e:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004336:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800433c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800433e:	e075      	b.n	800442c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004340:	4b6b      	ldr	r3, [pc, #428]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	069b      	lsls	r3, r3, #26
 800434e:	4968      	ldr	r1, [pc, #416]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004354:	e06a      	b.n	800442c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004356:	4b66      	ldr	r3, [pc, #408]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	4962      	ldr	r1, [pc, #392]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004366:	4313      	orrs	r3, r2
 8004368:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800436a:	e05f      	b.n	800442c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d042      	beq.n	80043fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004374:	4b5e      	ldr	r3, [pc, #376]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a5d      	ldr	r2, [pc, #372]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 800437a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd f964 	bl	800164c <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004388:	f7fd f960 	bl	800164c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e280      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a6:	f7fd f981 	bl	80016ac <HAL_GetREVID>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d817      	bhi.n	80043e4 <HAL_RCC_OscConfig+0x3ec>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d108      	bne.n	80043ce <HAL_RCC_OscConfig+0x3d6>
 80043bc:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043c4:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043ca:	6053      	str	r3, [r2, #4]
 80043cc:	e02e      	b.n	800442c <HAL_RCC_OscConfig+0x434>
 80043ce:	4b48      	ldr	r3, [pc, #288]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	069b      	lsls	r3, r3, #26
 80043dc:	4944      	ldr	r1, [pc, #272]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
 80043e2:	e023      	b.n	800442c <HAL_RCC_OscConfig+0x434>
 80043e4:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	493f      	ldr	r1, [pc, #252]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60cb      	str	r3, [r1, #12]
 80043f8:	e018      	b.n	800442c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043fa:	4b3d      	ldr	r3, [pc, #244]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3c      	ldr	r2, [pc, #240]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd f921 	bl	800164c <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800440e:	f7fd f91d 	bl	800164c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e23d      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d036      	beq.n	80044a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d019      	beq.n	8004474 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004440:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004444:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fd f8fe 	bl	800164c <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fd f8fa 	bl	800164c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e21a      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004466:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x45c>
 8004472:	e018      	b.n	80044a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004474:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd f8e4 	bl	800164c <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd f8e0 	bl	800164c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e200      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d039      	beq.n	8004526 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01c      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044c6:	f7fd f8c1 	bl	800164c <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ce:	f7fd f8bd 	bl	800164c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1dd      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x4f8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x4d6>
 80044ec:	e01b      	b.n	8004526 <HAL_RCC_OscConfig+0x52e>
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044f4:	4b9b      	ldr	r3, [pc, #620]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a9a      	ldr	r2, [pc, #616]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80044fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004500:	f7fd f8a4 	bl	800164c <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004508:	f7fd f8a0 	bl	800164c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1c0      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800451a:	4b92      	ldr	r3, [pc, #584]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8081 	beq.w	8004636 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004534:	4b8c      	ldr	r3, [pc, #560]	; (8004768 <HAL_RCC_OscConfig+0x770>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a8b      	ldr	r2, [pc, #556]	; (8004768 <HAL_RCC_OscConfig+0x770>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004540:	f7fd f884 	bl	800164c <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fd f880 	bl	800164c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1a0      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455a:	4b83      	ldr	r3, [pc, #524]	; (8004768 <HAL_RCC_OscConfig+0x770>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d106      	bne.n	800457c <HAL_RCC_OscConfig+0x584>
 800456e:	4b7d      	ldr	r3, [pc, #500]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a7c      	ldr	r2, [pc, #496]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
 800457a:	e02d      	b.n	80045d8 <HAL_RCC_OscConfig+0x5e0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10c      	bne.n	800459e <HAL_RCC_OscConfig+0x5a6>
 8004584:	4b77      	ldr	r3, [pc, #476]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a76      	ldr	r2, [pc, #472]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	4b74      	ldr	r3, [pc, #464]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a73      	ldr	r2, [pc, #460]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004596:	f023 0304 	bic.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x5e0>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c8>
 80045a6:	4b6f      	ldr	r3, [pc, #444]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a6e      	ldr	r2, [pc, #440]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	4b6c      	ldr	r3, [pc, #432]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a6b      	ldr	r2, [pc, #428]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x5e0>
 80045c0:	4b68      	ldr	r3, [pc, #416]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a67      	ldr	r2, [pc, #412]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b65      	ldr	r3, [pc, #404]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a64      	ldr	r2, [pc, #400]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd f834 	bl	800164c <HAL_GetTick>
 80045e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd f830 	bl	800164c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e14e      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045fe:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCC_OscConfig+0x5f0>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd f81e 	bl	800164c <HAL_GetTick>
 8004610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fd f81a 	bl	800164c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e138      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800462a:	4b4e      	ldr	r3, [pc, #312]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ee      	bne.n	8004614 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 812d 	beq.w	800489a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004648:	2b18      	cmp	r3, #24
 800464a:	f000 80bd 	beq.w	80047c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b02      	cmp	r3, #2
 8004654:	f040 809e 	bne.w	8004794 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004658:	4b42      	ldr	r3, [pc, #264]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a41      	ldr	r2, [pc, #260]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fc fff2 	bl	800164c <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7fc ffee 	bl	800164c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e10e      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800467e:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCC_OscConfig+0x774>)
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	430a      	orrs	r2, r1
 800469e:	4931      	ldr	r1, [pc, #196]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	628b      	str	r3, [r1, #40]	; 0x28
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	3b01      	subs	r3, #1
 80046aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	3b01      	subs	r3, #1
 80046b4:	025b      	lsls	r3, r3, #9
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	3b01      	subs	r3, #1
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	3b01      	subs	r3, #1
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046d4:	4923      	ldr	r1, [pc, #140]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046da:	4b22      	ldr	r3, [pc, #136]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4a21      	ldr	r2, [pc, #132]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ea:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_RCC_OscConfig+0x778>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046f2:	00d2      	lsls	r2, r2, #3
 80046f4:	491b      	ldr	r1, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	f023 020c 	bic.w	r2, r3, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	4917      	ldr	r1, [pc, #92]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004708:	4313      	orrs	r3, r2
 800470a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f023 0202 	bic.w	r2, r3, #2
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	4912      	ldr	r1, [pc, #72]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	4a0d      	ldr	r2, [pc, #52]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a04      	ldr	r2, [pc, #16]	; (8004764 <HAL_RCC_OscConfig+0x76c>)
 8004754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fc ff77 	bl	800164c <HAL_GetTick>
 800475e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004760:	e011      	b.n	8004786 <HAL_RCC_OscConfig+0x78e>
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
 8004768:	58024800 	.word	0x58024800
 800476c:	fffffc0c 	.word	0xfffffc0c
 8004770:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004774:	f7fc ff6a 	bl	800164c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e08a      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004786:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x77c>
 8004792:	e082      	b.n	800489a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004794:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a42      	ldr	r2, [pc, #264]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 800479a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fc ff54 	bl	800164c <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fc ff50 	bl	800164c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e070      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x7b0>
 80047c6:	e068      	b.n	800489a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047ce:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d031      	beq.n	8004840 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0203 	and.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d12a      	bne.n	8004840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d122      	bne.n	8004840 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d11a      	bne.n	8004840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	0a5b      	lsrs	r3, r3, #9
 800480e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d111      	bne.n	8004840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d108      	bne.n	8004840 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e02b      	b.n	800489c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004844:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800484e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	d01f      	beq.n	800489a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004866:	f7fc fef1 	bl	800164c <HAL_GetTick>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800486c:	bf00      	nop
 800486e:	f7fc feed 	bl	800164c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	4293      	cmp	r3, r2
 8004878:	d0f9      	beq.n	800486e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 800487c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487e:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <HAL_RCC_OscConfig+0x8b0>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004886:	00d2      	lsls	r2, r2, #3
 8004888:	4906      	ldr	r1, [pc, #24]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_RCC_OscConfig+0x8ac>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3730      	adds	r7, #48	; 0x30
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	58024400 	.word	0x58024400
 80048a8:	ffff0007 	.word	0xffff0007

080048ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e19c      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c0:	4b8a      	ldr	r3, [pc, #552]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d910      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b87      	ldr	r3, [pc, #540]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 020f 	bic.w	r2, r3, #15
 80048d6:	4985      	ldr	r1, [pc, #532]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b83      	ldr	r3, [pc, #524]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e184      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	4b7b      	ldr	r3, [pc, #492]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004908:	429a      	cmp	r2, r3
 800490a:	d908      	bls.n	800491e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800490c:	4b78      	ldr	r3, [pc, #480]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	4975      	ldr	r1, [pc, #468]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 800491a:	4313      	orrs	r3, r2
 800491c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	4b70      	ldr	r3, [pc, #448]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004936:	429a      	cmp	r2, r3
 8004938:	d908      	bls.n	800494c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800493a:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	496a      	ldr	r1, [pc, #424]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004948:	4313      	orrs	r3, r2
 800494a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d010      	beq.n	800497a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	4b64      	ldr	r3, [pc, #400]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004964:	429a      	cmp	r2, r3
 8004966:	d908      	bls.n	800497a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	495e      	ldr	r1, [pc, #376]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004976:	4313      	orrs	r3, r2
 8004978:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d010      	beq.n	80049a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004992:	429a      	cmp	r2, r3
 8004994:	d908      	bls.n	80049a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004996:	4b56      	ldr	r3, [pc, #344]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4953      	ldr	r1, [pc, #332]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d908      	bls.n	80049d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c4:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f023 020f 	bic.w	r2, r3, #15
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4947      	ldr	r1, [pc, #284]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d055      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049e2:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4940      	ldr	r1, [pc, #256]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049fc:	4b3c      	ldr	r3, [pc, #240]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d121      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0f6      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d115      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0ea      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a2c:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0de      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a3c:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0d6      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a4c:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f023 0207 	bic.w	r2, r3, #7
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4925      	ldr	r1, [pc, #148]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5e:	f7fc fdf5 	bl	800164c <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a66:	f7fc fdf1 	bl	800164c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0be      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d1eb      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d010      	beq.n	8004abc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d208      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f023 020f 	bic.w	r2, r3, #15
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	490e      	ldr	r1, [pc, #56]	; (8004af0 <HAL_RCC_ClockConfig+0x244>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d214      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 020f 	bic.w	r2, r3, #15
 8004ad2:	4906      	ldr	r1, [pc, #24]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b04      	ldr	r3, [pc, #16]	; (8004aec <HAL_RCC_ClockConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e086      	b.n	8004bfa <HAL_RCC_ClockConfig+0x34e>
 8004aec:	52002000 	.word	0x52002000
 8004af0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d010      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d208      	bcs.n	8004b22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b10:	4b3c      	ldr	r3, [pc, #240]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	4939      	ldr	r1, [pc, #228]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d208      	bcs.n	8004b50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	492e      	ldr	r1, [pc, #184]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699a      	ldr	r2, [r3, #24]
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d208      	bcs.n	8004b7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	4922      	ldr	r1, [pc, #136]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d208      	bcs.n	8004bac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4917      	ldr	r1, [pc, #92]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bac:	f000 f834 	bl	8004c18 <HAL_RCC_GetSysClockFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	4912      	ldr	r1, [pc, #72]	; (8004c08 <HAL_RCC_ClockConfig+0x35c>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bca:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <HAL_RCC_ClockConfig+0x358>)
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a0d      	ldr	r2, [pc, #52]	; (8004c08 <HAL_RCC_ClockConfig+0x35c>)
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_RCC_ClockConfig+0x360>)
 8004be2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x364>)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x368>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc fce2 	bl	80015b8 <HAL_InitTick>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
 8004c08:	08009b88 	.word	0x08009b88
 8004c0c:	24000004 	.word	0x24000004
 8004c10:	24000000 	.word	0x24000000
 8004c14:	24000008 	.word	0x24000008

08004c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	; 0x24
 8004c1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1e:	4bb3      	ldr	r3, [pc, #716]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	2b18      	cmp	r3, #24
 8004c28:	f200 8155 	bhi.w	8004ed6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004ed7 	.word	0x08004ed7
 8004c3c:	08004ed7 	.word	0x08004ed7
 8004c40:	08004ed7 	.word	0x08004ed7
 8004c44:	08004ed7 	.word	0x08004ed7
 8004c48:	08004ed7 	.word	0x08004ed7
 8004c4c:	08004ed7 	.word	0x08004ed7
 8004c50:	08004ed7 	.word	0x08004ed7
 8004c54:	08004cbf 	.word	0x08004cbf
 8004c58:	08004ed7 	.word	0x08004ed7
 8004c5c:	08004ed7 	.word	0x08004ed7
 8004c60:	08004ed7 	.word	0x08004ed7
 8004c64:	08004ed7 	.word	0x08004ed7
 8004c68:	08004ed7 	.word	0x08004ed7
 8004c6c:	08004ed7 	.word	0x08004ed7
 8004c70:	08004ed7 	.word	0x08004ed7
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004ed7 	.word	0x08004ed7
 8004c7c:	08004ed7 	.word	0x08004ed7
 8004c80:	08004ed7 	.word	0x08004ed7
 8004c84:	08004ed7 	.word	0x08004ed7
 8004c88:	08004ed7 	.word	0x08004ed7
 8004c8c:	08004ed7 	.word	0x08004ed7
 8004c90:	08004ed7 	.word	0x08004ed7
 8004c94:	08004ccb 	.word	0x08004ccb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c98:	4b94      	ldr	r3, [pc, #592]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca4:	4b91      	ldr	r3, [pc, #580]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	4a90      	ldr	r2, [pc, #576]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cb6:	e111      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cb8:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cba:	61bb      	str	r3, [r7, #24]
      break;
 8004cbc:	e10e      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cc0:	61bb      	str	r3, [r7, #24]
      break;
 8004cc2:	e10b      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cc4:	4b8c      	ldr	r3, [pc, #560]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cc6:	61bb      	str	r3, [r7, #24]
      break;
 8004cc8:	e108      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cca:	4b88      	ldr	r3, [pc, #544]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cd4:	4b85      	ldr	r3, [pc, #532]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ce0:	4b82      	ldr	r3, [pc, #520]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cea:	4b80      	ldr	r3, [pc, #512]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	08db      	lsrs	r3, r3, #3
 8004cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80e1 	beq.w	8004ed0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	f000 8083 	beq.w	8004e1c <HAL_RCC_GetSysClockFreq+0x204>
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f200 80a1 	bhi.w	8004e60 <HAL_RCC_GetSysClockFreq+0x248>
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x114>
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d056      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d2a:	e099      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d2c:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02d      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d38:	4b6c      	ldr	r3, [pc, #432]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	4a6b      	ldr	r2, [pc, #428]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d62:	4b62      	ldr	r3, [pc, #392]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d92:	e087      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da6:	4b51      	ldr	r3, [pc, #324]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dd6:	e065      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dea:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e1a:	e043      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e5e:	e021      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ea2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	0a5b      	lsrs	r3, r3, #9
 8004eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eae:	3301      	adds	r3, #1
 8004eb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec8:	ee17 3a90 	vmov	r3, s15
 8004ecc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ece:	e005      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61bb      	str	r3, [r7, #24]
      break;
 8004ed4:	e002      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ed8:	61bb      	str	r3, [r7, #24]
      break;
 8004eda:	bf00      	nop
  }

  return sysclockfreq;
 8004edc:	69bb      	ldr	r3, [r7, #24]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	03d09000 	.word	0x03d09000
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	46000000 	.word	0x46000000
 8004f00:	4c742400 	.word	0x4c742400
 8004f04:	4a742400 	.word	0x4a742400
 8004f08:	4af42400 	.word	0x4af42400

08004f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f12:	f7ff fe81 	bl	8004c18 <HAL_RCC_GetSysClockFreq>
 8004f16:	4602      	mov	r2, r0
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	490f      	ldr	r1, [pc, #60]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f24:	5ccb      	ldrb	r3, [r1, r3]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f4a:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	08009b88 	.word	0x08009b88
 8004f64:	24000004 	.word	0x24000004
 8004f68:	24000000 	.word	0x24000000

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f70:	f7ff ffcc 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4904      	ldr	r1, [pc, #16]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	58024400 	.word	0x58024400
 8004f94:	08009b88 	.word	0x08009b88

08004f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f9c:	f7ff ffb6 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	08009b88 	.word	0x08009b88

08004fc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc8:	b0ca      	sub	sp, #296	; 0x128
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004fe8:	2500      	movs	r5, #0
 8004fea:	ea54 0305 	orrs.w	r3, r4, r5
 8004fee:	d049      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ffa:	d02f      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005000:	d828      	bhi.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005006:	d01a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800500c:	d822      	bhi.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005016:	d007      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005018:	e01c      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501a:	4bb8      	ldr	r3, [pc, #736]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	4ab7      	ldr	r2, [pc, #732]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005026:	e01a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502c:	3308      	adds	r3, #8
 800502e:	2102      	movs	r1, #2
 8005030:	4618      	mov	r0, r3
 8005032:	f001 fc8f 	bl	8006954 <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800503c:	e00f      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005042:	3328      	adds	r3, #40	; 0x28
 8005044:	2102      	movs	r1, #2
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fd36 	bl	8006ab8 <RCCEx_PLL3_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005052:	e004      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800505c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005066:	4ba5      	ldr	r3, [pc, #660]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005074:	4aa1      	ldr	r2, [pc, #644]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005076:	430b      	orrs	r3, r1
 8005078:	6513      	str	r3, [r2, #80]	; 0x50
 800507a:	e003      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005090:	f04f 0900 	mov.w	r9, #0
 8005094:	ea58 0309 	orrs.w	r3, r8, r9
 8005098:	d047      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d82a      	bhi.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050c1 	.word	0x080050c1
 80050b0:	080050cf 	.word	0x080050cf
 80050b4:	080050e5 	.word	0x080050e5
 80050b8:	08005103 	.word	0x08005103
 80050bc:	08005103 	.word	0x08005103
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b8e      	ldr	r3, [pc, #568]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a8d      	ldr	r2, [pc, #564]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050cc:	e01a      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d2:	3308      	adds	r3, #8
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 fc3c 	bl	8006954 <RCCEx_PLL2_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e2:	e00f      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e8:	3328      	adds	r3, #40	; 0x28
 80050ea:	2100      	movs	r1, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fce3 	bl	8006ab8 <RCCEx_PLL3_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050f8:	e004      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800510c:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	f023 0107 	bic.w	r1, r3, #7
 8005114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	4a78      	ldr	r2, [pc, #480]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800511c:	430b      	orrs	r3, r1
 800511e:	6513      	str	r3, [r2, #80]	; 0x50
 8005120:	e003      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800512a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005136:	f04f 0b00 	mov.w	fp, #0
 800513a:	ea5a 030b 	orrs.w	r3, sl, fp
 800513e:	d04c      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514a:	d030      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800514c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005150:	d829      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005152:	2bc0      	cmp	r3, #192	; 0xc0
 8005154:	d02d      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005156:	2bc0      	cmp	r3, #192	; 0xc0
 8005158:	d825      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d018      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d821      	bhi.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d007      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800516a:	e01c      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516c:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	4a62      	ldr	r2, [pc, #392]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005178:	e01c      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	3308      	adds	r3, #8
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f001 fbe6 	bl	8006954 <RCCEx_PLL2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800518e:	e011      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005194:	3328      	adds	r3, #40	; 0x28
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f001 fc8d 	bl	8006ab8 <RCCEx_PLL3_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051a4:	e006      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ac:	e002      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051ae:	bf00      	nop
 80051b0:	e000      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051bc:	4b4f      	ldr	r3, [pc, #316]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ca:	4a4c      	ldr	r2, [pc, #304]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6513      	str	r3, [r2, #80]	; 0x50
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80051e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051ea:	2300      	movs	r3, #0
 80051ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80051f4:	460b      	mov	r3, r1
 80051f6:	4313      	orrs	r3, r2
 80051f8:	d053      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005206:	d035      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800520c:	d82e      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800520e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005212:	d031      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005218:	d828      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521e:	d01a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005224:	d822      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800522a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522e:	d007      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005230:	e01c      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005232:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	4a31      	ldr	r2, [pc, #196]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800523e:	e01c      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005244:	3308      	adds	r3, #8
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f001 fb83 	bl	8006954 <RCCEx_PLL2_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005254:	e011      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525a:	3328      	adds	r3, #40	; 0x28
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fc2a 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800526a:	e006      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005272:	e002      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005274:	bf00      	nop
 8005276:	e000      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005282:	4b1e      	ldr	r3, [pc, #120]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800528a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005294:	430b      	orrs	r3, r1
 8005296:	6593      	str	r3, [r2, #88]	; 0x58
 8005298:	e003      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80052ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052b2:	2300      	movs	r3, #0
 80052b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80052bc:	460b      	mov	r3, r1
 80052be:	4313      	orrs	r3, r2
 80052c0:	d056      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ce:	d038      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d4:	d831      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052da:	d034      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052e0:	d82b      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e6:	d01d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ec:	d825      	bhi.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052f8:	e01f      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005300:	4ba2      	ldr	r3, [pc, #648]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4aa1      	ldr	r2, [pc, #644]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800530c:	e01c      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005312:	3308      	adds	r3, #8
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f001 fb1c 	bl	8006954 <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005322:	e011      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005328:	3328      	adds	r3, #40	; 0x28
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fbc3 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005340:	e002      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005350:	4b8e      	ldr	r3, [pc, #568]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005360:	4a8a      	ldr	r2, [pc, #552]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005362:	430b      	orrs	r3, r1
 8005364:	6593      	str	r3, [r2, #88]	; 0x58
 8005366:	e003      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800536c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800537c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005386:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800538a:	460b      	mov	r3, r1
 800538c:	4313      	orrs	r3, r2
 800538e:	d03a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	2b30      	cmp	r3, #48	; 0x30
 8005398:	d01f      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d819      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d00c      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d815      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d019      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d111      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ae:	4b77      	ldr	r3, [pc, #476]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a76      	ldr	r2, [pc, #472]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053ba:	e011      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c0:	3308      	adds	r3, #8
 80053c2:	2102      	movs	r1, #2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fac5 	bl	8006954 <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053d0:	e006      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053e8:	4b68      	ldr	r3, [pc, #416]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80053f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	4a65      	ldr	r2, [pc, #404]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053f8:	430b      	orrs	r3, r1
 80053fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053fc:	e003      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005416:	2300      	movs	r3, #0
 8005418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800541c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005420:	460b      	mov	r3, r1
 8005422:	4313      	orrs	r3, r2
 8005424:	d051      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005430:	d035      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005436:	d82e      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005438:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800543c:	d031      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800543e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005442:	d828      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005448:	d01a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800544a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544e:	d822      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d007      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800545a:	e01c      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545c:	4b4b      	ldr	r3, [pc, #300]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	4a4a      	ldr	r2, [pc, #296]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005468:	e01c      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546e:	3308      	adds	r3, #8
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f001 fa6e 	bl	8006954 <RCCEx_PLL2_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800547e:	e011      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005484:	3328      	adds	r3, #40	; 0x28
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fb15 	bl	8006ab8 <RCCEx_PLL3_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005494:	e006      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800549c:	e002      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054ac:	4b37      	ldr	r3, [pc, #220]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	4a34      	ldr	r2, [pc, #208]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054bc:	430b      	orrs	r3, r1
 80054be:	6513      	str	r3, [r2, #80]	; 0x50
 80054c0:	e003      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80054d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054da:	2300      	movs	r3, #0
 80054dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80054e4:	460b      	mov	r3, r1
 80054e6:	4313      	orrs	r3, r2
 80054e8:	d056      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f4:	d033      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054fa:	d82c      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80054fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005500:	d02f      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005506:	d826      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800550c:	d02b      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800550e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005512:	d820      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005518:	d012      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800551a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800551e:	d81a      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d022      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d115      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800552e:	3308      	adds	r3, #8
 8005530:	2101      	movs	r1, #1
 8005532:	4618      	mov	r0, r3
 8005534:	f001 fa0e 	bl	8006954 <RCCEx_PLL2_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800553e:	e015      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005544:	3328      	adds	r3, #40	; 0x28
 8005546:	2101      	movs	r1, #1
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fab5 	bl	8006ab8 <RCCEx_PLL3_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005554:	e00a      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800555c:	e006      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800555e:	bf00      	nop
 8005560:	e004      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10d      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005582:	4a02      	ldr	r2, [pc, #8]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005584:	430b      	orrs	r3, r1
 8005586:	6513      	str	r3, [r2, #80]	; 0x50
 8005588:	e006      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800558a:	bf00      	nop
 800558c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80055a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055a8:	2300      	movs	r3, #0
 80055aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4313      	orrs	r3, r2
 80055b6:	d055      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c4:	d033      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ca:	d82c      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d02f      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d826      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055dc:	d02b      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055e2:	d820      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d012      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d81a      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d022      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f8:	d115      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fe:	3308      	adds	r3, #8
 8005600:	2101      	movs	r1, #1
 8005602:	4618      	mov	r0, r3
 8005604:	f001 f9a6 	bl	8006954 <RCCEx_PLL2_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800560e:	e015      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005614:	3328      	adds	r3, #40	; 0x28
 8005616:	2101      	movs	r1, #1
 8005618:	4618      	mov	r0, r3
 800561a:	f001 fa4d 	bl	8006ab8 <RCCEx_PLL3_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005624:	e00a      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800562e:	bf00      	nop
 8005630:	e004      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005644:	4ba3      	ldr	r3, [pc, #652]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005654:	4a9f      	ldr	r2, [pc, #636]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005656:	430b      	orrs	r3, r1
 8005658:	6593      	str	r3, [r2, #88]	; 0x58
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005660:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800567a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800567e:	460b      	mov	r3, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	d037      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568e:	d00e      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005694:	d816      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d018      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800569a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569e:	d111      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a0:	4b8c      	ldr	r3, [pc, #560]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	4a8b      	ldr	r2, [pc, #556]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056ac:	e00f      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b2:	3308      	adds	r3, #8
 80056b4:	2101      	movs	r1, #1
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f94c 	bl	8006954 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056d6:	4b7f      	ldr	r3, [pc, #508]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a7b      	ldr	r2, [pc, #492]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6513      	str	r3, [r2, #80]	; 0x50
 80056ea:	e003      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005704:	2300      	movs	r3, #0
 8005706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800570a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800570e:	460b      	mov	r3, r1
 8005710:	4313      	orrs	r3, r2
 8005712:	d039      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571a:	2b03      	cmp	r3, #3
 800571c:	d81c      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005761 	.word	0x08005761
 8005728:	08005735 	.word	0x08005735
 800572c:	08005743 	.word	0x08005743
 8005730:	08005761 	.word	0x08005761
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005734:	4b67      	ldr	r3, [pc, #412]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	4a66      	ldr	r2, [pc, #408]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005740:	e00f      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005746:	3308      	adds	r3, #8
 8005748:	2102      	movs	r1, #2
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f902 	bl	8006954 <RCCEx_PLL2_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005756:	e004      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800576a:	4b5a      	ldr	r3, [pc, #360]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800576c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576e:	f023 0103 	bic.w	r1, r3, #3
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005778:	4a56      	ldr	r2, [pc, #344]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800577a:	430b      	orrs	r3, r1
 800577c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800577e:	e003      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005784:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005798:	2300      	movs	r3, #0
 800579a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800579e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80057a2:	460b      	mov	r3, r1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f000 809f 	beq.w	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057aa:	4b4b      	ldr	r3, [pc, #300]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a4a      	ldr	r2, [pc, #296]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b6:	f7fb ff49 	bl	800164c <HAL_GetTick>
 80057ba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c0:	f7fb ff44 	bl	800164c <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b64      	cmp	r3, #100	; 0x64
 80057ce:	d903      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057d6:	e005      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d8:	4b3f      	ldr	r3, [pc, #252]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ed      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80057e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d179      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057ec:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057f8:	4053      	eors	r3, r2
 80057fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d015      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800580e:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a30      	ldr	r2, [pc, #192]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800581a:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005826:	4a2b      	ldr	r2, [pc, #172]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583a:	d118      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fb ff06 	bl	800164c <HAL_GetTick>
 8005840:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005844:	e00d      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7fb ff01 	bl	800164c <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	f241 3388 	movw	r3, #5000	; 0x1388
 8005856:	429a      	cmp	r2, r3
 8005858:	d903      	bls.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005860:	e005      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0eb      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800586e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005872:	2b00      	cmp	r3, #0
 8005874:	d129      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005886:	d10e      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005898:	091a      	lsrs	r2, r3, #4
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800589c:	4013      	ands	r3, r2
 800589e:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6113      	str	r3, [r2, #16]
 80058a4:	e005      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058b0:	6113      	str	r3, [r2, #16]
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c2:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6713      	str	r3, [r2, #112]	; 0x70
 80058c8:	e00e      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80058d2:	e009      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80058d4:	58024400 	.word	0x58024400
 80058d8:	58024800 	.word	0x58024800
 80058dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f002 0301 	and.w	r3, r2, #1
 80058f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058f8:	2300      	movs	r3, #0
 80058fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005902:	460b      	mov	r3, r1
 8005904:	4313      	orrs	r3, r2
 8005906:	f000 8089 	beq.w	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005910:	2b28      	cmp	r3, #40	; 0x28
 8005912:	d86b      	bhi.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	080059f5 	.word	0x080059f5
 8005920:	080059ed 	.word	0x080059ed
 8005924:	080059ed 	.word	0x080059ed
 8005928:	080059ed 	.word	0x080059ed
 800592c:	080059ed 	.word	0x080059ed
 8005930:	080059ed 	.word	0x080059ed
 8005934:	080059ed 	.word	0x080059ed
 8005938:	080059ed 	.word	0x080059ed
 800593c:	080059c1 	.word	0x080059c1
 8005940:	080059ed 	.word	0x080059ed
 8005944:	080059ed 	.word	0x080059ed
 8005948:	080059ed 	.word	0x080059ed
 800594c:	080059ed 	.word	0x080059ed
 8005950:	080059ed 	.word	0x080059ed
 8005954:	080059ed 	.word	0x080059ed
 8005958:	080059ed 	.word	0x080059ed
 800595c:	080059d7 	.word	0x080059d7
 8005960:	080059ed 	.word	0x080059ed
 8005964:	080059ed 	.word	0x080059ed
 8005968:	080059ed 	.word	0x080059ed
 800596c:	080059ed 	.word	0x080059ed
 8005970:	080059ed 	.word	0x080059ed
 8005974:	080059ed 	.word	0x080059ed
 8005978:	080059ed 	.word	0x080059ed
 800597c:	080059f5 	.word	0x080059f5
 8005980:	080059ed 	.word	0x080059ed
 8005984:	080059ed 	.word	0x080059ed
 8005988:	080059ed 	.word	0x080059ed
 800598c:	080059ed 	.word	0x080059ed
 8005990:	080059ed 	.word	0x080059ed
 8005994:	080059ed 	.word	0x080059ed
 8005998:	080059ed 	.word	0x080059ed
 800599c:	080059f5 	.word	0x080059f5
 80059a0:	080059ed 	.word	0x080059ed
 80059a4:	080059ed 	.word	0x080059ed
 80059a8:	080059ed 	.word	0x080059ed
 80059ac:	080059ed 	.word	0x080059ed
 80059b0:	080059ed 	.word	0x080059ed
 80059b4:	080059ed 	.word	0x080059ed
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	080059f5 	.word	0x080059f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c4:	3308      	adds	r3, #8
 80059c6:	2101      	movs	r1, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 ffc3 	bl	8006954 <RCCEx_PLL2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059d4:	e00f      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059da:	3328      	adds	r3, #40	; 0x28
 80059dc:	2101      	movs	r1, #1
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 f86a 	bl	8006ab8 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059ea:	e004      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80059f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059fe:	4bbf      	ldr	r3, [pc, #764]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0c:	4abb      	ldr	r2, [pc, #748]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	6553      	str	r3, [r2, #84]	; 0x54
 8005a12:	e003      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f002 0302 	and.w	r3, r2, #2
 8005a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d041      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d824      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a99 	.word	0x08005a99
 8005a50:	08005a65 	.word	0x08005a65
 8005a54:	08005a7b 	.word	0x08005a7b
 8005a58:	08005a99 	.word	0x08005a99
 8005a5c:	08005a99 	.word	0x08005a99
 8005a60:	08005a99 	.word	0x08005a99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 ff71 	bl	8006954 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a78:	e00f      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	3328      	adds	r3, #40	; 0x28
 8005a80:	2101      	movs	r1, #1
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f818 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e004      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aa2:	4b96      	ldr	r3, [pc, #600]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f023 0107 	bic.w	r1, r3, #7
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab0:	4a92      	ldr	r2, [pc, #584]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6553      	str	r3, [r2, #84]	; 0x54
 8005ab6:	e003      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f002 0304 	and.w	r3, r2, #4
 8005acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	d044      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae8:	2b05      	cmp	r3, #5
 8005aea:	d825      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b41 	.word	0x08005b41
 8005af8:	08005b0d 	.word	0x08005b0d
 8005afc:	08005b23 	.word	0x08005b23
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b41 	.word	0x08005b41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b10:	3308      	adds	r3, #8
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 ff1d 	bl	8006954 <RCCEx_PLL2_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b20:	e00f      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b26:	3328      	adds	r3, #40	; 0x28
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ffc4 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b36:	e004      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b3e:	e000      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b4a:	4b6c      	ldr	r3, [pc, #432]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4e:	f023 0107 	bic.w	r1, r3, #7
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5a:	4a68      	ldr	r2, [pc, #416]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f002 0320 	and.w	r3, r2, #32
 8005b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d055      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b96:	d033      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b9c:	d82c      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d02f      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d826      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005baa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bae:	d02b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005bb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bb4:	d820      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bba:	d012      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc0:	d81a      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d022      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bca:	d115      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 febd 	bl	8006954 <RCCEx_PLL2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005be0:	e015      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be6:	3328      	adds	r3, #40	; 0x28
 8005be8:	2102      	movs	r1, #2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 ff64 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bfe:	e006      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c00:	bf00      	nop
 8005c02:	e004      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6553      	str	r3, [r2, #84]	; 0x54
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4313      	orrs	r3, r2
 8005c54:	d058      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c62:	d033      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c68:	d82c      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d02f      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d826      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c7a:	d02b      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d820      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c86:	d012      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d81a      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d022      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c96:	d115      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fe57 	bl	8006954 <RCCEx_PLL2_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cac:	e015      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	3328      	adds	r3, #40	; 0x28
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fefe 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cc2:	e00a      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cca:	e006      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e004      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e002      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10e      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf2:	4a02      	ldr	r2, [pc, #8]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf8:	e006      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005cfa:	bf00      	nop
 8005cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005d22:	460b      	mov	r3, r1
 8005d24:	4313      	orrs	r3, r2
 8005d26:	d055      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d34:	d033      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d3a:	d82c      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d40:	d02f      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d46:	d826      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d4c:	d02b      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d52:	d820      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d58:	d012      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5e:	d81a      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d022      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d68:	d115      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6e:	3308      	adds	r3, #8
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fdee 	bl	8006954 <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e015      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d84:	3328      	adds	r3, #40	; 0x28
 8005d86:	2102      	movs	r1, #2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fe95 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005d9e:	bf00      	nop
 8005da0:	e004      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005db4:	4ba1      	ldr	r3, [pc, #644]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dc4:	4a9d      	ldr	r2, [pc, #628]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f002 0308 	and.w	r3, r2, #8
 8005de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d01e      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	3328      	adds	r3, #40	; 0x28
 8005e08:	2102      	movs	r1, #2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fe54 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e1c:	4b87      	ldr	r3, [pc, #540]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2c:	4a83      	ldr	r2, [pc, #524]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f002 0310 	and.w	r3, r2, #16
 8005e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e42:	2300      	movs	r3, #0
 8005e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	d01e      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d10c      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e64:	3328      	adds	r3, #40	; 0x28
 8005e66:	2102      	movs	r1, #2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fe25 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e7a:	4b70      	ldr	r3, [pc, #448]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8a:	4a6c      	ldr	r2, [pc, #432]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d03e      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ebc:	d022      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec2:	d81b      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005ece:	e015      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fd3b 	bl	8006954 <RCCEx_PLL2_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ee4:	e00f      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eea:	3328      	adds	r3, #40	; 0x28
 8005eec:	2102      	movs	r1, #2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fde2 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005efa:	e004      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f0e:	4b4b      	ldr	r3, [pc, #300]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f1e:	4a47      	ldr	r2, [pc, #284]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6593      	str	r3, [r2, #88]	; 0x58
 8005f24:	e003      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005f44:	460b      	mov	r3, r1
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d03b      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f56:	d01f      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f5c:	d818      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f68:	d007      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f6a:	e011      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f6c:	4b33      	ldr	r3, [pc, #204]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	4a32      	ldr	r2, [pc, #200]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f78:	e00f      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7e:	3328      	adds	r3, #40	; 0x28
 8005f80:	2101      	movs	r1, #1
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fd98 	bl	8006ab8 <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f8e:	e004      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f96:	e000      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6553      	str	r3, [r2, #84]	; 0x54
 8005fb8:	e003      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005fce:	673b      	str	r3, [r7, #112]	; 0x70
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	677b      	str	r3, [r7, #116]	; 0x74
 8005fd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	d034      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d007      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005fee:	e011      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4a11      	ldr	r2, [pc, #68]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ffc:	e00e      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006002:	3308      	adds	r3, #8
 8006004:	2102      	movs	r1, #2
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fca4 	bl	8006954 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006012:	e003      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800601a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10d      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	4a02      	ldr	r2, [pc, #8]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006034:	430b      	orrs	r3, r1
 8006036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006038:	e006      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006054:	66bb      	str	r3, [r7, #104]	; 0x68
 8006056:	2300      	movs	r3, #0
 8006058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800605a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d00c      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006068:	3328      	adds	r3, #40	; 0x28
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd23 	bl	8006ab8 <RCCEx_PLL3_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800608a:	663b      	str	r3, [r7, #96]	; 0x60
 800608c:	2300      	movs	r3, #0
 800608e:	667b      	str	r3, [r7, #100]	; 0x64
 8006090:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d038      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a6:	d018      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ac:	d811      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d014      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d80b      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80060be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c2:	d106      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4bc3      	ldr	r3, [pc, #780]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	4ac2      	ldr	r2, [pc, #776]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060d0:	e008      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d8:	e004      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80060e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060ec:	4bb9      	ldr	r3, [pc, #740]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fc:	4ab5      	ldr	r2, [pc, #724]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	6553      	str	r3, [r2, #84]	; 0x54
 8006102:	e003      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006118:	65bb      	str	r3, [r7, #88]	; 0x58
 800611a:	2300      	movs	r3, #0
 800611c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800611e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006128:	4baa      	ldr	r3, [pc, #680]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006136:	4aa7      	ldr	r2, [pc, #668]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006138:	430b      	orrs	r3, r1
 800613a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006148:	653b      	str	r3, [r7, #80]	; 0x50
 800614a:	2300      	movs	r3, #0
 800614c:	657b      	str	r3, [r7, #84]	; 0x54
 800614e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006158:	4b9e      	ldr	r3, [pc, #632]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006164:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006168:	4a9a      	ldr	r2, [pc, #616]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800616a:	430b      	orrs	r3, r1
 800616c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48
 800617c:	2300      	movs	r3, #0
 800617e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006180:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006184:	460b      	mov	r3, r1
 8006186:	4313      	orrs	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800618a:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800618c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006198:	4a8e      	ldr	r2, [pc, #568]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800619a:	430b      	orrs	r3, r1
 800619c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80061aa:	643b      	str	r3, [r7, #64]	; 0x40
 80061ac:	2300      	movs	r3, #0
 80061ae:	647b      	str	r3, [r7, #68]	; 0x44
 80061b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80061b4:	460b      	mov	r3, r1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	d00e      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061ba:	4b86      	ldr	r3, [pc, #536]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	4a85      	ldr	r2, [pc, #532]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061c4:	6113      	str	r3, [r2, #16]
 80061c6:	4b83      	ldr	r3, [pc, #524]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c8:	6919      	ldr	r1, [r3, #16]
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80061d2:	4a80      	ldr	r2, [pc, #512]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80061e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e6:	2300      	movs	r3, #0
 80061e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d009      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061f4:	4b77      	ldr	r3, [pc, #476]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	4a74      	ldr	r2, [pc, #464]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006204:	430b      	orrs	r3, r1
 8006206:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006214:	633b      	str	r3, [r7, #48]	; 0x30
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	d00a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006224:	4b6b      	ldr	r3, [pc, #428]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006228:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006234:	4a67      	ldr	r2, [pc, #412]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006236:	430b      	orrs	r3, r1
 8006238:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	2100      	movs	r1, #0
 8006244:	62b9      	str	r1, [r7, #40]	; 0x28
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006250:	460b      	mov	r3, r1
 8006252:	4313      	orrs	r3, r2
 8006254:	d011      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625a:	3308      	adds	r3, #8
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb78 	bl	8006954 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800626a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	2100      	movs	r1, #0
 8006284:	6239      	str	r1, [r7, #32]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
 800628c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006290:	460b      	mov	r3, r1
 8006292:	4313      	orrs	r3, r2
 8006294:	d011      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629a:	3308      	adds	r3, #8
 800629c:	2101      	movs	r1, #1
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fb58 	bl	8006954 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	2100      	movs	r1, #0
 80062c4:	61b9      	str	r1, [r7, #24]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d011      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062da:	3308      	adds	r3, #8
 80062dc:	2102      	movs	r1, #2
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fb38 	bl	8006954 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	2100      	movs	r1, #0
 8006304:	6139      	str	r1, [r7, #16]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006310:	460b      	mov	r3, r1
 8006312:	4313      	orrs	r3, r2
 8006314:	d011      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631a:	3328      	adds	r3, #40	; 0x28
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fbca 	bl	8006ab8 <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800632a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	2100      	movs	r1, #0
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006350:	460b      	mov	r3, r1
 8006352:	4313      	orrs	r3, r2
 8006354:	d011      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635a:	3328      	adds	r3, #40	; 0x28
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fbaa 	bl	8006ab8 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800636a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	2100      	movs	r1, #0
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d011      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639a:	3328      	adds	r3, #40	; 0x28
 800639c:	2102      	movs	r1, #2
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fb8a 	bl	8006ab8 <RCCEx_PLL3_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80063ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80063ce:	46bd      	mov	sp, r7
 80063d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d4:	58024400 	.word	0x58024400

080063d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063dc:	f7fe fd96 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4904      	ldr	r1, [pc, #16]	; (8006400 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	58024400 	.word	0x58024400
 8006400:	08009b88 	.word	0x08009b88

08006404 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800640c:	4ba1      	ldr	r3, [pc, #644]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006416:	4b9f      	ldr	r3, [pc, #636]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	0b1b      	lsrs	r3, r3, #12
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006422:	4b9c      	ldr	r3, [pc, #624]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800642e:	4b99      	ldr	r3, [pc, #612]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8111 	beq.w	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b02      	cmp	r3, #2
 8006456:	f000 8083 	beq.w	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b02      	cmp	r3, #2
 800645e:	f200 80a1 	bhi.w	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d056      	beq.n	800651c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800646e:	e099      	b.n	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006470:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02d      	beq.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800647c:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	4a84      	ldr	r2, [pc, #528]	; (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a6:	4b7b      	ldr	r3, [pc, #492]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064d6:	e087      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ea:	4b6a      	ldr	r3, [pc, #424]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800651a:	e065      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800652a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652e:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006542:	eddf 5a56 	vldr	s11, [pc, #344]	; 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800655e:	e043      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b48      	ldr	r3, [pc, #288]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	ed97 6a03 	vldr	s12, [r7, #12]
 8006586:	eddf 5a45 	vldr	s11, [pc, #276]	; 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a2:	e021      	b.n	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800669c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	0a5b      	lsrs	r3, r3, #9
 80065ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006602:	edd7 6a07 	vldr	s13, [r7, #28]
 8006606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660e:	ee17 2a90 	vmov	r2, s15
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006616:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	0c1b      	lsrs	r3, r3, #16
 800661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800662c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006630:	edd7 6a07 	vldr	s13, [r7, #28]
 8006634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663c:	ee17 2a90 	vmov	r2, s15
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006644:	4b13      	ldr	r3, [pc, #76]	; (8006694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	0e1b      	lsrs	r3, r3, #24
 800664a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800665a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800665e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666a:	ee17 2a90 	vmov	r2, s15
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006672:	e008      	b.n	8006686 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	609a      	str	r2, [r3, #8]
}
 8006686:	bf00      	nop
 8006688:	3724      	adds	r7, #36	; 0x24
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	46000000 	.word	0x46000000
 80066a0:	4c742400 	.word	0x4c742400
 80066a4:	4a742400 	.word	0x4a742400
 80066a8:	4af42400 	.word	0x4af42400

080066ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b089      	sub	sp, #36	; 0x24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b4:	4ba1      	ldr	r3, [pc, #644]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066be:	4b9f      	ldr	r3, [pc, #636]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	0d1b      	lsrs	r3, r3, #20
 80066c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066ca:	4b9c      	ldr	r3, [pc, #624]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066d6:	4b99      	ldr	r3, [pc, #612]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8111 	beq.w	800691c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	f000 8083 	beq.w	8006808 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b02      	cmp	r3, #2
 8006706:	f200 80a1 	bhi.w	800684c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d056      	beq.n	80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006716:	e099      	b.n	800684c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006718:	4b88      	ldr	r3, [pc, #544]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d02d      	beq.n	8006780 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006724:	4b85      	ldr	r3, [pc, #532]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	4a84      	ldr	r2, [pc, #528]	; (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b7b      	ldr	r3, [pc, #492]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006762:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800677e:	e087      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b6a      	ldr	r3, [pc, #424]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c2:	e065      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b59      	ldr	r3, [pc, #356]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006806:	e043      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b48      	ldr	r3, [pc, #288]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a03 	vldr	s12, [r7, #12]
 800682e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684a:	e021      	b.n	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800685a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685e:	4b37      	ldr	r3, [pc, #220]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006872:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800688e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	0a5b      	lsrs	r3, r3, #9
 8006896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b6:	ee17 2a90 	vmov	r2, s15
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068be:	4b1f      	ldr	r3, [pc, #124]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	0c1b      	lsrs	r3, r3, #16
 80068c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e4:	ee17 2a90 	vmov	r2, s15
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006906:	edd7 6a07 	vldr	s13, [r7, #28]
 800690a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006912:	ee17 2a90 	vmov	r2, s15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800691a:	e008      	b.n	800692e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	609a      	str	r2, [r3, #8]
}
 800692e:	bf00      	nop
 8006930:	3724      	adds	r7, #36	; 0x24
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	03d09000 	.word	0x03d09000
 8006944:	46000000 	.word	0x46000000
 8006948:	4c742400 	.word	0x4c742400
 800694c:	4a742400 	.word	0x4a742400
 8006950:	4af42400 	.word	0x4af42400

08006954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006962:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d101      	bne.n	8006972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e099      	b.n	8006aa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006972:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a4e      	ldr	r2, [pc, #312]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800697c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697e:	f7fa fe65 	bl	800164c <HAL_GetTick>
 8006982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006984:	e008      	b.n	8006998 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006986:	f7fa fe61 	bl	800164c <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e086      	b.n	8006aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006998:	4b45      	ldr	r3, [pc, #276]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f0      	bne.n	8006986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069a4:	4b42      	ldr	r3, [pc, #264]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	493f      	ldr	r1, [pc, #252]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	628b      	str	r3, [r1, #40]	; 0x28
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	3b01      	subs	r3, #1
 80069be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	025b      	lsls	r3, r3, #9
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	061b      	lsls	r3, r3, #24
 80069e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069e8:	4931      	ldr	r1, [pc, #196]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069ee:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	492d      	ldr	r1, [pc, #180]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a00:	4b2b      	ldr	r3, [pc, #172]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	f023 0220 	bic.w	r2, r3, #32
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	4928      	ldr	r1, [pc, #160]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a12:	4b27      	ldr	r3, [pc, #156]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	f023 0310 	bic.w	r3, r3, #16
 8006a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <RCCEx_PLL2_Config+0x160>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	69d2      	ldr	r2, [r2, #28]
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	4920      	ldr	r1, [pc, #128]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a32:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	4a1e      	ldr	r2, [pc, #120]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	f043 0310 	orr.w	r3, r3, #16
 8006a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a50:	e00f      	b.n	8006a72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a64:	e005      	b.n	8006a72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	4a11      	ldr	r2, [pc, #68]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7e:	f7fa fde5 	bl	800164c <HAL_GetTick>
 8006a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a84:	e008      	b.n	8006a98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a86:	f7fa fde1 	bl	800164c <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e006      	b.n	8006aa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <RCCEx_PLL2_Config+0x15c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	ffff0007 	.word	0xffff0007

08006ab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ac6:	4b53      	ldr	r3, [pc, #332]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d101      	bne.n	8006ad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e099      	b.n	8006c0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ad6:	4b4f      	ldr	r3, [pc, #316]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a4e      	ldr	r2, [pc, #312]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae2:	f7fa fdb3 	bl	800164c <HAL_GetTick>
 8006ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ae8:	e008      	b.n	8006afc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006aea:	f7fa fdaf 	bl	800164c <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e086      	b.n	8006c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006afc:	4b45      	ldr	r3, [pc, #276]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b08:	4b42      	ldr	r3, [pc, #264]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	051b      	lsls	r3, r3, #20
 8006b16:	493f      	ldr	r1, [pc, #252]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	025b      	lsls	r3, r3, #9
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b4c:	4931      	ldr	r1, [pc, #196]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b52:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	492d      	ldr	r1, [pc, #180]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b64:	4b2b      	ldr	r3, [pc, #172]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	4928      	ldr	r1, [pc, #160]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b76:	4b27      	ldr	r3, [pc, #156]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b86:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <RCCEx_PLL3_Config+0x160>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	69d2      	ldr	r2, [r2, #28]
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	4920      	ldr	r1, [pc, #128]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b96:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bb4:	e00f      	b.n	8006bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bbc:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bc8:	e005      	b.n	8006bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a0e      	ldr	r2, [pc, #56]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be2:	f7fa fd33 	bl	800164c <HAL_GetTick>
 8006be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006be8:	e008      	b.n	8006bfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bea:	f7fa fd2f 	bl	800164c <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <RCCEx_PLL3_Config+0x15c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0f0      	beq.n	8006bea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	58024400 	.word	0x58024400
 8006c18:	ffff0007 	.word	0xffff0007

08006c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e042      	b.n	8006cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fa fa73 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	; 0x24
 8006c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fd28 	bl	80076b4 <UART_SetConfig>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e022      	b.n	8006cb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fa84 	bl	8008184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fb0b 	bl	80082c8 <UART_CheckIdleState>
 8006cb2:	4603      	mov	r3, r0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d17b      	bne.n	8006dce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_UART_Transmit+0x26>
 8006cdc:	88fb      	ldrh	r3, [r7, #6]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e074      	b.n	8006dd0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2221      	movs	r2, #33	; 0x21
 8006cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf6:	f7fa fca9 	bl	800164c <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	88fa      	ldrh	r2, [r7, #6]
 8006d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d14:	d108      	bne.n	8006d28 <HAL_UART_Transmit+0x6c>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e003      	b.n	8006d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d30:	e030      	b.n	8006d94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f001 fb6d 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e03d      	b.n	8006dd0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	e007      	b.n	8006d82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1c8      	bne.n	8006d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2200      	movs	r2, #0
 8006da8:	2140      	movs	r1, #64	; 0x40
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f001 fb36 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e006      	b.n	8006dd0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b091      	sub	sp, #68	; 0x44
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d178      	bne.n	8006ee2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_UART_Transmit_IT+0x24>
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e071      	b.n	8006ee4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	88fa      	ldrh	r2, [r7, #6]
 8006e0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2221      	movs	r2, #33	; 0x21
 8006e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e34:	d12a      	bne.n	8006e8c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3e:	d107      	bne.n	8006e50 <HAL_UART_Transmit_IT+0x78>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a29      	ldr	r2, [pc, #164]	; (8006ef0 <HAL_UART_Transmit_IT+0x118>)
 8006e4c:	679a      	str	r2, [r3, #120]	; 0x78
 8006e4e:	e002      	b.n	8006e56 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a28      	ldr	r2, [pc, #160]	; (8006ef4 <HAL_UART_Transmit_IT+0x11c>)
 8006e54:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e76:	637a      	str	r2, [r7, #52]	; 0x34
 8006e78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e5      	bne.n	8006e56 <HAL_UART_Transmit_IT+0x7e>
 8006e8a:	e028      	b.n	8006ede <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e94:	d107      	bne.n	8006ea6 <HAL_UART_Transmit_IT+0xce>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <HAL_UART_Transmit_IT+0x120>)
 8006ea2:	679a      	str	r2, [r3, #120]	; 0x78
 8006ea4:	e002      	b.n	8006eac <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <HAL_UART_Transmit_IT+0x124>)
 8006eaa:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	69f9      	ldr	r1, [r7, #28]
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e6      	bne.n	8006eac <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e000      	b.n	8006ee4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ee2:	2302      	movs	r3, #2
  }
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3744      	adds	r7, #68	; 0x44
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	0800883f 	.word	0x0800883f
 8006ef4:	0800875f 	.word	0x0800875f
 8006ef8:	0800869d 	.word	0x0800869d
 8006efc:	080085e5 	.word	0x080085e5

08006f00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0ba      	sub	sp, #232	; 0xe8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f2e:	4013      	ands	r3, r2
 8006f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11b      	bne.n	8006f74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d015      	beq.n	8006f74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d105      	bne.n	8006f60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8377 	beq.w	8007658 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
      }
      return;
 8006f72:	e371      	b.n	8007658 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8123 	beq.w	80071c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f82:	4b8d      	ldr	r3, [pc, #564]	; (80071b8 <HAL_UART_IRQHandler+0x2b8>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f8e:	4b8b      	ldr	r3, [pc, #556]	; (80071bc <HAL_UART_IRQHandler+0x2bc>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8116 	beq.w	80071c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d011      	beq.n	8006fc8 <HAL_UART_IRQHandler+0xc8>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fbe:	f043 0201 	orr.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d011      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xf8>
 8006fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d011      	beq.n	8007028 <HAL_UART_IRQHandler+0x128>
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2204      	movs	r2, #4
 8007016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f043 0202 	orr.w	r2, r3, #2
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007040:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007044:	4b5c      	ldr	r3, [pc, #368]	; (80071b8 <HAL_UART_IRQHandler+0x2b8>)
 8007046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2208      	movs	r2, #8
 8007052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705a:	f043 0208 	orr.w	r2, r3, #8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <HAL_UART_IRQHandler+0x196>
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00c      	beq.n	8007096 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 82dd 	beq.w	800765c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d013      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d005      	beq.n	80070fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d054      	beq.n	80071a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 f9f6 	bl	80084ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d146      	bne.n	800719c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800713a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800713e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1d9      	bne.n	800710e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <HAL_UART_IRQHandler+0x2c0>)
 800716c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007174:	4618      	mov	r0, r3
 8007176:	f7fa fee7 	bl	8001f48 <HAL_DMA_Abort_IT>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d019      	beq.n	80071b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800718e:	4610      	mov	r0, r2
 8007190:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007192:	e00f      	b.n	80071b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa77 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719a:	e00b      	b.n	80071b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa73 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a2:	e007      	b.n	80071b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fa6f 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80071b2:	e253      	b.n	800765c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	bf00      	nop
    return;
 80071b6:	e251      	b.n	800765c <HAL_UART_IRQHandler+0x75c>
 80071b8:	10000001 	.word	0x10000001
 80071bc:	04000120 	.word	0x04000120
 80071c0:	080085b9 	.word	0x080085b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	f040 81e7 	bne.w	800759c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 81e0 	beq.w	800759c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 81d9 	beq.w	800759c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2210      	movs	r2, #16
 80071f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	f040 8151 	bne.w	80074a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a96      	ldr	r2, [pc, #600]	; (8007464 <HAL_UART_IRQHandler+0x564>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d068      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a93      	ldr	r2, [pc, #588]	; (8007468 <HAL_UART_IRQHandler+0x568>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d061      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a91      	ldr	r2, [pc, #580]	; (800746c <HAL_UART_IRQHandler+0x56c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d05a      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a8e      	ldr	r2, [pc, #568]	; (8007470 <HAL_UART_IRQHandler+0x570>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d053      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a8c      	ldr	r2, [pc, #560]	; (8007474 <HAL_UART_IRQHandler+0x574>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d04c      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a89      	ldr	r2, [pc, #548]	; (8007478 <HAL_UART_IRQHandler+0x578>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d045      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a87      	ldr	r2, [pc, #540]	; (800747c <HAL_UART_IRQHandler+0x57c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d03e      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a84      	ldr	r2, [pc, #528]	; (8007480 <HAL_UART_IRQHandler+0x580>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d037      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a82      	ldr	r2, [pc, #520]	; (8007484 <HAL_UART_IRQHandler+0x584>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d030      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a7f      	ldr	r2, [pc, #508]	; (8007488 <HAL_UART_IRQHandler+0x588>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d029      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a7d      	ldr	r2, [pc, #500]	; (800748c <HAL_UART_IRQHandler+0x58c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d022      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a7a      	ldr	r2, [pc, #488]	; (8007490 <HAL_UART_IRQHandler+0x590>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01b      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a78      	ldr	r2, [pc, #480]	; (8007494 <HAL_UART_IRQHandler+0x594>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d014      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a75      	ldr	r2, [pc, #468]	; (8007498 <HAL_UART_IRQHandler+0x598>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00d      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a73      	ldr	r2, [pc, #460]	; (800749c <HAL_UART_IRQHandler+0x59c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d006      	beq.n	80072e2 <HAL_UART_IRQHandler+0x3e2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a70      	ldr	r2, [pc, #448]	; (80074a0 <HAL_UART_IRQHandler+0x5a0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d106      	bne.n	80072f0 <HAL_UART_IRQHandler+0x3f0>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	e005      	b.n	80072fc <HAL_UART_IRQHandler+0x3fc>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 81ab 	beq.w	8007660 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007310:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007314:	429a      	cmp	r2, r3
 8007316:	f080 81a3 	bcs.w	8007660 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007320:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007330:	f000 8087 	beq.w	8007442 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800734c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800735e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007362:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800736a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1da      	bne.n	8007334 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800738e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007390:	f023 0301 	bic.w	r3, r3, #1
 8007394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e1      	bne.n	800737e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e3      	bne.n	80073ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800740e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007410:	f023 0310 	bic.w	r3, r3, #16
 8007414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007422:	65bb      	str	r3, [r7, #88]	; 0x58
 8007424:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e4      	bne.n	8007400 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa fa65 	bl	800190c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007454:	b29b      	uxth	r3, r3
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	b29b      	uxth	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f91d 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007462:	e0fd      	b.n	8007660 <HAL_UART_IRQHandler+0x760>
 8007464:	40020010 	.word	0x40020010
 8007468:	40020028 	.word	0x40020028
 800746c:	40020040 	.word	0x40020040
 8007470:	40020058 	.word	0x40020058
 8007474:	40020070 	.word	0x40020070
 8007478:	40020088 	.word	0x40020088
 800747c:	400200a0 	.word	0x400200a0
 8007480:	400200b8 	.word	0x400200b8
 8007484:	40020410 	.word	0x40020410
 8007488:	40020428 	.word	0x40020428
 800748c:	40020440 	.word	0x40020440
 8007490:	40020458 	.word	0x40020458
 8007494:	40020470 	.word	0x40020470
 8007498:	40020488 	.word	0x40020488
 800749c:	400204a0 	.word	0x400204a0
 80074a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80cf 	beq.w	8007664 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80074c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80ca 	beq.w	8007664 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f2:	647b      	str	r3, [r7, #68]	; 0x44
 80074f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e4      	bne.n	80074d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	623b      	str	r3, [r7, #32]
   return(result);
 8007516:	6a3a      	ldr	r2, [r7, #32]
 8007518:	4b55      	ldr	r3, [pc, #340]	; (8007670 <HAL_UART_IRQHandler+0x770>)
 800751a:	4013      	ands	r3, r2
 800751c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800752a:	633a      	str	r2, [r7, #48]	; 0x30
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0310 	bic.w	r3, r3, #16
 8007566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	69b9      	ldr	r1, [r7, #24]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	617b      	str	r3, [r7, #20]
   return(result);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e4      	bne.n	8007552 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800758e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f881 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800759a:	e063      	b.n	8007664 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00e      	beq.n	80075c6 <HAL_UART_IRQHandler+0x6c6>
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f9dd 	bl	800897e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075c4:	e051      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d014      	beq.n	80075fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d03a      	beq.n	8007668 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
    }
    return;
 80075fa:	e035      	b.n	8007668 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d009      	beq.n	800761c <HAL_UART_IRQHandler+0x71c>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f987 	bl	8008928 <UART_EndTransmit_IT>
    return;
 800761a:	e026      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <HAL_UART_IRQHandler+0x73c>
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f9b6 	bl	80089a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800763a:	e016      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <HAL_UART_IRQHandler+0x76a>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	2b00      	cmp	r3, #0
 800764e:	da0c      	bge.n	800766a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f99e 	bl	8008992 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007656:	e008      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
      return;
 8007658:	bf00      	nop
 800765a:	e006      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
    return;
 800765c:	bf00      	nop
 800765e:	e004      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
      return;
 8007660:	bf00      	nop
 8007662:	e002      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
      return;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <HAL_UART_IRQHandler+0x76a>
    return;
 8007668:	bf00      	nop
  }
}
 800766a:	37e8      	adds	r7, #232	; 0xe8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	effffffe 	.word	0xeffffffe

08007674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b8:	b092      	sub	sp, #72	; 0x48
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	4313      	orrs	r3, r2
 80076da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4bbe      	ldr	r3, [pc, #760]	; (80079dc <UART_SetConfig+0x328>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4ab3      	ldr	r2, [pc, #716]	; (80079e0 <UART_SetConfig+0x32c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800771c:	4313      	orrs	r3, r2
 800771e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	4baf      	ldr	r3, [pc, #700]	; (80079e4 <UART_SetConfig+0x330>)
 8007728:	4013      	ands	r3, r2
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007730:	430b      	orrs	r3, r1
 8007732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f023 010f 	bic.w	r1, r3, #15
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4aa6      	ldr	r2, [pc, #664]	; (80079e8 <UART_SetConfig+0x334>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d177      	bne.n	8007844 <UART_SetConfig+0x190>
 8007754:	4ba5      	ldr	r3, [pc, #660]	; (80079ec <UART_SetConfig+0x338>)
 8007756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800775c:	2b28      	cmp	r3, #40	; 0x28
 800775e:	d86d      	bhi.n	800783c <UART_SetConfig+0x188>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <UART_SetConfig+0xb4>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	0800780d 	.word	0x0800780d
 800776c:	0800783d 	.word	0x0800783d
 8007770:	0800783d 	.word	0x0800783d
 8007774:	0800783d 	.word	0x0800783d
 8007778:	0800783d 	.word	0x0800783d
 800777c:	0800783d 	.word	0x0800783d
 8007780:	0800783d 	.word	0x0800783d
 8007784:	0800783d 	.word	0x0800783d
 8007788:	08007815 	.word	0x08007815
 800778c:	0800783d 	.word	0x0800783d
 8007790:	0800783d 	.word	0x0800783d
 8007794:	0800783d 	.word	0x0800783d
 8007798:	0800783d 	.word	0x0800783d
 800779c:	0800783d 	.word	0x0800783d
 80077a0:	0800783d 	.word	0x0800783d
 80077a4:	0800783d 	.word	0x0800783d
 80077a8:	0800781d 	.word	0x0800781d
 80077ac:	0800783d 	.word	0x0800783d
 80077b0:	0800783d 	.word	0x0800783d
 80077b4:	0800783d 	.word	0x0800783d
 80077b8:	0800783d 	.word	0x0800783d
 80077bc:	0800783d 	.word	0x0800783d
 80077c0:	0800783d 	.word	0x0800783d
 80077c4:	0800783d 	.word	0x0800783d
 80077c8:	08007825 	.word	0x08007825
 80077cc:	0800783d 	.word	0x0800783d
 80077d0:	0800783d 	.word	0x0800783d
 80077d4:	0800783d 	.word	0x0800783d
 80077d8:	0800783d 	.word	0x0800783d
 80077dc:	0800783d 	.word	0x0800783d
 80077e0:	0800783d 	.word	0x0800783d
 80077e4:	0800783d 	.word	0x0800783d
 80077e8:	0800782d 	.word	0x0800782d
 80077ec:	0800783d 	.word	0x0800783d
 80077f0:	0800783d 	.word	0x0800783d
 80077f4:	0800783d 	.word	0x0800783d
 80077f8:	0800783d 	.word	0x0800783d
 80077fc:	0800783d 	.word	0x0800783d
 8007800:	0800783d 	.word	0x0800783d
 8007804:	0800783d 	.word	0x0800783d
 8007808:	08007835 	.word	0x08007835
 800780c:	2301      	movs	r3, #1
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e222      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781a:	e21e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007822:	e21a      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782a:	e216      	b.n	8007c5a <UART_SetConfig+0x5a6>
 800782c:	2320      	movs	r3, #32
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007832:	e212      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783a:	e20e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007842:	e20a      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a69      	ldr	r2, [pc, #420]	; (80079f0 <UART_SetConfig+0x33c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d130      	bne.n	80078b0 <UART_SetConfig+0x1fc>
 800784e:	4b67      	ldr	r3, [pc, #412]	; (80079ec <UART_SetConfig+0x338>)
 8007850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b05      	cmp	r3, #5
 8007858:	d826      	bhi.n	80078a8 <UART_SetConfig+0x1f4>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x1ac>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007879 	.word	0x08007879
 8007864:	08007881 	.word	0x08007881
 8007868:	08007889 	.word	0x08007889
 800786c:	08007891 	.word	0x08007891
 8007870:	08007899 	.word	0x08007899
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e1ec      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e1e8      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e1e4      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e1e0      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e1dc      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e1d8      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e1d4      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a4f      	ldr	r2, [pc, #316]	; (80079f4 <UART_SetConfig+0x340>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d130      	bne.n	800791c <UART_SetConfig+0x268>
 80078ba:	4b4c      	ldr	r3, [pc, #304]	; (80079ec <UART_SetConfig+0x338>)
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d826      	bhi.n	8007914 <UART_SetConfig+0x260>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x218>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007905 	.word	0x08007905
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ea:	e1b6      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80078ec:	2304      	movs	r3, #4
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f2:	e1b2      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80078f4:	2308      	movs	r3, #8
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e1ae      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80078fc:	2310      	movs	r3, #16
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007902:	e1aa      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007904:	2320      	movs	r3, #32
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790a:	e1a6      	b.n	8007c5a <UART_SetConfig+0x5a6>
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007912:	e1a2      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791a:	e19e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a35      	ldr	r2, [pc, #212]	; (80079f8 <UART_SetConfig+0x344>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d130      	bne.n	8007988 <UART_SetConfig+0x2d4>
 8007926:	4b31      	ldr	r3, [pc, #196]	; (80079ec <UART_SetConfig+0x338>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	2b05      	cmp	r3, #5
 8007930:	d826      	bhi.n	8007980 <UART_SetConfig+0x2cc>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x284>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007951 	.word	0x08007951
 800793c:	08007959 	.word	0x08007959
 8007940:	08007961 	.word	0x08007961
 8007944:	08007969 	.word	0x08007969
 8007948:	08007971 	.word	0x08007971
 800794c:	08007979 	.word	0x08007979
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e180      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e17c      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e178      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e174      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007976:	e170      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797e:	e16c      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007986:	e168      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <UART_SetConfig+0x348>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d142      	bne.n	8007a18 <UART_SetConfig+0x364>
 8007992:	4b16      	ldr	r3, [pc, #88]	; (80079ec <UART_SetConfig+0x338>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b05      	cmp	r3, #5
 800799c:	d838      	bhi.n	8007a10 <UART_SetConfig+0x35c>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <UART_SetConfig+0x2f0>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079bd 	.word	0x080079bd
 80079a8:	080079c5 	.word	0x080079c5
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	08007a01 	.word	0x08007a01
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e14a      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e146      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e142      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e13e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 80079dc:	cfff69f3 	.word	0xcfff69f3
 80079e0:	58000c00 	.word	0x58000c00
 80079e4:	11fff4ff 	.word	0x11fff4ff
 80079e8:	40011000 	.word	0x40011000
 80079ec:	58024400 	.word	0x58024400
 80079f0:	40004400 	.word	0x40004400
 80079f4:	40004800 	.word	0x40004800
 80079f8:	40004c00 	.word	0x40004c00
 80079fc:	40005000 	.word	0x40005000
 8007a00:	2320      	movs	r3, #32
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e128      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007a08:	2340      	movs	r3, #64	; 0x40
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0e:	e124      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a16:	e120      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4acb      	ldr	r2, [pc, #812]	; (8007d4c <UART_SetConfig+0x698>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d176      	bne.n	8007b10 <UART_SetConfig+0x45c>
 8007a22:	4bcb      	ldr	r3, [pc, #812]	; (8007d50 <UART_SetConfig+0x69c>)
 8007a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a2a:	2b28      	cmp	r3, #40	; 0x28
 8007a2c:	d86c      	bhi.n	8007b08 <UART_SetConfig+0x454>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x380>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007ad9 	.word	0x08007ad9
 8007a38:	08007b09 	.word	0x08007b09
 8007a3c:	08007b09 	.word	0x08007b09
 8007a40:	08007b09 	.word	0x08007b09
 8007a44:	08007b09 	.word	0x08007b09
 8007a48:	08007b09 	.word	0x08007b09
 8007a4c:	08007b09 	.word	0x08007b09
 8007a50:	08007b09 	.word	0x08007b09
 8007a54:	08007ae1 	.word	0x08007ae1
 8007a58:	08007b09 	.word	0x08007b09
 8007a5c:	08007b09 	.word	0x08007b09
 8007a60:	08007b09 	.word	0x08007b09
 8007a64:	08007b09 	.word	0x08007b09
 8007a68:	08007b09 	.word	0x08007b09
 8007a6c:	08007b09 	.word	0x08007b09
 8007a70:	08007b09 	.word	0x08007b09
 8007a74:	08007ae9 	.word	0x08007ae9
 8007a78:	08007b09 	.word	0x08007b09
 8007a7c:	08007b09 	.word	0x08007b09
 8007a80:	08007b09 	.word	0x08007b09
 8007a84:	08007b09 	.word	0x08007b09
 8007a88:	08007b09 	.word	0x08007b09
 8007a8c:	08007b09 	.word	0x08007b09
 8007a90:	08007b09 	.word	0x08007b09
 8007a94:	08007af1 	.word	0x08007af1
 8007a98:	08007b09 	.word	0x08007b09
 8007a9c:	08007b09 	.word	0x08007b09
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007b09 	.word	0x08007b09
 8007aa8:	08007b09 	.word	0x08007b09
 8007aac:	08007b09 	.word	0x08007b09
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007af9 	.word	0x08007af9
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007b09 	.word	0x08007b09
 8007ac8:	08007b09 	.word	0x08007b09
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ade:	e0bc      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae6:	e0b8      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aee:	e0b4      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007af6:	e0b0      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e0ac      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e0a8      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b08:	2380      	movs	r3, #128	; 0x80
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e0a4      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a8f      	ldr	r2, [pc, #572]	; (8007d54 <UART_SetConfig+0x6a0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d130      	bne.n	8007b7c <UART_SetConfig+0x4c8>
 8007b1a:	4b8d      	ldr	r3, [pc, #564]	; (8007d50 <UART_SetConfig+0x69c>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d826      	bhi.n	8007b74 <UART_SetConfig+0x4c0>
 8007b26:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <UART_SetConfig+0x478>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e086      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e082      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e07e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b62:	e07a      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b64:	2320      	movs	r3, #32
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6a:	e076      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b6c:	2340      	movs	r3, #64	; 0x40
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e072      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b74:	2380      	movs	r3, #128	; 0x80
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e06e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a75      	ldr	r2, [pc, #468]	; (8007d58 <UART_SetConfig+0x6a4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d130      	bne.n	8007be8 <UART_SetConfig+0x534>
 8007b86:	4b72      	ldr	r3, [pc, #456]	; (8007d50 <UART_SetConfig+0x69c>)
 8007b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d826      	bhi.n	8007be0 <UART_SetConfig+0x52c>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x4e4>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e050      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e04c      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc6:	e048      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bce:	e044      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007bd0:	2320      	movs	r3, #32
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bd6:	e040      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bde:	e03c      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be6:	e038      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a5b      	ldr	r2, [pc, #364]	; (8007d5c <UART_SetConfig+0x6a8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d130      	bne.n	8007c54 <UART_SetConfig+0x5a0>
 8007bf2:	4b57      	ldr	r3, [pc, #348]	; (8007d50 <UART_SetConfig+0x69c>)
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	2b05      	cmp	r3, #5
 8007bfc:	d826      	bhi.n	8007c4c <UART_SetConfig+0x598>
 8007bfe:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <UART_SetConfig+0x550>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	08007c25 	.word	0x08007c25
 8007c0c:	08007c2d 	.word	0x08007c2d
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c3d 	.word	0x08007c3d
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e01a      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e016      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e012      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3a:	e00e      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c42:	e00a      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4a:	e006      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c52:	e002      	b.n	8007c5a <UART_SetConfig+0x5a6>
 8007c54:	2380      	movs	r3, #128	; 0x80
 8007c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a3f      	ldr	r2, [pc, #252]	; (8007d5c <UART_SetConfig+0x6a8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	f040 80f8 	bne.w	8007e56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	dc46      	bgt.n	8007cfc <UART_SetConfig+0x648>
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	f2c0 8082 	blt.w	8007d78 <UART_SetConfig+0x6c4>
 8007c74:	3b02      	subs	r3, #2
 8007c76:	2b1e      	cmp	r3, #30
 8007c78:	d87e      	bhi.n	8007d78 <UART_SetConfig+0x6c4>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <UART_SetConfig+0x5cc>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007d03 	.word	0x08007d03
 8007c84:	08007d79 	.word	0x08007d79
 8007c88:	08007d0b 	.word	0x08007d0b
 8007c8c:	08007d79 	.word	0x08007d79
 8007c90:	08007d79 	.word	0x08007d79
 8007c94:	08007d79 	.word	0x08007d79
 8007c98:	08007d1b 	.word	0x08007d1b
 8007c9c:	08007d79 	.word	0x08007d79
 8007ca0:	08007d79 	.word	0x08007d79
 8007ca4:	08007d79 	.word	0x08007d79
 8007ca8:	08007d79 	.word	0x08007d79
 8007cac:	08007d79 	.word	0x08007d79
 8007cb0:	08007d79 	.word	0x08007d79
 8007cb4:	08007d79 	.word	0x08007d79
 8007cb8:	08007d2b 	.word	0x08007d2b
 8007cbc:	08007d79 	.word	0x08007d79
 8007cc0:	08007d79 	.word	0x08007d79
 8007cc4:	08007d79 	.word	0x08007d79
 8007cc8:	08007d79 	.word	0x08007d79
 8007ccc:	08007d79 	.word	0x08007d79
 8007cd0:	08007d79 	.word	0x08007d79
 8007cd4:	08007d79 	.word	0x08007d79
 8007cd8:	08007d79 	.word	0x08007d79
 8007cdc:	08007d79 	.word	0x08007d79
 8007ce0:	08007d79 	.word	0x08007d79
 8007ce4:	08007d79 	.word	0x08007d79
 8007ce8:	08007d79 	.word	0x08007d79
 8007cec:	08007d79 	.word	0x08007d79
 8007cf0:	08007d79 	.word	0x08007d79
 8007cf4:	08007d79 	.word	0x08007d79
 8007cf8:	08007d6b 	.word	0x08007d6b
 8007cfc:	2b40      	cmp	r3, #64	; 0x40
 8007cfe:	d037      	beq.n	8007d70 <UART_SetConfig+0x6bc>
 8007d00:	e03a      	b.n	8007d78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d02:	f7fe fb69 	bl	80063d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d08:	e03c      	b.n	8007d84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe fb78 	bl	8006404 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d18:	e034      	b.n	8007d84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d1a:	f107 0318 	add.w	r3, r7, #24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fcc4 	bl	80066ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d28:	e02c      	b.n	8007d84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <UART_SetConfig+0x69c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d016      	beq.n	8007d64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <UART_SetConfig+0x69c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	08db      	lsrs	r3, r3, #3
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	4a07      	ldr	r2, [pc, #28]	; (8007d60 <UART_SetConfig+0x6ac>)
 8007d42:	fa22 f303 	lsr.w	r3, r2, r3
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d48:	e01c      	b.n	8007d84 <UART_SetConfig+0x6d0>
 8007d4a:	bf00      	nop
 8007d4c:	40011400 	.word	0x40011400
 8007d50:	58024400 	.word	0x58024400
 8007d54:	40007800 	.word	0x40007800
 8007d58:	40007c00 	.word	0x40007c00
 8007d5c:	58000c00 	.word	0x58000c00
 8007d60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007d64:	4b9d      	ldr	r3, [pc, #628]	; (8007fdc <UART_SetConfig+0x928>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d68:	e00c      	b.n	8007d84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d6a:	4b9d      	ldr	r3, [pc, #628]	; (8007fe0 <UART_SetConfig+0x92c>)
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d6e:	e009      	b.n	8007d84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d76:	e005      	b.n	8007d84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 81de 	beq.w	8008148 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	4a94      	ldr	r2, [pc, #592]	; (8007fe4 <UART_SetConfig+0x930>)
 8007d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d9e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	4413      	add	r3, r2
 8007daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d305      	bcc.n	8007dbc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d903      	bls.n	8007dc4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007dc2:	e1c1      	b.n	8008148 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	60bb      	str	r3, [r7, #8]
 8007dca:	60fa      	str	r2, [r7, #12]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	4a84      	ldr	r2, [pc, #528]	; (8007fe4 <UART_SetConfig+0x930>)
 8007dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2200      	movs	r2, #0
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	607a      	str	r2, [r7, #4]
 8007dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007de6:	f7f8 facb 	bl	8000380 <__aeabi_uldivmod>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	020b      	lsls	r3, r1, #8
 8007dfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e00:	0202      	lsls	r2, r0, #8
 8007e02:	6979      	ldr	r1, [r7, #20]
 8007e04:	6849      	ldr	r1, [r1, #4]
 8007e06:	0849      	lsrs	r1, r1, #1
 8007e08:	2000      	movs	r0, #0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	eb12 0804 	adds.w	r8, r2, r4
 8007e12:	eb43 0905 	adc.w	r9, r3, r5
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	469a      	mov	sl, r3
 8007e1e:	4693      	mov	fp, r2
 8007e20:	4652      	mov	r2, sl
 8007e22:	465b      	mov	r3, fp
 8007e24:	4640      	mov	r0, r8
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 faaa 	bl	8000380 <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4613      	mov	r3, r2
 8007e32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3a:	d308      	bcc.n	8007e4e <UART_SetConfig+0x79a>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e42:	d204      	bcs.n	8007e4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	e17c      	b.n	8008148 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e54:	e178      	b.n	8008148 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5e:	f040 80c5 	bne.w	8007fec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007e62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	dc48      	bgt.n	8007efc <UART_SetConfig+0x848>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	db7b      	blt.n	8007f66 <UART_SetConfig+0x8b2>
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d879      	bhi.n	8007f66 <UART_SetConfig+0x8b2>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <UART_SetConfig+0x7c4>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007f03 	.word	0x08007f03
 8007e7c:	08007f0b 	.word	0x08007f0b
 8007e80:	08007f67 	.word	0x08007f67
 8007e84:	08007f67 	.word	0x08007f67
 8007e88:	08007f13 	.word	0x08007f13
 8007e8c:	08007f67 	.word	0x08007f67
 8007e90:	08007f67 	.word	0x08007f67
 8007e94:	08007f67 	.word	0x08007f67
 8007e98:	08007f23 	.word	0x08007f23
 8007e9c:	08007f67 	.word	0x08007f67
 8007ea0:	08007f67 	.word	0x08007f67
 8007ea4:	08007f67 	.word	0x08007f67
 8007ea8:	08007f67 	.word	0x08007f67
 8007eac:	08007f67 	.word	0x08007f67
 8007eb0:	08007f67 	.word	0x08007f67
 8007eb4:	08007f67 	.word	0x08007f67
 8007eb8:	08007f33 	.word	0x08007f33
 8007ebc:	08007f67 	.word	0x08007f67
 8007ec0:	08007f67 	.word	0x08007f67
 8007ec4:	08007f67 	.word	0x08007f67
 8007ec8:	08007f67 	.word	0x08007f67
 8007ecc:	08007f67 	.word	0x08007f67
 8007ed0:	08007f67 	.word	0x08007f67
 8007ed4:	08007f67 	.word	0x08007f67
 8007ed8:	08007f67 	.word	0x08007f67
 8007edc:	08007f67 	.word	0x08007f67
 8007ee0:	08007f67 	.word	0x08007f67
 8007ee4:	08007f67 	.word	0x08007f67
 8007ee8:	08007f67 	.word	0x08007f67
 8007eec:	08007f67 	.word	0x08007f67
 8007ef0:	08007f67 	.word	0x08007f67
 8007ef4:	08007f67 	.word	0x08007f67
 8007ef8:	08007f59 	.word	0x08007f59
 8007efc:	2b40      	cmp	r3, #64	; 0x40
 8007efe:	d02e      	beq.n	8007f5e <UART_SetConfig+0x8aa>
 8007f00:	e031      	b.n	8007f66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f02:	f7fd f833 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8007f06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f08:	e033      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f0a:	f7fd f845 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 8007f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f10:	e02f      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fa74 	bl	8006404 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f20:	e027      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f22:	f107 0318 	add.w	r3, r7, #24
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fbc0 	bl	80066ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f30:	e01f      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f32:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <UART_SetConfig+0x934>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f3e:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <UART_SetConfig+0x934>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	08db      	lsrs	r3, r3, #3
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	4a24      	ldr	r2, [pc, #144]	; (8007fdc <UART_SetConfig+0x928>)
 8007f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f50:	e00f      	b.n	8007f72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f52:	4b22      	ldr	r3, [pc, #136]	; (8007fdc <UART_SetConfig+0x928>)
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f56:	e00c      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f58:	4b21      	ldr	r3, [pc, #132]	; (8007fe0 <UART_SetConfig+0x92c>)
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5c:	e009      	b.n	8007f72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f64:	e005      	b.n	8007f72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80e7 	beq.w	8008148 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	4a19      	ldr	r2, [pc, #100]	; (8007fe4 <UART_SetConfig+0x930>)
 8007f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f8c:	005a      	lsls	r2, r3, #1
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	085b      	lsrs	r3, r3, #1
 8007f94:	441a      	add	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	2b0f      	cmp	r3, #15
 8007fa4:	d916      	bls.n	8007fd4 <UART_SetConfig+0x920>
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fac:	d212      	bcs.n	8007fd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f023 030f 	bic.w	r3, r3, #15
 8007fb6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	085b      	lsrs	r3, r3, #1
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007fd0:	60da      	str	r2, [r3, #12]
 8007fd2:	e0b9      	b.n	8008148 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007fda:	e0b5      	b.n	8008148 <UART_SetConfig+0xa94>
 8007fdc:	03d09000 	.word	0x03d09000
 8007fe0:	003d0900 	.word	0x003d0900
 8007fe4:	08009ba8 	.word	0x08009ba8
 8007fe8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	dc49      	bgt.n	8008088 <UART_SetConfig+0x9d4>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	db7c      	blt.n	80080f2 <UART_SetConfig+0xa3e>
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d87a      	bhi.n	80080f2 <UART_SetConfig+0xa3e>
 8007ffc:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x950>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	0800808f 	.word	0x0800808f
 8008008:	08008097 	.word	0x08008097
 800800c:	080080f3 	.word	0x080080f3
 8008010:	080080f3 	.word	0x080080f3
 8008014:	0800809f 	.word	0x0800809f
 8008018:	080080f3 	.word	0x080080f3
 800801c:	080080f3 	.word	0x080080f3
 8008020:	080080f3 	.word	0x080080f3
 8008024:	080080af 	.word	0x080080af
 8008028:	080080f3 	.word	0x080080f3
 800802c:	080080f3 	.word	0x080080f3
 8008030:	080080f3 	.word	0x080080f3
 8008034:	080080f3 	.word	0x080080f3
 8008038:	080080f3 	.word	0x080080f3
 800803c:	080080f3 	.word	0x080080f3
 8008040:	080080f3 	.word	0x080080f3
 8008044:	080080bf 	.word	0x080080bf
 8008048:	080080f3 	.word	0x080080f3
 800804c:	080080f3 	.word	0x080080f3
 8008050:	080080f3 	.word	0x080080f3
 8008054:	080080f3 	.word	0x080080f3
 8008058:	080080f3 	.word	0x080080f3
 800805c:	080080f3 	.word	0x080080f3
 8008060:	080080f3 	.word	0x080080f3
 8008064:	080080f3 	.word	0x080080f3
 8008068:	080080f3 	.word	0x080080f3
 800806c:	080080f3 	.word	0x080080f3
 8008070:	080080f3 	.word	0x080080f3
 8008074:	080080f3 	.word	0x080080f3
 8008078:	080080f3 	.word	0x080080f3
 800807c:	080080f3 	.word	0x080080f3
 8008080:	080080f3 	.word	0x080080f3
 8008084:	080080e5 	.word	0x080080e5
 8008088:	2b40      	cmp	r3, #64	; 0x40
 800808a:	d02e      	beq.n	80080ea <UART_SetConfig+0xa36>
 800808c:	e031      	b.n	80080f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fc ff6d 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8008092:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008094:	e033      	b.n	80080fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008096:	f7fc ff7f 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 800809a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800809c:	e02f      	b.n	80080fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe f9ae 	bl	8006404 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ac:	e027      	b.n	80080fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ae:	f107 0318 	add.w	r3, r7, #24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fafa 	bl	80066ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080bc:	e01f      	b.n	80080fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080be:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <UART_SetConfig+0xac0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d009      	beq.n	80080de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080ca:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <UART_SetConfig+0xac0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	08db      	lsrs	r3, r3, #3
 80080d0:	f003 0303 	and.w	r3, r3, #3
 80080d4:	4a28      	ldr	r2, [pc, #160]	; (8008178 <UART_SetConfig+0xac4>)
 80080d6:	fa22 f303 	lsr.w	r3, r2, r3
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080dc:	e00f      	b.n	80080fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80080de:	4b26      	ldr	r3, [pc, #152]	; (8008178 <UART_SetConfig+0xac4>)
 80080e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e2:	e00c      	b.n	80080fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080e4:	4b25      	ldr	r3, [pc, #148]	; (800817c <UART_SetConfig+0xac8>)
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e8:	e009      	b.n	80080fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f0:	e005      	b.n	80080fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80080fc:	bf00      	nop
    }

    if (pclk != 0U)
 80080fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d021      	beq.n	8008148 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	4a1d      	ldr	r2, [pc, #116]	; (8008180 <UART_SetConfig+0xacc>)
 800810a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800810e:	461a      	mov	r2, r3
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	fbb3 f2f2 	udiv	r2, r3, r2
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	441a      	add	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d909      	bls.n	8008142 <UART_SetConfig+0xa8e>
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008134:	d205      	bcs.n	8008142 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	b29a      	uxth	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	e002      	b.n	8008148 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2201      	movs	r2, #1
 800814c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2201      	movs	r2, #1
 8008154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008164:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008168:	4618      	mov	r0, r3
 800816a:	3748      	adds	r7, #72	; 0x48
 800816c:	46bd      	mov	sp, r7
 800816e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
 8008178:	03d09000 	.word	0x03d09000
 800817c:	003d0900 	.word	0x003d0900
 8008180:	08009ba8 	.word	0x08009ba8

08008184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008282:	d10a      	bne.n	800829a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b098      	sub	sp, #96	; 0x60
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d8:	f7f9 f9b8 	bl	800164c <HAL_GetTick>
 80082dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d12f      	bne.n	800834c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f4:	2200      	movs	r2, #0
 80082f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f88e 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d022      	beq.n	800834c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800831a:	653b      	str	r3, [r7, #80]	; 0x50
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008324:	647b      	str	r3, [r7, #68]	; 0x44
 8008326:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800832a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e6      	bne.n	8008306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e063      	b.n	8008414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b04      	cmp	r3, #4
 8008358:	d149      	bne.n	80083ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008362:	2200      	movs	r2, #0
 8008364:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f857 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d03c      	beq.n	80083ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	623b      	str	r3, [r7, #32]
   return(result);
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
 8008394:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e6      	bne.n	8008374 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c6:	61fa      	str	r2, [r7, #28]
 80083c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	69b9      	ldr	r1, [r7, #24]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	617b      	str	r3, [r7, #20]
   return(result);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e012      	b.n	8008414 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3758      	adds	r7, #88	; 0x58
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842c:	e049      	b.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d045      	beq.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7f9 f909 	bl	800164c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <UART_WaitOnFlagUntilTimeout+0x30>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e048      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d031      	beq.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b08      	cmp	r3, #8
 800846a:	d110      	bne.n	800848e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2208      	movs	r2, #8
 8008472:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f839 	bl	80084ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2208      	movs	r2, #8
 800847e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e029      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849c:	d111      	bne.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f81f 	bl	80084ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e00f      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4013      	ands	r3, r2
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	bf0c      	ite	eq
 80084d2:	2301      	moveq	r3, #1
 80084d4:	2300      	movne	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d0a6      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b095      	sub	sp, #84	; 0x54
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008512:	643b      	str	r3, [r7, #64]	; 0x40
 8008514:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e6      	bne.n	80084f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	61fb      	str	r3, [r7, #28]
   return(result);
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <UART_EndRxTransfer+0xc8>)
 800853a:	4013      	ands	r3, r2
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800854c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e5      	bne.n	8008526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800855e:	2b01      	cmp	r3, #1
 8008560:	d118      	bne.n	8008594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f023 0310 	bic.w	r3, r3, #16
 8008576:	647b      	str	r3, [r7, #68]	; 0x44
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e6      	bne.n	8008562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80085a8:	bf00      	nop
 80085aa:	3754      	adds	r7, #84	; 0x54
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	effffffe 	.word	0xeffffffe

080085b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff f856 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085dc:	bf00      	nop
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b08f      	sub	sp, #60	; 0x3c
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f2:	2b21      	cmp	r3, #33	; 0x21
 80085f4:	d14c      	bne.n	8008690 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d132      	bne.n	8008668 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008622:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e6      	bne.n	8008602 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	60bb      	str	r3, [r7, #8]
   return(result);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6979      	ldr	r1, [r7, #20]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	613b      	str	r3, [r7, #16]
   return(result);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e6      	bne.n	8008634 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008666:	e013      	b.n	8008690 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008690:	bf00      	nop
 8008692:	373c      	adds	r7, #60	; 0x3c
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b091      	sub	sp, #68	; 0x44
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086aa:	2b21      	cmp	r3, #33	; 0x21
 80086ac:	d151      	bne.n	8008752 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d132      	bne.n	8008720 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	623b      	str	r3, [r7, #32]
   return(result);
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	633b      	str	r3, [r7, #48]	; 0x30
 80086da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	69b9      	ldr	r1, [r7, #24]
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	617b      	str	r3, [r7, #20]
   return(result);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e6      	bne.n	80086ec <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800871e:	e018      	b.n	8008752 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008734:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	1c9a      	adds	r2, r3, #2
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008752:	bf00      	nop
 8008754:	3744      	adds	r7, #68	; 0x44
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800875e:	b480      	push	{r7}
 8008760:	b091      	sub	sp, #68	; 0x44
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876c:	2b21      	cmp	r3, #33	; 0x21
 800876e:	d160      	bne.n	8008832 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008776:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008778:	e057      	b.n	800882a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d133      	bne.n	80087ee <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	623b      	str	r3, [r7, #32]
   return(result);
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3308      	adds	r3, #8
 80087a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a6:	633a      	str	r2, [r7, #48]	; 0x30
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e5      	bne.n	8008786 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	69b9      	ldr	r1, [r7, #24]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	617b      	str	r3, [r7, #20]
   return(result);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e6      	bne.n	80087ba <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80087ec:	e021      	b.n	8008832 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d013      	beq.n	8008824 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008800:	781a      	ldrb	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008826:	3b01      	subs	r3, #1
 8008828:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800882a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1a4      	bne.n	800877a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008830:	e7ff      	b.n	8008832 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008832:	bf00      	nop
 8008834:	3744      	adds	r7, #68	; 0x44
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800883e:	b480      	push	{r7}
 8008840:	b091      	sub	sp, #68	; 0x44
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884c:	2b21      	cmp	r3, #33	; 0x21
 800884e:	d165      	bne.n	800891c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008856:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008858:	e05c      	b.n	8008914 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d133      	bne.n	80088ce <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3308      	adds	r3, #8
 800886c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	61fb      	str	r3, [r7, #28]
   return(result);
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3308      	adds	r3, #8
 8008884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800888c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e5      	bne.n	8008866 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ae:	633b      	str	r3, [r7, #48]	; 0x30
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	61bb      	str	r3, [r7, #24]
 80088ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6979      	ldr	r1, [r7, #20]
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	613b      	str	r3, [r7, #16]
   return(result);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e6      	bne.n	800889a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80088cc:	e026      	b.n	800891c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d018      	beq.n	800890e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088f0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	1c9a      	adds	r2, r3, #2
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800890e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008910:	3b01      	subs	r3, #1
 8008912:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008916:	2b00      	cmp	r3, #0
 8008918:	d19f      	bne.n	800885a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800891a:	e7ff      	b.n	800891c <UART_TxISR_16BIT_FIFOEN+0xde>
 800891c:	bf00      	nop
 800891e:	3744      	adds	r7, #68	; 0x44
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	60bb      	str	r3, [r7, #8]
   return(result);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008944:	61fb      	str	r3, [r7, #28]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6979      	ldr	r1, [r7, #20]
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	613b      	str	r3, [r7, #16]
   return(result);
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e6      	bne.n	8008930 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7fe fe7f 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008976:	bf00      	nop
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d101      	bne.n	80089d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e027      	b.n	8008a20 <HAL_UARTEx_DisableFifoMode+0x66>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	; 0x24
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0201 	bic.w	r2, r2, #1
 80089f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e02d      	b.n	8008aa0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2224      	movs	r2, #36	; 0x24
 8008a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0201 	bic.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f84f 	bl	8008b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e02d      	b.n	8008b1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2224      	movs	r2, #36	; 0x24
 8008acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f811 	bl	8008b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d108      	bne.n	8008b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b44:	e031      	b.n	8008baa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b46:	2310      	movs	r3, #16
 8008b48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	0e5b      	lsrs	r3, r3, #25
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	0f5b      	lsrs	r3, r3, #29
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	7b3a      	ldrb	r2, [r7, #12]
 8008b72:	4911      	ldr	r1, [pc, #68]	; (8008bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008b74:	5c8a      	ldrb	r2, [r1, r2]
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b7a:	7b3a      	ldrb	r2, [r7, #12]
 8008b7c:	490f      	ldr	r1, [pc, #60]	; (8008bbc <UARTEx_SetNbDataToProcess+0x98>)
 8008b7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	7b7a      	ldrb	r2, [r7, #13]
 8008b90:	4909      	ldr	r1, [pc, #36]	; (8008bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008b92:	5c8a      	ldrb	r2, [r1, r2]
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b98:	7b7a      	ldrb	r2, [r7, #13]
 8008b9a:	4908      	ldr	r1, [pc, #32]	; (8008bbc <UARTEx_SetNbDataToProcess+0x98>)
 8008b9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	08009bc0 	.word	0x08009bc0
 8008bbc:	08009bc8 	.word	0x08009bc8

08008bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	f107 001c 	add.w	r0, r7, #28
 8008bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d120      	bne.n	8008c1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	4b2a      	ldr	r3, [pc, #168]	; (8008c94 <USB_CoreInit+0xd4>)
 8008bea:	4013      	ands	r3, r2
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d105      	bne.n	8008c0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 faac 	bl	800916c <USB_CoreReset>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
 8008c18:	e01a      	b.n	8008c50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 faa0 	bl	800916c <USB_CoreReset>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
 8008c42:	e005      	b.n	8008c50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d116      	bne.n	8008c84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c64:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <USB_CoreInit+0xd8>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f043 0206 	orr.w	r2, r3, #6
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f043 0220 	orr.w	r2, r3, #32
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c90:	b004      	add	sp, #16
 8008c92:	4770      	bx	lr
 8008c94:	ffbdffbf 	.word	0xffbdffbf
 8008c98:	03ee0000 	.word	0x03ee0000

08008c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f023 0201 	bic.w	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d115      	bne.n	8008d0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cec:	2001      	movs	r0, #1
 8008cee:	f7f8 fcb9 	bl	8001664 <HAL_Delay>
      ms++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fa29 	bl	8009150 <USB_GetMode>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d01e      	beq.n	8008d42 <USB_SetCurrentMode+0x84>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b31      	cmp	r3, #49	; 0x31
 8008d08:	d9f0      	bls.n	8008cec <USB_SetCurrentMode+0x2e>
 8008d0a:	e01a      	b.n	8008d42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d115      	bne.n	8008d3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d1e:	2001      	movs	r0, #1
 8008d20:	f7f8 fca0 	bl	8001664 <HAL_Delay>
      ms++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa10 	bl	8009150 <USB_GetMode>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <USB_SetCurrentMode+0x84>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b31      	cmp	r3, #49	; 0x31
 8008d3a:	d9f0      	bls.n	8008d1e <USB_SetCurrentMode+0x60>
 8008d3c:	e001      	b.n	8008d42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e005      	b.n	8008d4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b32      	cmp	r3, #50	; 0x32
 8008d46:	d101      	bne.n	8008d4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d58:	b084      	sub	sp, #16
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b086      	sub	sp, #24
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
 8008d76:	e009      	b.n	8008d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	3340      	adds	r3, #64	; 0x40
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b0e      	cmp	r3, #14
 8008d90:	d9f2      	bls.n	8008d78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11c      	bne.n	8008dd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da6:	f043 0302 	orr.w	r3, r3, #2
 8008daa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	e005      	b.n	8008dde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008de4:	461a      	mov	r2, r3
 8008de6:	2300      	movs	r3, #0
 8008de8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df0:	4619      	mov	r1, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	461a      	mov	r2, r3
 8008dfa:	680b      	ldr	r3, [r1, #0]
 8008dfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d10c      	bne.n	8008e1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f965 	bl	80090dc <USB_SetDevSpeed>
 8008e12:	e008      	b.n	8008e26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e14:	2101      	movs	r1, #1
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f960 	bl	80090dc <USB_SetDevSpeed>
 8008e1c:	e003      	b.n	8008e26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e1e:	2103      	movs	r1, #3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f95b 	bl	80090dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e26:	2110      	movs	r1, #16
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f8f3 	bl	8009014 <USB_FlushTxFifo>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f91f 	bl	800907c <USB_FlushRxFifo>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e66:	461a      	mov	r2, r3
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	e043      	b.n	8008efa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e88:	d118      	bne.n	8008ebc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	e013      	b.n	8008ece <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	e008      	b.n	8008ece <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eda:	461a      	mov	r2, r3
 8008edc:	2300      	movs	r3, #0
 8008ede:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	461a      	mov	r2, r3
 8008eee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ef2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	613b      	str	r3, [r7, #16]
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d3b7      	bcc.n	8008e72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	613b      	str	r3, [r7, #16]
 8008f06:	e043      	b.n	8008f90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f1e:	d118      	bne.n	8008f52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	461a      	mov	r2, r3
 8008f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	e013      	b.n	8008f64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f48:	461a      	mov	r2, r3
 8008f4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	e008      	b.n	8008f64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	461a      	mov	r2, r3
 8008f60:	2300      	movs	r3, #0
 8008f62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	461a      	mov	r2, r3
 8008f72:	2300      	movs	r3, #0
 8008f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	461a      	mov	r2, r3
 8008f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	613b      	str	r3, [r7, #16]
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d3b7      	bcc.n	8008f08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008faa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	f043 0210 	orr.w	r2, r3, #16
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699a      	ldr	r2, [r3, #24]
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	; (800900c <USB_DevInit+0x2b4>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	f043 0208 	orr.w	r2, r3, #8
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d105      	bne.n	8008ffc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	4b06      	ldr	r3, [pc, #24]	; (8009010 <USB_DevInit+0x2b8>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009008:	b004      	add	sp, #16
 800900a:	4770      	bx	lr
 800900c:	803c3800 	.word	0x803c3800
 8009010:	40000004 	.word	0x40000004

08009014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4a13      	ldr	r2, [pc, #76]	; (8009078 <USB_FlushTxFifo+0x64>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d901      	bls.n	8009034 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e01b      	b.n	800906c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	daf2      	bge.n	8009022 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	019b      	lsls	r3, r3, #6
 8009044:	f043 0220 	orr.w	r2, r3, #32
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4a08      	ldr	r2, [pc, #32]	; (8009078 <USB_FlushTxFifo+0x64>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d901      	bls.n	800905e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e006      	b.n	800906c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b20      	cmp	r3, #32
 8009068:	d0f0      	beq.n	800904c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	00030d40 	.word	0x00030d40

0800907c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4a11      	ldr	r2, [pc, #68]	; (80090d8 <USB_FlushRxFifo+0x5c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d901      	bls.n	800909a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e018      	b.n	80090cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	daf2      	bge.n	8009088 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2210      	movs	r2, #16
 80090aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3301      	adds	r3, #1
 80090b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <USB_FlushRxFifo+0x5c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d901      	bls.n	80090be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e006      	b.n	80090cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	f003 0310 	and.w	r3, r3, #16
 80090c6:	2b10      	cmp	r3, #16
 80090c8:	d0f0      	beq.n	80090ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	00030d40 	.word	0x00030d40

080090dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090fc:	4313      	orrs	r3, r2
 80090fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800910e:	b480      	push	{r7}
 8009110:	b085      	sub	sp, #20
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009128:	f023 0303 	bic.w	r3, r3, #3
 800912c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800913c:	f043 0302 	orr.w	r3, r3, #2
 8009140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	f003 0301 	and.w	r3, r3, #1
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4a13      	ldr	r2, [pc, #76]	; (80091d0 <USB_CoreReset+0x64>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d901      	bls.n	800918a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e01b      	b.n	80091c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	daf2      	bge.n	8009178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f043 0201 	orr.w	r2, r3, #1
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3301      	adds	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <USB_CoreReset+0x64>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d901      	bls.n	80091b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e006      	b.n	80091c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d0f0      	beq.n	80091a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	00030d40 	.word	0x00030d40

080091d4 <siprintf>:
 80091d4:	b40e      	push	{r1, r2, r3}
 80091d6:	b500      	push	{lr}
 80091d8:	b09c      	sub	sp, #112	; 0x70
 80091da:	ab1d      	add	r3, sp, #116	; 0x74
 80091dc:	9002      	str	r0, [sp, #8]
 80091de:	9006      	str	r0, [sp, #24]
 80091e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091e4:	4809      	ldr	r0, [pc, #36]	; (800920c <siprintf+0x38>)
 80091e6:	9107      	str	r1, [sp, #28]
 80091e8:	9104      	str	r1, [sp, #16]
 80091ea:	4909      	ldr	r1, [pc, #36]	; (8009210 <siprintf+0x3c>)
 80091ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f0:	9105      	str	r1, [sp, #20]
 80091f2:	6800      	ldr	r0, [r0, #0]
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	a902      	add	r1, sp, #8
 80091f8:	f000 f9a0 	bl	800953c <_svfiprintf_r>
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	b01c      	add	sp, #112	; 0x70
 8009204:	f85d eb04 	ldr.w	lr, [sp], #4
 8009208:	b003      	add	sp, #12
 800920a:	4770      	bx	lr
 800920c:	2400005c 	.word	0x2400005c
 8009210:	ffff0208 	.word	0xffff0208

08009214 <memset>:
 8009214:	4402      	add	r2, r0
 8009216:	4603      	mov	r3, r0
 8009218:	4293      	cmp	r3, r2
 800921a:	d100      	bne.n	800921e <memset+0xa>
 800921c:	4770      	bx	lr
 800921e:	f803 1b01 	strb.w	r1, [r3], #1
 8009222:	e7f9      	b.n	8009218 <memset+0x4>

08009224 <__errno>:
 8009224:	4b01      	ldr	r3, [pc, #4]	; (800922c <__errno+0x8>)
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	2400005c 	.word	0x2400005c

08009230 <__libc_init_array>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	4d0d      	ldr	r5, [pc, #52]	; (8009268 <__libc_init_array+0x38>)
 8009234:	4c0d      	ldr	r4, [pc, #52]	; (800926c <__libc_init_array+0x3c>)
 8009236:	1b64      	subs	r4, r4, r5
 8009238:	10a4      	asrs	r4, r4, #2
 800923a:	2600      	movs	r6, #0
 800923c:	42a6      	cmp	r6, r4
 800923e:	d109      	bne.n	8009254 <__libc_init_array+0x24>
 8009240:	4d0b      	ldr	r5, [pc, #44]	; (8009270 <__libc_init_array+0x40>)
 8009242:	4c0c      	ldr	r4, [pc, #48]	; (8009274 <__libc_init_array+0x44>)
 8009244:	f000 fc6a 	bl	8009b1c <_init>
 8009248:	1b64      	subs	r4, r4, r5
 800924a:	10a4      	asrs	r4, r4, #2
 800924c:	2600      	movs	r6, #0
 800924e:	42a6      	cmp	r6, r4
 8009250:	d105      	bne.n	800925e <__libc_init_array+0x2e>
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	f855 3b04 	ldr.w	r3, [r5], #4
 8009258:	4798      	blx	r3
 800925a:	3601      	adds	r6, #1
 800925c:	e7ee      	b.n	800923c <__libc_init_array+0xc>
 800925e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009262:	4798      	blx	r3
 8009264:	3601      	adds	r6, #1
 8009266:	e7f2      	b.n	800924e <__libc_init_array+0x1e>
 8009268:	08009c0c 	.word	0x08009c0c
 800926c:	08009c0c 	.word	0x08009c0c
 8009270:	08009c0c 	.word	0x08009c0c
 8009274:	08009c10 	.word	0x08009c10

08009278 <__retarget_lock_acquire_recursive>:
 8009278:	4770      	bx	lr

0800927a <__retarget_lock_release_recursive>:
 800927a:	4770      	bx	lr

0800927c <memcpy>:
 800927c:	440a      	add	r2, r1
 800927e:	4291      	cmp	r1, r2
 8009280:	f100 33ff 	add.w	r3, r0, #4294967295
 8009284:	d100      	bne.n	8009288 <memcpy+0xc>
 8009286:	4770      	bx	lr
 8009288:	b510      	push	{r4, lr}
 800928a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800928e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009292:	4291      	cmp	r1, r2
 8009294:	d1f9      	bne.n	800928a <memcpy+0xe>
 8009296:	bd10      	pop	{r4, pc}

08009298 <_free_r>:
 8009298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800929a:	2900      	cmp	r1, #0
 800929c:	d044      	beq.n	8009328 <_free_r+0x90>
 800929e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a2:	9001      	str	r0, [sp, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f1a1 0404 	sub.w	r4, r1, #4
 80092aa:	bfb8      	it	lt
 80092ac:	18e4      	addlt	r4, r4, r3
 80092ae:	f000 f8df 	bl	8009470 <__malloc_lock>
 80092b2:	4a1e      	ldr	r2, [pc, #120]	; (800932c <_free_r+0x94>)
 80092b4:	9801      	ldr	r0, [sp, #4]
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	b933      	cbnz	r3, 80092c8 <_free_r+0x30>
 80092ba:	6063      	str	r3, [r4, #4]
 80092bc:	6014      	str	r4, [r2, #0]
 80092be:	b003      	add	sp, #12
 80092c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c4:	f000 b8da 	b.w	800947c <__malloc_unlock>
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d908      	bls.n	80092de <_free_r+0x46>
 80092cc:	6825      	ldr	r5, [r4, #0]
 80092ce:	1961      	adds	r1, r4, r5
 80092d0:	428b      	cmp	r3, r1
 80092d2:	bf01      	itttt	eq
 80092d4:	6819      	ldreq	r1, [r3, #0]
 80092d6:	685b      	ldreq	r3, [r3, #4]
 80092d8:	1949      	addeq	r1, r1, r5
 80092da:	6021      	streq	r1, [r4, #0]
 80092dc:	e7ed      	b.n	80092ba <_free_r+0x22>
 80092de:	461a      	mov	r2, r3
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b10b      	cbz	r3, 80092e8 <_free_r+0x50>
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	d9fa      	bls.n	80092de <_free_r+0x46>
 80092e8:	6811      	ldr	r1, [r2, #0]
 80092ea:	1855      	adds	r5, r2, r1
 80092ec:	42a5      	cmp	r5, r4
 80092ee:	d10b      	bne.n	8009308 <_free_r+0x70>
 80092f0:	6824      	ldr	r4, [r4, #0]
 80092f2:	4421      	add	r1, r4
 80092f4:	1854      	adds	r4, r2, r1
 80092f6:	42a3      	cmp	r3, r4
 80092f8:	6011      	str	r1, [r2, #0]
 80092fa:	d1e0      	bne.n	80092be <_free_r+0x26>
 80092fc:	681c      	ldr	r4, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	6053      	str	r3, [r2, #4]
 8009302:	440c      	add	r4, r1
 8009304:	6014      	str	r4, [r2, #0]
 8009306:	e7da      	b.n	80092be <_free_r+0x26>
 8009308:	d902      	bls.n	8009310 <_free_r+0x78>
 800930a:	230c      	movs	r3, #12
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	e7d6      	b.n	80092be <_free_r+0x26>
 8009310:	6825      	ldr	r5, [r4, #0]
 8009312:	1961      	adds	r1, r4, r5
 8009314:	428b      	cmp	r3, r1
 8009316:	bf04      	itt	eq
 8009318:	6819      	ldreq	r1, [r3, #0]
 800931a:	685b      	ldreq	r3, [r3, #4]
 800931c:	6063      	str	r3, [r4, #4]
 800931e:	bf04      	itt	eq
 8009320:	1949      	addeq	r1, r1, r5
 8009322:	6021      	streq	r1, [r4, #0]
 8009324:	6054      	str	r4, [r2, #4]
 8009326:	e7ca      	b.n	80092be <_free_r+0x26>
 8009328:	b003      	add	sp, #12
 800932a:	bd30      	pop	{r4, r5, pc}
 800932c:	24000ab4 	.word	0x24000ab4

08009330 <sbrk_aligned>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4e0e      	ldr	r6, [pc, #56]	; (800936c <sbrk_aligned+0x3c>)
 8009334:	460c      	mov	r4, r1
 8009336:	6831      	ldr	r1, [r6, #0]
 8009338:	4605      	mov	r5, r0
 800933a:	b911      	cbnz	r1, 8009342 <sbrk_aligned+0x12>
 800933c:	f000 fba6 	bl	8009a8c <_sbrk_r>
 8009340:	6030      	str	r0, [r6, #0]
 8009342:	4621      	mov	r1, r4
 8009344:	4628      	mov	r0, r5
 8009346:	f000 fba1 	bl	8009a8c <_sbrk_r>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	d00a      	beq.n	8009364 <sbrk_aligned+0x34>
 800934e:	1cc4      	adds	r4, r0, #3
 8009350:	f024 0403 	bic.w	r4, r4, #3
 8009354:	42a0      	cmp	r0, r4
 8009356:	d007      	beq.n	8009368 <sbrk_aligned+0x38>
 8009358:	1a21      	subs	r1, r4, r0
 800935a:	4628      	mov	r0, r5
 800935c:	f000 fb96 	bl	8009a8c <_sbrk_r>
 8009360:	3001      	adds	r0, #1
 8009362:	d101      	bne.n	8009368 <sbrk_aligned+0x38>
 8009364:	f04f 34ff 	mov.w	r4, #4294967295
 8009368:	4620      	mov	r0, r4
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	24000ab8 	.word	0x24000ab8

08009370 <_malloc_r>:
 8009370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009374:	1ccd      	adds	r5, r1, #3
 8009376:	f025 0503 	bic.w	r5, r5, #3
 800937a:	3508      	adds	r5, #8
 800937c:	2d0c      	cmp	r5, #12
 800937e:	bf38      	it	cc
 8009380:	250c      	movcc	r5, #12
 8009382:	2d00      	cmp	r5, #0
 8009384:	4607      	mov	r7, r0
 8009386:	db01      	blt.n	800938c <_malloc_r+0x1c>
 8009388:	42a9      	cmp	r1, r5
 800938a:	d905      	bls.n	8009398 <_malloc_r+0x28>
 800938c:	230c      	movs	r3, #12
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	2600      	movs	r6, #0
 8009392:	4630      	mov	r0, r6
 8009394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009398:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800946c <_malloc_r+0xfc>
 800939c:	f000 f868 	bl	8009470 <__malloc_lock>
 80093a0:	f8d8 3000 	ldr.w	r3, [r8]
 80093a4:	461c      	mov	r4, r3
 80093a6:	bb5c      	cbnz	r4, 8009400 <_malloc_r+0x90>
 80093a8:	4629      	mov	r1, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	f7ff ffc0 	bl	8009330 <sbrk_aligned>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	4604      	mov	r4, r0
 80093b4:	d155      	bne.n	8009462 <_malloc_r+0xf2>
 80093b6:	f8d8 4000 	ldr.w	r4, [r8]
 80093ba:	4626      	mov	r6, r4
 80093bc:	2e00      	cmp	r6, #0
 80093be:	d145      	bne.n	800944c <_malloc_r+0xdc>
 80093c0:	2c00      	cmp	r4, #0
 80093c2:	d048      	beq.n	8009456 <_malloc_r+0xe6>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	4631      	mov	r1, r6
 80093c8:	4638      	mov	r0, r7
 80093ca:	eb04 0903 	add.w	r9, r4, r3
 80093ce:	f000 fb5d 	bl	8009a8c <_sbrk_r>
 80093d2:	4581      	cmp	r9, r0
 80093d4:	d13f      	bne.n	8009456 <_malloc_r+0xe6>
 80093d6:	6821      	ldr	r1, [r4, #0]
 80093d8:	1a6d      	subs	r5, r5, r1
 80093da:	4629      	mov	r1, r5
 80093dc:	4638      	mov	r0, r7
 80093de:	f7ff ffa7 	bl	8009330 <sbrk_aligned>
 80093e2:	3001      	adds	r0, #1
 80093e4:	d037      	beq.n	8009456 <_malloc_r+0xe6>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	442b      	add	r3, r5
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d038      	beq.n	8009466 <_malloc_r+0xf6>
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	42a2      	cmp	r2, r4
 80093f8:	d12b      	bne.n	8009452 <_malloc_r+0xe2>
 80093fa:	2200      	movs	r2, #0
 80093fc:	605a      	str	r2, [r3, #4]
 80093fe:	e00f      	b.n	8009420 <_malloc_r+0xb0>
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	1b52      	subs	r2, r2, r5
 8009404:	d41f      	bmi.n	8009446 <_malloc_r+0xd6>
 8009406:	2a0b      	cmp	r2, #11
 8009408:	d917      	bls.n	800943a <_malloc_r+0xca>
 800940a:	1961      	adds	r1, r4, r5
 800940c:	42a3      	cmp	r3, r4
 800940e:	6025      	str	r5, [r4, #0]
 8009410:	bf18      	it	ne
 8009412:	6059      	strne	r1, [r3, #4]
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	bf08      	it	eq
 8009418:	f8c8 1000 	streq.w	r1, [r8]
 800941c:	5162      	str	r2, [r4, r5]
 800941e:	604b      	str	r3, [r1, #4]
 8009420:	4638      	mov	r0, r7
 8009422:	f104 060b 	add.w	r6, r4, #11
 8009426:	f000 f829 	bl	800947c <__malloc_unlock>
 800942a:	f026 0607 	bic.w	r6, r6, #7
 800942e:	1d23      	adds	r3, r4, #4
 8009430:	1af2      	subs	r2, r6, r3
 8009432:	d0ae      	beq.n	8009392 <_malloc_r+0x22>
 8009434:	1b9b      	subs	r3, r3, r6
 8009436:	50a3      	str	r3, [r4, r2]
 8009438:	e7ab      	b.n	8009392 <_malloc_r+0x22>
 800943a:	42a3      	cmp	r3, r4
 800943c:	6862      	ldr	r2, [r4, #4]
 800943e:	d1dd      	bne.n	80093fc <_malloc_r+0x8c>
 8009440:	f8c8 2000 	str.w	r2, [r8]
 8009444:	e7ec      	b.n	8009420 <_malloc_r+0xb0>
 8009446:	4623      	mov	r3, r4
 8009448:	6864      	ldr	r4, [r4, #4]
 800944a:	e7ac      	b.n	80093a6 <_malloc_r+0x36>
 800944c:	4634      	mov	r4, r6
 800944e:	6876      	ldr	r6, [r6, #4]
 8009450:	e7b4      	b.n	80093bc <_malloc_r+0x4c>
 8009452:	4613      	mov	r3, r2
 8009454:	e7cc      	b.n	80093f0 <_malloc_r+0x80>
 8009456:	230c      	movs	r3, #12
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	4638      	mov	r0, r7
 800945c:	f000 f80e 	bl	800947c <__malloc_unlock>
 8009460:	e797      	b.n	8009392 <_malloc_r+0x22>
 8009462:	6025      	str	r5, [r4, #0]
 8009464:	e7dc      	b.n	8009420 <_malloc_r+0xb0>
 8009466:	605b      	str	r3, [r3, #4]
 8009468:	deff      	udf	#255	; 0xff
 800946a:	bf00      	nop
 800946c:	24000ab4 	.word	0x24000ab4

08009470 <__malloc_lock>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__malloc_lock+0x8>)
 8009472:	f7ff bf01 	b.w	8009278 <__retarget_lock_acquire_recursive>
 8009476:	bf00      	nop
 8009478:	24000ab0 	.word	0x24000ab0

0800947c <__malloc_unlock>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__malloc_unlock+0x8>)
 800947e:	f7ff befc 	b.w	800927a <__retarget_lock_release_recursive>
 8009482:	bf00      	nop
 8009484:	24000ab0 	.word	0x24000ab0

08009488 <__ssputs_r>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	688e      	ldr	r6, [r1, #8]
 800948e:	461f      	mov	r7, r3
 8009490:	42be      	cmp	r6, r7
 8009492:	680b      	ldr	r3, [r1, #0]
 8009494:	4682      	mov	sl, r0
 8009496:	460c      	mov	r4, r1
 8009498:	4690      	mov	r8, r2
 800949a:	d82c      	bhi.n	80094f6 <__ssputs_r+0x6e>
 800949c:	898a      	ldrh	r2, [r1, #12]
 800949e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094a2:	d026      	beq.n	80094f2 <__ssputs_r+0x6a>
 80094a4:	6965      	ldr	r5, [r4, #20]
 80094a6:	6909      	ldr	r1, [r1, #16]
 80094a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094ac:	eba3 0901 	sub.w	r9, r3, r1
 80094b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094b4:	1c7b      	adds	r3, r7, #1
 80094b6:	444b      	add	r3, r9
 80094b8:	106d      	asrs	r5, r5, #1
 80094ba:	429d      	cmp	r5, r3
 80094bc:	bf38      	it	cc
 80094be:	461d      	movcc	r5, r3
 80094c0:	0553      	lsls	r3, r2, #21
 80094c2:	d527      	bpl.n	8009514 <__ssputs_r+0x8c>
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7ff ff53 	bl	8009370 <_malloc_r>
 80094ca:	4606      	mov	r6, r0
 80094cc:	b360      	cbz	r0, 8009528 <__ssputs_r+0xa0>
 80094ce:	6921      	ldr	r1, [r4, #16]
 80094d0:	464a      	mov	r2, r9
 80094d2:	f7ff fed3 	bl	800927c <memcpy>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	6126      	str	r6, [r4, #16]
 80094e4:	6165      	str	r5, [r4, #20]
 80094e6:	444e      	add	r6, r9
 80094e8:	eba5 0509 	sub.w	r5, r5, r9
 80094ec:	6026      	str	r6, [r4, #0]
 80094ee:	60a5      	str	r5, [r4, #8]
 80094f0:	463e      	mov	r6, r7
 80094f2:	42be      	cmp	r6, r7
 80094f4:	d900      	bls.n	80094f8 <__ssputs_r+0x70>
 80094f6:	463e      	mov	r6, r7
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	4632      	mov	r2, r6
 80094fc:	4641      	mov	r1, r8
 80094fe:	f000 faab 	bl	8009a58 <memmove>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	1b9b      	subs	r3, r3, r6
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	4433      	add	r3, r6
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	2000      	movs	r0, #0
 8009510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009514:	462a      	mov	r2, r5
 8009516:	f000 fac9 	bl	8009aac <_realloc_r>
 800951a:	4606      	mov	r6, r0
 800951c:	2800      	cmp	r0, #0
 800951e:	d1e0      	bne.n	80094e2 <__ssputs_r+0x5a>
 8009520:	6921      	ldr	r1, [r4, #16]
 8009522:	4650      	mov	r0, sl
 8009524:	f7ff feb8 	bl	8009298 <_free_r>
 8009528:	230c      	movs	r3, #12
 800952a:	f8ca 3000 	str.w	r3, [sl]
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	e7e9      	b.n	8009510 <__ssputs_r+0x88>

0800953c <_svfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4698      	mov	r8, r3
 8009542:	898b      	ldrh	r3, [r1, #12]
 8009544:	061b      	lsls	r3, r3, #24
 8009546:	b09d      	sub	sp, #116	; 0x74
 8009548:	4607      	mov	r7, r0
 800954a:	460d      	mov	r5, r1
 800954c:	4614      	mov	r4, r2
 800954e:	d50e      	bpl.n	800956e <_svfiprintf_r+0x32>
 8009550:	690b      	ldr	r3, [r1, #16]
 8009552:	b963      	cbnz	r3, 800956e <_svfiprintf_r+0x32>
 8009554:	2140      	movs	r1, #64	; 0x40
 8009556:	f7ff ff0b 	bl	8009370 <_malloc_r>
 800955a:	6028      	str	r0, [r5, #0]
 800955c:	6128      	str	r0, [r5, #16]
 800955e:	b920      	cbnz	r0, 800956a <_svfiprintf_r+0x2e>
 8009560:	230c      	movs	r3, #12
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	e0d0      	b.n	800970c <_svfiprintf_r+0x1d0>
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	616b      	str	r3, [r5, #20]
 800956e:	2300      	movs	r3, #0
 8009570:	9309      	str	r3, [sp, #36]	; 0x24
 8009572:	2320      	movs	r3, #32
 8009574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009578:	f8cd 800c 	str.w	r8, [sp, #12]
 800957c:	2330      	movs	r3, #48	; 0x30
 800957e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009724 <_svfiprintf_r+0x1e8>
 8009582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009586:	f04f 0901 	mov.w	r9, #1
 800958a:	4623      	mov	r3, r4
 800958c:	469a      	mov	sl, r3
 800958e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009592:	b10a      	cbz	r2, 8009598 <_svfiprintf_r+0x5c>
 8009594:	2a25      	cmp	r2, #37	; 0x25
 8009596:	d1f9      	bne.n	800958c <_svfiprintf_r+0x50>
 8009598:	ebba 0b04 	subs.w	fp, sl, r4
 800959c:	d00b      	beq.n	80095b6 <_svfiprintf_r+0x7a>
 800959e:	465b      	mov	r3, fp
 80095a0:	4622      	mov	r2, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	4638      	mov	r0, r7
 80095a6:	f7ff ff6f 	bl	8009488 <__ssputs_r>
 80095aa:	3001      	adds	r0, #1
 80095ac:	f000 80a9 	beq.w	8009702 <_svfiprintf_r+0x1c6>
 80095b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b2:	445a      	add	r2, fp
 80095b4:	9209      	str	r2, [sp, #36]	; 0x24
 80095b6:	f89a 3000 	ldrb.w	r3, [sl]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80a1 	beq.w	8009702 <_svfiprintf_r+0x1c6>
 80095c0:	2300      	movs	r3, #0
 80095c2:	f04f 32ff 	mov.w	r2, #4294967295
 80095c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ca:	f10a 0a01 	add.w	sl, sl, #1
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	9307      	str	r3, [sp, #28]
 80095d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095d6:	931a      	str	r3, [sp, #104]	; 0x68
 80095d8:	4654      	mov	r4, sl
 80095da:	2205      	movs	r2, #5
 80095dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e0:	4850      	ldr	r0, [pc, #320]	; (8009724 <_svfiprintf_r+0x1e8>)
 80095e2:	f7f6 fe7d 	bl	80002e0 <memchr>
 80095e6:	9a04      	ldr	r2, [sp, #16]
 80095e8:	b9d8      	cbnz	r0, 8009622 <_svfiprintf_r+0xe6>
 80095ea:	06d0      	lsls	r0, r2, #27
 80095ec:	bf44      	itt	mi
 80095ee:	2320      	movmi	r3, #32
 80095f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f4:	0711      	lsls	r1, r2, #28
 80095f6:	bf44      	itt	mi
 80095f8:	232b      	movmi	r3, #43	; 0x2b
 80095fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009602:	2b2a      	cmp	r3, #42	; 0x2a
 8009604:	d015      	beq.n	8009632 <_svfiprintf_r+0xf6>
 8009606:	9a07      	ldr	r2, [sp, #28]
 8009608:	4654      	mov	r4, sl
 800960a:	2000      	movs	r0, #0
 800960c:	f04f 0c0a 	mov.w	ip, #10
 8009610:	4621      	mov	r1, r4
 8009612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	2b09      	cmp	r3, #9
 800961a:	d94d      	bls.n	80096b8 <_svfiprintf_r+0x17c>
 800961c:	b1b0      	cbz	r0, 800964c <_svfiprintf_r+0x110>
 800961e:	9207      	str	r2, [sp, #28]
 8009620:	e014      	b.n	800964c <_svfiprintf_r+0x110>
 8009622:	eba0 0308 	sub.w	r3, r0, r8
 8009626:	fa09 f303 	lsl.w	r3, r9, r3
 800962a:	4313      	orrs	r3, r2
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	46a2      	mov	sl, r4
 8009630:	e7d2      	b.n	80095d8 <_svfiprintf_r+0x9c>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	1d19      	adds	r1, r3, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	9103      	str	r1, [sp, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	bfbb      	ittet	lt
 800963e:	425b      	neglt	r3, r3
 8009640:	f042 0202 	orrlt.w	r2, r2, #2
 8009644:	9307      	strge	r3, [sp, #28]
 8009646:	9307      	strlt	r3, [sp, #28]
 8009648:	bfb8      	it	lt
 800964a:	9204      	strlt	r2, [sp, #16]
 800964c:	7823      	ldrb	r3, [r4, #0]
 800964e:	2b2e      	cmp	r3, #46	; 0x2e
 8009650:	d10c      	bne.n	800966c <_svfiprintf_r+0x130>
 8009652:	7863      	ldrb	r3, [r4, #1]
 8009654:	2b2a      	cmp	r3, #42	; 0x2a
 8009656:	d134      	bne.n	80096c2 <_svfiprintf_r+0x186>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	1d1a      	adds	r2, r3, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	9203      	str	r2, [sp, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfb8      	it	lt
 8009664:	f04f 33ff 	movlt.w	r3, #4294967295
 8009668:	3402      	adds	r4, #2
 800966a:	9305      	str	r3, [sp, #20]
 800966c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009734 <_svfiprintf_r+0x1f8>
 8009670:	7821      	ldrb	r1, [r4, #0]
 8009672:	2203      	movs	r2, #3
 8009674:	4650      	mov	r0, sl
 8009676:	f7f6 fe33 	bl	80002e0 <memchr>
 800967a:	b138      	cbz	r0, 800968c <_svfiprintf_r+0x150>
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	eba0 000a 	sub.w	r0, r0, sl
 8009682:	2240      	movs	r2, #64	; 0x40
 8009684:	4082      	lsls	r2, r0
 8009686:	4313      	orrs	r3, r2
 8009688:	3401      	adds	r4, #1
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009690:	4825      	ldr	r0, [pc, #148]	; (8009728 <_svfiprintf_r+0x1ec>)
 8009692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009696:	2206      	movs	r2, #6
 8009698:	f7f6 fe22 	bl	80002e0 <memchr>
 800969c:	2800      	cmp	r0, #0
 800969e:	d038      	beq.n	8009712 <_svfiprintf_r+0x1d6>
 80096a0:	4b22      	ldr	r3, [pc, #136]	; (800972c <_svfiprintf_r+0x1f0>)
 80096a2:	bb1b      	cbnz	r3, 80096ec <_svfiprintf_r+0x1b0>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	3307      	adds	r3, #7
 80096a8:	f023 0307 	bic.w	r3, r3, #7
 80096ac:	3308      	adds	r3, #8
 80096ae:	9303      	str	r3, [sp, #12]
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	4433      	add	r3, r6
 80096b4:	9309      	str	r3, [sp, #36]	; 0x24
 80096b6:	e768      	b.n	800958a <_svfiprintf_r+0x4e>
 80096b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096bc:	460c      	mov	r4, r1
 80096be:	2001      	movs	r0, #1
 80096c0:	e7a6      	b.n	8009610 <_svfiprintf_r+0xd4>
 80096c2:	2300      	movs	r3, #0
 80096c4:	3401      	adds	r4, #1
 80096c6:	9305      	str	r3, [sp, #20]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f04f 0c0a 	mov.w	ip, #10
 80096ce:	4620      	mov	r0, r4
 80096d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d4:	3a30      	subs	r2, #48	; 0x30
 80096d6:	2a09      	cmp	r2, #9
 80096d8:	d903      	bls.n	80096e2 <_svfiprintf_r+0x1a6>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0c6      	beq.n	800966c <_svfiprintf_r+0x130>
 80096de:	9105      	str	r1, [sp, #20]
 80096e0:	e7c4      	b.n	800966c <_svfiprintf_r+0x130>
 80096e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80096e6:	4604      	mov	r4, r0
 80096e8:	2301      	movs	r3, #1
 80096ea:	e7f0      	b.n	80096ce <_svfiprintf_r+0x192>
 80096ec:	ab03      	add	r3, sp, #12
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	462a      	mov	r2, r5
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <_svfiprintf_r+0x1f4>)
 80096f4:	a904      	add	r1, sp, #16
 80096f6:	4638      	mov	r0, r7
 80096f8:	f3af 8000 	nop.w
 80096fc:	1c42      	adds	r2, r0, #1
 80096fe:	4606      	mov	r6, r0
 8009700:	d1d6      	bne.n	80096b0 <_svfiprintf_r+0x174>
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	065b      	lsls	r3, r3, #25
 8009706:	f53f af2d 	bmi.w	8009564 <_svfiprintf_r+0x28>
 800970a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800970c:	b01d      	add	sp, #116	; 0x74
 800970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	462a      	mov	r2, r5
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <_svfiprintf_r+0x1f4>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	4638      	mov	r0, r7
 800971e:	f000 f879 	bl	8009814 <_printf_i>
 8009722:	e7eb      	b.n	80096fc <_svfiprintf_r+0x1c0>
 8009724:	08009bd0 	.word	0x08009bd0
 8009728:	08009bda 	.word	0x08009bda
 800972c:	00000000 	.word	0x00000000
 8009730:	08009489 	.word	0x08009489
 8009734:	08009bd6 	.word	0x08009bd6

08009738 <_printf_common>:
 8009738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800973c:	4616      	mov	r6, r2
 800973e:	4699      	mov	r9, r3
 8009740:	688a      	ldr	r2, [r1, #8]
 8009742:	690b      	ldr	r3, [r1, #16]
 8009744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009748:	4293      	cmp	r3, r2
 800974a:	bfb8      	it	lt
 800974c:	4613      	movlt	r3, r2
 800974e:	6033      	str	r3, [r6, #0]
 8009750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009754:	4607      	mov	r7, r0
 8009756:	460c      	mov	r4, r1
 8009758:	b10a      	cbz	r2, 800975e <_printf_common+0x26>
 800975a:	3301      	adds	r3, #1
 800975c:	6033      	str	r3, [r6, #0]
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	0699      	lsls	r1, r3, #26
 8009762:	bf42      	ittt	mi
 8009764:	6833      	ldrmi	r3, [r6, #0]
 8009766:	3302      	addmi	r3, #2
 8009768:	6033      	strmi	r3, [r6, #0]
 800976a:	6825      	ldr	r5, [r4, #0]
 800976c:	f015 0506 	ands.w	r5, r5, #6
 8009770:	d106      	bne.n	8009780 <_printf_common+0x48>
 8009772:	f104 0a19 	add.w	sl, r4, #25
 8009776:	68e3      	ldr	r3, [r4, #12]
 8009778:	6832      	ldr	r2, [r6, #0]
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	42ab      	cmp	r3, r5
 800977e:	dc26      	bgt.n	80097ce <_printf_common+0x96>
 8009780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009784:	1e13      	subs	r3, r2, #0
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	bf18      	it	ne
 800978a:	2301      	movne	r3, #1
 800978c:	0692      	lsls	r2, r2, #26
 800978e:	d42b      	bmi.n	80097e8 <_printf_common+0xb0>
 8009790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009794:	4649      	mov	r1, r9
 8009796:	4638      	mov	r0, r7
 8009798:	47c0      	blx	r8
 800979a:	3001      	adds	r0, #1
 800979c:	d01e      	beq.n	80097dc <_printf_common+0xa4>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	f003 0306 	and.w	r3, r3, #6
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	bf02      	ittt	eq
 80097aa:	68e5      	ldreq	r5, [r4, #12]
 80097ac:	6833      	ldreq	r3, [r6, #0]
 80097ae:	1aed      	subeq	r5, r5, r3
 80097b0:	68a3      	ldr	r3, [r4, #8]
 80097b2:	bf0c      	ite	eq
 80097b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097b8:	2500      	movne	r5, #0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	bfc4      	itt	gt
 80097be:	1a9b      	subgt	r3, r3, r2
 80097c0:	18ed      	addgt	r5, r5, r3
 80097c2:	2600      	movs	r6, #0
 80097c4:	341a      	adds	r4, #26
 80097c6:	42b5      	cmp	r5, r6
 80097c8:	d11a      	bne.n	8009800 <_printf_common+0xc8>
 80097ca:	2000      	movs	r0, #0
 80097cc:	e008      	b.n	80097e0 <_printf_common+0xa8>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4652      	mov	r2, sl
 80097d2:	4649      	mov	r1, r9
 80097d4:	4638      	mov	r0, r7
 80097d6:	47c0      	blx	r8
 80097d8:	3001      	adds	r0, #1
 80097da:	d103      	bne.n	80097e4 <_printf_common+0xac>
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e4:	3501      	adds	r5, #1
 80097e6:	e7c6      	b.n	8009776 <_printf_common+0x3e>
 80097e8:	18e1      	adds	r1, r4, r3
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	2030      	movs	r0, #48	; 0x30
 80097ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097f2:	4422      	add	r2, r4
 80097f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097fc:	3302      	adds	r3, #2
 80097fe:	e7c7      	b.n	8009790 <_printf_common+0x58>
 8009800:	2301      	movs	r3, #1
 8009802:	4622      	mov	r2, r4
 8009804:	4649      	mov	r1, r9
 8009806:	4638      	mov	r0, r7
 8009808:	47c0      	blx	r8
 800980a:	3001      	adds	r0, #1
 800980c:	d0e6      	beq.n	80097dc <_printf_common+0xa4>
 800980e:	3601      	adds	r6, #1
 8009810:	e7d9      	b.n	80097c6 <_printf_common+0x8e>
	...

08009814 <_printf_i>:
 8009814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	7e0f      	ldrb	r7, [r1, #24]
 800981a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800981c:	2f78      	cmp	r7, #120	; 0x78
 800981e:	4691      	mov	r9, r2
 8009820:	4680      	mov	r8, r0
 8009822:	460c      	mov	r4, r1
 8009824:	469a      	mov	sl, r3
 8009826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800982a:	d807      	bhi.n	800983c <_printf_i+0x28>
 800982c:	2f62      	cmp	r7, #98	; 0x62
 800982e:	d80a      	bhi.n	8009846 <_printf_i+0x32>
 8009830:	2f00      	cmp	r7, #0
 8009832:	f000 80d4 	beq.w	80099de <_printf_i+0x1ca>
 8009836:	2f58      	cmp	r7, #88	; 0x58
 8009838:	f000 80c0 	beq.w	80099bc <_printf_i+0x1a8>
 800983c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009844:	e03a      	b.n	80098bc <_printf_i+0xa8>
 8009846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800984a:	2b15      	cmp	r3, #21
 800984c:	d8f6      	bhi.n	800983c <_printf_i+0x28>
 800984e:	a101      	add	r1, pc, #4	; (adr r1, 8009854 <_printf_i+0x40>)
 8009850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009854:	080098ad 	.word	0x080098ad
 8009858:	080098c1 	.word	0x080098c1
 800985c:	0800983d 	.word	0x0800983d
 8009860:	0800983d 	.word	0x0800983d
 8009864:	0800983d 	.word	0x0800983d
 8009868:	0800983d 	.word	0x0800983d
 800986c:	080098c1 	.word	0x080098c1
 8009870:	0800983d 	.word	0x0800983d
 8009874:	0800983d 	.word	0x0800983d
 8009878:	0800983d 	.word	0x0800983d
 800987c:	0800983d 	.word	0x0800983d
 8009880:	080099c5 	.word	0x080099c5
 8009884:	080098ed 	.word	0x080098ed
 8009888:	0800997f 	.word	0x0800997f
 800988c:	0800983d 	.word	0x0800983d
 8009890:	0800983d 	.word	0x0800983d
 8009894:	080099e7 	.word	0x080099e7
 8009898:	0800983d 	.word	0x0800983d
 800989c:	080098ed 	.word	0x080098ed
 80098a0:	0800983d 	.word	0x0800983d
 80098a4:	0800983d 	.word	0x0800983d
 80098a8:	08009987 	.word	0x08009987
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	602a      	str	r2, [r5, #0]
 80098b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098bc:	2301      	movs	r3, #1
 80098be:	e09f      	b.n	8009a00 <_printf_i+0x1ec>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	682b      	ldr	r3, [r5, #0]
 80098c4:	0607      	lsls	r7, r0, #24
 80098c6:	f103 0104 	add.w	r1, r3, #4
 80098ca:	6029      	str	r1, [r5, #0]
 80098cc:	d501      	bpl.n	80098d2 <_printf_i+0xbe>
 80098ce:	681e      	ldr	r6, [r3, #0]
 80098d0:	e003      	b.n	80098da <_printf_i+0xc6>
 80098d2:	0646      	lsls	r6, r0, #25
 80098d4:	d5fb      	bpl.n	80098ce <_printf_i+0xba>
 80098d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80098da:	2e00      	cmp	r6, #0
 80098dc:	da03      	bge.n	80098e6 <_printf_i+0xd2>
 80098de:	232d      	movs	r3, #45	; 0x2d
 80098e0:	4276      	negs	r6, r6
 80098e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e6:	485a      	ldr	r0, [pc, #360]	; (8009a50 <_printf_i+0x23c>)
 80098e8:	230a      	movs	r3, #10
 80098ea:	e012      	b.n	8009912 <_printf_i+0xfe>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	6820      	ldr	r0, [r4, #0]
 80098f0:	1d19      	adds	r1, r3, #4
 80098f2:	6029      	str	r1, [r5, #0]
 80098f4:	0605      	lsls	r5, r0, #24
 80098f6:	d501      	bpl.n	80098fc <_printf_i+0xe8>
 80098f8:	681e      	ldr	r6, [r3, #0]
 80098fa:	e002      	b.n	8009902 <_printf_i+0xee>
 80098fc:	0641      	lsls	r1, r0, #25
 80098fe:	d5fb      	bpl.n	80098f8 <_printf_i+0xe4>
 8009900:	881e      	ldrh	r6, [r3, #0]
 8009902:	4853      	ldr	r0, [pc, #332]	; (8009a50 <_printf_i+0x23c>)
 8009904:	2f6f      	cmp	r7, #111	; 0x6f
 8009906:	bf0c      	ite	eq
 8009908:	2308      	moveq	r3, #8
 800990a:	230a      	movne	r3, #10
 800990c:	2100      	movs	r1, #0
 800990e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009912:	6865      	ldr	r5, [r4, #4]
 8009914:	60a5      	str	r5, [r4, #8]
 8009916:	2d00      	cmp	r5, #0
 8009918:	bfa2      	ittt	ge
 800991a:	6821      	ldrge	r1, [r4, #0]
 800991c:	f021 0104 	bicge.w	r1, r1, #4
 8009920:	6021      	strge	r1, [r4, #0]
 8009922:	b90e      	cbnz	r6, 8009928 <_printf_i+0x114>
 8009924:	2d00      	cmp	r5, #0
 8009926:	d04b      	beq.n	80099c0 <_printf_i+0x1ac>
 8009928:	4615      	mov	r5, r2
 800992a:	fbb6 f1f3 	udiv	r1, r6, r3
 800992e:	fb03 6711 	mls	r7, r3, r1, r6
 8009932:	5dc7      	ldrb	r7, [r0, r7]
 8009934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009938:	4637      	mov	r7, r6
 800993a:	42bb      	cmp	r3, r7
 800993c:	460e      	mov	r6, r1
 800993e:	d9f4      	bls.n	800992a <_printf_i+0x116>
 8009940:	2b08      	cmp	r3, #8
 8009942:	d10b      	bne.n	800995c <_printf_i+0x148>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	07de      	lsls	r6, r3, #31
 8009948:	d508      	bpl.n	800995c <_printf_i+0x148>
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	6861      	ldr	r1, [r4, #4]
 800994e:	4299      	cmp	r1, r3
 8009950:	bfde      	ittt	le
 8009952:	2330      	movle	r3, #48	; 0x30
 8009954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800995c:	1b52      	subs	r2, r2, r5
 800995e:	6122      	str	r2, [r4, #16]
 8009960:	f8cd a000 	str.w	sl, [sp]
 8009964:	464b      	mov	r3, r9
 8009966:	aa03      	add	r2, sp, #12
 8009968:	4621      	mov	r1, r4
 800996a:	4640      	mov	r0, r8
 800996c:	f7ff fee4 	bl	8009738 <_printf_common>
 8009970:	3001      	adds	r0, #1
 8009972:	d14a      	bne.n	8009a0a <_printf_i+0x1f6>
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	b004      	add	sp, #16
 800997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	f043 0320 	orr.w	r3, r3, #32
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	4833      	ldr	r0, [pc, #204]	; (8009a54 <_printf_i+0x240>)
 8009988:	2778      	movs	r7, #120	; 0x78
 800998a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	6829      	ldr	r1, [r5, #0]
 8009992:	061f      	lsls	r7, r3, #24
 8009994:	f851 6b04 	ldr.w	r6, [r1], #4
 8009998:	d402      	bmi.n	80099a0 <_printf_i+0x18c>
 800999a:	065f      	lsls	r7, r3, #25
 800999c:	bf48      	it	mi
 800999e:	b2b6      	uxthmi	r6, r6
 80099a0:	07df      	lsls	r7, r3, #31
 80099a2:	bf48      	it	mi
 80099a4:	f043 0320 	orrmi.w	r3, r3, #32
 80099a8:	6029      	str	r1, [r5, #0]
 80099aa:	bf48      	it	mi
 80099ac:	6023      	strmi	r3, [r4, #0]
 80099ae:	b91e      	cbnz	r6, 80099b8 <_printf_i+0x1a4>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	f023 0320 	bic.w	r3, r3, #32
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	2310      	movs	r3, #16
 80099ba:	e7a7      	b.n	800990c <_printf_i+0xf8>
 80099bc:	4824      	ldr	r0, [pc, #144]	; (8009a50 <_printf_i+0x23c>)
 80099be:	e7e4      	b.n	800998a <_printf_i+0x176>
 80099c0:	4615      	mov	r5, r2
 80099c2:	e7bd      	b.n	8009940 <_printf_i+0x12c>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	6826      	ldr	r6, [r4, #0]
 80099c8:	6961      	ldr	r1, [r4, #20]
 80099ca:	1d18      	adds	r0, r3, #4
 80099cc:	6028      	str	r0, [r5, #0]
 80099ce:	0635      	lsls	r5, r6, #24
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	d501      	bpl.n	80099d8 <_printf_i+0x1c4>
 80099d4:	6019      	str	r1, [r3, #0]
 80099d6:	e002      	b.n	80099de <_printf_i+0x1ca>
 80099d8:	0670      	lsls	r0, r6, #25
 80099da:	d5fb      	bpl.n	80099d4 <_printf_i+0x1c0>
 80099dc:	8019      	strh	r1, [r3, #0]
 80099de:	2300      	movs	r3, #0
 80099e0:	6123      	str	r3, [r4, #16]
 80099e2:	4615      	mov	r5, r2
 80099e4:	e7bc      	b.n	8009960 <_printf_i+0x14c>
 80099e6:	682b      	ldr	r3, [r5, #0]
 80099e8:	1d1a      	adds	r2, r3, #4
 80099ea:	602a      	str	r2, [r5, #0]
 80099ec:	681d      	ldr	r5, [r3, #0]
 80099ee:	6862      	ldr	r2, [r4, #4]
 80099f0:	2100      	movs	r1, #0
 80099f2:	4628      	mov	r0, r5
 80099f4:	f7f6 fc74 	bl	80002e0 <memchr>
 80099f8:	b108      	cbz	r0, 80099fe <_printf_i+0x1ea>
 80099fa:	1b40      	subs	r0, r0, r5
 80099fc:	6060      	str	r0, [r4, #4]
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	2300      	movs	r3, #0
 8009a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a08:	e7aa      	b.n	8009960 <_printf_i+0x14c>
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	4649      	mov	r1, r9
 8009a10:	4640      	mov	r0, r8
 8009a12:	47d0      	blx	sl
 8009a14:	3001      	adds	r0, #1
 8009a16:	d0ad      	beq.n	8009974 <_printf_i+0x160>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	079b      	lsls	r3, r3, #30
 8009a1c:	d413      	bmi.n	8009a46 <_printf_i+0x232>
 8009a1e:	68e0      	ldr	r0, [r4, #12]
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	4298      	cmp	r0, r3
 8009a24:	bfb8      	it	lt
 8009a26:	4618      	movlt	r0, r3
 8009a28:	e7a6      	b.n	8009978 <_printf_i+0x164>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4649      	mov	r1, r9
 8009a30:	4640      	mov	r0, r8
 8009a32:	47d0      	blx	sl
 8009a34:	3001      	adds	r0, #1
 8009a36:	d09d      	beq.n	8009974 <_printf_i+0x160>
 8009a38:	3501      	adds	r5, #1
 8009a3a:	68e3      	ldr	r3, [r4, #12]
 8009a3c:	9903      	ldr	r1, [sp, #12]
 8009a3e:	1a5b      	subs	r3, r3, r1
 8009a40:	42ab      	cmp	r3, r5
 8009a42:	dcf2      	bgt.n	8009a2a <_printf_i+0x216>
 8009a44:	e7eb      	b.n	8009a1e <_printf_i+0x20a>
 8009a46:	2500      	movs	r5, #0
 8009a48:	f104 0619 	add.w	r6, r4, #25
 8009a4c:	e7f5      	b.n	8009a3a <_printf_i+0x226>
 8009a4e:	bf00      	nop
 8009a50:	08009be1 	.word	0x08009be1
 8009a54:	08009bf2 	.word	0x08009bf2

08009a58 <memmove>:
 8009a58:	4288      	cmp	r0, r1
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	eb01 0402 	add.w	r4, r1, r2
 8009a60:	d902      	bls.n	8009a68 <memmove+0x10>
 8009a62:	4284      	cmp	r4, r0
 8009a64:	4623      	mov	r3, r4
 8009a66:	d807      	bhi.n	8009a78 <memmove+0x20>
 8009a68:	1e43      	subs	r3, r0, #1
 8009a6a:	42a1      	cmp	r1, r4
 8009a6c:	d008      	beq.n	8009a80 <memmove+0x28>
 8009a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a76:	e7f8      	b.n	8009a6a <memmove+0x12>
 8009a78:	4402      	add	r2, r0
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	428a      	cmp	r2, r1
 8009a7e:	d100      	bne.n	8009a82 <memmove+0x2a>
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a8a:	e7f7      	b.n	8009a7c <memmove+0x24>

08009a8c <_sbrk_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	4d06      	ldr	r5, [pc, #24]	; (8009aa8 <_sbrk_r+0x1c>)
 8009a90:	2300      	movs	r3, #0
 8009a92:	4604      	mov	r4, r0
 8009a94:	4608      	mov	r0, r1
 8009a96:	602b      	str	r3, [r5, #0]
 8009a98:	f7f7 fc6a 	bl	8001370 <_sbrk>
 8009a9c:	1c43      	adds	r3, r0, #1
 8009a9e:	d102      	bne.n	8009aa6 <_sbrk_r+0x1a>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	b103      	cbz	r3, 8009aa6 <_sbrk_r+0x1a>
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	bd38      	pop	{r3, r4, r5, pc}
 8009aa8:	24000aac 	.word	0x24000aac

08009aac <_realloc_r>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	4680      	mov	r8, r0
 8009ab2:	4614      	mov	r4, r2
 8009ab4:	460e      	mov	r6, r1
 8009ab6:	b921      	cbnz	r1, 8009ac2 <_realloc_r+0x16>
 8009ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009abc:	4611      	mov	r1, r2
 8009abe:	f7ff bc57 	b.w	8009370 <_malloc_r>
 8009ac2:	b92a      	cbnz	r2, 8009ad0 <_realloc_r+0x24>
 8009ac4:	f7ff fbe8 	bl	8009298 <_free_r>
 8009ac8:	4625      	mov	r5, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad0:	f000 f81b 	bl	8009b0a <_malloc_usable_size_r>
 8009ad4:	4284      	cmp	r4, r0
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	d802      	bhi.n	8009ae0 <_realloc_r+0x34>
 8009ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ade:	d812      	bhi.n	8009b06 <_realloc_r+0x5a>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	f7ff fc44 	bl	8009370 <_malloc_r>
 8009ae8:	4605      	mov	r5, r0
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d0ed      	beq.n	8009aca <_realloc_r+0x1e>
 8009aee:	42bc      	cmp	r4, r7
 8009af0:	4622      	mov	r2, r4
 8009af2:	4631      	mov	r1, r6
 8009af4:	bf28      	it	cs
 8009af6:	463a      	movcs	r2, r7
 8009af8:	f7ff fbc0 	bl	800927c <memcpy>
 8009afc:	4631      	mov	r1, r6
 8009afe:	4640      	mov	r0, r8
 8009b00:	f7ff fbca 	bl	8009298 <_free_r>
 8009b04:	e7e1      	b.n	8009aca <_realloc_r+0x1e>
 8009b06:	4635      	mov	r5, r6
 8009b08:	e7df      	b.n	8009aca <_realloc_r+0x1e>

08009b0a <_malloc_usable_size_r>:
 8009b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b0e:	1f18      	subs	r0, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bfbc      	itt	lt
 8009b14:	580b      	ldrlt	r3, [r1, r0]
 8009b16:	18c0      	addlt	r0, r0, r3
 8009b18:	4770      	bx	lr
	...

08009b1c <_init>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr

08009b28 <_fini>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr
