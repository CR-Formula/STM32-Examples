
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a360  0800a360  0001a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800a364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a3c8  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a428  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  24000124  0800a488  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000b1c  0800a488  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020152  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d9c3  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea6  00000000  00000000  0003db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00040a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f26  00000000  00000000  00041d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038c4d  00000000  00000000  00042ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b5a  00000000  00000000  0007b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001692ca  00000000  00000000  0009544d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c8  00000000  00000000  001fe718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  002040e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a254 	.word	0x0800a254

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a254 	.word	0x0800a254

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f001 f80a 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f8aa 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 fac2 	bl	8000c10 <MX_GPIO_Init>
  MX_ETH_Init();
 800068c:	f000 f926 	bl	80008dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000690:	f000 fa40 	bl	8000b14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000694:	f000 fa8a 	bl	8000bac <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8000698:	f000 f96c 	bl	8000974 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800069c:	f000 f9d2 	bl	8000a44 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  // Start FDCAN 1 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80006a0:	4844      	ldr	r0, [pc, #272]	; (80007b4 <main+0x138>)
 80006a2:	f002 fd45 	bl	8003130 <HAL_FDCAN_Start>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x34>
	  Error_Handler();
 80006ac:	f000 fbfa 	bl	8000ea4 <Error_Handler>
  }

  // Start FDCAN 2 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80006b0:	4841      	ldr	r0, [pc, #260]	; (80007b8 <main+0x13c>)
 80006b2:	f002 fd3d 	bl	8003130 <HAL_FDCAN_Start>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <main+0x44>
	  Error_Handler();
 80006bc:	f000 fbf2 	bl	8000ea4 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	483b      	ldr	r0, [pc, #236]	; (80007b4 <main+0x138>)
 80006c6:	f002 ff6d 	bl	80035a4 <HAL_FDCAN_ActivateNotification>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <main+0x58>
	  Error_Handler();
 80006d0:	f000 fbe8 	bl	8000ea4 <Error_Handler>
  }


  // Activate the notification for new data in FIFO1 for FDCAN2
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	4837      	ldr	r0, [pc, #220]	; (80007b8 <main+0x13c>)
 80006da:	f002 ff63 	bl	80035a4 <HAL_FDCAN_ActivateNotification>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <main+0x6c>
	  Error_Handler();
 80006e4:	f000 fbde 	bl	8000ea4 <Error_Handler>
  }

  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11; // ID of the Transmitter, which is going to be 0x11 for the FDCAN1
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <main+0x140>)
 80006ea:	2211      	movs	r2, #17
 80006ec:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID; // Type of CAN ID
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <main+0x140>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME; // Implies whether we are sending a Data frame or Remote frame
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <main+0x140>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8; // This is the length of the actual Data we are going to send
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <main+0x140>)
 80006fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000700:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Will notify us if there is any error in transmission
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <main+0x140>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF; // Using the same bitrate for both Arbitration and Data Fields
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <main+0x140>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN; // Implies whether you want to use the standard CAN or FD CAN
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <main+0x140>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // Not using TXEvent or MessageMarker
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <main+0x140>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <main+0x140>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]


  // Configure TX Header for FDCAN2
  TxHeader2.Identifier = 0x22;
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <main+0x144>)
 8000722:	2222      	movs	r2, #34	; 0x22
 8000724:	601a      	str	r2, [r3, #0]
  TxHeader2.IdType = FDCAN_STANDARD_ID;
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <main+0x144>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x144>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <main+0x144>)
 8000734:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000738:	60da      	str	r2, [r3, #12]
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <main+0x144>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <main+0x144>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0x144>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <main+0x144>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0x144>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf ((char *)TxData1, "CAN1TX %d", indx++); // Add data to the TX Buffer
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <main+0x148>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <main+0x148>)
 8000762:	7011      	strb	r1, [r2, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4918      	ldr	r1, [pc, #96]	; (80007c8 <main+0x14c>)
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <main+0x150>)
 800076a:	f009 f8cf 	bl	800990c <siprintf>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK) { // Add the message to the TX Queue and send it
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <main+0x150>)
 8000770:	4912      	ldr	r1, [pc, #72]	; (80007bc <main+0x140>)
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <main+0x138>)
 8000774:	f002 fd07 	bl	8003186 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <main+0x106>
		  Error_Handler();
 800077e:	f000 fb91 	bl	8000ea4 <Error_Handler>
	  }

	  HAL_Delay (1000); // Delay for 1 Second
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f001 f819 	bl	80017bc <HAL_Delay>

	  if(HAL_FDCAN_IsRxBufferMessageAvailable(&hfdcan2, 0) == '1') { // Checks for a new CAN Message
 800078a:	2100      	movs	r1, #0
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <main+0x13c>)
 800078e:	f002 fec3 	bl	8003518 <HAL_FDCAN_IsRxBufferMessageAvailable>
 8000792:	4603      	mov	r3, r0
 8000794:	2b31      	cmp	r3, #49	; 0x31
 8000796:	d1df      	bne.n	8000758 <main+0xdc>
		  HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader2, RxData2); // Gets the new CAN Message
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <main+0x154>)
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <main+0x158>)
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <main+0x13c>)
 80007a0:	f002 fd4c 	bl	800323c <HAL_FDCAN_GetRxMessage>
		  HAL_UART_Transmit_IT(&huart3, RxData2[8], sizeof(RxData2[8]));
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <main+0x154>)
 80007a6:	7a1b      	ldrb	r3, [r3, #8]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0x15c>)
 80007ae:	f006 feaf 	bl	8007510 <HAL_UART_Transmit_IT>
	  sprintf ((char *)TxData1, "CAN1TX %d", indx++); // Add data to the TX Buffer
 80007b2:	e7d1      	b.n	8000758 <main+0xdc>
 80007b4:	24000228 	.word	0x24000228
 80007b8:	240002c8 	.word	0x240002c8
 80007bc:	24000908 	.word	0x24000908
 80007c0:	24000964 	.word	0x24000964
 80007c4:	24000000 	.word	0x24000000
 80007c8:	0800a26c 	.word	0x0800a26c
 80007cc:	24000954 	.word	0x24000954
 80007d0:	240009b8 	.word	0x240009b8
 80007d4:	24000988 	.word	0x24000988
 80007d8:	24000368 	.word	0x24000368

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f009 f8ae 	bl	800994c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 f8a8 	bl	800994c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f003 ff4d 	bl	800469c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <SystemClock_Config+0xf8>)
 8000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080a:	4a32      	ldr	r2, [pc, #200]	; (80008d4 <SystemClock_Config+0xf8>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <SystemClock_Config+0xf8>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <SystemClock_Config+0xfc>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <SystemClock_Config+0xfc>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <SystemClock_Config+0xfc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <SystemClock_Config+0xfc>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000848:	2303      	movs	r3, #3
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000852:	2301      	movs	r3, #1
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000866:	2312      	movs	r3, #18
 8000868:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800086e:	2303      	movs	r3, #3
 8000870:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000876:	230c      	movs	r3, #12
 8000878:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800087a:	2302      	movs	r3, #2
 800087c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800087e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000882:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4618      	mov	r0, r3
 800088a:	f003 ff51 	bl	8004730 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000894:	f000 fb06 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	233f      	movs	r3, #63	; 0x3f
 800089a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 fb91 	bl	8004fe4 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80008c8:	f000 faec 	bl	8000ea4 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3770      	adds	r7, #112	; 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58000400 	.word	0x58000400
 80008d8:	58024800 	.word	0x58024800

080008dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_ETH_Init+0x80>)
 80008e2:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <MX_ETH_Init+0x84>)
 80008e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ETH_Init+0x88>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ETH_Init+0x88>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_ETH_Init+0x88>)
 80008f4:	22e1      	movs	r2, #225	; 0xe1
 80008f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ETH_Init+0x88>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_ETH_Init+0x88>)
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_ETH_Init+0x88>)
 8000906:	2200      	movs	r2, #0
 8000908:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_ETH_Init+0x80>)
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <MX_ETH_Init+0x88>)
 800090e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_ETH_Init+0x80>)
 8000912:	2201      	movs	r2, #1
 8000914:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ETH_Init+0x80>)
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_ETH_Init+0x8c>)
 800091a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ETH_Init+0x80>)
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_ETH_Init+0x90>)
 8000920:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_ETH_Init+0x80>)
 8000924:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000928:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_ETH_Init+0x80>)
 800092c:	f001 fdfe 	bl	800252c <HAL_ETH_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000936:	f000 fab5 	bl	8000ea4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800093a:	2238      	movs	r2, #56	; 0x38
 800093c:	2100      	movs	r1, #0
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_ETH_Init+0x94>)
 8000940:	f009 f804 	bl	800994c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_ETH_Init+0x94>)
 8000946:	2221      	movs	r2, #33	; 0x21
 8000948:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_ETH_Init+0x94>)
 800094c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000950:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_ETH_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24000178 	.word	0x24000178
 8000960:	40028000 	.word	0x40028000
 8000964:	240009c0 	.word	0x240009c0
 8000968:	240000c4 	.word	0x240000c4
 800096c:	24000064 	.word	0x24000064
 8000970:	24000140 	.word	0x24000140

08000974 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 800097c:	4a30      	ldr	r2, [pc, #192]	; (8000a40 <MX_FDCAN1_Init+0xcc>)
 800097e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000980:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800098c:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 800098e:	2201      	movs	r2, #1
 8000990:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000994:	2200      	movs	r2, #0
 8000996:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 800099a:	2200      	movs	r2, #0
 800099c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009a6:	220d      	movs	r2, #13
 80009a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009ac:	2256      	movs	r2, #86	; 0x56
 80009ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009b2:	220d      	movs	r2, #13
 80009b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009b8:	2219      	movs	r2, #25
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009be:	2201      	movs	r2, #1
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_FDCAN1_Init+0xc8>)
 8000a24:	f002 f9a6 	bl	8002d74 <HAL_FDCAN_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a2e:	f000 fa39 	bl	8000ea4 <Error_Handler>
//  		Error_Handler();
//  	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	24000228 	.word	0x24000228
 8000a40:	4000a000 	.word	0x4000a000

08000a44 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a4c:	4a30      	ldr	r2, [pc, #192]	; (8000b10 <MX_FDCAN2_Init+0xcc>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a50:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a76:	220d      	movs	r2, #13
 8000a78:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a7c:	2256      	movs	r2, #86	; 0x56
 8000a7e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a82:	220d      	movs	r2, #13
 8000a84:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a88:	2219      	movs	r2, #25
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 10;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_FDCAN2_Init+0xc8>)
 8000af4:	f002 f93e 	bl	8002d74 <HAL_FDCAN_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000afe:	f000 f9d1 	bl	8000ea4 <Error_Handler>
//  	  Error_Handler();
//  	}

  /* USER CODE END FDCAN2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	240002c8 	.word	0x240002c8
 8000b10:	4000a400 	.word	0x4000a400

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_USART3_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f006 fbf9 	bl	8007354 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f99c 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b70:	f008 faf8 	bl	8009164 <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 f993 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b82:	f008 fb2d 	bl	80091e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 f98a 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f008 faae 	bl	80090f2 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f982 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000368 	.word	0x24000368
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb8:	2209      	movs	r2, #9
 8000bba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf4:	f003 fc09 	bl	800440a <HAL_PCD_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bfe:	f000 f951 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	240003fc 	.word	0x240003fc
 8000c0c:	40080000 	.word	0x40080000

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b62      	ldr	r3, [pc, #392]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a60      	ldr	r2, [pc, #384]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a59      	ldr	r2, [pc, #356]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b56      	ldr	r3, [pc, #344]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a51      	ldr	r2, [pc, #324]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a4a      	ldr	r2, [pc, #296]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbc:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a3b      	ldr	r2, [pc, #236]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cda:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x1a0>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cfe:	482d      	ldr	r0, [pc, #180]	; (8000db4 <MX_GPIO_Init+0x1a4>)
 8000d00:	f003 fb6a 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0a:	482b      	ldr	r0, [pc, #172]	; (8000db8 <MX_GPIO_Init+0x1a8>)
 8000d0c:	f003 fb64 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2102      	movs	r1, #2
 8000d14:	4829      	ldr	r0, [pc, #164]	; (8000dbc <MX_GPIO_Init+0x1ac>)
 8000d16:	f003 fb5f 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4824      	ldr	r0, [pc, #144]	; (8000dc0 <MX_GPIO_Init+0x1b0>)
 8000d30:	f003 f9a2 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <MX_GPIO_Init+0x1a4>)
 8000d4e:	f003 f993 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_GPIO_Init+0x1a8>)
 8000d6c:	f003 f984 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <MX_GPIO_Init+0x1b4>)
 8000d86:	f003 f977 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_GPIO_Init+0x1ac>)
 8000da2:	f003 f969 	bl	8004078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020400 	.word	0x58020400
 8000db8:	58020c00 	.word	0x58020c00
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58020800 	.word	0x58020800
 8000dc4:	58021800 	.word	0x58021800

08000dc8 <HAL_FDCAN_RxFifo1Callback>:

/* USER CODE BEGIN 4 */

// FDCAN2 Callback for interrupt
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d029      	beq.n	8000e30 <HAL_FDCAN_RxFifo1Callback+0x68>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_FDCAN_RxFifo1Callback+0x70>)
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_FDCAN_RxFifo1Callback+0x74>)
 8000de0:	2141      	movs	r1, #65	; 0x41
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f002 fa2a 	bl	800323c <HAL_FDCAN_GetRxMessage>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000dee:	f000 f859 	bl	8000ea4 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fbd4 	bl	80035a4 <HAL_FDCAN_ActivateNotification>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000e02:	f000 f84f 	bl	8000ea4 <Error_Handler>
    }

	  sprintf ((char *)TxData2, "CAN2TX %d", indx++);
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	b2d1      	uxtb	r1, r2
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000e10:	7011      	strb	r1, [r2, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	490b      	ldr	r1, [pc, #44]	; (8000e44 <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8000e16:	480c      	ldr	r0, [pc, #48]	; (8000e48 <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000e18:	f008 fd78 	bl	800990c <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000e1e:	490b      	ldr	r1, [pc, #44]	; (8000e4c <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000e22:	f002 f9b0 	bl	8003186 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_FDCAN_RxFifo1Callback+0x68>
	  {
		  Error_Handler();
 8000e2c:	f000 f83a 	bl	8000ea4 <Error_Handler>
	  }
  }
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240009b8 	.word	0x240009b8
 8000e3c:	24000988 	.word	0x24000988
 8000e40:	24000000 	.word	0x24000000
 8000e44:	0800a278 	.word	0x0800a278
 8000e48:	240009b0 	.word	0x240009b0
 8000e4c:	24000964 	.word	0x24000964
 8000e50:	240002c8 	.word	0x240002c8

08000e54 <HAL_FDCAN_RxFifo0Callback>:

// FDCAN1 Callback for interrupt
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d014      	beq.n	8000e92 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f002 f9e4 	bl	800323c <HAL_FDCAN_GetRxMessage>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000e7a:	f000 f813 	bl	8000ea4 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2101      	movs	r1, #1
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f002 fb8e 	bl	80035a4 <HAL_FDCAN_ActivateNotification>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000e8e:	f000 f809 	bl	8000ea4 <Error_Handler>
    }
  }
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2400095c 	.word	0x2400095c
 8000ea0:	2400092c 	.word	0x2400092c

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eaa:	b672      	cpsid	i
}
 8000eac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t eMessage[16];
  sprintf((char*) &eMessage, "Error\n");
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4905      	ldr	r1, [pc, #20]	; (8000ec8 <Error_Handler+0x24>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 fd2a 	bl	800990c <siprintf>
  HAL_UART_Transmit(&huart3, eMessage, sizeof(eMessage), HAL_MAX_DELAY);
 8000eb8:	4639      	mov	r1, r7
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <Error_Handler+0x28>)
 8000ec2:	f006 fa97 	bl	80073f4 <HAL_UART_Transmit>
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <Error_Handler+0x22>
 8000ec8:	0800a284 	.word	0x0800a284
 8000ecc:	24000368 	.word	0x24000368

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_MspInit+0x30>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a59      	ldr	r2, [pc, #356]	; (8001088 <HAL_ETH_MspInit+0x184>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 80ab 	bne.w	800107e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f28:	4b58      	ldr	r3, [pc, #352]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2e:	4a57      	ldr	r2, [pc, #348]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f38:	4b54      	ldr	r3, [pc, #336]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f56:	4b4d      	ldr	r3, [pc, #308]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f64:	4b49      	ldr	r3, [pc, #292]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	4a48      	ldr	r2, [pc, #288]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f74:	4b45      	ldr	r3, [pc, #276]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a40      	ldr	r2, [pc, #256]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a39      	ldr	r2, [pc, #228]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2332      	movs	r3, #50	; 0x32
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <HAL_ETH_MspInit+0x18c>)
 8001016:	f003 f82f 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800101a:	2386      	movs	r3, #134	; 0x86
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	; (8001094 <HAL_ETH_MspInit+0x190>)
 8001036:	f003 f81f 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_ETH_MspInit+0x194>)
 8001058:	f003 f80e 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800105c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <HAL_ETH_MspInit+0x198>)
 800107a:	f002 fffd 	bl	8004078 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	; 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40028000 	.word	0x40028000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020000 	.word	0x58020000
 8001098:	58020400 	.word	0x58020400
 800109c:	58021800 	.word	0x58021800

080010a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0bc      	sub	sp, #240	; 0xf0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f008 fc43 	bl	800994c <memset>
  if(hfdcan->Instance==FDCAN1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5e      	ldr	r2, [pc, #376]	; (8001244 <HAL_FDCAN_MspInit+0x1a4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d158      	bne.n	8001182 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 fb07 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80010f4:	f7ff fed6 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010f8:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_FDCAN_MspInit+0x1a8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_FDCAN_MspInit+0x1a8>)
 8001100:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <HAL_FDCAN_MspInit+0x1a8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d10e      	bne.n	8001128 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800110a:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 800110c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001110:	4a4e      	ldr	r2, [pc, #312]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 800111c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	4b48      	ldr	r3, [pc, #288]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b44      	ldr	r3, [pc, #272]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001146:	2303      	movs	r3, #3
 8001148:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800115e:	2309      	movs	r3, #9
 8001160:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001168:	4619      	mov	r1, r3
 800116a:	4839      	ldr	r0, [pc, #228]	; (8001250 <HAL_FDCAN_MspInit+0x1b0>)
 800116c:	f002 ff84 	bl	8004078 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2013      	movs	r0, #19
 8001176:	f000 fc40 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800117a:	2013      	movs	r0, #19
 800117c:	f000 fc57 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001180:	e05c      	b.n	800123c <HAL_FDCAN_MspInit+0x19c>
  else if(hfdcan->Instance==FDCAN2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a33      	ldr	r2, [pc, #204]	; (8001254 <HAL_FDCAN_MspInit+0x1b4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d157      	bne.n	800123c <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800118c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800119c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 faa9 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 80011b0:	f7ff fe78 	bl	8000ea4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_FDCAN_MspInit+0x1a8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <HAL_FDCAN_MspInit+0x1a8>)
 80011bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_FDCAN_MspInit+0x1a8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10e      	bne.n	80011e4 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 80011c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011cc:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 80011d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_FDCAN_MspInit+0x1ac>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001202:	2360      	movs	r3, #96	; 0x60
 8001204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800121a:	2309      	movs	r3, #9
 800121c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <HAL_FDCAN_MspInit+0x1b8>)
 8001228:	f002 ff26 	bl	8004078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2014      	movs	r0, #20
 8001232:	f000 fbe2 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001236:	2014      	movs	r0, #20
 8001238:	f000 fbf9 	bl	8001a2e <HAL_NVIC_EnableIRQ>
}
 800123c:	bf00      	nop
 800123e:	37f0      	adds	r7, #240	; 0xf0
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	4000a000 	.word	0x4000a000
 8001248:	240009c8 	.word	0x240009c8
 800124c:	58024400 	.word	0x58024400
 8001250:	58020c00 	.word	0x58020c00
 8001254:	4000a400 	.word	0x4000a400
 8001258:	58020400 	.word	0x58020400

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ba      	sub	sp, #232	; 0xe8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	22c0      	movs	r2, #192	; 0xc0
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f008 fb65 	bl	800994c <memset>
  if(huart->Instance==USART3)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2b      	ldr	r2, [pc, #172]	; (8001334 <HAL_UART_MspInit+0xd8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d14e      	bne.n	800132a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800128c:	f04f 0202 	mov.w	r2, #2
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fa2a 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ae:	f7ff fdf9 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_UART_MspInit+0xdc>)
 80012b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_UART_MspInit+0xdc>)
 80012ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_UART_MspInit+0xdc>)
 80012c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_UART_MspInit+0xdc>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_UART_MspInit+0xdc>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0xdc>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001308:	2307      	movs	r3, #7
 800130a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <HAL_UART_MspInit+0xe0>)
 8001316:	f002 feaf 	bl	8004078 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2027      	movs	r0, #39	; 0x27
 8001320:	f000 fb6b 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001324:	2027      	movs	r0, #39	; 0x27
 8001326:	f000 fb82 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	37e8      	adds	r7, #232	; 0xe8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004800 	.word	0x40004800
 8001338:	58024400 	.word	0x58024400
 800133c:	58020c00 	.word	0x58020c00

08001340 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ba      	sub	sp, #232	; 0xe8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	22c0      	movs	r2, #192	; 0xc0
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f008 faf3 	bl	800994c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_PCD_MspInit+0xec>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d159      	bne.n	8001424 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800137c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4618      	mov	r0, r3
 800138a:	f004 f9b7 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001394:	f7ff fd86 	bl	8000ea4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001398:	f003 f9ba 	bl	8004710 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_PCD_MspInit+0xf0>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_PCD_MspInit+0xf0>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_PCD_MspInit+0xf0>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013d4:	230a      	movs	r3, #10
 80013d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013de:	4619      	mov	r1, r3
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <HAL_PCD_MspInit+0xf4>)
 80013e2:	f002 fe49 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_PCD_MspInit+0xf4>)
 8001402:	f002 fe39 	bl	8004078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_PCD_MspInit+0xf0>)
 8001408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_PCD_MspInit+0xf0>)
 800140e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001412:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_PCD_MspInit+0xf0>)
 8001418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800141c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	37e8      	adds	r7, #232	; 0xe8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40080000 	.word	0x40080000
 8001430:	58024400 	.word	0x58024400
 8001434:	58020000 	.word	0x58020000

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f000 f97a 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <FDCAN1_IT0_IRQHandler+0x10>)
 8001492:	f002 f901 	bl	8003698 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	24000228 	.word	0x24000228

080014a0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <FDCAN2_IT0_IRQHandler+0x10>)
 80014a6:	f002 f8f7 	bl	8003698 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	240002c8 	.word	0x240002c8

080014b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <USART3_IRQHandler+0x10>)
 80014ba:	f006 f8bd 	bl	8007638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000368 	.word	0x24000368

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f008 fa30 	bl	800995c <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24080000 	.word	0x24080000
 8001528:	00000400 	.word	0x00000400
 800152c:	240009cc 	.word	0x240009cc
 8001530:	24000b20 	.word	0x24000b20

08001534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001538:	4b37      	ldr	r3, [pc, #220]	; (8001618 <SystemInit+0xe4>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <SystemInit+0xe4>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <SystemInit+0xe8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	2b06      	cmp	r3, #6
 8001552:	d807      	bhi.n	8001564 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <SystemInit+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 030f 	bic.w	r3, r3, #15
 800155c:	4a2f      	ldr	r2, [pc, #188]	; (800161c <SystemInit+0xe8>)
 800155e:	f043 0307 	orr.w	r3, r3, #7
 8001562:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <SystemInit+0xec>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2d      	ldr	r2, [pc, #180]	; (8001620 <SystemInit+0xec>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <SystemInit+0xec>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <SystemInit+0xec>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4929      	ldr	r1, [pc, #164]	; (8001620 <SystemInit+0xec>)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <SystemInit+0xf0>)
 800157e:	4013      	ands	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <SystemInit+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <SystemInit+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 030f 	bic.w	r3, r3, #15
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <SystemInit+0xe8>)
 8001598:	f043 0307 	orr.w	r3, r3, #7
 800159c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <SystemInit+0xec>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <SystemInit+0xec>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <SystemInit+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <SystemInit+0xec>)
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <SystemInit+0xf4>)
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <SystemInit+0xec>)
 80015b8:	4a1c      	ldr	r2, [pc, #112]	; (800162c <SystemInit+0xf8>)
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <SystemInit+0xec>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <SystemInit+0xfc>)
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <SystemInit+0xec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <SystemInit+0xec>)
 80015ca:	4a19      	ldr	r2, [pc, #100]	; (8001630 <SystemInit+0xfc>)
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <SystemInit+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <SystemInit+0xec>)
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <SystemInit+0xfc>)
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <SystemInit+0xec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <SystemInit+0xec>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <SystemInit+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <SystemInit+0x100>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <SystemInit+0x104>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015fe:	d202      	bcs.n	8001606 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <SystemInit+0x108>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <SystemInit+0x10c>)
 8001608:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800160c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	52002000 	.word	0x52002000
 8001620:	58024400 	.word	0x58024400
 8001624:	eaf6ed7f 	.word	0xeaf6ed7f
 8001628:	02020200 	.word	0x02020200
 800162c:	01ff0000 	.word	0x01ff0000
 8001630:	01010280 	.word	0x01010280
 8001634:	5c001000 	.word	0x5c001000
 8001638:	ffff0000 	.word	0xffff0000
 800163c:	51008108 	.word	0x51008108
 8001640:	52004000 	.word	0x52004000

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001648:	f7ff ff74 	bl	8001534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164e:	490d      	ldr	r1, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001664:	4c0a      	ldr	r4, [pc, #40]	; (8001690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f008 f979 	bl	8009968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff f801 	bl	800067c <main>
  bx  lr
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001680:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001684:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001688:	0800a364 	.word	0x0800a364
  ldr r2, =_sbss
 800168c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001690:	24000b1c 	.word	0x24000b1c

08001694 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC3_IRQHandler>
	...

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 f9a0 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a4:	f003 fe54 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_Init+0x68>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	4913      	ldr	r1, [pc, #76]	; (8001704 <HAL_Init+0x6c>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_Init+0x68>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_Init+0x6c>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_Init+0x70>)
 80016da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_Init+0x74>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 f814 	bl	8001710 <HAL_InitTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e002      	b.n	80016f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016f2:	f7ff fbed 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58024400 	.word	0x58024400
 8001704:	0800a2d8 	.word	0x0800a2d8
 8001708:	24000008 	.word	0x24000008
 800170c:	24000004 	.word	0x24000004

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_InitTick+0x60>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e021      	b.n	8001768 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_InitTick+0x64>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_InitTick+0x60>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f985 	bl	8001a4a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f94f 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x68>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	24000010 	.word	0x24000010
 8001774:	24000004 	.word	0x24000004
 8001778:	2400000c 	.word	0x2400000c

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	24000010 	.word	0x24000010
 80017a0:	240009d0 	.word	0x240009d0

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	240009d0 	.word	0x240009d0

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000010 	.word	0x24000010

08001804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetREVID+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1b      	lsrs	r3, r3, #16
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	5c001000 	.word	0x5c001000

0800181c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58000400 	.word	0x58000400

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	4313      	orrs	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	05fa0000 	.word	0x05fa0000

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff40 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff33 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa4 	bl	80019a0 <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fe9a 	bl	80017a4 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e2dc      	b.n	8002036 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d008      	beq.n	8001a9a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e2cd      	b.n	8002036 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a76      	ldr	r2, [pc, #472]	; (8001c78 <HAL_DMA_Abort+0x214>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a74      	ldr	r2, [pc, #464]	; (8001c7c <HAL_DMA_Abort+0x218>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a73      	ldr	r2, [pc, #460]	; (8001c80 <HAL_DMA_Abort+0x21c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a71      	ldr	r2, [pc, #452]	; (8001c84 <HAL_DMA_Abort+0x220>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a70      	ldr	r2, [pc, #448]	; (8001c88 <HAL_DMA_Abort+0x224>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_DMA_Abort+0x228>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6d      	ldr	r2, [pc, #436]	; (8001c90 <HAL_DMA_Abort+0x22c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6b      	ldr	r2, [pc, #428]	; (8001c94 <HAL_DMA_Abort+0x230>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <HAL_DMA_Abort+0x234>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a68      	ldr	r2, [pc, #416]	; (8001c9c <HAL_DMA_Abort+0x238>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_DMA_Abort+0x23c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_DMA_Abort+0x240>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a64      	ldr	r2, [pc, #400]	; (8001ca8 <HAL_DMA_Abort+0x244>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a62      	ldr	r2, [pc, #392]	; (8001cac <HAL_DMA_Abort+0x248>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a61      	ldr	r2, [pc, #388]	; (8001cb0 <HAL_DMA_Abort+0x24c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort+0xd6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5f      	ldr	r2, [pc, #380]	; (8001cb4 <HAL_DMA_Abort+0x250>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Abort+0xda>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_DMA_Abort+0xdc>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 021e 	bic.w	r2, r2, #30
 8001b52:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b62:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e00a      	b.n	8001b82 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a3c      	ldr	r2, [pc, #240]	; (8001c78 <HAL_DMA_Abort+0x214>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d072      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_DMA_Abort+0x218>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d06d      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a39      	ldr	r2, [pc, #228]	; (8001c80 <HAL_DMA_Abort+0x21c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d068      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <HAL_DMA_Abort+0x220>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d063      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <HAL_DMA_Abort+0x224>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <HAL_DMA_Abort+0x228>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d059      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a33      	ldr	r2, [pc, #204]	; (8001c90 <HAL_DMA_Abort+0x22c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d054      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <HAL_DMA_Abort+0x230>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d04f      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <HAL_DMA_Abort+0x234>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04a      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_DMA_Abort+0x238>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d045      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_DMA_Abort+0x23c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d040      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_DMA_Abort+0x240>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d03b      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_DMA_Abort+0x244>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d036      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_DMA_Abort+0x248>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d031      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_DMA_Abort+0x24c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d02c      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_DMA_Abort+0x250>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d027      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_DMA_Abort+0x254>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_Abort+0x258>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01d      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_DMA_Abort+0x25c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d018      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_DMA_Abort+0x260>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_DMA_Abort+0x264>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_DMA_Abort+0x268>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_DMA_Abort+0x26c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Abort+0x20e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_DMA_Abort+0x270>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d132      	bne.n	8001cd8 <HAL_DMA_Abort+0x274>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e031      	b.n	8001cda <HAL_DMA_Abort+0x276>
 8001c76:	bf00      	nop
 8001c78:	40020010 	.word	0x40020010
 8001c7c:	40020028 	.word	0x40020028
 8001c80:	40020040 	.word	0x40020040
 8001c84:	40020058 	.word	0x40020058
 8001c88:	40020070 	.word	0x40020070
 8001c8c:	40020088 	.word	0x40020088
 8001c90:	400200a0 	.word	0x400200a0
 8001c94:	400200b8 	.word	0x400200b8
 8001c98:	40020410 	.word	0x40020410
 8001c9c:	40020428 	.word	0x40020428
 8001ca0:	40020440 	.word	0x40020440
 8001ca4:	40020458 	.word	0x40020458
 8001ca8:	40020470 	.word	0x40020470
 8001cac:	40020488 	.word	0x40020488
 8001cb0:	400204a0 	.word	0x400204a0
 8001cb4:	400204b8 	.word	0x400204b8
 8001cb8:	58025408 	.word	0x58025408
 8001cbc:	5802541c 	.word	0x5802541c
 8001cc0:	58025430 	.word	0x58025430
 8001cc4:	58025444 	.word	0x58025444
 8001cc8:	58025458 	.word	0x58025458
 8001ccc:	5802546c 	.word	0x5802546c
 8001cd0:	58025480 	.word	0x58025480
 8001cd4:	58025494 	.word	0x58025494
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6d      	ldr	r2, [pc, #436]	; (8001ea8 <HAL_DMA_Abort+0x444>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d04a      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <HAL_DMA_Abort+0x448>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d045      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_DMA_Abort+0x44c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d040      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a68      	ldr	r2, [pc, #416]	; (8001eb4 <HAL_DMA_Abort+0x450>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d03b      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a67      	ldr	r2, [pc, #412]	; (8001eb8 <HAL_DMA_Abort+0x454>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d036      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a65      	ldr	r2, [pc, #404]	; (8001ebc <HAL_DMA_Abort+0x458>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d031      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a64      	ldr	r2, [pc, #400]	; (8001ec0 <HAL_DMA_Abort+0x45c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d02c      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a62      	ldr	r2, [pc, #392]	; (8001ec4 <HAL_DMA_Abort+0x460>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d027      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a61      	ldr	r2, [pc, #388]	; (8001ec8 <HAL_DMA_Abort+0x464>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5f      	ldr	r2, [pc, #380]	; (8001ecc <HAL_DMA_Abort+0x468>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01d      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_DMA_Abort+0x46c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d018      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a5c      	ldr	r2, [pc, #368]	; (8001ed4 <HAL_DMA_Abort+0x470>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <HAL_DMA_Abort+0x474>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a59      	ldr	r2, [pc, #356]	; (8001edc <HAL_DMA_Abort+0x478>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d009      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_DMA_Abort+0x47c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_DMA_Abort+0x32a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_DMA_Abort+0x480>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <HAL_DMA_Abort+0x33c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e007      	b.n	8001db0 <HAL_DMA_Abort+0x34c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001db0:	e013      	b.n	8001dda <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db2:	f7ff fcf7 	bl	80017a4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d90c      	bls.n	8001dda <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e12d      	b.n	8002036 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e5      	bne.n	8001db2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <HAL_DMA_Abort+0x444>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04a      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <HAL_DMA_Abort+0x448>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d045      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <HAL_DMA_Abort+0x44c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d040      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <HAL_DMA_Abort+0x450>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d03b      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <HAL_DMA_Abort+0x454>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d036      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <HAL_DMA_Abort+0x458>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d031      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_DMA_Abort+0x45c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d02c      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_DMA_Abort+0x460>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_DMA_Abort+0x464>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <HAL_DMA_Abort+0x468>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01d      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_DMA_Abort+0x46c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d018      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_DMA_Abort+0x470>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_DMA_Abort+0x474>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_DMA_Abort+0x478>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_DMA_Abort+0x47c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_Abort+0x422>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_DMA_Abort+0x480>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_DMA_Abort+0x426>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_DMA_Abort+0x428>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d02b      	beq.n	8001ee8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	223f      	movs	r2, #63	; 0x3f
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	e02a      	b.n	8001efe <HAL_DMA_Abort+0x49a>
 8001ea8:	40020010 	.word	0x40020010
 8001eac:	40020028 	.word	0x40020028
 8001eb0:	40020040 	.word	0x40020040
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	40020070 	.word	0x40020070
 8001ebc:	40020088 	.word	0x40020088
 8001ec0:	400200a0 	.word	0x400200a0
 8001ec4:	400200b8 	.word	0x400200b8
 8001ec8:	40020410 	.word	0x40020410
 8001ecc:	40020428 	.word	0x40020428
 8001ed0:	40020440 	.word	0x40020440
 8001ed4:	40020458 	.word	0x40020458
 8001ed8:	40020470 	.word	0x40020470
 8001edc:	40020488 	.word	0x40020488
 8001ee0:	400204a0 	.word	0x400204a0
 8001ee4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a4f      	ldr	r2, [pc, #316]	; (8002040 <HAL_DMA_Abort+0x5dc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d072      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_DMA_Abort+0x5e0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d06d      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_DMA_Abort+0x5e4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d068      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_DMA_Abort+0x5e8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d063      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_DMA_Abort+0x5ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_DMA_Abort+0x5f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d059      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_DMA_Abort+0x5f4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d054      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a44      	ldr	r2, [pc, #272]	; (800205c <HAL_DMA_Abort+0x5f8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d04f      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_DMA_Abort+0x5fc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_DMA_Abort+0x600>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <HAL_DMA_Abort+0x604>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a3e      	ldr	r2, [pc, #248]	; (800206c <HAL_DMA_Abort+0x608>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_DMA_Abort+0x60c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <HAL_DMA_Abort+0x610>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <HAL_DMA_Abort+0x614>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <HAL_DMA_Abort+0x618>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a37      	ldr	r2, [pc, #220]	; (8002080 <HAL_DMA_Abort+0x61c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a35      	ldr	r2, [pc, #212]	; (8002084 <HAL_DMA_Abort+0x620>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a34      	ldr	r2, [pc, #208]	; (8002088 <HAL_DMA_Abort+0x624>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_DMA_Abort+0x628>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <HAL_DMA_Abort+0x62c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <HAL_DMA_Abort+0x630>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <HAL_DMA_Abort+0x634>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort+0x58a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <HAL_DMA_Abort+0x638>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Abort+0x58e>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_Abort+0x590>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002000:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002018:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002022:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40020010 	.word	0x40020010
 8002044:	40020028 	.word	0x40020028
 8002048:	40020040 	.word	0x40020040
 800204c:	40020058 	.word	0x40020058
 8002050:	40020070 	.word	0x40020070
 8002054:	40020088 	.word	0x40020088
 8002058:	400200a0 	.word	0x400200a0
 800205c:	400200b8 	.word	0x400200b8
 8002060:	40020410 	.word	0x40020410
 8002064:	40020428 	.word	0x40020428
 8002068:	40020440 	.word	0x40020440
 800206c:	40020458 	.word	0x40020458
 8002070:	40020470 	.word	0x40020470
 8002074:	40020488 	.word	0x40020488
 8002078:	400204a0 	.word	0x400204a0
 800207c:	400204b8 	.word	0x400204b8
 8002080:	58025408 	.word	0x58025408
 8002084:	5802541c 	.word	0x5802541c
 8002088:	58025430 	.word	0x58025430
 800208c:	58025444 	.word	0x58025444
 8002090:	58025458 	.word	0x58025458
 8002094:	5802546c 	.word	0x5802546c
 8002098:	58025480 	.word	0x58025480
 800209c:	58025494 	.word	0x58025494

080020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e237      	b.n	8002522 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e22c      	b.n	8002522 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <HAL_DMA_Abort_IT+0x1a0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d04a      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_DMA_Abort_IT+0x1a4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d045      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a59      	ldr	r2, [pc, #356]	; (8002248 <HAL_DMA_Abort_IT+0x1a8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d040      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_DMA_Abort_IT+0x1ac>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d03b      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_DMA_Abort_IT+0x1b0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d036      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_DMA_Abort_IT+0x1b4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d031      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a53      	ldr	r2, [pc, #332]	; (8002258 <HAL_DMA_Abort_IT+0x1b8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d02c      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_DMA_Abort_IT+0x1bc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d027      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a50      	ldr	r2, [pc, #320]	; (8002260 <HAL_DMA_Abort_IT+0x1c0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d022      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a4f      	ldr	r2, [pc, #316]	; (8002264 <HAL_DMA_Abort_IT+0x1c4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d01d      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_DMA_Abort_IT+0x1c8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d018      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_DMA_Abort_IT+0x1cc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_DMA_Abort_IT+0x1d0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_DMA_Abort_IT+0x1d4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <HAL_DMA_Abort_IT+0x1d8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_DMA_Abort_IT+0xc8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a46      	ldr	r2, [pc, #280]	; (800227c <HAL_DMA_Abort_IT+0x1dc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_DMA_Abort_IT+0xcc>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_DMA_Abort_IT+0xce>
 800216c:	2300      	movs	r3, #0
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8086 	beq.w	8002280 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2204      	movs	r2, #4
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <HAL_DMA_Abort_IT+0x1a0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d04a      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_DMA_Abort_IT+0x1a4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d045      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <HAL_DMA_Abort_IT+0x1a8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d040      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_DMA_Abort_IT+0x1ac>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d03b      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a29      	ldr	r2, [pc, #164]	; (8002250 <HAL_DMA_Abort_IT+0x1b0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d036      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_DMA_Abort_IT+0x1b4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d031      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_DMA_Abort_IT+0x1b8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02c      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_DMA_Abort_IT+0x1bc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d027      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a23      	ldr	r2, [pc, #140]	; (8002260 <HAL_DMA_Abort_IT+0x1c0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d022      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_DMA_Abort_IT+0x1c4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d01d      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_DMA_Abort_IT+0x1c8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d018      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_DMA_Abort_IT+0x1cc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_DMA_Abort_IT+0x1d0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_DMA_Abort_IT+0x1d4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_DMA_Abort_IT+0x1d8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_DMA_Abort_IT+0x17c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_DMA_Abort_IT+0x1dc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <HAL_DMA_Abort_IT+0x18e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e178      	b.n	8002520 <HAL_DMA_Abort_IT+0x480>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e16f      	b.n	8002520 <HAL_DMA_Abort_IT+0x480>
 8002240:	40020010 	.word	0x40020010
 8002244:	40020028 	.word	0x40020028
 8002248:	40020040 	.word	0x40020040
 800224c:	40020058 	.word	0x40020058
 8002250:	40020070 	.word	0x40020070
 8002254:	40020088 	.word	0x40020088
 8002258:	400200a0 	.word	0x400200a0
 800225c:	400200b8 	.word	0x400200b8
 8002260:	40020410 	.word	0x40020410
 8002264:	40020428 	.word	0x40020428
 8002268:	40020440 	.word	0x40020440
 800226c:	40020458 	.word	0x40020458
 8002270:	40020470 	.word	0x40020470
 8002274:	40020488 	.word	0x40020488
 8002278:	400204a0 	.word	0x400204a0
 800227c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020e 	bic.w	r2, r2, #14
 800228e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <HAL_DMA_Abort_IT+0x3a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04a      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6b      	ldr	r2, [pc, #428]	; (800244c <HAL_DMA_Abort_IT+0x3ac>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d045      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a69      	ldr	r2, [pc, #420]	; (8002450 <HAL_DMA_Abort_IT+0x3b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d040      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a68      	ldr	r2, [pc, #416]	; (8002454 <HAL_DMA_Abort_IT+0x3b4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d03b      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_DMA_Abort_IT+0x3b8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d036      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_DMA_Abort_IT+0x3bc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d031      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_DMA_Abort_IT+0x3c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02c      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a62      	ldr	r2, [pc, #392]	; (8002464 <HAL_DMA_Abort_IT+0x3c4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d027      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_DMA_Abort_IT+0x3c8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d022      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_DMA_Abort_IT+0x3cc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d01d      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_DMA_Abort_IT+0x3d0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d018      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_DMA_Abort_IT+0x3d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <HAL_DMA_Abort_IT+0x3d8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00e      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a59      	ldr	r2, [pc, #356]	; (800247c <HAL_DMA_Abort_IT+0x3dc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d009      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a57      	ldr	r2, [pc, #348]	; (8002480 <HAL_DMA_Abort_IT+0x3e0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_DMA_Abort_IT+0x290>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_DMA_Abort_IT+0x3e4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d108      	bne.n	8002342 <HAL_DMA_Abort_IT+0x2a2>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_DMA_Abort_IT+0x2b2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a3c      	ldr	r2, [pc, #240]	; (8002448 <HAL_DMA_Abort_IT+0x3a8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d072      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3a      	ldr	r2, [pc, #232]	; (800244c <HAL_DMA_Abort_IT+0x3ac>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d06d      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a39      	ldr	r2, [pc, #228]	; (8002450 <HAL_DMA_Abort_IT+0x3b0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d068      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a37      	ldr	r2, [pc, #220]	; (8002454 <HAL_DMA_Abort_IT+0x3b4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d063      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a36      	ldr	r2, [pc, #216]	; (8002458 <HAL_DMA_Abort_IT+0x3b8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d05e      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_DMA_Abort_IT+0x3bc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d059      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a33      	ldr	r2, [pc, #204]	; (8002460 <HAL_DMA_Abort_IT+0x3c0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d054      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a31      	ldr	r2, [pc, #196]	; (8002464 <HAL_DMA_Abort_IT+0x3c4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d04f      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a30      	ldr	r2, [pc, #192]	; (8002468 <HAL_DMA_Abort_IT+0x3c8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d04a      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2e      	ldr	r2, [pc, #184]	; (800246c <HAL_DMA_Abort_IT+0x3cc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d045      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2d      	ldr	r2, [pc, #180]	; (8002470 <HAL_DMA_Abort_IT+0x3d0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d040      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <HAL_DMA_Abort_IT+0x3d4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d03b      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_DMA_Abort_IT+0x3d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d036      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <HAL_DMA_Abort_IT+0x3dc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a27      	ldr	r2, [pc, #156]	; (8002480 <HAL_DMA_Abort_IT+0x3e0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d02c      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a25      	ldr	r2, [pc, #148]	; (8002484 <HAL_DMA_Abort_IT+0x3e4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d027      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a24      	ldr	r2, [pc, #144]	; (8002488 <HAL_DMA_Abort_IT+0x3e8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_DMA_Abort_IT+0x3ec>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01d      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <HAL_DMA_Abort_IT+0x3f0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_DMA_Abort_IT+0x3f4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <HAL_DMA_Abort_IT+0x3f8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_DMA_Abort_IT+0x3fc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_DMA_Abort_IT+0x400>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_DMA_Abort_IT+0x3a2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_DMA_Abort_IT+0x404>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d132      	bne.n	80024a8 <HAL_DMA_Abort_IT+0x408>
 8002442:	2301      	movs	r3, #1
 8002444:	e031      	b.n	80024aa <HAL_DMA_Abort_IT+0x40a>
 8002446:	bf00      	nop
 8002448:	40020010 	.word	0x40020010
 800244c:	40020028 	.word	0x40020028
 8002450:	40020040 	.word	0x40020040
 8002454:	40020058 	.word	0x40020058
 8002458:	40020070 	.word	0x40020070
 800245c:	40020088 	.word	0x40020088
 8002460:	400200a0 	.word	0x400200a0
 8002464:	400200b8 	.word	0x400200b8
 8002468:	40020410 	.word	0x40020410
 800246c:	40020428 	.word	0x40020428
 8002470:	40020440 	.word	0x40020440
 8002474:	40020458 	.word	0x40020458
 8002478:	40020470 	.word	0x40020470
 800247c:	40020488 	.word	0x40020488
 8002480:	400204a0 	.word	0x400204a0
 8002484:	400204b8 	.word	0x400204b8
 8002488:	58025408 	.word	0x58025408
 800248c:	5802541c 	.word	0x5802541c
 8002490:	58025430 	.word	0x58025430
 8002494:	58025444 	.word	0x58025444
 8002498:	58025458 	.word	0x58025458
 800249c:	5802546c 	.word	0x5802546c
 80024a0:	58025480 	.word	0x58025480
 80024a4:	58025494 	.word	0x58025494
 80024a8:	2300      	movs	r3, #0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d028      	beq.n	8002500 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2201      	movs	r2, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0cf      	b.n	80026de <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2223      	movs	r2, #35	; 0x23
 800254c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7fe fcd7 	bl	8000f04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	4b64      	ldr	r3, [pc, #400]	; (80026e8 <HAL_ETH_Init+0x1bc>)
 8002558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800255c:	4a62      	ldr	r2, [pc, #392]	; (80026e8 <HAL_ETH_Init+0x1bc>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002566:	4b60      	ldr	r3, [pc, #384]	; (80026e8 <HAL_ETH_Init+0x1bc>)
 8002568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7a1b      	ldrb	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff f94d 	bl	800181c <HAL_SYSCFG_ETHInterfaceSelect>
 8002582:	e003      	b.n	800258c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002584:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002588:	f7ff f948 	bl	800181c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_ETH_Init+0x1c0>)
 800258e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a8:	f7ff f8fc 	bl	80017a4 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80025ae:	e011      	b.n	80025d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025b0:	f7ff f8f8 	bl	80017a4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025be:	d909      	bls.n	80025d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2204      	movs	r2, #4
 80025c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	22e0      	movs	r2, #224	; 0xe0
 80025cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e084      	b.n	80026de <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e4      	bne.n	80025b0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f886 	bl	80026f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80025ec:	f003 f82a 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <HAL_ETH_Init+0x1c4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	0c9a      	lsrs	r2, r3, #18
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3a01      	subs	r2, #1
 8002600:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fa71 	bl	8002aec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002612:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002616:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002626:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	22e0      	movs	r2, #224	; 0xe0
 8002642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e049      	b.n	80026de <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002652:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_ETH_Init+0x1c8>)
 8002658:	4013      	ands	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6952      	ldr	r2, [r2, #20]
 800265e:	0051      	lsls	r1, r2, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800266a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fad9 	bl	8002c26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb1f 	bl	8002cb8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	3305      	adds	r3, #5
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	3303      	adds	r3, #3
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	061a      	lsls	r2, r3, #24
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	3302      	adds	r3, #2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	3301      	adds	r3, #1
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2210      	movs	r2, #16
 80026d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58000400 	.word	0x58000400
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	ffff8001 	.word	0xffff8001

080026f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002708:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002710:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002712:	f002 ff97 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8002716:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d908      	bls.n	8002732 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d804      	bhi.n	8002732 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e027      	b.n	8002782 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d908      	bls.n	800274c <HAL_ETH_SetMDIOClockRange+0x54>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d204      	bcs.n	800274c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e01a      	b.n	8002782 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d303      	bcc.n	800275c <HAL_ETH_SetMDIOClockRange+0x64>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d911      	bls.n	8002780 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d908      	bls.n	8002776 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d804      	bhi.n	8002776 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e005      	b.n	8002782 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e000      	b.n	8002782 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002780:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	01312cff 	.word	0x01312cff
 8002798:	02160ebf 	.word	0x02160ebf
 800279c:	03938700 	.word	0x03938700
 80027a0:	05f5e0ff 	.word	0x05f5e0ff
 80027a4:	08f0d17f 	.word	0x08f0d17f

080027a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80027ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80027c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	7b1b      	ldrb	r3, [r3, #12]
 80027c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80027ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	7b5b      	ldrb	r3, [r3, #13]
 80027d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	7b9b      	ldrb	r3, [r3, #14]
 80027d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80027da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7bdb      	ldrb	r3, [r3, #15]
 80027e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	7c12      	ldrb	r2, [r2, #16]
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d102      	bne.n	80027f2 <ETH_SetMACConfig+0x4a>
 80027ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027f0:	e000      	b.n	80027f4 <ETH_SetMACConfig+0x4c>
 80027f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	7c52      	ldrb	r2, [r2, #17]
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d102      	bne.n	8002804 <ETH_SetMACConfig+0x5c>
 80027fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002802:	e000      	b.n	8002806 <ETH_SetMACConfig+0x5e>
 8002804:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	7c9b      	ldrb	r3, [r3, #18]
 800280c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800280e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002814:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800281a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7f1b      	ldrb	r3, [r3, #28]
 8002820:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7f5b      	ldrb	r3, [r3, #29]
 8002828:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800282a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	7f92      	ldrb	r2, [r2, #30]
 8002830:	2a00      	cmp	r2, #0
 8002832:	d102      	bne.n	800283a <ETH_SetMACConfig+0x92>
 8002834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002838:	e000      	b.n	800283c <ETH_SetMACConfig+0x94>
 800283a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800283c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	7fdb      	ldrb	r3, [r3, #31]
 8002842:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002844:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	f892 2020 	ldrb.w	r2, [r2, #32]
 800284c:	2a00      	cmp	r2, #0
 800284e:	d102      	bne.n	8002856 <ETH_SetMACConfig+0xae>
 8002850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002854:	e000      	b.n	8002858 <ETH_SetMACConfig+0xb0>
 8002856:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002858:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800285e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002866:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002868:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <ETH_SetMACConfig+0x22c>)
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	430b      	orrs	r3, r1
 8002884:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002892:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002894:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800289c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800289e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d102      	bne.n	80028ba <ETH_SetMACConfig+0x112>
 80028b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028b8:	e000      	b.n	80028bc <ETH_SetMACConfig+0x114>
 80028ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80028bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <ETH_SetMACConfig+0x230>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <ETH_SetMACConfig+0x234>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	430b      	orrs	r3, r1
 80028fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002904:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800290a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002912:	2a00      	cmp	r2, #0
 8002914:	d101      	bne.n	800291a <ETH_SetMACConfig+0x172>
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	e000      	b.n	800291c <ETH_SetMACConfig+0x174>
 800291a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800291c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800292e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	430b      	orrs	r3, r1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002944:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800294c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f023 0103 	bic.w	r1, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	430a      	orrs	r2, r1
 8002966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002972:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800298e:	2a00      	cmp	r2, #0
 8002990:	d101      	bne.n	8002996 <ETH_SetMACConfig+0x1ee>
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	e000      	b.n	8002998 <ETH_SetMACConfig+0x1f0>
 8002996:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002998:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80029aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80029b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	00048083 	.word	0x00048083
 80029d8:	c0f88000 	.word	0xc0f88000
 80029dc:	fffffef0 	.word	0xfffffef0

080029e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <ETH_SetDMAConfig+0xf8>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a06:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	791b      	ldrb	r3, [r3, #4]
 8002a0c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	7b1b      	ldrb	r3, [r3, #12]
 8002a18:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <ETH_SetDMAConfig+0xfc>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a38:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7b5b      	ldrb	r3, [r3, #13]
 8002a3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <ETH_SetDMAConfig+0x100>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	68f9      	ldr	r1, [r7, #12]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a64:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7d1b      	ldrb	r3, [r3, #20]
 8002a70:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	7f5b      	ldrb	r3, [r3, #29]
 8002a78:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <ETH_SetDMAConfig+0x104>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a9a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7f1b      	ldrb	r3, [r3, #28]
 8002aa2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <ETH_SetDMAConfig+0x108>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	68f9      	ldr	r1, [r7, #12]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	ffff87fd 	.word	0xffff87fd
 8002adc:	ffff2ffe 	.word	0xffff2ffe
 8002ae0:	fffec000 	.word	0xfffec000
 8002ae4:	ffc0efef 	.word	0xffc0efef
 8002ae8:	7fc0ffff 	.word	0x7fc0ffff

08002aec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0a4      	sub	sp, #144	; 0x90
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002afa:	2300      	movs	r3, #0
 8002afc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b44:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b66:	2300      	movs	r3, #0
 8002b68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b84:	2320      	movs	r3, #32
 8002b86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b96:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fde6 	bl	80027a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bfa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c0c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fee1 	bl	80029e0 <ETH_SetDMAConfig>
}
 8002c1e:	bf00      	nop
 8002c20:	3790      	adds	r7, #144	; 0x90
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e01d      	b.n	8002c70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	3206      	adds	r2, #6
 8002c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d9de      	bls.n	8002c34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c84:	461a      	mov	r2, r3
 8002c86:	2303      	movs	r3, #3
 8002c88:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e023      	b.n	8002d0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6919      	ldr	r1, [r3, #16]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	3212      	adds	r2, #18
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d9d8      	bls.n	8002cc6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b098      	sub	sp, #96	; 0x60
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002d7c:	4a84      	ldr	r2, [pc, #528]	; (8002f90 <HAL_FDCAN_Init+0x21c>)
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	4611      	mov	r1, r2
 8002d84:	224c      	movs	r2, #76	; 0x4c
 8002d86:	4618      	mov	r0, r3
 8002d88:	f006 fe14 	bl	80099b4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c6      	b.n	8003124 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <HAL_FDCAN_Init+0x220>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d106      	bne.n	8002dae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe f96c 	bl	80010a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0210 	bic.w	r2, r2, #16
 8002dd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd8:	f7fe fce4 	bl	80017a4 <HAL_GetTick>
 8002ddc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002dde:	e014      	b.n	8002e0a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002de0:	f7fe fce0 	bl	80017a4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d90d      	bls.n	8002e0a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e18c      	b.n	8003124 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d0e3      	beq.n	8002de0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7fe fcbc 	bl	80017a4 <HAL_GetTick>
 8002e2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e2e:	e014      	b.n	8002e5a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e30:	f7fe fcb8 	bl	80017a4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b0a      	cmp	r3, #10
 8002e3c:	d90d      	bls.n	8002e5a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e164      	b.n	8003124 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0e3      	beq.n	8002e30 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0202 	orr.w	r2, r2, #2
 8002e76:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7c1b      	ldrb	r3, [r3, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8e:	619a      	str	r2, [r3, #24]
 8002e90:	e007      	b.n	8002ea2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7c5b      	ldrb	r3, [r3, #17]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb8:	619a      	str	r2, [r3, #24]
 8002eba:	e007      	b.n	8002ecc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7c9b      	ldrb	r3, [r3, #18]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d108      	bne.n	8002ee6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ee2:	619a      	str	r2, [r3, #24]
 8002ee4:	e007      	b.n	8002ef6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ef4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002f1a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0204 	orr.w	r2, r2, #4
 8002f42:	619a      	str	r2, [r3, #24]
 8002f44:	e030      	b.n	8002fa8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d02c      	beq.n	8002fa8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d020      	beq.n	8002f98 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f64:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0210 	orr.w	r2, r2, #16
 8002f74:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d114      	bne.n	8002fa8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0220 	orr.w	r2, r2, #32
 8002f8c:	619a      	str	r2, [r3, #24]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_FDCAN_Init+0x234>
 8002f90:	0800a28c 	.word	0x0800a28c
 8002f94:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fb8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fc0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fd0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fd2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fdc:	d115      	bne.n	800300a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002fec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	3b01      	subs	r3, #1
 8003000:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003006:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003008:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003030:	4413      	add	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d011      	beq.n	800305a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800303e:	f023 0107 	bic.w	r1, r3, #7
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3360      	adds	r3, #96	; 0x60
 800304a:	443b      	add	r3, r7
 800304c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800306a:	f023 0107 	bic.w	r1, r3, #7
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3360      	adds	r3, #96	; 0x60
 8003076:	443b      	add	r3, r7
 8003078:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003096:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3360      	adds	r3, #96	; 0x60
 80030a2:	443b      	add	r3, r7
 80030a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80030a8:	011a      	lsls	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030c4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3360      	adds	r3, #96	; 0x60
 80030d0:	443b      	add	r3, r7
 80030d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80030d6:	021a      	lsls	r2, r3, #8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a11      	ldr	r2, [pc, #68]	; (800312c <HAL_FDCAN_Init+0x3b8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d107      	bne.n	80030fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f022 0203 	bic.w	r2, r2, #3
 80030fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fdab 	bl	8003c70 <FDCAN_CalcultateRamBlockAddresses>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003120:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003124:	4618      	mov	r0, r3
 8003126:	3760      	adds	r7, #96	; 0x60
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	4000a000 	.word	0x4000a000

08003130 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d111      	bne.n	8003168 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e008      	b.n	800317a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316e:	f043 0204 	orr.w	r2, r3, #4
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d141      	bne.n	8003222 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031a6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e038      	b.n	8003234 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e026      	b.n	8003234 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 febd 	bl	8003f7c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003212:	2201      	movs	r2, #1
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e008      	b.n	8003234 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003228:	f043 0208 	orr.w	r2, r3, #8
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800323c:	b480      	push	{r7}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003254:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003256:	7efb      	ldrb	r3, [r7, #27]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f040 814b 	bne.w	80034f4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d14d      	bne.n	8003300 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800326c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e13e      	b.n	8003506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800329e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e12c      	b.n	8003506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032b4:	0e1b      	lsrs	r3, r3, #24
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10b      	bne.n	80032d6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032c6:	0fdb      	lsrs	r3, r3, #31
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032d0:	d101      	bne.n	80032d6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e069      	b.n	80033d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b41      	cmp	r3, #65	; 0x41
 8003304:	d14d      	bne.n	80033a2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800330e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0ed      	b.n	8003506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0db      	b.n	8003506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003356:	0e1b      	lsrs	r3, r3, #24
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10b      	bne.n	8003378 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003368:	0fdb      	lsrs	r3, r3, #31
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003372:	d101      	bne.n	8003378 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003374:	2301      	movs	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e018      	b.n	80033d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d309      	bcc.n	80033c0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0a2      	b.n	8003506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e005      	b.n	8003404 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	3304      	adds	r3, #4
 8003420:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e1b      	lsrs	r3, r3, #24
 8003456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0fda      	lsrs	r2, r3, #31
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	3304      	adds	r3, #4
 800346c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003472:	2300      	movs	r3, #0
 8003474:	623b      	str	r3, [r7, #32]
 8003476:	e00a      	b.n	800348e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	441a      	add	r2, r3
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	440b      	add	r3, r1
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	3301      	adds	r3, #1
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	461a      	mov	r2, r3
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	4293      	cmp	r3, r2
 800349e:	d3eb      	bcc.n	8003478 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d105      	bne.n	80034b2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80034b0:	e01e      	b.n	80034f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b41      	cmp	r3, #65	; 0x41
 80034b6:	d105      	bne.n	80034c4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80034c2:	e015      	b.n	80034f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b1f      	cmp	r3, #31
 80034c8:	d808      	bhi.n	80034dc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2101      	movs	r1, #1
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80034da:	e009      	b.n	80034f0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 021f 	and.w	r2, r3, #31
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e008      	b.n	8003506 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034fa:	f043 0208 	orr.w	r2, r3, #8
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	372c      	adds	r7, #44	; 0x2c
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	0800a2e8 	.word	0x0800a2e8

08003518 <HAL_FDCAN_IsRxBufferMessageAvailable>:
  * @retval Status
  *          - 0 : No new message on RxBufferIndex.
  *          - 1 : New message received on RxBufferIndex.
  */
uint32_t HAL_FDCAN_IsRxBufferMessageAvailable(FDCAN_HandleTypeDef *hfdcan, uint32_t RxBufferIndex)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(RxBufferIndex, 63U));
  uint32_t NewData1 = hfdcan->Instance->NDAT1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t NewData2 = hfdcan->Instance->NDAT2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003534:	60bb      	str	r3, [r7, #8]

  /* Check new message reception on the selected buffer */
  if (((RxBufferIndex < 32U) && ((NewData1 & (uint32_t)((uint32_t)1 << RxBufferIndex)) == 0U)) ||
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b1f      	cmp	r3, #31
 800353a:	d807      	bhi.n	800354c <HAL_FDCAN_IsRxBufferMessageAvailable+0x34>
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00c      	beq.n	8003566 <HAL_FDCAN_IsRxBufferMessageAvailable+0x4e>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b1f      	cmp	r3, #31
 8003550:	d90b      	bls.n	800356a <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
      ((RxBufferIndex >= 32U) && ((NewData2 & (uint32_t)((uint32_t)1 << (RxBufferIndex & 0x1FU))) == 0U)))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_FDCAN_IsRxBufferMessageAvailable+0x52>
  {
    return 0;
 8003566:	2300      	movs	r3, #0
 8003568:	e016      	b.n	8003598 <HAL_FDCAN_IsRxBufferMessageAvailable+0x80>
  }

  /* Clear the New Data flag of the current Rx buffer */
  if (RxBufferIndex < 32U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b1f      	cmp	r3, #31
 800356e:	d808      	bhi.n	8003582 <HAL_FDCAN_IsRxBufferMessageAvailable+0x6a>
  {
    hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxBufferIndex);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003580:	e009      	b.n	8003596 <HAL_FDCAN_IsRxBufferMessageAvailable+0x7e>
  }
  else /* 32 <= RxBufferIndex <= 63 */
  {
    hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxBufferIndex & 0x1FU));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  return 1;
 8003596:	2301      	movs	r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80035b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d002      	beq.n	80035c4 <HAL_FDCAN_ActivateNotification+0x20>
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d155      	bne.n	8003670 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80035e2:	e014      	b.n	800360e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d108      	bne.n	8003606 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0202 	orr.w	r2, r2, #2
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c
 8003604:	e003      	b.n	800360e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2203      	movs	r2, #3
 800360c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	430a      	orrs	r2, r1
 8003628:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	430a      	orrs	r2, r1
 8003646:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_FDCAN_ActivateNotification+0xec>)
 8003654:	4013      	ands	r3, r2
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	430b      	orrs	r3, r1
 800365c:	6553      	str	r3, [r2, #84]	; 0x54
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0f9b      	lsrs	r3, r3, #30
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e008      	b.n	8003682 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	3fcfffff 	.word	0x3fcfffff
 8003694:	4000a800 	.word	0x4000a800

08003698 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b096      	sub	sp, #88	; 0x58
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80036a0:	4b95      	ldr	r3, [pc, #596]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	079b      	lsls	r3, r3, #30
 80036a6:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80036a8:	4b93      	ldr	r3, [pc, #588]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	079b      	lsls	r3, r3, #30
 80036ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b0:	4013      	ands	r3, r2
 80036b2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036c8:	4013      	ands	r3, r2
 80036ca:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e0:	4013      	ands	r3, r2
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f8:	4013      	ands	r3, r2
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003710:	4013      	ands	r3, r2
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800371e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003728:	4013      	ands	r3, r2
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00f      	beq.n	8003766 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fa39 	bl	8003bd8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01c      	beq.n	80037aa <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800378c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378e:	4013      	ands	r3, r2
 8003790:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800379a:	651a      	str	r2, [r3, #80]	; 0x50
 800379c:	4b56      	ldr	r3, [pc, #344]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80037a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9ee 	bl	8003b86 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80037aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037b6:	4b51      	ldr	r3, [pc, #324]	; (80038fc <HAL_FDCAN_IRQHandler+0x264>)
 80037b8:	400b      	ands	r3, r1
 80037ba:	6513      	str	r3, [r2, #80]	; 0x50
 80037bc:	4a4e      	ldr	r2, [pc, #312]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 80037be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c0:	0f9b      	lsrs	r3, r3, #30
 80037c2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80037c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9b2 	bl	8003b30 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80037cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037d8:	4b48      	ldr	r3, [pc, #288]	; (80038fc <HAL_FDCAN_IRQHandler+0x264>)
 80037da:	400b      	ands	r3, r1
 80037dc:	6513      	str	r3, [r2, #80]	; 0x50
 80037de:	4a46      	ldr	r2, [pc, #280]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 80037e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e2:	0f9b      	lsrs	r3, r3, #30
 80037e4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80037e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f9ac 	bl	8003b46 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80037ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_FDCAN_IRQHandler+0x264>)
 80037fc:	400b      	ands	r3, r1
 80037fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003800:	4a3d      	ldr	r2, [pc, #244]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 8003802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003804:	0f9b      	lsrs	r3, r3, #30
 8003806:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003808:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fb22 	bl	8000e54 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800381c:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_FDCAN_IRQHandler+0x264>)
 800381e:	400b      	ands	r3, r1
 8003820:	6513      	str	r3, [r2, #80]	; 0x50
 8003822:	4a35      	ldr	r2, [pc, #212]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 8003824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003826:	0f9b      	lsrs	r3, r3, #30
 8003828:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800382a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fd facb 	bl	8000dc8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00f      	beq.n	800385c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384e:	651a      	str	r2, [r3, #80]	; 0x50
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f980 	bl	8003b5c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01c      	beq.n	80038a0 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d017      	beq.n	80038a0 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003884:	4013      	ands	r3, r2
 8003886:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003890:	651a      	str	r2, [r3, #80]	; 0x50
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f968 	bl	8003b70 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00f      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038bc:	651a      	str	r2, [r3, #80]	; 0x50
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f969 	bl	8003b9c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80038ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038e6:	651a      	str	r2, [r3, #80]	; 0x50
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_FDCAN_IRQHandler+0x260>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f95e 	bl	8003bb0 <HAL_FDCAN_TimestampWraparoundCallback>
 80038f4:	e004      	b.n	8003900 <HAL_FDCAN_IRQHandler+0x268>
 80038f6:	bf00      	nop
 80038f8:	4000a800 	.word	0x4000a800
 80038fc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00f      	beq.n	800392a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800391c:	651a      	str	r2, [r3, #80]	; 0x50
 800391e:	4b81      	ldr	r3, [pc, #516]	; (8003b24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f94d 	bl	8003bc4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d014      	beq.n	800395e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00f      	beq.n	800395e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003946:	651a      	str	r2, [r3, #80]	; 0x50
 8003948:	4b76      	ldr	r3, [pc, #472]	; (8003b24 <HAL_FDCAN_IRQHandler+0x48c>)
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800395e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_FDCAN_IRQHandler+0x490>)
 800396c:	400b      	ands	r3, r1
 800396e:	6513      	str	r3, [r2, #80]	; 0x50
 8003970:	4a6c      	ldr	r2, [pc, #432]	; (8003b24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003974:	0f9b      	lsrs	r3, r3, #30
 8003976:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f940 	bl	8003c00 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_FDCAN_IRQHandler+0x490>)
 800398e:	400b      	ands	r3, r1
 8003990:	6513      	str	r3, [r2, #80]	; 0x50
 8003992:	4a64      	ldr	r2, [pc, #400]	; (8003b24 <HAL_FDCAN_IRQHandler+0x48c>)
 8003994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003996:	0f9b      	lsrs	r3, r3, #30
 8003998:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a5f      	ldr	r2, [pc, #380]	; (8003b2c <HAL_FDCAN_IRQHandler+0x494>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	f040 80aa 	bne.w	8003b0a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a2 	beq.w	8003b0a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039da:	4013      	ands	r3, r2
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f2:	4013      	ands	r3, r2
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003a18:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	4013      	ands	r3, r2
 8003a24:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003a30:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8d9 	bl	8003c16 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a70:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f8d9 	bl	8003c2c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2240      	movs	r2, #64	; 0x40
 8003aac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8c5 	bl	8003c42 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8c6 	bl	8003c5a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f869 	bl	8003bec <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3758      	adds	r7, #88	; 0x58
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	4000a800 	.word	0x4000a800
 8003b28:	3fcfffff 	.word	0x3fcfffff
 8003b2c:	4000a000 	.word	0x4000a000

08003b30 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c86:	4ba7      	ldr	r3, [pc, #668]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	0091      	lsls	r1, r2, #2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	041a      	lsls	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cc6:	4b97      	ldr	r3, [pc, #604]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0091      	lsls	r1, r2, #2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	041a      	lsls	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d08:	4b86      	ldr	r3, [pc, #536]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	0091      	lsls	r1, r2, #2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	041a      	lsls	r2, r3, #16
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4413      	add	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d50:	4b74      	ldr	r3, [pc, #464]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	0091      	lsls	r1, r2, #2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	041a      	lsls	r2, r3, #16
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d98:	4b62      	ldr	r3, [pc, #392]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	0091      	lsls	r1, r2, #2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4413      	add	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003dc4:	4b57      	ldr	r3, [pc, #348]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	0091      	lsls	r1, r2, #2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dde:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	041a      	lsls	r2, r3, #16
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	0091      	lsls	r1, r2, #2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	430b      	orrs	r3, r1
 8003e14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	041a      	lsls	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	061a      	lsls	r2, r3, #24
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003e56:	4413      	add	r3, r2
 8003e58:	009a      	lsls	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d915      	bls.n	8003f4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003f20:	e006      	b.n	8003f30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003f22:	bf00      	nop
 8003f24:	ffff0003 	.word	0xffff0003
 8003f28:	10002b00 	.word	0x10002b00
 8003f2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e010      	b.n	8003f6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e005      	b.n	8003f60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3f3      	bcc.n	8003f54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003f9a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e00a      	b.n	8003fbe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003fb0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003fb6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fbc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003fc8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003fce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003fd4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3304      	adds	r3, #4
 800400a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e020      	b.n	8004054 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3303      	adds	r3, #3
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	3302      	adds	r3, #2
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	440b      	add	r3, r1
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800402a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3301      	adds	r3, #1
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	440b      	add	r3, r1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004038:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	440a      	add	r2, r1
 8004040:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004042:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	3304      	adds	r3, #4
 800404c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3304      	adds	r3, #4
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	4a06      	ldr	r2, [pc, #24]	; (8004074 <FDCAN_CopyMessageToRAM+0xf8>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	461a      	mov	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4293      	cmp	r3, r2
 8004064:	d3d5      	bcc.n	8004012 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	3724      	adds	r7, #36	; 0x24
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	0800a2e8 	.word	0x0800a2e8

08004078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004086:	4b89      	ldr	r3, [pc, #548]	; (80042ac <HAL_GPIO_Init+0x234>)
 8004088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800408a:	e194      	b.n	80043b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8186 	beq.w	80043b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d005      	beq.n	80040bc <HAL_GPIO_Init+0x44>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d130      	bne.n	800411e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040f2:	2201      	movs	r2, #1
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 0201 	and.w	r2, r3, #1
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b03      	cmp	r3, #3
 8004128:	d017      	beq.n	800415a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d123      	bne.n	80041ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	08da      	lsrs	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3208      	adds	r2, #8
 800416e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	08da      	lsrs	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3208      	adds	r2, #8
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0203 	and.w	r2, r3, #3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80e0 	beq.w	80043b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f0:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <HAL_GPIO_Init+0x238>)
 80041f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041f6:	4a2e      	ldr	r2, [pc, #184]	; (80042b0 <HAL_GPIO_Init+0x238>)
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <HAL_GPIO_Init+0x238>)
 8004202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800420e:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_GPIO_Init+0x23c>)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <HAL_GPIO_Init+0x240>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d052      	beq.n	80042e0 <HAL_GPIO_Init+0x268>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <HAL_GPIO_Init+0x244>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d031      	beq.n	80042a6 <HAL_GPIO_Init+0x22e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_GPIO_Init+0x248>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02b      	beq.n	80042a2 <HAL_GPIO_Init+0x22a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_GPIO_Init+0x24c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d025      	beq.n	800429e <HAL_GPIO_Init+0x226>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_GPIO_Init+0x250>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01f      	beq.n	800429a <HAL_GPIO_Init+0x222>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_GPIO_Init+0x254>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d019      	beq.n	8004296 <HAL_GPIO_Init+0x21e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <HAL_GPIO_Init+0x258>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_GPIO_Init+0x21a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_GPIO_Init+0x25c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00d      	beq.n	800428e <HAL_GPIO_Init+0x216>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_GPIO_Init+0x260>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <HAL_GPIO_Init+0x212>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_GPIO_Init+0x264>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_GPIO_Init+0x20e>
 8004282:	2309      	movs	r3, #9
 8004284:	e02d      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 8004286:	230a      	movs	r3, #10
 8004288:	e02b      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 800428a:	2308      	movs	r3, #8
 800428c:	e029      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 800428e:	2307      	movs	r3, #7
 8004290:	e027      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 8004292:	2306      	movs	r3, #6
 8004294:	e025      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 8004296:	2305      	movs	r3, #5
 8004298:	e023      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 800429a:	2304      	movs	r3, #4
 800429c:	e021      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 800429e:	2303      	movs	r3, #3
 80042a0:	e01f      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e01d      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e01b      	b.n	80042e2 <HAL_GPIO_Init+0x26a>
 80042aa:	bf00      	nop
 80042ac:	58000080 	.word	0x58000080
 80042b0:	58024400 	.word	0x58024400
 80042b4:	58000400 	.word	0x58000400
 80042b8:	58020000 	.word	0x58020000
 80042bc:	58020400 	.word	0x58020400
 80042c0:	58020800 	.word	0x58020800
 80042c4:	58020c00 	.word	0x58020c00
 80042c8:	58021000 	.word	0x58021000
 80042cc:	58021400 	.word	0x58021400
 80042d0:	58021800 	.word	0x58021800
 80042d4:	58021c00 	.word	0x58021c00
 80042d8:	58022000 	.word	0x58022000
 80042dc:	58022400 	.word	0x58022400
 80042e0:	2300      	movs	r3, #0
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	f002 0203 	and.w	r2, r2, #3
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	4093      	lsls	r3, r2
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f2:	4938      	ldr	r1, [pc, #224]	; (80043d4 <HAL_GPIO_Init+0x35c>)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	3302      	adds	r3, #2
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800432e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f ae63 	bne.w	800408c <HAL_GPIO_Init+0x14>
  }
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	58000400 	.word	0x58000400

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800440a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440c:	b08f      	sub	sp, #60	; 0x3c
 800440e:	af0a      	add	r7, sp, #40	; 0x28
 8004410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e116      	b.n	800464a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc ff82 	bl	8001340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2203      	movs	r2, #3
 8004440:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f004 ffba 	bl	80093d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	687e      	ldr	r6, [r7, #4]
 8004468:	466d      	mov	r5, sp
 800446a:	f106 0410 	add.w	r4, r6, #16
 800446e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800447a:	e885 0003 	stmia.w	r5, {r0, r1}
 800447e:	1d33      	adds	r3, r6, #4
 8004480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f004 ff38 	bl	80092f8 <USB_CoreInit>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e0d7      	b.n	800464a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 ffa8 	bl	80093f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e04a      	b.n	8004542 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	333d      	adds	r3, #61	; 0x3d
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	333c      	adds	r3, #60	; 0x3c
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	b298      	uxth	r0, r3
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	3356      	adds	r3, #86	; 0x56
 80044e8:	4602      	mov	r2, r0
 80044ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3340      	adds	r3, #64	; 0x40
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3344      	adds	r3, #68	; 0x44
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	3348      	adds	r3, #72	; 0x48
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334c      	adds	r3, #76	; 0x4c
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	3301      	adds	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d3af      	bcc.n	80044ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e044      	b.n	80045dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004552:	7bfa      	ldrb	r2, [r7, #15]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	3301      	adds	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d3b5      	bcc.n	8004552 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	687e      	ldr	r6, [r7, #4]
 80045ee:	466d      	mov	r5, sp
 80045f0:	f106 0410 	add.w	r4, r6, #16
 80045f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004600:	e885 0003 	stmia.w	r5, {r0, r1}
 8004604:	1d33      	adds	r3, r6, #4
 8004606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004608:	6838      	ldr	r0, [r7, #0]
 800460a:	f004 ff41 	bl	8009490 <USB_DevInit>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e014      	b.n	800464a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b01      	cmp	r3, #1
 8004636:	d102      	bne.n	800463e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f80b 	bl	8004654 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f005 f8ff 	bl	8009846 <USB_DevDisconnect>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004654 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_PCDEx_ActivateLPM+0x44>)
 8004684:	4313      	orrs	r3, r2
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	10000003 	.word	0x10000003

0800469c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d00a      	beq.n	80046c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046b0:	4b16      	ldr	r3, [pc, #88]	; (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d001      	beq.n	80046c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e01f      	b.n	8004702 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e01d      	b.n	8004702 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	490f      	ldr	r1, [pc, #60]	; (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046d6:	f7fd f865 	bl	80017a4 <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046dc:	e009      	b.n	80046f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046de:	f7fd f861 	bl	80017a4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ec:	d901      	bls.n	80046f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e007      	b.n	8004702 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d1ee      	bne.n	80046de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	58024800 	.word	0x58024800

08004710 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471e:	60d3      	str	r3, [r2, #12]
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	58024800 	.word	0x58024800

08004730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f000 bc48 	b.w	8004fd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8088 	beq.w	8004862 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004752:	4b99      	ldr	r3, [pc, #612]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800475c:	4b96      	ldr	r3, [pc, #600]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	2b10      	cmp	r3, #16
 8004766:	d007      	beq.n	8004778 <HAL_RCC_OscConfig+0x48>
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	2b18      	cmp	r3, #24
 800476c:	d111      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10c      	bne.n	8004792 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	4b8f      	ldr	r3, [pc, #572]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d06d      	beq.n	8004860 <HAL_RCC_OscConfig+0x130>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d169      	bne.n	8004860 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f000 bc21 	b.w	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x7a>
 800479c:	4b86      	ldr	r3, [pc, #536]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a85      	ldr	r2, [pc, #532]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e02e      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x9c>
 80047b2:	4b81      	ldr	r3, [pc, #516]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a80      	ldr	r2, [pc, #512]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b7e      	ldr	r3, [pc, #504]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0xc0>
 80047d6:	4b78      	ldr	r3, [pc, #480]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a77      	ldr	r2, [pc, #476]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b75      	ldr	r3, [pc, #468]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a74      	ldr	r2, [pc, #464]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xd8>
 80047f0:	4b71      	ldr	r3, [pc, #452]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a70      	ldr	r2, [pc, #448]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b6e      	ldr	r3, [pc, #440]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6d      	ldr	r2, [pc, #436]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fc ffc8 	bl	80017a4 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7fc ffc4 	bl	80017a4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e3d4      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800482a:	4b63      	ldr	r3, [pc, #396]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xe8>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fc ffb4 	bl	80017a4 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fc ffb0 	bl	80017a4 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e3c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004852:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x110>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80ca 	beq.w	8004a04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004870:	4b51      	ldr	r3, [pc, #324]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004878:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800487a:	4b4f      	ldr	r3, [pc, #316]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_RCC_OscConfig+0x166>
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2b18      	cmp	r3, #24
 800488a:	d156      	bne.n	800493a <HAL_RCC_OscConfig+0x20a>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d151      	bne.n	800493a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004896:	4b48      	ldr	r3, [pc, #288]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_RCC_OscConfig+0x17e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e392      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048ae:	4b42      	ldr	r3, [pc, #264]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 0219 	bic.w	r2, r3, #25
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	493f      	ldr	r1, [pc, #252]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fc ff70 	bl	80017a4 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c8:	f7fc ff6c 	bl	80017a4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e37c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048da:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	f7fc ff8d 	bl	8001804 <HAL_GetREVID>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d817      	bhi.n	8004924 <HAL_RCC_OscConfig+0x1f4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d108      	bne.n	800490e <HAL_RCC_OscConfig+0x1de>
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004904:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800490c:	e07a      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	031b      	lsls	r3, r3, #12
 800491c:	4926      	ldr	r1, [pc, #152]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004922:	e06f      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	4921      	ldr	r1, [pc, #132]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	e064      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d047      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004942:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 0219 	bic.w	r2, r3, #25
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	491a      	ldr	r1, [pc, #104]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fc ff26 	bl	80017a4 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495c:	f7fc ff22 	bl	80017a4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e332      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497a:	f7fc ff43 	bl	8001804 <HAL_GetREVID>
 800497e:	4603      	mov	r3, r0
 8004980:	f241 0203 	movw	r2, #4099	; 0x1003
 8004984:	4293      	cmp	r3, r2
 8004986:	d819      	bhi.n	80049bc <HAL_RCC_OscConfig+0x28c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d108      	bne.n	80049a2 <HAL_RCC_OscConfig+0x272>
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004998:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 800499a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e030      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	4901      	ldr	r1, [pc, #4]	; (80049b8 <HAL_RCC_OscConfig+0x288>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e025      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
 80049b8:	58024400 	.word	0x58024400
 80049bc:	4b9a      	ldr	r3, [pc, #616]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	4997      	ldr	r1, [pc, #604]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e018      	b.n	8004a04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b95      	ldr	r3, [pc, #596]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a94      	ldr	r2, [pc, #592]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fc fee1 	bl	80017a4 <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fc fedd 	bl	80017a4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e2ed      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049f8:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80a9 	beq.w	8004b64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a12:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a1c:	4b82      	ldr	r3, [pc, #520]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d007      	beq.n	8004a38 <HAL_RCC_OscConfig+0x308>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b18      	cmp	r3, #24
 8004a2c:	d13a      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x374>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d135      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a38:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_OscConfig+0x320>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e2c1      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a50:	f7fc fed8 	bl	8001804 <HAL_GetREVID>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d817      	bhi.n	8004a8e <HAL_RCC_OscConfig+0x35e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x348>
 8004a66:	4b70      	ldr	r3, [pc, #448]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a6e:	4a6e      	ldr	r2, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a76:	e075      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a78:	4b6b      	ldr	r3, [pc, #428]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	069b      	lsls	r3, r3, #26
 8004a86:	4968      	ldr	r1, [pc, #416]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a8c:	e06a      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a8e:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	4962      	ldr	r1, [pc, #392]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aa2:	e05f      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d042      	beq.n	8004b32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004aac:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fc fe74 	bl	80017a4 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ac0:	f7fc fe70 	bl	80017a4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e280      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ad2:	4b55      	ldr	r3, [pc, #340]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ade:	f7fc fe91 	bl	8001804 <HAL_GetREVID>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d817      	bhi.n	8004b1c <HAL_RCC_OscConfig+0x3ec>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d108      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3d6>
 8004af4:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004afc:	4a4a      	ldr	r2, [pc, #296]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b02:	6053      	str	r3, [r2, #4]
 8004b04:	e02e      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
 8004b06:	4b48      	ldr	r3, [pc, #288]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	069b      	lsls	r3, r3, #26
 8004b14:	4944      	ldr	r1, [pc, #272]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
 8004b1a:	e023      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
 8004b1c:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	493f      	ldr	r1, [pc, #252]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
 8004b30:	e018      	b.n	8004b64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fe31 	bl	80017a4 <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b46:	f7fc fe2d 	bl	80017a4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e23d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b58:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d036      	beq.n	8004bde <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	4a2a      	ldr	r2, [pc, #168]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc fe0e 	bl	80017a4 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8c:	f7fc fe0a 	bl	80017a4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e21a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x45c>
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bac:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc fdf4 	bl	80017a4 <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc0:	f7fc fdf0 	bl	80017a4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e200      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d039      	beq.n	8004c5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc fdd1 	bl	80017a4 <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c06:	f7fc fdcd 	bl	80017a4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1dd      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x4d6>
 8004c24:	e01b      	b.n	8004c5e <HAL_RCC_OscConfig+0x52e>
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c2c:	4b9b      	ldr	r3, [pc, #620]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a9a      	ldr	r2, [pc, #616]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c38:	f7fc fdb4 	bl	80017a4 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c40:	f7fc fdb0 	bl	80017a4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1c0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c52:	4b92      	ldr	r3, [pc, #584]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8081 	beq.w	8004d6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	; (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a8b      	ldr	r2, [pc, #556]	; (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c78:	f7fc fd94 	bl	80017a4 <HAL_GetTick>
 8004c7c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fc fd90 	bl	80017a4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1a0      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c92:	4b83      	ldr	r3, [pc, #524]	; (8004ea0 <HAL_RCC_OscConfig+0x770>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x584>
 8004ca6:	4b7d      	ldr	r3, [pc, #500]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a7c      	ldr	r2, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	e02d      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5a6>
 8004cbc:	4b77      	ldr	r3, [pc, #476]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a76      	ldr	r2, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	4b74      	ldr	r3, [pc, #464]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a73      	ldr	r2, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cce:	f023 0304 	bic.w	r3, r3, #4
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x5c8>
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cea:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a6b      	ldr	r2, [pc, #428]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x5e0>
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a67      	ldr	r2, [pc, #412]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
 8004d04:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a64      	ldr	r2, [pc, #400]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fc fd44 	bl	80017a4 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fc fd40 	bl	80017a4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e14e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x5f0>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fc fd2e 	bl	80017a4 <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fc fd2a 	bl	80017a4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e138      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d62:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 812d 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d78:	4b48      	ldr	r3, [pc, #288]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d80:	2b18      	cmp	r3, #24
 8004d82:	f000 80bd 	beq.w	8004f00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	f040 809e 	bne.w	8004ecc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d90:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a41      	ldr	r2, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fd02 	bl	80017a4 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fcfe 	bl	80017a4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e10e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db6:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc6:	4b37      	ldr	r3, [pc, #220]	; (8004ea4 <HAL_RCC_OscConfig+0x774>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4931      	ldr	r1, [pc, #196]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	628b      	str	r3, [r1, #40]	; 0x28
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	3b01      	subs	r3, #1
 8004de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	3b01      	subs	r3, #1
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	3b01      	subs	r3, #1
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e0c:	4923      	ldr	r1, [pc, #140]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e1e:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e22:	4b21      	ldr	r3, [pc, #132]	; (8004ea8 <HAL_RCC_OscConfig+0x778>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	491b      	ldr	r1, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	f023 020c 	bic.w	r2, r3, #12
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4917      	ldr	r1, [pc, #92]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e44:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f023 0202 	bic.w	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	4912      	ldr	r1, [pc, #72]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e62:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <HAL_RCC_OscConfig+0x76c>)
 8004e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc fc87 	bl	80017a4 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e98:	e011      	b.n	8004ebe <HAL_RCC_OscConfig+0x78e>
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	58024800 	.word	0x58024800
 8004ea4:	fffffc0c 	.word	0xfffffc0c
 8004ea8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fc fc7a 	bl	80017a4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e08a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ebe:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x77c>
 8004eca:	e082      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ecc:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fc64 	bl	80017a4 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fc fc60 	bl	80017a4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e070      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x7b0>
 8004efe:	e068      	b.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f00:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f06:	4b35      	ldr	r3, [pc, #212]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d031      	beq.n	8004f78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f003 0203 	and.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d12a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d122      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0a5b      	lsrs	r3, r3, #9
 8004f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d108      	bne.n	8004f78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e02b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d01f      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f92:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f9e:	f7fc fc01 	bl	80017a4 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004fa4:	bf00      	nop
 8004fa6:	f7fc fbfd 	bl	80017a4 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d0f9      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_RCC_OscConfig+0x8b0>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fbe:	00d2      	lsls	r2, r2, #3
 8004fc0:	4906      	ldr	r1, [pc, #24]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <HAL_RCC_OscConfig+0x8ac>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	; 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	ffff0007 	.word	0xffff0007

08004fe4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e19c      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b8a      	ldr	r3, [pc, #552]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d910      	bls.n	8005028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b87      	ldr	r3, [pc, #540]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	4985      	ldr	r1, [pc, #532]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b83      	ldr	r3, [pc, #524]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e184      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	4b7b      	ldr	r3, [pc, #492]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005040:	429a      	cmp	r2, r3
 8005042:	d908      	bls.n	8005056 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005044:	4b78      	ldr	r3, [pc, #480]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4975      	ldr	r1, [pc, #468]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005052:	4313      	orrs	r3, r2
 8005054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b70      	ldr	r3, [pc, #448]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800506e:	429a      	cmp	r2, r3
 8005070:	d908      	bls.n	8005084 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005072:	4b6d      	ldr	r3, [pc, #436]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	496a      	ldr	r1, [pc, #424]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	4b64      	ldr	r3, [pc, #400]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800509c:	429a      	cmp	r2, r3
 800509e:	d908      	bls.n	80050b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a0:	4b61      	ldr	r3, [pc, #388]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	495e      	ldr	r1, [pc, #376]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	4b59      	ldr	r3, [pc, #356]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d908      	bls.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ce:	4b56      	ldr	r3, [pc, #344]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4953      	ldr	r1, [pc, #332]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	4b4d      	ldr	r3, [pc, #308]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b4a      	ldr	r3, [pc, #296]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f023 020f 	bic.w	r2, r3, #15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4947      	ldr	r1, [pc, #284]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 800510a:	4313      	orrs	r3, r2
 800510c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d055      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800511a:	4b43      	ldr	r3, [pc, #268]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4940      	ldr	r1, [pc, #256]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005128:	4313      	orrs	r3, r2
 800512a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d107      	bne.n	8005144 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005134:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d121      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0f6      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d107      	bne.n	800515c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800514c:	4b36      	ldr	r3, [pc, #216]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d115      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0ea      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005164:	4b30      	ldr	r3, [pc, #192]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0de      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005174:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d6      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005184:	4b28      	ldr	r3, [pc, #160]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f023 0207 	bic.w	r2, r3, #7
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4925      	ldr	r1, [pc, #148]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 8005192:	4313      	orrs	r3, r2
 8005194:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7fc fb05 	bl	80017a4 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519e:	f7fc fb01 	bl	80017a4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0be      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d1eb      	bne.n	800519e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d010      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	429a      	cmp	r2, r3
 80051e0:	d208      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f023 020f 	bic.w	r2, r3, #15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	490e      	ldr	r1, [pc, #56]	; (8005228 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d214      	bcs.n	800522c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 020f 	bic.w	r2, r3, #15
 800520a:	4906      	ldr	r1, [pc, #24]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCC_ClockConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e086      	b.n	8005332 <HAL_RCC_ClockConfig+0x34e>
 8005224:	52002000 	.word	0x52002000
 8005228:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	4b3f      	ldr	r3, [pc, #252]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005244:	429a      	cmp	r2, r3
 8005246:	d208      	bcs.n	800525a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005248:	4b3c      	ldr	r3, [pc, #240]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4939      	ldr	r1, [pc, #228]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 8005256:	4313      	orrs	r3, r2
 8005258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	4b34      	ldr	r3, [pc, #208]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005272:	429a      	cmp	r2, r3
 8005274:	d208      	bcs.n	8005288 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	492e      	ldr	r1, [pc, #184]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 8005284:	4313      	orrs	r3, r2
 8005286:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	4b28      	ldr	r3, [pc, #160]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d208      	bcs.n	80052b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4922      	ldr	r1, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d208      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4917      	ldr	r1, [pc, #92]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052e4:	f000 f834 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b14      	ldr	r3, [pc, #80]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	4912      	ldr	r1, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x35c>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005302:	4b0e      	ldr	r3, [pc, #56]	; (800533c <HAL_RCC_ClockConfig+0x358>)
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <HAL_RCC_ClockConfig+0x35c>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x360>)
 800531a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <HAL_RCC_ClockConfig+0x364>)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <HAL_RCC_ClockConfig+0x368>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fc f9f2 	bl	8001710 <HAL_InitTick>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
 8005340:	0800a2d8 	.word	0x0800a2d8
 8005344:	24000008 	.word	0x24000008
 8005348:	24000004 	.word	0x24000004
 800534c:	2400000c 	.word	0x2400000c

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	b089      	sub	sp, #36	; 0x24
 8005354:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005356:	4bb3      	ldr	r3, [pc, #716]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800535e:	2b18      	cmp	r3, #24
 8005360:	f200 8155 	bhi.w	800560e <HAL_RCC_GetSysClockFreq+0x2be>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053d1 	.word	0x080053d1
 8005370:	0800560f 	.word	0x0800560f
 8005374:	0800560f 	.word	0x0800560f
 8005378:	0800560f 	.word	0x0800560f
 800537c:	0800560f 	.word	0x0800560f
 8005380:	0800560f 	.word	0x0800560f
 8005384:	0800560f 	.word	0x0800560f
 8005388:	0800560f 	.word	0x0800560f
 800538c:	080053f7 	.word	0x080053f7
 8005390:	0800560f 	.word	0x0800560f
 8005394:	0800560f 	.word	0x0800560f
 8005398:	0800560f 	.word	0x0800560f
 800539c:	0800560f 	.word	0x0800560f
 80053a0:	0800560f 	.word	0x0800560f
 80053a4:	0800560f 	.word	0x0800560f
 80053a8:	0800560f 	.word	0x0800560f
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	0800560f 	.word	0x0800560f
 80053b4:	0800560f 	.word	0x0800560f
 80053b8:	0800560f 	.word	0x0800560f
 80053bc:	0800560f 	.word	0x0800560f
 80053c0:	0800560f 	.word	0x0800560f
 80053c4:	0800560f 	.word	0x0800560f
 80053c8:	0800560f 	.word	0x0800560f
 80053cc:	08005403 	.word	0x08005403
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d0:	4b94      	ldr	r3, [pc, #592]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053dc:	4b91      	ldr	r3, [pc, #580]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	4a90      	ldr	r2, [pc, #576]	; (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053ee:	e111      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053f0:	4b8d      	ldr	r3, [pc, #564]	; (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053f2:	61bb      	str	r3, [r7, #24]
      break;
 80053f4:	e10e      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053f6:	4b8d      	ldr	r3, [pc, #564]	; (800562c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053f8:	61bb      	str	r3, [r7, #24]
      break;
 80053fa:	e10b      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053fc:	4b8c      	ldr	r3, [pc, #560]	; (8005630 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053fe:	61bb      	str	r3, [r7, #24]
      break;
 8005400:	e108      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005402:	4b88      	ldr	r3, [pc, #544]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800540c:	4b85      	ldr	r3, [pc, #532]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005416:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005418:	4b82      	ldr	r3, [pc, #520]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005422:	4b80      	ldr	r3, [pc, #512]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	fb02 f303 	mul.w	r3, r2, r3
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80e1 	beq.w	8005608 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f000 8083 	beq.w	8005554 <HAL_RCC_GetSysClockFreq+0x204>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f200 80a1 	bhi.w	8005598 <HAL_RCC_GetSysClockFreq+0x248>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x114>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d056      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005462:	e099      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005464:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02d      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005470:	4b6c      	ldr	r3, [pc, #432]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	4a6b      	ldr	r2, [pc, #428]	; (8005628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	ee07 3a90 	vmov	s15, r3
 8005488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80054ca:	e087      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005638 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b51      	ldr	r3, [pc, #324]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800550e:	e065      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800563c <HAL_RCC_GetSysClockFreq+0x2ec>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b40      	ldr	r3, [pc, #256]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a02 	vldr	s12, [r7, #8]
 8005536:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005552:	e043      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005640 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a02 	vldr	s12, [r7, #8]
 800557a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005596:	e021      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800563c <HAL_RCC_GetSysClockFreq+0x2ec>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80055be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005634 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055dc:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e6:	3301      	adds	r3, #1
 80055e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005600:	ee17 3a90 	vmov	r3, s15
 8005604:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005606:	e005      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
      break;
 800560c:	e002      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005610:	61bb      	str	r3, [r7, #24]
      break;
 8005612:	bf00      	nop
  }

  return sysclockfreq;
 8005614:	69bb      	ldr	r3, [r7, #24]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	58024400 	.word	0x58024400
 8005628:	03d09000 	.word	0x03d09000
 800562c:	003d0900 	.word	0x003d0900
 8005630:	007a1200 	.word	0x007a1200
 8005634:	46000000 	.word	0x46000000
 8005638:	4c742400 	.word	0x4c742400
 800563c:	4a742400 	.word	0x4a742400
 8005640:	4af42400 	.word	0x4af42400

08005644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800564a:	f7ff fe81 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800564e:	4602      	mov	r2, r0
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <HAL_RCC_GetHCLKFreq+0x50>)
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	490f      	ldr	r1, [pc, #60]	; (8005698 <HAL_RCC_GetHCLKFreq+0x54>)
 800565c:	5ccb      	ldrb	r3, [r1, r3]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <HAL_RCC_GetHCLKFreq+0x50>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	4a09      	ldr	r2, [pc, #36]	; (8005698 <HAL_RCC_GetHCLKFreq+0x54>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	4a07      	ldr	r2, [pc, #28]	; (800569c <HAL_RCC_GetHCLKFreq+0x58>)
 8005680:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005682:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_RCC_GetHCLKFreq+0x58>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	58024400 	.word	0x58024400
 8005698:	0800a2d8 	.word	0x0800a2d8
 800569c:	24000008 	.word	0x24000008
 80056a0:	24000004 	.word	0x24000004

080056a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056a8:	f7ff ffcc 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	58024400 	.word	0x58024400
 80056cc:	0800a2d8 	.word	0x0800a2d8

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80056d4:	f7ff ffb6 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4904      	ldr	r1, [pc, #16]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	58024400 	.word	0x58024400
 80056f8:	0800a2d8 	.word	0x0800a2d8

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005700:	b0ca      	sub	sp, #296	; 0x128
 8005702:	af00      	add	r7, sp, #0
 8005704:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005720:	2500      	movs	r5, #0
 8005722:	ea54 0305 	orrs.w	r3, r4, r5
 8005726:	d049      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005732:	d02f      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005738:	d828      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800573a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573e:	d01a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005744:	d822      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800574a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800574e:	d007      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005750:	e01c      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005752:	4bb8      	ldr	r3, [pc, #736]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	4ab7      	ldr	r2, [pc, #732]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800575e:	e01a      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005764:	3308      	adds	r3, #8
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fc8f 	bl	800708c <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005774:	e00f      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577a:	3328      	adds	r3, #40	; 0x28
 800577c:	2102      	movs	r1, #2
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fd36 	bl	80071f0 <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800579e:	4ba5      	ldr	r3, [pc, #660]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ac:	4aa1      	ldr	r2, [pc, #644]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6513      	str	r3, [r2, #80]	; 0x50
 80057b2:	e003      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80057c8:	f04f 0900 	mov.w	r9, #0
 80057cc:	ea58 0309 	orrs.w	r3, r8, r9
 80057d0:	d047      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d82a      	bhi.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f9 	.word	0x080057f9
 80057e8:	08005807 	.word	0x08005807
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	0800583b 	.word	0x0800583b
 80057f4:	0800583b 	.word	0x0800583b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4b8e      	ldr	r3, [pc, #568]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a8d      	ldr	r2, [pc, #564]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005804:	e01a      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580a:	3308      	adds	r3, #8
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fc3c 	bl	800708c <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800581a:	e00f      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005820:	3328      	adds	r3, #40	; 0x28
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fce3 	bl	80071f0 <RCCEx_PLL3_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005830:	e004      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005838:	e000      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800583a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005844:	4b7b      	ldr	r3, [pc, #492]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	f023 0107 	bic.w	r1, r3, #7
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	4a78      	ldr	r2, [pc, #480]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005854:	430b      	orrs	r3, r1
 8005856:	6513      	str	r3, [r2, #80]	; 0x50
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800586e:	f04f 0b00 	mov.w	fp, #0
 8005872:	ea5a 030b 	orrs.w	r3, sl, fp
 8005876:	d04c      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d030      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005888:	d829      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800588a:	2bc0      	cmp	r3, #192	; 0xc0
 800588c:	d02d      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800588e:	2bc0      	cmp	r3, #192	; 0xc0
 8005890:	d825      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d018      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	d821      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d007      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058a2:	e01c      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	4a62      	ldr	r2, [pc, #392]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058b0:	e01c      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fbe6 	bl	800708c <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	3328      	adds	r3, #40	; 0x28
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fc8d 	bl	80071f0 <RCCEx_PLL3_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058f4:	4b4f      	ldr	r3, [pc, #316]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	4a4c      	ldr	r2, [pc, #304]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005904:	430b      	orrs	r3, r1
 8005906:	6513      	str	r3, [r2, #80]	; 0x50
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800591e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005928:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d053      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005936:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800593a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800593e:	d035      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005940:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005944:	d82e      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005946:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800594a:	d031      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800594c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005950:	d828      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005956:	d01a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595c:	d822      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005966:	d007      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005968:	e01c      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596a:	4b32      	ldr	r3, [pc, #200]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	4a31      	ldr	r2, [pc, #196]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005974:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005976:	e01c      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597c:	3308      	adds	r3, #8
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f001 fb83 	bl	800708c <RCCEx_PLL2_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800598c:	e011      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005992:	3328      	adds	r3, #40	; 0x28
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f001 fc2a 	bl	80071f0 <RCCEx_PLL3_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a2:	e006      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059aa:	e002      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059ba:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059ca:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6593      	str	r3, [r2, #88]	; 0x58
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80059e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059ea:	2300      	movs	r3, #0
 80059ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80059f4:	460b      	mov	r3, r1
 80059f6:	4313      	orrs	r3, r2
 80059f8:	d056      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a06:	d038      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0c:	d831      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a12:	d034      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a18:	d82b      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a1e:	d01d      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a24:	d825      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d006      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a30:	e01f      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4ba2      	ldr	r3, [pc, #648]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4aa1      	ldr	r2, [pc, #644]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a44:	e01c      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fb1c 	bl	800708c <RCCEx_PLL2_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a5a:	e011      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a60:	3328      	adds	r3, #40	; 0x28
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fbc3 	bl	80071f0 <RCCEx_PLL3_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a70:	e006      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a78:	e002      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a88:	4b8e      	ldr	r3, [pc, #568]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a98:	4a8a      	ldr	r2, [pc, #552]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a9e:	e003      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005abe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d03a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	2b30      	cmp	r3, #48	; 0x30
 8005ad0:	d01f      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	d819      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d00c      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d815      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d019      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d111      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae6:	4b77      	ldr	r3, [pc, #476]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a76      	ldr	r2, [pc, #472]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005af2:	e011      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af8:	3308      	adds	r3, #8
 8005afa:	2102      	movs	r1, #2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fac5 	bl	800708c <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b20:	4b68      	ldr	r3, [pc, #416]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b24:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	4a65      	ldr	r2, [pc, #404]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	d051      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b68:	d035      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6e:	d82e      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b74:	d031      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b7a:	d828      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b80:	d01a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	d822      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b92:	e01c      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b94:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a4a      	ldr	r2, [pc, #296]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e01c      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 fa6e 	bl	800708c <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	3328      	adds	r3, #40	; 0x28
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fb15 	bl	80071f0 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005be4:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf2:	4a34      	ldr	r2, [pc, #208]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6513      	str	r3, [r2, #80]	; 0x50
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d056      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c2c:	d033      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c32:	d82c      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c38:	d02f      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c3e:	d826      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c44:	d02b      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c4a:	d820      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c50:	d012      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c56:	d81a      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d022      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c60:	d115      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c66:	3308      	adds	r3, #8
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 fa0e 	bl	800708c <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c76:	e015      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c7c:	3328      	adds	r3, #40	; 0x28
 8005c7e:	2101      	movs	r1, #1
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fab5 	bl	80071f0 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c94:	e006      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c96:	bf00      	nop
 8005c98:	e004      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cba:	4a02      	ldr	r2, [pc, #8]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6513      	str	r3, [r2, #80]	; 0x50
 8005cc0:	e006      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ccc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ce6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4313      	orrs	r3, r2
 8005cee:	d055      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cfc:	d033      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d02:	d82c      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d08:	d02f      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d826      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d14:	d02b      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d1a:	d820      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d20:	d012      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d26:	d81a      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d022      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d30:	d115      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d36:	3308      	adds	r3, #8
 8005d38:	2101      	movs	r1, #1
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 f9a6 	bl	800708c <RCCEx_PLL2_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d46:	e015      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d4c:	3328      	adds	r3, #40	; 0x28
 8005d4e:	2101      	movs	r1, #1
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fa4d 	bl	80071f0 <RCCEx_PLL3_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d5c:	e00a      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d64:	e006      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d66:	bf00      	nop
 8005d68:	e004      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d7c:	4ba3      	ldr	r3, [pc, #652]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d8c:	4a9f      	ldr	r2, [pc, #636]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6593      	str	r3, [r2, #88]	; 0x58
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005db6:	460b      	mov	r3, r1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	d037      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc6:	d00e      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dcc:	d816      	bhi.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d018      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd6:	d111      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd8:	4b8c      	ldr	r3, [pc, #560]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	4a8b      	ldr	r2, [pc, #556]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005de4:	e00f      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dea:	3308      	adds	r3, #8
 8005dec:	2101      	movs	r1, #1
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 f94c 	bl	800708c <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dfa:	e004      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e02:	e000      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e0e:	4b7f      	ldr	r3, [pc, #508]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e12:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a7b      	ldr	r2, [pc, #492]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	6513      	str	r3, [r2, #80]	; 0x50
 8005e22:	e003      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d039      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d81c      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e99 	.word	0x08005e99
 8005e60:	08005e6d 	.word	0x08005e6d
 8005e64:	08005e7b 	.word	0x08005e7b
 8005e68:	08005e99 	.word	0x08005e99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6c:	4b67      	ldr	r3, [pc, #412]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	4a66      	ldr	r2, [pc, #408]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e78:	e00f      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7e:	3308      	adds	r3, #8
 8005e80:	2102      	movs	r1, #2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f902 	bl	800708c <RCCEx_PLL2_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ea2:	4b5a      	ldr	r3, [pc, #360]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	f023 0103 	bic.w	r1, r3, #3
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb0:	4a56      	ldr	r2, [pc, #344]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eb6:	e003      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ebc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ed6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005eda:	460b      	mov	r3, r1
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f000 809f 	beq.w	8006020 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee2:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a4a      	ldr	r2, [pc, #296]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eee:	f7fb fc59 	bl	80017a4 <HAL_GetTick>
 8005ef2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef6:	e00b      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef8:	f7fb fc54 	bl	80017a4 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	; 0x64
 8005f06:	d903      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f0e:	e005      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f10:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ed      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d179      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f24:	4b39      	ldr	r3, [pc, #228]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f30:	4053      	eors	r3, r2
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f3a:	4b34      	ldr	r3, [pc, #208]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f46:	4b31      	ldr	r3, [pc, #196]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	4a30      	ldr	r2, [pc, #192]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f52:	4b2e      	ldr	r3, [pc, #184]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a2d      	ldr	r2, [pc, #180]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f5e:	4a2b      	ldr	r2, [pc, #172]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d118      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fb fc16 	bl	80017a4 <HAL_GetTick>
 8005f78:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f7c:	e00d      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fb fc11 	bl	80017a4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f88:	1ad2      	subs	r2, r2, r3
 8005f8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d903      	bls.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005f98:	e005      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f9a:	4b1c      	ldr	r3, [pc, #112]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0eb      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d129      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d10e      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005fc0:	4b12      	ldr	r3, [pc, #72]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fd0:	091a      	lsrs	r2, r3, #4
 8005fd2:	4b10      	ldr	r3, [pc, #64]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	4a0d      	ldr	r2, [pc, #52]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6113      	str	r3, [r2, #16]
 8005fdc:	e005      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005fde:	4b0b      	ldr	r3, [pc, #44]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fe8:	6113      	str	r3, [r2, #16]
 8005fea:	4b08      	ldr	r3, [pc, #32]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ffa:	4a04      	ldr	r2, [pc, #16]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8006000:	e00e      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800600a:	e009      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800600c:	58024400 	.word	0x58024400
 8006010:	58024800 	.word	0x58024800
 8006014:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f002 0301 	and.w	r3, r2, #1
 800602c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006030:	2300      	movs	r3, #0
 8006032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006036:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800603a:	460b      	mov	r3, r1
 800603c:	4313      	orrs	r3, r2
 800603e:	f000 8089 	beq.w	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006048:	2b28      	cmp	r3, #40	; 0x28
 800604a:	d86b      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	0800612d 	.word	0x0800612d
 8006058:	08006125 	.word	0x08006125
 800605c:	08006125 	.word	0x08006125
 8006060:	08006125 	.word	0x08006125
 8006064:	08006125 	.word	0x08006125
 8006068:	08006125 	.word	0x08006125
 800606c:	08006125 	.word	0x08006125
 8006070:	08006125 	.word	0x08006125
 8006074:	080060f9 	.word	0x080060f9
 8006078:	08006125 	.word	0x08006125
 800607c:	08006125 	.word	0x08006125
 8006080:	08006125 	.word	0x08006125
 8006084:	08006125 	.word	0x08006125
 8006088:	08006125 	.word	0x08006125
 800608c:	08006125 	.word	0x08006125
 8006090:	08006125 	.word	0x08006125
 8006094:	0800610f 	.word	0x0800610f
 8006098:	08006125 	.word	0x08006125
 800609c:	08006125 	.word	0x08006125
 80060a0:	08006125 	.word	0x08006125
 80060a4:	08006125 	.word	0x08006125
 80060a8:	08006125 	.word	0x08006125
 80060ac:	08006125 	.word	0x08006125
 80060b0:	08006125 	.word	0x08006125
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	08006125 	.word	0x08006125
 80060bc:	08006125 	.word	0x08006125
 80060c0:	08006125 	.word	0x08006125
 80060c4:	08006125 	.word	0x08006125
 80060c8:	08006125 	.word	0x08006125
 80060cc:	08006125 	.word	0x08006125
 80060d0:	08006125 	.word	0x08006125
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006125 	.word	0x08006125
 80060dc:	08006125 	.word	0x08006125
 80060e0:	08006125 	.word	0x08006125
 80060e4:	08006125 	.word	0x08006125
 80060e8:	08006125 	.word	0x08006125
 80060ec:	08006125 	.word	0x08006125
 80060f0:	08006125 	.word	0x08006125
 80060f4:	0800612d 	.word	0x0800612d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fc:	3308      	adds	r3, #8
 80060fe:	2101      	movs	r1, #1
 8006100:	4618      	mov	r0, r3
 8006102:	f000 ffc3 	bl	800708c <RCCEx_PLL2_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006112:	3328      	adds	r3, #40	; 0x28
 8006114:	2101      	movs	r1, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f001 f86a 	bl	80071f0 <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006136:	4bbf      	ldr	r3, [pc, #764]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006144:	4abb      	ldr	r2, [pc, #748]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006146:	430b      	orrs	r3, r1
 8006148:	6553      	str	r3, [r2, #84]	; 0x54
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f002 0302 	and.w	r3, r2, #2
 8006160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800616a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d041      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617a:	2b05      	cmp	r3, #5
 800617c:	d824      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061d1 	.word	0x080061d1
 8006188:	0800619d 	.word	0x0800619d
 800618c:	080061b3 	.word	0x080061b3
 8006190:	080061d1 	.word	0x080061d1
 8006194:	080061d1 	.word	0x080061d1
 8006198:	080061d1 	.word	0x080061d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a0:	3308      	adds	r3, #8
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 ff71 	bl	800708c <RCCEx_PLL2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061b0:	e00f      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b6:	3328      	adds	r3, #40	; 0x28
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f818 	bl	80071f0 <RCCEx_PLL3_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061c6:	e004      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061ce:	e000      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061da:	4b96      	ldr	r3, [pc, #600]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	f023 0107 	bic.w	r1, r3, #7
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e8:	4a92      	ldr	r2, [pc, #584]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6553      	str	r3, [r2, #84]	; 0x54
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0304 	and.w	r3, r2, #4
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800620e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d044      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006220:	2b05      	cmp	r3, #5
 8006222:	d825      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006279 	.word	0x08006279
 8006230:	08006245 	.word	0x08006245
 8006234:	0800625b 	.word	0x0800625b
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
 8006240:	08006279 	.word	0x08006279
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006248:	3308      	adds	r3, #8
 800624a:	2101      	movs	r1, #1
 800624c:	4618      	mov	r0, r3
 800624e:	f000 ff1d 	bl	800708c <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006258:	e00f      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625e:	3328      	adds	r3, #40	; 0x28
 8006260:	2101      	movs	r1, #1
 8006262:	4618      	mov	r0, r3
 8006264:	f000 ffc4 	bl	80071f0 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800626e:	e004      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006282:	4b6c      	ldr	r3, [pc, #432]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006286:	f023 0107 	bic.w	r1, r3, #7
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006292:	4a68      	ldr	r2, [pc, #416]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6593      	str	r3, [r2, #88]	; 0x58
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f002 0320 	and.w	r3, r2, #32
 80062ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062bc:	460b      	mov	r3, r1
 80062be:	4313      	orrs	r3, r2
 80062c0:	d055      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ce:	d033      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d4:	d82c      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062da:	d02f      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e0:	d826      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062e6:	d02b      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80062e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062ec:	d820      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f2:	d012      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80062f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f8:	d81a      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d022      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80062fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006302:	d115      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006308:	3308      	adds	r3, #8
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f000 febd 	bl	800708c <RCCEx_PLL2_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006318:	e015      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	3328      	adds	r3, #40	; 0x28
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f000 ff64 	bl	80071f0 <RCCEx_PLL3_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800632e:	e00a      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006336:	e006      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006338:	bf00      	nop
 800633a:	e004      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800633c:	bf00      	nop
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800634e:	4b39      	ldr	r3, [pc, #228]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006352:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	4a35      	ldr	r2, [pc, #212]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006360:	430b      	orrs	r3, r1
 8006362:	6553      	str	r3, [r2, #84]	; 0x54
 8006364:	e003      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800637a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800637e:	2300      	movs	r3, #0
 8006380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006384:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006388:	460b      	mov	r3, r1
 800638a:	4313      	orrs	r3, r2
 800638c:	d058      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800638e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006396:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800639a:	d033      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800639c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063a0:	d82c      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a6:	d02f      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d826      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b2:	d02b      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80063b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b8:	d820      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063be:	d012      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80063c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c4:	d81a      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d022      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d115      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d4:	3308      	adds	r3, #8
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fe57 	bl	800708c <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063e4:	e015      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ea:	3328      	adds	r3, #40	; 0x28
 80063ec:	2102      	movs	r1, #2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fefe 	bl	80071f0 <RCCEx_PLL3_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063fa:	e00a      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006402:	e006      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006404:	bf00      	nop
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10e      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800642a:	4a02      	ldr	r2, [pc, #8]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800642c:	430b      	orrs	r3, r1
 800642e:	6593      	str	r3, [r2, #88]	; 0x58
 8006430:	e006      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006432:	bf00      	nop
 8006434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006456:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800645a:	460b      	mov	r3, r1
 800645c:	4313      	orrs	r3, r2
 800645e:	d055      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006468:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800646c:	d033      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800646e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006472:	d82c      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006478:	d02f      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647e:	d826      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006480:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006484:	d02b      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006486:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800648a:	d820      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800648c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006490:	d012      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006496:	d81a      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d022      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800649c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a0:	d115      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a6:	3308      	adds	r3, #8
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fdee 	bl	800708c <RCCEx_PLL2_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064b6:	e015      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064bc:	3328      	adds	r3, #40	; 0x28
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fe95 	bl	80071f0 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064cc:	e00a      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064d4:	e006      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10b      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064ec:	4ba1      	ldr	r3, [pc, #644]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064fc:	4a9d      	ldr	r2, [pc, #628]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064fe:	430b      	orrs	r3, r1
 8006500:	6593      	str	r3, [r2, #88]	; 0x58
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f002 0308 	and.w	r3, r2, #8
 8006518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800651c:	2300      	movs	r3, #0
 800651e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006522:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d01e      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006538:	d10c      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653e:	3328      	adds	r3, #40	; 0x28
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fe54 	bl	80071f0 <RCCEx_PLL3_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006554:	4b87      	ldr	r3, [pc, #540]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006558:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006564:	4a83      	ldr	r2, [pc, #524]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006566:	430b      	orrs	r3, r1
 8006568:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f002 0310 	and.w	r3, r2, #16
 8006576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800657a:	2300      	movs	r3, #0
 800657c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006580:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d01e      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006596:	d10c      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659c:	3328      	adds	r3, #40	; 0x28
 800659e:	2102      	movs	r1, #2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fe25 	bl	80071f0 <RCCEx_PLL3_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065b2:	4b70      	ldr	r3, [pc, #448]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065c2:	4a6c      	ldr	r2, [pc, #432]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80065d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065d8:	2300      	movs	r3, #0
 80065da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80065e2:	460b      	mov	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d03e      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f4:	d022      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80065f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065fa:	d81b      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d00b      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006606:	e015      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	3308      	adds	r3, #8
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fd3b 	bl	800708c <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800661c:	e00f      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006622:	3328      	adds	r3, #40	; 0x28
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fde2 	bl	80071f0 <RCCEx_PLL3_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800663c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006646:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006656:	4a47      	ldr	r2, [pc, #284]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6593      	str	r3, [r2, #88]	; 0x58
 800665c:	e003      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006672:	67bb      	str	r3, [r7, #120]	; 0x78
 8006674:	2300      	movs	r3, #0
 8006676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006678:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800667c:	460b      	mov	r3, r1
 800667e:	4313      	orrs	r3, r2
 8006680:	d03b      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800668e:	d01f      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006694:	d818      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669a:	d003      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800669c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a0:	d007      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80066a2:	e011      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a4:	4b33      	ldr	r3, [pc, #204]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4a32      	ldr	r2, [pc, #200]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066b0:	e00f      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b6:	3328      	adds	r3, #40	; 0x28
 80066b8:	2101      	movs	r1, #1
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fd98 	bl	80071f0 <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066c6:	e004      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066da:	4b26      	ldr	r3, [pc, #152]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	4a22      	ldr	r2, [pc, #136]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6553      	str	r3, [r2, #84]	; 0x54
 80066f0:	e003      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006706:	673b      	str	r3, [r7, #112]	; 0x70
 8006708:	2300      	movs	r3, #0
 800670a:	677b      	str	r3, [r7, #116]	; 0x74
 800670c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006710:	460b      	mov	r3, r1
 8006712:	4313      	orrs	r3, r2
 8006714:	d034      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006724:	d007      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006726:	e011      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	4a11      	ldr	r2, [pc, #68]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006734:	e00e      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673a:	3308      	adds	r3, #8
 800673c:	2102      	movs	r1, #2
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fca4 	bl	800708c <RCCEx_PLL2_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800674a:	e003      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800675e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	4a02      	ldr	r2, [pc, #8]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800676c:	430b      	orrs	r3, r1
 800676e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006770:	e006      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006772:	bf00      	nop
 8006774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800677c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800678c:	66bb      	str	r3, [r7, #104]	; 0x68
 800678e:	2300      	movs	r3, #0
 8006790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006792:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d00c      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a0:	3328      	adds	r3, #40	; 0x28
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fd23 	bl	80071f0 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80067c2:	663b      	str	r3, [r7, #96]	; 0x60
 80067c4:	2300      	movs	r3, #0
 80067c6:	667b      	str	r3, [r7, #100]	; 0x64
 80067c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80067cc:	460b      	mov	r3, r1
 80067ce:	4313      	orrs	r3, r2
 80067d0:	d038      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d018      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80067e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e4:	d811      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ea:	d014      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f0:	d80b      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fa:	d106      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fc:	4bc3      	ldr	r3, [pc, #780]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	4ac2      	ldr	r2, [pc, #776]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006808:	e008      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006810:	e004      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800681a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006824:	4bb9      	ldr	r3, [pc, #740]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006828:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006834:	4ab5      	ldr	r2, [pc, #724]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6553      	str	r3, [r2, #84]	; 0x54
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006850:	65bb      	str	r3, [r7, #88]	; 0x58
 8006852:	2300      	movs	r3, #0
 8006854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006856:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006860:	4baa      	ldr	r3, [pc, #680]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800686e:	4aa7      	ldr	r2, [pc, #668]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006870:	430b      	orrs	r3, r1
 8006872:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006880:	653b      	str	r3, [r7, #80]	; 0x50
 8006882:	2300      	movs	r3, #0
 8006884:	657b      	str	r3, [r7, #84]	; 0x54
 8006886:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d00a      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006890:	4b9e      	ldr	r3, [pc, #632]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80068a0:	4a9a      	ldr	r2, [pc, #616]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80068b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068b4:	2300      	movs	r3, #0
 80068b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068c2:	4b92      	ldr	r3, [pc, #584]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d0:	4a8e      	ldr	r2, [pc, #568]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80068e2:	643b      	str	r3, [r7, #64]	; 0x40
 80068e4:	2300      	movs	r3, #0
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
 80068e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80068ec:	460b      	mov	r3, r1
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d00e      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068f2:	4b86      	ldr	r3, [pc, #536]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	4a85      	ldr	r2, [pc, #532]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068fc:	6113      	str	r3, [r2, #16]
 80068fe:	4b83      	ldr	r3, [pc, #524]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006900:	6919      	ldr	r1, [r3, #16]
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006906:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800690a:	4a80      	ldr	r2, [pc, #512]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006922:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800692c:	4b77      	ldr	r3, [pc, #476]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800692e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006930:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	4a74      	ldr	r2, [pc, #464]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693c:	430b      	orrs	r3, r1
 800693e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800694c:	633b      	str	r3, [r7, #48]	; 0x30
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
 8006952:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d00a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800695c:	4b6b      	ldr	r3, [pc, #428]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800696c:	4a67      	ldr	r2, [pc, #412]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696e:	430b      	orrs	r3, r1
 8006970:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	2100      	movs	r1, #0
 800697c:	62b9      	str	r1, [r7, #40]	; 0x28
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006984:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d011      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	3308      	adds	r3, #8
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fb78 	bl	800708c <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	2100      	movs	r1, #0
 80069bc:	6239      	str	r1, [r7, #32]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
 80069c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069c8:	460b      	mov	r3, r1
 80069ca:	4313      	orrs	r3, r2
 80069cc:	d011      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d2:	3308      	adds	r3, #8
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fb58 	bl	800708c <RCCEx_PLL2_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	2100      	movs	r1, #0
 80069fc:	61b9      	str	r1, [r7, #24]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	d011      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a12:	3308      	adds	r3, #8
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb38 	bl	800708c <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6139      	str	r1, [r7, #16]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d011      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a52:	3328      	adds	r3, #40	; 0x28
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fbca 	bl	80071f0 <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d011      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a92:	3328      	adds	r3, #40	; 0x28
 8006a94:	2101      	movs	r1, #1
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fbaa 	bl	80071f0 <RCCEx_PLL3_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	2100      	movs	r1, #0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	607b      	str	r3, [r7, #4]
 8006ac4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4313      	orrs	r3, r2
 8006acc:	d011      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad2:	3328      	adds	r3, #40	; 0x28
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fb8a 	bl	80071f0 <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006af2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006b06:	46bd      	mov	sp, r7
 8006b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0c:	58024400 	.word	0x58024400

08006b10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b14:	f7fe fd96 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	091b      	lsrs	r3, r3, #4
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4904      	ldr	r1, [pc, #16]	; (8006b38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	58024400 	.word	0x58024400
 8006b38:	0800a2d8 	.word	0x0800a2d8

08006b3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b089      	sub	sp, #36	; 0x24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b44:	4ba1      	ldr	r3, [pc, #644]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b4e:	4b9f      	ldr	r3, [pc, #636]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	0b1b      	lsrs	r3, r3, #12
 8006b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b5a:	4b9c      	ldr	r3, [pc, #624]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b66:	4b99      	ldr	r3, [pc, #612]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6a:	08db      	lsrs	r3, r3, #3
 8006b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8111 	beq.w	8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	f000 8083 	beq.w	8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	f200 80a1 	bhi.w	8006cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d056      	beq.n	8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ba6:	e099      	b.n	8006cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba8:	4b88      	ldr	r3, [pc, #544]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02d      	beq.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb4:	4b85      	ldr	r3, [pc, #532]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	4a84      	ldr	r2, [pc, #528]	; (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b7b      	ldr	r3, [pc, #492]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c0e:	e087      	b.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b6a      	ldr	r3, [pc, #424]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c52:	e065      	b.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b59      	ldr	r3, [pc, #356]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c96:	e043      	b.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b48      	ldr	r3, [pc, #288]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cda:	e021      	b.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d20:	4b2a      	ldr	r3, [pc, #168]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	0a5b      	lsrs	r3, r3, #9
 8006d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d46:	ee17 2a90 	vmov	r2, s15
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d74:	ee17 2a90 	vmov	r2, s15
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d7c:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	0e1b      	lsrs	r3, r3, #24
 8006d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da2:	ee17 2a90 	vmov	r2, s15
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006daa:	e008      	b.n	8006dbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	609a      	str	r2, [r3, #8]
}
 8006dbe:	bf00      	nop
 8006dc0:	3724      	adds	r7, #36	; 0x24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	03d09000 	.word	0x03d09000
 8006dd4:	46000000 	.word	0x46000000
 8006dd8:	4c742400 	.word	0x4c742400
 8006ddc:	4a742400 	.word	0x4a742400
 8006de0:	4af42400 	.word	0x4af42400

08006de4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dec:	4ba1      	ldr	r3, [pc, #644]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006df6:	4b9f      	ldr	r3, [pc, #636]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	0d1b      	lsrs	r3, r3, #20
 8006dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e02:	4b9c      	ldr	r3, [pc, #624]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e0e:	4b99      	ldr	r3, [pc, #612]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e12:	08db      	lsrs	r3, r3, #3
 8006e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8111 	beq.w	8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	f000 8083 	beq.w	8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	f200 80a1 	bhi.w	8006f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d056      	beq.n	8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e4e:	e099      	b.n	8006f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e50:	4b88      	ldr	r3, [pc, #544]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02d      	beq.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e5c:	4b85      	ldr	r3, [pc, #532]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	4a84      	ldr	r2, [pc, #528]	; (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b7b      	ldr	r3, [pc, #492]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800707c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eb6:	e087      	b.n	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b6a      	ldr	r3, [pc, #424]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a67 	vldr	s11, [pc, #412]	; 800707c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efa:	e065      	b.n	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b59      	ldr	r3, [pc, #356]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800707c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3e:	e043      	b.n	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b48      	ldr	r3, [pc, #288]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800707c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f82:	e021      	b.n	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b37      	ldr	r3, [pc, #220]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006faa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800707c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fc8:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	0a5b      	lsrs	r3, r3, #9
 8006fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fee:	ee17 2a90 	vmov	r2, s15
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ff6:	4b1f      	ldr	r3, [pc, #124]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800700c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007010:	edd7 6a07 	vldr	s13, [r7, #28]
 8007014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701c:	ee17 2a90 	vmov	r2, s15
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007024:	4b13      	ldr	r3, [pc, #76]	; (8007074 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800703a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800703e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704a:	ee17 2a90 	vmov	r2, s15
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007052:	e008      	b.n	8007066 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	609a      	str	r2, [r3, #8]
}
 8007066:	bf00      	nop
 8007068:	3724      	adds	r7, #36	; 0x24
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
 8007078:	03d09000 	.word	0x03d09000
 800707c:	46000000 	.word	0x46000000
 8007080:	4c742400 	.word	0x4c742400
 8007084:	4a742400 	.word	0x4a742400
 8007088:	4af42400 	.word	0x4af42400

0800708c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800709a:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d101      	bne.n	80070aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e099      	b.n	80071de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070aa:	4b4f      	ldr	r3, [pc, #316]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a4e      	ldr	r2, [pc, #312]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b6:	f7fa fb75 	bl	80017a4 <HAL_GetTick>
 80070ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070bc:	e008      	b.n	80070d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070be:	f7fa fb71 	bl	80017a4 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e086      	b.n	80071de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d0:	4b45      	ldr	r3, [pc, #276]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f0      	bne.n	80070be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070dc:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	031b      	lsls	r3, r3, #12
 80070ea:	493f      	ldr	r1, [pc, #252]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	628b      	str	r3, [r1, #40]	; 0x28
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	025b      	lsls	r3, r3, #9
 8007102:	b29b      	uxth	r3, r3
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	3b01      	subs	r3, #1
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	3b01      	subs	r3, #1
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007120:	4931      	ldr	r1, [pc, #196]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007126:	4b30      	ldr	r3, [pc, #192]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	492d      	ldr	r1, [pc, #180]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007134:	4313      	orrs	r3, r2
 8007136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007138:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	f023 0220 	bic.w	r2, r3, #32
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	4928      	ldr	r1, [pc, #160]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800714a:	4b27      	ldr	r3, [pc, #156]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007150:	f023 0310 	bic.w	r3, r3, #16
 8007154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007156:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800715a:	4b24      	ldr	r3, [pc, #144]	; (80071ec <RCCEx_PLL2_Config+0x160>)
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	69d2      	ldr	r2, [r2, #28]
 8007162:	00d2      	lsls	r2, r2, #3
 8007164:	4920      	ldr	r1, [pc, #128]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800716a:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007170:	f043 0310 	orr.w	r3, r3, #16
 8007174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800717c:	4b1a      	ldr	r3, [pc, #104]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007188:	e00f      	b.n	80071aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d106      	bne.n	800719e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007190:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800719c:	e005      	b.n	80071aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a0e      	ldr	r2, [pc, #56]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b6:	f7fa faf5 	bl	80017a4 <HAL_GetTick>
 80071ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071bc:	e008      	b.n	80071d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071be:	f7fa faf1 	bl	80017a4 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e006      	b.n	80071de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	ffff0007 	.word	0xffff0007

080071f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071fe:	4b53      	ldr	r3, [pc, #332]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d101      	bne.n	800720e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e099      	b.n	8007342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800720e:	4b4f      	ldr	r3, [pc, #316]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a4e      	ldr	r2, [pc, #312]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721a:	f7fa fac3 	bl	80017a4 <HAL_GetTick>
 800721e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007220:	e008      	b.n	8007234 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007222:	f7fa fabf 	bl	80017a4 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e086      	b.n	8007342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007234:	4b45      	ldr	r3, [pc, #276]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f0      	bne.n	8007222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007240:	4b42      	ldr	r3, [pc, #264]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	051b      	lsls	r3, r3, #20
 800724e:	493f      	ldr	r1, [pc, #252]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007250:	4313      	orrs	r3, r2
 8007252:	628b      	str	r3, [r1, #40]	; 0x28
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	3b01      	subs	r3, #1
 800725a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	3b01      	subs	r3, #1
 8007264:	025b      	lsls	r3, r3, #9
 8007266:	b29b      	uxth	r3, r3
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	3b01      	subs	r3, #1
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	3b01      	subs	r3, #1
 800727e:	061b      	lsls	r3, r3, #24
 8007280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007284:	4931      	ldr	r1, [pc, #196]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800728a:	4b30      	ldr	r3, [pc, #192]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	492d      	ldr	r1, [pc, #180]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007298:	4313      	orrs	r3, r2
 800729a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800729c:	4b2b      	ldr	r3, [pc, #172]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	4928      	ldr	r1, [pc, #160]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072ae:	4b27      	ldr	r3, [pc, #156]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	4a26      	ldr	r2, [pc, #152]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072ba:	4b24      	ldr	r3, [pc, #144]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <RCCEx_PLL3_Config+0x160>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	69d2      	ldr	r2, [r2, #28]
 80072c6:	00d2      	lsls	r2, r2, #3
 80072c8:	4920      	ldr	r1, [pc, #128]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072ce:	4b1f      	ldr	r3, [pc, #124]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4a1e      	ldr	r2, [pc, #120]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072e0:	4b1a      	ldr	r3, [pc, #104]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4a19      	ldr	r2, [pc, #100]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072ec:	e00f      	b.n	800730e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d106      	bne.n	8007302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a14      	ldr	r2, [pc, #80]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 80072fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007300:	e005      	b.n	800730e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a11      	ldr	r2, [pc, #68]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800730c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a0e      	ldr	r2, [pc, #56]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731a:	f7fa fa43 	bl	80017a4 <HAL_GetTick>
 800731e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007320:	e008      	b.n	8007334 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007322:	f7fa fa3f 	bl	80017a4 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e006      	b.n	8007342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <RCCEx_PLL3_Config+0x15c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f0      	beq.n	8007322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	58024400 	.word	0x58024400
 8007350:	ffff0007 	.word	0xffff0007

08007354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e042      	b.n	80073ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7f9 ff6f 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2224      	movs	r2, #36	; 0x24
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fd28 	bl	8007dec <UART_SetConfig>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e022      	b.n	80073ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fa84 	bl	80088bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fb0b 	bl	8008a00 <UART_CheckIdleState>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	2b20      	cmp	r3, #32
 800740c:	d17b      	bne.n	8007506 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_UART_Transmit+0x26>
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e074      	b.n	8007508 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2221      	movs	r2, #33	; 0x21
 800742a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742e:	f7fa f9b9 	bl	80017a4 <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	88fa      	ldrh	r2, [r7, #6]
 8007440:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d108      	bne.n	8007460 <HAL_UART_Transmit+0x6c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e003      	b.n	8007468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007468:	e030      	b.n	80074cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f001 fb6d 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e03d      	b.n	8007508 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	3302      	adds	r3, #2
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e007      	b.n	80074ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	781a      	ldrb	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1c8      	bne.n	800746a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2200      	movs	r2, #0
 80074e0:	2140      	movs	r1, #64	; 0x40
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f001 fb36 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e006      	b.n	8007508 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	e000      	b.n	8007508 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007506:	2302      	movs	r3, #2
  }
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007510:	b480      	push	{r7}
 8007512:	b091      	sub	sp, #68	; 0x44
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007524:	2b20      	cmp	r3, #32
 8007526:	d178      	bne.n	800761a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <HAL_UART_Transmit_IT+0x24>
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e071      	b.n	800761c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	88fa      	ldrh	r2, [r7, #6]
 8007542:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	88fa      	ldrh	r2, [r7, #6]
 800754a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2221      	movs	r2, #33	; 0x21
 8007560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756c:	d12a      	bne.n	80075c4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007576:	d107      	bne.n	8007588 <HAL_UART_Transmit_IT+0x78>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a29      	ldr	r2, [pc, #164]	; (8007628 <HAL_UART_Transmit_IT+0x118>)
 8007584:	679a      	str	r2, [r3, #120]	; 0x78
 8007586:	e002      	b.n	800758e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4a28      	ldr	r2, [pc, #160]	; (800762c <HAL_UART_Transmit_IT+0x11c>)
 800758c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ae:	637a      	str	r2, [r7, #52]	; 0x34
 80075b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e5      	bne.n	800758e <HAL_UART_Transmit_IT+0x7e>
 80075c2:	e028      	b.n	8007616 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075cc:	d107      	bne.n	80075de <HAL_UART_Transmit_IT+0xce>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a15      	ldr	r2, [pc, #84]	; (8007630 <HAL_UART_Transmit_IT+0x120>)
 80075da:	679a      	str	r2, [r3, #120]	; 0x78
 80075dc:	e002      	b.n	80075e4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4a14      	ldr	r2, [pc, #80]	; (8007634 <HAL_UART_Transmit_IT+0x124>)
 80075e2:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	613b      	str	r3, [r7, #16]
   return(result);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007602:	623b      	str	r3, [r7, #32]
 8007604:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	69f9      	ldr	r1, [r7, #28]
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e6      	bne.n	80075e4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3744      	adds	r7, #68	; 0x44
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	08008f77 	.word	0x08008f77
 800762c:	08008e97 	.word	0x08008e97
 8007630:	08008dd5 	.word	0x08008dd5
 8007634:	08008d1d 	.word	0x08008d1d

08007638 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b0ba      	sub	sp, #232	; 0xe8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800765e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007662:	f640 030f 	movw	r3, #2063	; 0x80f
 8007666:	4013      	ands	r3, r2
 8007668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800766c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11b      	bne.n	80076ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d015      	beq.n	80076ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800768c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d009      	beq.n	80076ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8377 	beq.w	8007d90 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
      }
      return;
 80076aa:	e371      	b.n	8007d90 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8123 	beq.w	80078fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076ba:	4b8d      	ldr	r3, [pc, #564]	; (80078f0 <HAL_UART_IRQHandler+0x2b8>)
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076c6:	4b8b      	ldr	r3, [pc, #556]	; (80078f4 <HAL_UART_IRQHandler+0x2bc>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8116 	beq.w	80078fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d011      	beq.n	8007700 <HAL_UART_IRQHandler+0xc8>
 80076dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2201      	movs	r2, #1
 80076ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d011      	beq.n	8007730 <HAL_UART_IRQHandler+0xf8>
 800770c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2202      	movs	r2, #2
 800771e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007726:	f043 0204 	orr.w	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <HAL_UART_IRQHandler+0x128>
 800773c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2204      	movs	r2, #4
 800774e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007756:	f043 0202 	orr.w	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d017      	beq.n	800779c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007778:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800777c:	4b5c      	ldr	r3, [pc, #368]	; (80078f0 <HAL_UART_IRQHandler+0x2b8>)
 800777e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2208      	movs	r2, #8
 800778a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	f043 0208 	orr.w	r2, r3, #8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d012      	beq.n	80077ce <HAL_UART_IRQHandler+0x196>
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00c      	beq.n	80077ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f043 0220 	orr.w	r2, r3, #32
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 82dd 	beq.w	8007d94 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d013      	beq.n	800780e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d005      	beq.n	8007832 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800782a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800782e:	2b00      	cmp	r3, #0
 8007830:	d054      	beq.n	80078dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 f9f6 	bl	8008c24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d146      	bne.n	80078d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800785c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800787e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800788a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1d9      	bne.n	8007846 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007898:	2b00      	cmp	r3, #0
 800789a:	d017      	beq.n	80078cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a2:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <HAL_UART_IRQHandler+0x2c0>)
 80078a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fa fbf7 	bl	80020a0 <HAL_DMA_Abort_IT>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d019      	beq.n	80078ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80078c6:	4610      	mov	r0, r2
 80078c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ca:	e00f      	b.n	80078ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa77 	bl	8007dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d2:	e00b      	b.n	80078ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fa73 	bl	8007dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078da:	e007      	b.n	80078ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa6f 	bl	8007dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80078ea:	e253      	b.n	8007d94 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	bf00      	nop
    return;
 80078ee:	e251      	b.n	8007d94 <HAL_UART_IRQHandler+0x75c>
 80078f0:	10000001 	.word	0x10000001
 80078f4:	04000120 	.word	0x04000120
 80078f8:	08008cf1 	.word	0x08008cf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007900:	2b01      	cmp	r3, #1
 8007902:	f040 81e7 	bne.w	8007cd4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 81e0 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 81d9 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2210      	movs	r2, #16
 8007928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	f040 8151 	bne.w	8007bdc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a96      	ldr	r2, [pc, #600]	; (8007b9c <HAL_UART_IRQHandler+0x564>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d068      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a93      	ldr	r2, [pc, #588]	; (8007ba0 <HAL_UART_IRQHandler+0x568>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d061      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a91      	ldr	r2, [pc, #580]	; (8007ba4 <HAL_UART_IRQHandler+0x56c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d05a      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a8e      	ldr	r2, [pc, #568]	; (8007ba8 <HAL_UART_IRQHandler+0x570>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d053      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a8c      	ldr	r2, [pc, #560]	; (8007bac <HAL_UART_IRQHandler+0x574>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d04c      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a89      	ldr	r2, [pc, #548]	; (8007bb0 <HAL_UART_IRQHandler+0x578>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d045      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a87      	ldr	r2, [pc, #540]	; (8007bb4 <HAL_UART_IRQHandler+0x57c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d03e      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a84      	ldr	r2, [pc, #528]	; (8007bb8 <HAL_UART_IRQHandler+0x580>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d037      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a82      	ldr	r2, [pc, #520]	; (8007bbc <HAL_UART_IRQHandler+0x584>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d030      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a7f      	ldr	r2, [pc, #508]	; (8007bc0 <HAL_UART_IRQHandler+0x588>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d029      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a7d      	ldr	r2, [pc, #500]	; (8007bc4 <HAL_UART_IRQHandler+0x58c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d022      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a7a      	ldr	r2, [pc, #488]	; (8007bc8 <HAL_UART_IRQHandler+0x590>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01b      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a78      	ldr	r2, [pc, #480]	; (8007bcc <HAL_UART_IRQHandler+0x594>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d014      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a75      	ldr	r2, [pc, #468]	; (8007bd0 <HAL_UART_IRQHandler+0x598>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00d      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a73      	ldr	r2, [pc, #460]	; (8007bd4 <HAL_UART_IRQHandler+0x59c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d006      	beq.n	8007a1a <HAL_UART_IRQHandler+0x3e2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a70      	ldr	r2, [pc, #448]	; (8007bd8 <HAL_UART_IRQHandler+0x5a0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d106      	bne.n	8007a28 <HAL_UART_IRQHandler+0x3f0>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	e005      	b.n	8007a34 <HAL_UART_IRQHandler+0x3fc>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 81ab 	beq.w	8007d98 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	f080 81a3 	bcs.w	8007d98 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a68:	f000 8087 	beq.w	8007b7a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1da      	bne.n	8007a6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ac8:	f023 0301 	bic.w	r3, r3, #1
 8007acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e1      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e3      	bne.n	8007af2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b48:	f023 0310 	bic.w	r3, r3, #16
 8007b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e4      	bne.n	8007b38 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7f9 ff75 	bl	8001a64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f91d 	bl	8007dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b9a:	e0fd      	b.n	8007d98 <HAL_UART_IRQHandler+0x760>
 8007b9c:	40020010 	.word	0x40020010
 8007ba0:	40020028 	.word	0x40020028
 8007ba4:	40020040 	.word	0x40020040
 8007ba8:	40020058 	.word	0x40020058
 8007bac:	40020070 	.word	0x40020070
 8007bb0:	40020088 	.word	0x40020088
 8007bb4:	400200a0 	.word	0x400200a0
 8007bb8:	400200b8 	.word	0x400200b8
 8007bbc:	40020410 	.word	0x40020410
 8007bc0:	40020428 	.word	0x40020428
 8007bc4:	40020440 	.word	0x40020440
 8007bc8:	40020458 	.word	0x40020458
 8007bcc:	40020470 	.word	0x40020470
 8007bd0:	40020488 	.word	0x40020488
 8007bd4:	400204a0 	.word	0x400204a0
 8007bd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80cf 	beq.w	8007d9c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80ca 	beq.w	8007d9c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e4      	bne.n	8007c08 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c4e:	6a3a      	ldr	r2, [r7, #32]
 8007c50:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <HAL_UART_IRQHandler+0x770>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c62:	633a      	str	r2, [r7, #48]	; 0x30
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e3      	bne.n	8007c3e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0310 	bic.w	r3, r3, #16
 8007c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cac:	61fb      	str	r3, [r7, #28]
 8007cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	69b9      	ldr	r1, [r7, #24]
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e4      	bne.n	8007c8a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f881 	bl	8007dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd2:	e063      	b.n	8007d9c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <HAL_UART_IRQHandler+0x6c6>
 8007ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f9dd 	bl	80090b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cfc:	e051      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d014      	beq.n	8007d34 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d03a      	beq.n	8007da0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
    }
    return;
 8007d32:	e035      	b.n	8007da0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <HAL_UART_IRQHandler+0x71c>
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f987 	bl	8009060 <UART_EndTransmit_IT>
    return;
 8007d52:	e026      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <HAL_UART_IRQHandler+0x73c>
 8007d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 f9b6 	bl	80090de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d72:	e016      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <HAL_UART_IRQHandler+0x76a>
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da0c      	bge.n	8007da2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 f99e 	bl	80090ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d8e:	e008      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d90:	bf00      	nop
 8007d92:	e006      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
    return;
 8007d94:	bf00      	nop
 8007d96:	e004      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d98:	bf00      	nop
 8007d9a:	e002      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <HAL_UART_IRQHandler+0x76a>
    return;
 8007da0:	bf00      	nop
  }
}
 8007da2:	37e8      	adds	r7, #232	; 0xe8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	effffffe 	.word	0xeffffffe

08007dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df0:	b092      	sub	sp, #72	; 0x48
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	431a      	orrs	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4bbe      	ldr	r3, [pc, #760]	; (8008114 <UART_SetConfig+0x328>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4ab3      	ldr	r2, [pc, #716]	; (8008118 <UART_SetConfig+0x32c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e54:	4313      	orrs	r3, r2
 8007e56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	4baf      	ldr	r3, [pc, #700]	; (800811c <UART_SetConfig+0x330>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	f023 010f 	bic.w	r1, r3, #15
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4aa6      	ldr	r2, [pc, #664]	; (8008120 <UART_SetConfig+0x334>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d177      	bne.n	8007f7c <UART_SetConfig+0x190>
 8007e8c:	4ba5      	ldr	r3, [pc, #660]	; (8008124 <UART_SetConfig+0x338>)
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e94:	2b28      	cmp	r3, #40	; 0x28
 8007e96:	d86d      	bhi.n	8007f74 <UART_SetConfig+0x188>
 8007e98:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <UART_SetConfig+0xb4>)
 8007e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9e:	bf00      	nop
 8007ea0:	08007f45 	.word	0x08007f45
 8007ea4:	08007f75 	.word	0x08007f75
 8007ea8:	08007f75 	.word	0x08007f75
 8007eac:	08007f75 	.word	0x08007f75
 8007eb0:	08007f75 	.word	0x08007f75
 8007eb4:	08007f75 	.word	0x08007f75
 8007eb8:	08007f75 	.word	0x08007f75
 8007ebc:	08007f75 	.word	0x08007f75
 8007ec0:	08007f4d 	.word	0x08007f4d
 8007ec4:	08007f75 	.word	0x08007f75
 8007ec8:	08007f75 	.word	0x08007f75
 8007ecc:	08007f75 	.word	0x08007f75
 8007ed0:	08007f75 	.word	0x08007f75
 8007ed4:	08007f75 	.word	0x08007f75
 8007ed8:	08007f75 	.word	0x08007f75
 8007edc:	08007f75 	.word	0x08007f75
 8007ee0:	08007f55 	.word	0x08007f55
 8007ee4:	08007f75 	.word	0x08007f75
 8007ee8:	08007f75 	.word	0x08007f75
 8007eec:	08007f75 	.word	0x08007f75
 8007ef0:	08007f75 	.word	0x08007f75
 8007ef4:	08007f75 	.word	0x08007f75
 8007ef8:	08007f75 	.word	0x08007f75
 8007efc:	08007f75 	.word	0x08007f75
 8007f00:	08007f5d 	.word	0x08007f5d
 8007f04:	08007f75 	.word	0x08007f75
 8007f08:	08007f75 	.word	0x08007f75
 8007f0c:	08007f75 	.word	0x08007f75
 8007f10:	08007f75 	.word	0x08007f75
 8007f14:	08007f75 	.word	0x08007f75
 8007f18:	08007f75 	.word	0x08007f75
 8007f1c:	08007f75 	.word	0x08007f75
 8007f20:	08007f65 	.word	0x08007f65
 8007f24:	08007f75 	.word	0x08007f75
 8007f28:	08007f75 	.word	0x08007f75
 8007f2c:	08007f75 	.word	0x08007f75
 8007f30:	08007f75 	.word	0x08007f75
 8007f34:	08007f75 	.word	0x08007f75
 8007f38:	08007f75 	.word	0x08007f75
 8007f3c:	08007f75 	.word	0x08007f75
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e222      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e21e      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f54:	2308      	movs	r3, #8
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e21a      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e216      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f64:	2320      	movs	r3, #32
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e212      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f72:	e20e      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f74:	2380      	movs	r3, #128	; 0x80
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7a:	e20a      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a69      	ldr	r2, [pc, #420]	; (8008128 <UART_SetConfig+0x33c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d130      	bne.n	8007fe8 <UART_SetConfig+0x1fc>
 8007f86:	4b67      	ldr	r3, [pc, #412]	; (8008124 <UART_SetConfig+0x338>)
 8007f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d826      	bhi.n	8007fe0 <UART_SetConfig+0x1f4>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0x1ac>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fb1 	.word	0x08007fb1
 8007f9c:	08007fb9 	.word	0x08007fb9
 8007fa0:	08007fc1 	.word	0x08007fc1
 8007fa4:	08007fc9 	.word	0x08007fc9
 8007fa8:	08007fd1 	.word	0x08007fd1
 8007fac:	08007fd9 	.word	0x08007fd9
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e1ec      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fbe:	e1e8      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc6:	e1e4      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fce:	e1e0      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fd0:	2320      	movs	r3, #32
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e1dc      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e1d8      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fe0:	2380      	movs	r3, #128	; 0x80
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e1d4      	b.n	8008392 <UART_SetConfig+0x5a6>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a4f      	ldr	r2, [pc, #316]	; (800812c <UART_SetConfig+0x340>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d130      	bne.n	8008054 <UART_SetConfig+0x268>
 8007ff2:	4b4c      	ldr	r3, [pc, #304]	; (8008124 <UART_SetConfig+0x338>)
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	d826      	bhi.n	800804c <UART_SetConfig+0x260>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x218>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	0800801d 	.word	0x0800801d
 8008008:	08008025 	.word	0x08008025
 800800c:	0800802d 	.word	0x0800802d
 8008010:	08008035 	.word	0x08008035
 8008014:	0800803d 	.word	0x0800803d
 8008018:	08008045 	.word	0x08008045
 800801c:	2300      	movs	r3, #0
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e1b6      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008024:	2304      	movs	r3, #4
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e1b2      	b.n	8008392 <UART_SetConfig+0x5a6>
 800802c:	2308      	movs	r3, #8
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e1ae      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008034:	2310      	movs	r3, #16
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e1aa      	b.n	8008392 <UART_SetConfig+0x5a6>
 800803c:	2320      	movs	r3, #32
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e1a6      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e1a2      	b.n	8008392 <UART_SetConfig+0x5a6>
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e19e      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a35      	ldr	r2, [pc, #212]	; (8008130 <UART_SetConfig+0x344>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d130      	bne.n	80080c0 <UART_SetConfig+0x2d4>
 800805e:	4b31      	ldr	r3, [pc, #196]	; (8008124 <UART_SetConfig+0x338>)
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b05      	cmp	r3, #5
 8008068:	d826      	bhi.n	80080b8 <UART_SetConfig+0x2cc>
 800806a:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <UART_SetConfig+0x284>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	08008089 	.word	0x08008089
 8008074:	08008091 	.word	0x08008091
 8008078:	08008099 	.word	0x08008099
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080a9 	.word	0x080080a9
 8008084:	080080b1 	.word	0x080080b1
 8008088:	2300      	movs	r3, #0
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e180      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008090:	2304      	movs	r3, #4
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e17c      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008098:	2308      	movs	r3, #8
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809e:	e178      	b.n	8008392 <UART_SetConfig+0x5a6>
 80080a0:	2310      	movs	r3, #16
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a6:	e174      	b.n	8008392 <UART_SetConfig+0x5a6>
 80080a8:	2320      	movs	r3, #32
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e170      	b.n	8008392 <UART_SetConfig+0x5a6>
 80080b0:	2340      	movs	r3, #64	; 0x40
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e16c      	b.n	8008392 <UART_SetConfig+0x5a6>
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e168      	b.n	8008392 <UART_SetConfig+0x5a6>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <UART_SetConfig+0x348>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d142      	bne.n	8008150 <UART_SetConfig+0x364>
 80080ca:	4b16      	ldr	r3, [pc, #88]	; (8008124 <UART_SetConfig+0x338>)
 80080cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	d838      	bhi.n	8008148 <UART_SetConfig+0x35c>
 80080d6:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <UART_SetConfig+0x2f0>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	080080f5 	.word	0x080080f5
 80080e0:	080080fd 	.word	0x080080fd
 80080e4:	08008105 	.word	0x08008105
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	08008139 	.word	0x08008139
 80080f0:	08008141 	.word	0x08008141
 80080f4:	2300      	movs	r3, #0
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fa:	e14a      	b.n	8008392 <UART_SetConfig+0x5a6>
 80080fc:	2304      	movs	r3, #4
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008102:	e146      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008104:	2308      	movs	r3, #8
 8008106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810a:	e142      	b.n	8008392 <UART_SetConfig+0x5a6>
 800810c:	2310      	movs	r3, #16
 800810e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008112:	e13e      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008114:	cfff69f3 	.word	0xcfff69f3
 8008118:	58000c00 	.word	0x58000c00
 800811c:	11fff4ff 	.word	0x11fff4ff
 8008120:	40011000 	.word	0x40011000
 8008124:	58024400 	.word	0x58024400
 8008128:	40004400 	.word	0x40004400
 800812c:	40004800 	.word	0x40004800
 8008130:	40004c00 	.word	0x40004c00
 8008134:	40005000 	.word	0x40005000
 8008138:	2320      	movs	r3, #32
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e128      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e124      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e120      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4acb      	ldr	r2, [pc, #812]	; (8008484 <UART_SetConfig+0x698>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d176      	bne.n	8008248 <UART_SetConfig+0x45c>
 800815a:	4bcb      	ldr	r3, [pc, #812]	; (8008488 <UART_SetConfig+0x69c>)
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008162:	2b28      	cmp	r3, #40	; 0x28
 8008164:	d86c      	bhi.n	8008240 <UART_SetConfig+0x454>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <UART_SetConfig+0x380>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	08008211 	.word	0x08008211
 8008170:	08008241 	.word	0x08008241
 8008174:	08008241 	.word	0x08008241
 8008178:	08008241 	.word	0x08008241
 800817c:	08008241 	.word	0x08008241
 8008180:	08008241 	.word	0x08008241
 8008184:	08008241 	.word	0x08008241
 8008188:	08008241 	.word	0x08008241
 800818c:	08008219 	.word	0x08008219
 8008190:	08008241 	.word	0x08008241
 8008194:	08008241 	.word	0x08008241
 8008198:	08008241 	.word	0x08008241
 800819c:	08008241 	.word	0x08008241
 80081a0:	08008241 	.word	0x08008241
 80081a4:	08008241 	.word	0x08008241
 80081a8:	08008241 	.word	0x08008241
 80081ac:	08008221 	.word	0x08008221
 80081b0:	08008241 	.word	0x08008241
 80081b4:	08008241 	.word	0x08008241
 80081b8:	08008241 	.word	0x08008241
 80081bc:	08008241 	.word	0x08008241
 80081c0:	08008241 	.word	0x08008241
 80081c4:	08008241 	.word	0x08008241
 80081c8:	08008241 	.word	0x08008241
 80081cc:	08008229 	.word	0x08008229
 80081d0:	08008241 	.word	0x08008241
 80081d4:	08008241 	.word	0x08008241
 80081d8:	08008241 	.word	0x08008241
 80081dc:	08008241 	.word	0x08008241
 80081e0:	08008241 	.word	0x08008241
 80081e4:	08008241 	.word	0x08008241
 80081e8:	08008241 	.word	0x08008241
 80081ec:	08008231 	.word	0x08008231
 80081f0:	08008241 	.word	0x08008241
 80081f4:	08008241 	.word	0x08008241
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008241 	.word	0x08008241
 8008204:	08008241 	.word	0x08008241
 8008208:	08008241 	.word	0x08008241
 800820c:	08008239 	.word	0x08008239
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008216:	e0bc      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008218:	2304      	movs	r3, #4
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821e:	e0b8      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008220:	2308      	movs	r3, #8
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008226:	e0b4      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008228:	2310      	movs	r3, #16
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e0b0      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008230:	2320      	movs	r3, #32
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e0ac      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e0a8      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e0a4      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a8f      	ldr	r2, [pc, #572]	; (800848c <UART_SetConfig+0x6a0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d130      	bne.n	80082b4 <UART_SetConfig+0x4c8>
 8008252:	4b8d      	ldr	r3, [pc, #564]	; (8008488 <UART_SetConfig+0x69c>)
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b05      	cmp	r3, #5
 800825c:	d826      	bhi.n	80082ac <UART_SetConfig+0x4c0>
 800825e:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <UART_SetConfig+0x478>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	0800827d 	.word	0x0800827d
 8008268:	08008285 	.word	0x08008285
 800826c:	0800828d 	.word	0x0800828d
 8008270:	08008295 	.word	0x08008295
 8008274:	0800829d 	.word	0x0800829d
 8008278:	080082a5 	.word	0x080082a5
 800827c:	2300      	movs	r3, #0
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008282:	e086      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008284:	2304      	movs	r3, #4
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828a:	e082      	b.n	8008392 <UART_SetConfig+0x5a6>
 800828c:	2308      	movs	r3, #8
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008292:	e07e      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008294:	2310      	movs	r3, #16
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e07a      	b.n	8008392 <UART_SetConfig+0x5a6>
 800829c:	2320      	movs	r3, #32
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e076      	b.n	8008392 <UART_SetConfig+0x5a6>
 80082a4:	2340      	movs	r3, #64	; 0x40
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e072      	b.n	8008392 <UART_SetConfig+0x5a6>
 80082ac:	2380      	movs	r3, #128	; 0x80
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e06e      	b.n	8008392 <UART_SetConfig+0x5a6>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a75      	ldr	r2, [pc, #468]	; (8008490 <UART_SetConfig+0x6a4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d130      	bne.n	8008320 <UART_SetConfig+0x534>
 80082be:	4b72      	ldr	r3, [pc, #456]	; (8008488 <UART_SetConfig+0x69c>)
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b05      	cmp	r3, #5
 80082c8:	d826      	bhi.n	8008318 <UART_SetConfig+0x52c>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <UART_SetConfig+0x4e4>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082f1 	.word	0x080082f1
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	08008301 	.word	0x08008301
 80082e0:	08008309 	.word	0x08008309
 80082e4:	08008311 	.word	0x08008311
 80082e8:	2300      	movs	r3, #0
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e050      	b.n	8008392 <UART_SetConfig+0x5a6>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e04c      	b.n	8008392 <UART_SetConfig+0x5a6>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e048      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e044      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008308:	2320      	movs	r3, #32
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e040      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e03c      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e038      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a5b      	ldr	r2, [pc, #364]	; (8008494 <UART_SetConfig+0x6a8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d130      	bne.n	800838c <UART_SetConfig+0x5a0>
 800832a:	4b57      	ldr	r3, [pc, #348]	; (8008488 <UART_SetConfig+0x69c>)
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b05      	cmp	r3, #5
 8008334:	d826      	bhi.n	8008384 <UART_SetConfig+0x598>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x550>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008355 	.word	0x08008355
 8008340:	0800835d 	.word	0x0800835d
 8008344:	08008365 	.word	0x08008365
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	0800837d 	.word	0x0800837d
 8008354:	2302      	movs	r3, #2
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e01a      	b.n	8008392 <UART_SetConfig+0x5a6>
 800835c:	2304      	movs	r3, #4
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e016      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008364:	2308      	movs	r3, #8
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e012      	b.n	8008392 <UART_SetConfig+0x5a6>
 800836c:	2310      	movs	r3, #16
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e00e      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008374:	2320      	movs	r3, #32
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e00a      	b.n	8008392 <UART_SetConfig+0x5a6>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e006      	b.n	8008392 <UART_SetConfig+0x5a6>
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e002      	b.n	8008392 <UART_SetConfig+0x5a6>
 800838c:	2380      	movs	r3, #128	; 0x80
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a3f      	ldr	r2, [pc, #252]	; (8008494 <UART_SetConfig+0x6a8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	f040 80f8 	bne.w	800858e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800839e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	dc46      	bgt.n	8008434 <UART_SetConfig+0x648>
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	f2c0 8082 	blt.w	80084b0 <UART_SetConfig+0x6c4>
 80083ac:	3b02      	subs	r3, #2
 80083ae:	2b1e      	cmp	r3, #30
 80083b0:	d87e      	bhi.n	80084b0 <UART_SetConfig+0x6c4>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <UART_SetConfig+0x5cc>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	0800843b 	.word	0x0800843b
 80083bc:	080084b1 	.word	0x080084b1
 80083c0:	08008443 	.word	0x08008443
 80083c4:	080084b1 	.word	0x080084b1
 80083c8:	080084b1 	.word	0x080084b1
 80083cc:	080084b1 	.word	0x080084b1
 80083d0:	08008453 	.word	0x08008453
 80083d4:	080084b1 	.word	0x080084b1
 80083d8:	080084b1 	.word	0x080084b1
 80083dc:	080084b1 	.word	0x080084b1
 80083e0:	080084b1 	.word	0x080084b1
 80083e4:	080084b1 	.word	0x080084b1
 80083e8:	080084b1 	.word	0x080084b1
 80083ec:	080084b1 	.word	0x080084b1
 80083f0:	08008463 	.word	0x08008463
 80083f4:	080084b1 	.word	0x080084b1
 80083f8:	080084b1 	.word	0x080084b1
 80083fc:	080084b1 	.word	0x080084b1
 8008400:	080084b1 	.word	0x080084b1
 8008404:	080084b1 	.word	0x080084b1
 8008408:	080084b1 	.word	0x080084b1
 800840c:	080084b1 	.word	0x080084b1
 8008410:	080084b1 	.word	0x080084b1
 8008414:	080084b1 	.word	0x080084b1
 8008418:	080084b1 	.word	0x080084b1
 800841c:	080084b1 	.word	0x080084b1
 8008420:	080084b1 	.word	0x080084b1
 8008424:	080084b1 	.word	0x080084b1
 8008428:	080084b1 	.word	0x080084b1
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084a3 	.word	0x080084a3
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d037      	beq.n	80084a8 <UART_SetConfig+0x6bc>
 8008438:	e03a      	b.n	80084b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800843a:	f7fe fb69 	bl	8006b10 <HAL_RCCEx_GetD3PCLK1Freq>
 800843e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008440:	e03c      	b.n	80084bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fb78 	bl	8006b3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008450:	e034      	b.n	80084bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 0318 	add.w	r3, r7, #24
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fcc4 	bl	8006de4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008460:	e02c      	b.n	80084bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <UART_SetConfig+0x69c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d016      	beq.n	800849c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800846e:	4b06      	ldr	r3, [pc, #24]	; (8008488 <UART_SetConfig+0x69c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	08db      	lsrs	r3, r3, #3
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	4a07      	ldr	r2, [pc, #28]	; (8008498 <UART_SetConfig+0x6ac>)
 800847a:	fa22 f303 	lsr.w	r3, r2, r3
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008480:	e01c      	b.n	80084bc <UART_SetConfig+0x6d0>
 8008482:	bf00      	nop
 8008484:	40011400 	.word	0x40011400
 8008488:	58024400 	.word	0x58024400
 800848c:	40007800 	.word	0x40007800
 8008490:	40007c00 	.word	0x40007c00
 8008494:	58000c00 	.word	0x58000c00
 8008498:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800849c:	4b9d      	ldr	r3, [pc, #628]	; (8008714 <UART_SetConfig+0x928>)
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a0:	e00c      	b.n	80084bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084a2:	4b9d      	ldr	r3, [pc, #628]	; (8008718 <UART_SetConfig+0x92c>)
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a6:	e009      	b.n	80084bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ae:	e005      	b.n	80084bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 81de 	beq.w	8008880 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	4a94      	ldr	r2, [pc, #592]	; (800871c <UART_SetConfig+0x930>)
 80084ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ce:	461a      	mov	r2, r3
 80084d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	4613      	mov	r3, r2
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	4413      	add	r3, r2
 80084e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d305      	bcc.n	80084f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d903      	bls.n	80084fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084fa:	e1c1      	b.n	8008880 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fe:	2200      	movs	r2, #0
 8008500:	60bb      	str	r3, [r7, #8]
 8008502:	60fa      	str	r2, [r7, #12]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	4a84      	ldr	r2, [pc, #528]	; (800871c <UART_SetConfig+0x930>)
 800850a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800850e:	b29b      	uxth	r3, r3
 8008510:	2200      	movs	r2, #0
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800851e:	f7f7 ff2f 	bl	8000380 <__aeabi_uldivmod>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4610      	mov	r0, r2
 8008528:	4619      	mov	r1, r3
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	020b      	lsls	r3, r1, #8
 8008534:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008538:	0202      	lsls	r2, r0, #8
 800853a:	6979      	ldr	r1, [r7, #20]
 800853c:	6849      	ldr	r1, [r1, #4]
 800853e:	0849      	lsrs	r1, r1, #1
 8008540:	2000      	movs	r0, #0
 8008542:	460c      	mov	r4, r1
 8008544:	4605      	mov	r5, r0
 8008546:	eb12 0804 	adds.w	r8, r2, r4
 800854a:	eb43 0905 	adc.w	r9, r3, r5
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	469a      	mov	sl, r3
 8008556:	4693      	mov	fp, r2
 8008558:	4652      	mov	r2, sl
 800855a:	465b      	mov	r3, fp
 800855c:	4640      	mov	r0, r8
 800855e:	4649      	mov	r1, r9
 8008560:	f7f7 ff0e 	bl	8000380 <__aeabi_uldivmod>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4613      	mov	r3, r2
 800856a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008572:	d308      	bcc.n	8008586 <UART_SetConfig+0x79a>
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800857a:	d204      	bcs.n	8008586 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008582:	60da      	str	r2, [r3, #12]
 8008584:	e17c      	b.n	8008880 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800858c:	e178      	b.n	8008880 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008596:	f040 80c5 	bne.w	8008724 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800859a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800859e:	2b20      	cmp	r3, #32
 80085a0:	dc48      	bgt.n	8008634 <UART_SetConfig+0x848>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	db7b      	blt.n	800869e <UART_SetConfig+0x8b2>
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d879      	bhi.n	800869e <UART_SetConfig+0x8b2>
 80085aa:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <UART_SetConfig+0x7c4>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	0800863b 	.word	0x0800863b
 80085b4:	08008643 	.word	0x08008643
 80085b8:	0800869f 	.word	0x0800869f
 80085bc:	0800869f 	.word	0x0800869f
 80085c0:	0800864b 	.word	0x0800864b
 80085c4:	0800869f 	.word	0x0800869f
 80085c8:	0800869f 	.word	0x0800869f
 80085cc:	0800869f 	.word	0x0800869f
 80085d0:	0800865b 	.word	0x0800865b
 80085d4:	0800869f 	.word	0x0800869f
 80085d8:	0800869f 	.word	0x0800869f
 80085dc:	0800869f 	.word	0x0800869f
 80085e0:	0800869f 	.word	0x0800869f
 80085e4:	0800869f 	.word	0x0800869f
 80085e8:	0800869f 	.word	0x0800869f
 80085ec:	0800869f 	.word	0x0800869f
 80085f0:	0800866b 	.word	0x0800866b
 80085f4:	0800869f 	.word	0x0800869f
 80085f8:	0800869f 	.word	0x0800869f
 80085fc:	0800869f 	.word	0x0800869f
 8008600:	0800869f 	.word	0x0800869f
 8008604:	0800869f 	.word	0x0800869f
 8008608:	0800869f 	.word	0x0800869f
 800860c:	0800869f 	.word	0x0800869f
 8008610:	0800869f 	.word	0x0800869f
 8008614:	0800869f 	.word	0x0800869f
 8008618:	0800869f 	.word	0x0800869f
 800861c:	0800869f 	.word	0x0800869f
 8008620:	0800869f 	.word	0x0800869f
 8008624:	0800869f 	.word	0x0800869f
 8008628:	0800869f 	.word	0x0800869f
 800862c:	0800869f 	.word	0x0800869f
 8008630:	08008691 	.word	0x08008691
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	d02e      	beq.n	8008696 <UART_SetConfig+0x8aa>
 8008638:	e031      	b.n	800869e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800863a:	f7fd f833 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 800863e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008640:	e033      	b.n	80086aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008642:	f7fd f845 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8008646:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008648:	e02f      	b.n	80086aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fa74 	bl	8006b3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008658:	e027      	b.n	80086aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865a:	f107 0318 	add.w	r3, r7, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fbc0 	bl	8006de4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008668:	e01f      	b.n	80086aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800866a:	4b2d      	ldr	r3, [pc, #180]	; (8008720 <UART_SetConfig+0x934>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008676:	4b2a      	ldr	r3, [pc, #168]	; (8008720 <UART_SetConfig+0x934>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	08db      	lsrs	r3, r3, #3
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	4a24      	ldr	r2, [pc, #144]	; (8008714 <UART_SetConfig+0x928>)
 8008682:	fa22 f303 	lsr.w	r3, r2, r3
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008688:	e00f      	b.n	80086aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <UART_SetConfig+0x928>)
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868e:	e00c      	b.n	80086aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008690:	4b21      	ldr	r3, [pc, #132]	; (8008718 <UART_SetConfig+0x92c>)
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008694:	e009      	b.n	80086aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869c:	e005      	b.n	80086aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80e7 	beq.w	8008880 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	4a19      	ldr	r2, [pc, #100]	; (800871c <UART_SetConfig+0x930>)
 80086b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086bc:	461a      	mov	r2, r3
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086c4:	005a      	lsls	r2, r3, #1
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	085b      	lsrs	r3, r3, #1
 80086cc:	441a      	add	r2, r3
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	2b0f      	cmp	r3, #15
 80086dc:	d916      	bls.n	800870c <UART_SetConfig+0x920>
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e4:	d212      	bcs.n	800870c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f023 030f 	bic.w	r3, r3, #15
 80086ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	085b      	lsrs	r3, r3, #1
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80086fe:	4313      	orrs	r3, r2
 8008700:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008708:	60da      	str	r2, [r3, #12]
 800870a:	e0b9      	b.n	8008880 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008712:	e0b5      	b.n	8008880 <UART_SetConfig+0xa94>
 8008714:	03d09000 	.word	0x03d09000
 8008718:	003d0900 	.word	0x003d0900
 800871c:	0800a2f8 	.word	0x0800a2f8
 8008720:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008724:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008728:	2b20      	cmp	r3, #32
 800872a:	dc49      	bgt.n	80087c0 <UART_SetConfig+0x9d4>
 800872c:	2b00      	cmp	r3, #0
 800872e:	db7c      	blt.n	800882a <UART_SetConfig+0xa3e>
 8008730:	2b20      	cmp	r3, #32
 8008732:	d87a      	bhi.n	800882a <UART_SetConfig+0xa3e>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0x950>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	080087c7 	.word	0x080087c7
 8008740:	080087cf 	.word	0x080087cf
 8008744:	0800882b 	.word	0x0800882b
 8008748:	0800882b 	.word	0x0800882b
 800874c:	080087d7 	.word	0x080087d7
 8008750:	0800882b 	.word	0x0800882b
 8008754:	0800882b 	.word	0x0800882b
 8008758:	0800882b 	.word	0x0800882b
 800875c:	080087e7 	.word	0x080087e7
 8008760:	0800882b 	.word	0x0800882b
 8008764:	0800882b 	.word	0x0800882b
 8008768:	0800882b 	.word	0x0800882b
 800876c:	0800882b 	.word	0x0800882b
 8008770:	0800882b 	.word	0x0800882b
 8008774:	0800882b 	.word	0x0800882b
 8008778:	0800882b 	.word	0x0800882b
 800877c:	080087f7 	.word	0x080087f7
 8008780:	0800882b 	.word	0x0800882b
 8008784:	0800882b 	.word	0x0800882b
 8008788:	0800882b 	.word	0x0800882b
 800878c:	0800882b 	.word	0x0800882b
 8008790:	0800882b 	.word	0x0800882b
 8008794:	0800882b 	.word	0x0800882b
 8008798:	0800882b 	.word	0x0800882b
 800879c:	0800882b 	.word	0x0800882b
 80087a0:	0800882b 	.word	0x0800882b
 80087a4:	0800882b 	.word	0x0800882b
 80087a8:	0800882b 	.word	0x0800882b
 80087ac:	0800882b 	.word	0x0800882b
 80087b0:	0800882b 	.word	0x0800882b
 80087b4:	0800882b 	.word	0x0800882b
 80087b8:	0800882b 	.word	0x0800882b
 80087bc:	0800881d 	.word	0x0800881d
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	d02e      	beq.n	8008822 <UART_SetConfig+0xa36>
 80087c4:	e031      	b.n	800882a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c6:	f7fc ff6d 	bl	80056a4 <HAL_RCC_GetPCLK1Freq>
 80087ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087cc:	e033      	b.n	8008836 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ce:	f7fc ff7f 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 80087d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087d4:	e02f      	b.n	8008836 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe f9ae 	bl	8006b3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e4:	e027      	b.n	8008836 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e6:	f107 0318 	add.w	r3, r7, #24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fafa 	bl	8006de4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f4:	e01f      	b.n	8008836 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f6:	4b2d      	ldr	r3, [pc, #180]	; (80088ac <UART_SetConfig+0xac0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008802:	4b2a      	ldr	r3, [pc, #168]	; (80088ac <UART_SetConfig+0xac0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	08db      	lsrs	r3, r3, #3
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <UART_SetConfig+0xac4>)
 800880e:	fa22 f303 	lsr.w	r3, r2, r3
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008814:	e00f      	b.n	8008836 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008816:	4b26      	ldr	r3, [pc, #152]	; (80088b0 <UART_SetConfig+0xac4>)
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800881a:	e00c      	b.n	8008836 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800881c:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <UART_SetConfig+0xac8>)
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008820:	e009      	b.n	8008836 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008828:	e005      	b.n	8008836 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008834:	bf00      	nop
    }

    if (pclk != 0U)
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d021      	beq.n	8008880 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	4a1d      	ldr	r2, [pc, #116]	; (80088b8 <UART_SetConfig+0xacc>)
 8008842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008846:	461a      	mov	r2, r3
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884a:	fbb3 f2f2 	udiv	r2, r3, r2
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	441a      	add	r2, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	fbb2 f3f3 	udiv	r3, r2, r3
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	2b0f      	cmp	r3, #15
 8008864:	d909      	bls.n	800887a <UART_SetConfig+0xa8e>
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800886c:	d205      	bcs.n	800887a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	b29a      	uxth	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60da      	str	r2, [r3, #12]
 8008878:	e002      	b.n	8008880 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	2201      	movs	r2, #1
 8008884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2201      	movs	r2, #1
 800888c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2200      	movs	r2, #0
 8008894:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800889c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3748      	adds	r7, #72	; 0x48
 80088a4:	46bd      	mov	sp, r7
 80088a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088aa:	bf00      	nop
 80088ac:	58024400 	.word	0x58024400
 80088b0:	03d09000 	.word	0x03d09000
 80088b4:	003d0900 	.word	0x003d0900
 80088b8:	0800a2f8 	.word	0x0800a2f8

080088bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01a      	beq.n	80089d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ba:	d10a      	bne.n	80089d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	605a      	str	r2, [r3, #4]
  }
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b098      	sub	sp, #96	; 0x60
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a10:	f7f8 fec8 	bl	80017a4 <HAL_GetTick>
 8008a14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d12f      	bne.n	8008a84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f88e 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d022      	beq.n	8008a84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a46:	e853 3f00 	ldrex	r3, [r3]
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a52:	653b      	str	r3, [r7, #80]	; 0x50
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e6      	bne.n	8008a3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2220      	movs	r2, #32
 8008a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e063      	b.n	8008b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d149      	bne.n	8008b26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f857 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d03c      	beq.n	8008b26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aca:	633b      	str	r3, [r7, #48]	; 0x30
 8008acc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e6      	bne.n	8008aac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3308      	adds	r3, #8
 8008afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008afe:	61fa      	str	r2, [r7, #28]
 8008b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e5      	bne.n	8008ade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e012      	b.n	8008b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3758      	adds	r7, #88	; 0x58
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b64:	e049      	b.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d045      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7f8 fe19 	bl	80017a4 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e048      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d031      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d110      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2208      	movs	r2, #8
 8008baa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f839 	bl	8008c24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e029      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd4:	d111      	bne.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f81f 	bl	8008c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e00f      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4013      	ands	r3, r2
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	bf0c      	ite	eq
 8008c0a:	2301      	moveq	r3, #1
 8008c0c:	2300      	movne	r3, #0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d0a6      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b095      	sub	sp, #84	; 0x54
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c34:	e853 3f00 	ldrex	r3, [r3]
 8008c38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e6      	bne.n	8008c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3308      	adds	r3, #8
 8008c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	4b1e      	ldr	r3, [pc, #120]	; (8008cec <UART_EndRxTransfer+0xc8>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e5      	bne.n	8008c5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d118      	bne.n	8008ccc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f023 0310 	bic.w	r3, r3, #16
 8008cae:	647b      	str	r3, [r7, #68]	; 0x44
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6979      	ldr	r1, [r7, #20]
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e6      	bne.n	8008c9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008ce0:	bf00      	nop
 8008ce2:	3754      	adds	r7, #84	; 0x54
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	effffffe 	.word	0xeffffffe

08008cf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7ff f856 	bl	8007dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b08f      	sub	sp, #60	; 0x3c
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2a:	2b21      	cmp	r3, #33	; 0x21
 8008d2c:	d14c      	bne.n	8008dc8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d132      	bne.n	8008da0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e6      	bne.n	8008d3a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d80:	633b      	str	r3, [r7, #48]	; 0x30
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	61bb      	str	r3, [r7, #24]
 8008d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6979      	ldr	r1, [r7, #20]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	613b      	str	r3, [r7, #16]
   return(result);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e6      	bne.n	8008d6c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008d9e:	e013      	b.n	8008dc8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da4:	781a      	ldrb	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008dc8:	bf00      	nop
 8008dca:	373c      	adds	r7, #60	; 0x3c
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b091      	sub	sp, #68	; 0x44
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de2:	2b21      	cmp	r3, #33	; 0x21
 8008de4:	d151      	bne.n	8008e8a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d132      	bne.n	8008e58 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	633b      	str	r3, [r7, #48]	; 0x30
 8008e12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e38:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	69b9      	ldr	r1, [r7, #24]
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e6      	bne.n	8008e24 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008e56:	e018      	b.n	8008e8a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e72:	1c9a      	adds	r2, r3, #2
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008e8a:	bf00      	nop
 8008e8c:	3744      	adds	r7, #68	; 0x44
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b091      	sub	sp, #68	; 0x44
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea4:	2b21      	cmp	r3, #33	; 0x21
 8008ea6:	d160      	bne.n	8008f6a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008eb0:	e057      	b.n	8008f62 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d133      	bne.n	8008f26 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ede:	633a      	str	r2, [r7, #48]	; 0x30
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e5      	bne.n	8008ebe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f06:	637b      	str	r3, [r7, #52]	; 0x34
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008f24:	e021      	b.n	8008f6a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d013      	beq.n	8008f5c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1a4      	bne.n	8008eb2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008f68:	e7ff      	b.n	8008f6a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008f6a:	bf00      	nop
 8008f6c:	3744      	adds	r7, #68	; 0x44
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b091      	sub	sp, #68	; 0x44
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f84:	2b21      	cmp	r3, #33	; 0x21
 8008f86:	d165      	bne.n	8009054 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f90:	e05c      	b.n	800904c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d133      	bne.n	8009006 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e5      	bne.n	8008f9e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e6      	bne.n	8008fd2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009004:	e026      	b.n	8009054 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009010:	2b00      	cmp	r3, #0
 8009012:	d018      	beq.n	8009046 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009018:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009028:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902e:	1c9a      	adds	r2, r3, #2
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009046:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009048:	3b01      	subs	r3, #1
 800904a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800904c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800904e:	2b00      	cmp	r3, #0
 8009050:	d19f      	bne.n	8008f92 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009052:	e7ff      	b.n	8009054 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009054:	bf00      	nop
 8009056:	3744      	adds	r7, #68	; 0x44
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	60bb      	str	r3, [r7, #8]
   return(result);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	613b      	str	r3, [r7, #16]
   return(result);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fe fe7f 	bl	8007dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ae:	bf00      	nop
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090d2:	bf00      	nop
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_UARTEx_DisableFifoMode+0x16>
 8009104:	2302      	movs	r3, #2
 8009106:	e027      	b.n	8009158 <HAL_UARTEx_DisableFifoMode+0x66>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2224      	movs	r2, #36	; 0x24
 8009114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0201 	bic.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009136:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009178:	2302      	movs	r3, #2
 800917a:	e02d      	b.n	80091d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f84f 	bl	800925c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d101      	bne.n	80091f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e02d      	b.n	8009254 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2224      	movs	r2, #36	; 0x24
 8009204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0201 	bic.w	r2, r2, #1
 800921e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f811 	bl	800925c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009268:	2b00      	cmp	r3, #0
 800926a:	d108      	bne.n	800927e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800927c:	e031      	b.n	80092e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800927e:	2310      	movs	r3, #16
 8009280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009282:	2310      	movs	r3, #16
 8009284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	0e5b      	lsrs	r3, r3, #25
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	0f5b      	lsrs	r3, r3, #29
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	7b3a      	ldrb	r2, [r7, #12]
 80092aa:	4911      	ldr	r1, [pc, #68]	; (80092f0 <UARTEx_SetNbDataToProcess+0x94>)
 80092ac:	5c8a      	ldrb	r2, [r1, r2]
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092b2:	7b3a      	ldrb	r2, [r7, #12]
 80092b4:	490f      	ldr	r1, [pc, #60]	; (80092f4 <UARTEx_SetNbDataToProcess+0x98>)
 80092b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	7b7a      	ldrb	r2, [r7, #13]
 80092c8:	4909      	ldr	r1, [pc, #36]	; (80092f0 <UARTEx_SetNbDataToProcess+0x94>)
 80092ca:	5c8a      	ldrb	r2, [r1, r2]
 80092cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092d0:	7b7a      	ldrb	r2, [r7, #13]
 80092d2:	4908      	ldr	r1, [pc, #32]	; (80092f4 <UARTEx_SetNbDataToProcess+0x98>)
 80092d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80092e2:	bf00      	nop
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	0800a310 	.word	0x0800a310
 80092f4:	0800a318 	.word	0x0800a318

080092f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092f8:	b084      	sub	sp, #16
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	f107 001c 	add.w	r0, r7, #28
 8009306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b01      	cmp	r3, #1
 800930e:	d120      	bne.n	8009352 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	4b2a      	ldr	r3, [pc, #168]	; (80093cc <USB_CoreInit+0xd4>)
 8009322:	4013      	ands	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009336:	2b01      	cmp	r3, #1
 8009338:	d105      	bne.n	8009346 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 faac 	bl	80098a4 <USB_CoreReset>
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]
 8009350:	e01a      	b.n	8009388 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 faa0 	bl	80098a4 <USB_CoreReset>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	639a      	str	r2, [r3, #56]	; 0x38
 800937a:	e005      	b.n	8009388 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2b01      	cmp	r3, #1
 800938c:	d116      	bne.n	80093bc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <USB_CoreInit+0xd8>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f043 0206 	orr.w	r2, r3, #6
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f043 0220 	orr.w	r2, r3, #32
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093c8:	b004      	add	sp, #16
 80093ca:	4770      	bx	lr
 80093cc:	ffbdffbf 	.word	0xffbdffbf
 80093d0:	03ee0000 	.word	0x03ee0000

080093d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f023 0201 	bic.w	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d115      	bne.n	8009444 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009424:	2001      	movs	r0, #1
 8009426:	f7f8 f9c9 	bl	80017bc <HAL_Delay>
      ms++;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fa29 	bl	8009888 <USB_GetMode>
 8009436:	4603      	mov	r3, r0
 8009438:	2b01      	cmp	r3, #1
 800943a:	d01e      	beq.n	800947a <USB_SetCurrentMode+0x84>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b31      	cmp	r3, #49	; 0x31
 8009440:	d9f0      	bls.n	8009424 <USB_SetCurrentMode+0x2e>
 8009442:	e01a      	b.n	800947a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d115      	bne.n	8009476 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009456:	2001      	movs	r0, #1
 8009458:	f7f8 f9b0 	bl	80017bc <HAL_Delay>
      ms++;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fa10 	bl	8009888 <USB_GetMode>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <USB_SetCurrentMode+0x84>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b31      	cmp	r3, #49	; 0x31
 8009472:	d9f0      	bls.n	8009456 <USB_SetCurrentMode+0x60>
 8009474:	e001      	b.n	800947a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e005      	b.n	8009486 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b32      	cmp	r3, #50	; 0x32
 800947e:	d101      	bne.n	8009484 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009490:	b084      	sub	sp, #16
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800949e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094aa:	2300      	movs	r3, #0
 80094ac:	613b      	str	r3, [r7, #16]
 80094ae:	e009      	b.n	80094c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	3340      	adds	r3, #64	; 0x40
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	2200      	movs	r2, #0
 80094bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	3301      	adds	r3, #1
 80094c2:	613b      	str	r3, [r7, #16]
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2b0e      	cmp	r3, #14
 80094c8:	d9f2      	bls.n	80094b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80094ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11c      	bne.n	800950a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094de:	f043 0302 	orr.w	r3, r3, #2
 80094e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	e005      	b.n	8009516 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800951c:	461a      	mov	r2, r3
 800951e:	2300      	movs	r3, #0
 8009520:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009528:	4619      	mov	r1, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009530:	461a      	mov	r2, r3
 8009532:	680b      	ldr	r3, [r1, #0]
 8009534:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	2b01      	cmp	r3, #1
 800953a:	d10c      	bne.n	8009556 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	2b00      	cmp	r3, #0
 8009540:	d104      	bne.n	800954c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009542:	2100      	movs	r1, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f965 	bl	8009814 <USB_SetDevSpeed>
 800954a:	e008      	b.n	800955e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800954c:	2101      	movs	r1, #1
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f960 	bl	8009814 <USB_SetDevSpeed>
 8009554:	e003      	b.n	800955e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009556:	2103      	movs	r1, #3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f95b 	bl	8009814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800955e:	2110      	movs	r1, #16
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8f3 	bl	800974c <USB_FlushTxFifo>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f91f 	bl	80097b4 <USB_FlushRxFifo>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009586:	461a      	mov	r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009592:	461a      	mov	r2, r3
 8009594:	2300      	movs	r3, #0
 8009596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959e:	461a      	mov	r2, r3
 80095a0:	2300      	movs	r3, #0
 80095a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095a4:	2300      	movs	r3, #0
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	e043      	b.n	8009632 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095c0:	d118      	bne.n	80095f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d4:	461a      	mov	r2, r3
 80095d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	e013      	b.n	8009606 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ea:	461a      	mov	r2, r3
 80095ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	e008      	b.n	8009606 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009600:	461a      	mov	r2, r3
 8009602:	2300      	movs	r3, #0
 8009604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009612:	461a      	mov	r2, r3
 8009614:	2300      	movs	r3, #0
 8009616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	461a      	mov	r2, r3
 8009626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800962a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	3301      	adds	r3, #1
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	429a      	cmp	r2, r3
 8009638:	d3b7      	bcc.n	80095aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800963a:	2300      	movs	r3, #0
 800963c:	613b      	str	r3, [r7, #16]
 800963e:	e043      	b.n	80096c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009656:	d118      	bne.n	800968a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966a:	461a      	mov	r2, r3
 800966c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	e013      	b.n	800969c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009680:	461a      	mov	r2, r3
 8009682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e008      	b.n	800969c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009696:	461a      	mov	r2, r3
 8009698:	2300      	movs	r3, #0
 800969a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a8:	461a      	mov	r2, r3
 80096aa:	2300      	movs	r3, #0
 80096ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ba:	461a      	mov	r2, r3
 80096bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3301      	adds	r3, #1
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d3b7      	bcc.n	8009640 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80096f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d105      	bne.n	8009704 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f043 0210 	orr.w	r2, r3, #16
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699a      	ldr	r2, [r3, #24]
 8009708:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <USB_DevInit+0x2b4>)
 800970a:	4313      	orrs	r3, r2
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d005      	beq.n	8009722 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f043 0208 	orr.w	r2, r3, #8
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d105      	bne.n	8009734 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	4b06      	ldr	r3, [pc, #24]	; (8009748 <USB_DevInit+0x2b8>)
 800972e:	4313      	orrs	r3, r2
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009740:	b004      	add	sp, #16
 8009742:	4770      	bx	lr
 8009744:	803c3800 	.word	0x803c3800
 8009748:	40000004 	.word	0x40000004

0800974c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3301      	adds	r3, #1
 800975e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <USB_FlushTxFifo+0x64>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d901      	bls.n	800976c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e01b      	b.n	80097a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	daf2      	bge.n	800975a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	019b      	lsls	r3, r3, #6
 800977c:	f043 0220 	orr.w	r2, r3, #32
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <USB_FlushTxFifo+0x64>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d901      	bls.n	8009796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e006      	b.n	80097a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b20      	cmp	r3, #32
 80097a0:	d0f0      	beq.n	8009784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	00030d40 	.word	0x00030d40

080097b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4a11      	ldr	r2, [pc, #68]	; (8009810 <USB_FlushRxFifo+0x5c>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d901      	bls.n	80097d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e018      	b.n	8009804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	daf2      	bge.n	80097c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2210      	movs	r2, #16
 80097e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a08      	ldr	r2, [pc, #32]	; (8009810 <USB_FlushRxFifo+0x5c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d901      	bls.n	80097f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e006      	b.n	8009804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f003 0310 	and.w	r3, r3, #16
 80097fe:	2b10      	cmp	r3, #16
 8009800:	d0f0      	beq.n	80097e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	00030d40 	.word	0x00030d40

08009814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	78fb      	ldrb	r3, [r7, #3]
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009834:	4313      	orrs	r3, r2
 8009836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009860:	f023 0303 	bic.w	r3, r3, #3
 8009864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009874:	f043 0302 	orr.w	r3, r3, #2
 8009878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0301 	and.w	r3, r3, #1
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3301      	adds	r3, #1
 80098b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4a13      	ldr	r2, [pc, #76]	; (8009908 <USB_CoreReset+0x64>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d901      	bls.n	80098c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e01b      	b.n	80098fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	daf2      	bge.n	80098b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f043 0201 	orr.w	r2, r3, #1
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a09      	ldr	r2, [pc, #36]	; (8009908 <USB_CoreReset+0x64>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d901      	bls.n	80098ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e006      	b.n	80098fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d0f0      	beq.n	80098da <USB_CoreReset+0x36>

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	00030d40 	.word	0x00030d40

0800990c <siprintf>:
 800990c:	b40e      	push	{r1, r2, r3}
 800990e:	b500      	push	{lr}
 8009910:	b09c      	sub	sp, #112	; 0x70
 8009912:	ab1d      	add	r3, sp, #116	; 0x74
 8009914:	9002      	str	r0, [sp, #8]
 8009916:	9006      	str	r0, [sp, #24]
 8009918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800991c:	4809      	ldr	r0, [pc, #36]	; (8009944 <siprintf+0x38>)
 800991e:	9107      	str	r1, [sp, #28]
 8009920:	9104      	str	r1, [sp, #16]
 8009922:	4909      	ldr	r1, [pc, #36]	; (8009948 <siprintf+0x3c>)
 8009924:	f853 2b04 	ldr.w	r2, [r3], #4
 8009928:	9105      	str	r1, [sp, #20]
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	a902      	add	r1, sp, #8
 8009930:	f000 f9a0 	bl	8009c74 <_svfiprintf_r>
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	b01c      	add	sp, #112	; 0x70
 800993c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009940:	b003      	add	sp, #12
 8009942:	4770      	bx	lr
 8009944:	24000060 	.word	0x24000060
 8009948:	ffff0208 	.word	0xffff0208

0800994c <memset>:
 800994c:	4402      	add	r2, r0
 800994e:	4603      	mov	r3, r0
 8009950:	4293      	cmp	r3, r2
 8009952:	d100      	bne.n	8009956 <memset+0xa>
 8009954:	4770      	bx	lr
 8009956:	f803 1b01 	strb.w	r1, [r3], #1
 800995a:	e7f9      	b.n	8009950 <memset+0x4>

0800995c <__errno>:
 800995c:	4b01      	ldr	r3, [pc, #4]	; (8009964 <__errno+0x8>)
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	24000060 	.word	0x24000060

08009968 <__libc_init_array>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4d0d      	ldr	r5, [pc, #52]	; (80099a0 <__libc_init_array+0x38>)
 800996c:	4c0d      	ldr	r4, [pc, #52]	; (80099a4 <__libc_init_array+0x3c>)
 800996e:	1b64      	subs	r4, r4, r5
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	2600      	movs	r6, #0
 8009974:	42a6      	cmp	r6, r4
 8009976:	d109      	bne.n	800998c <__libc_init_array+0x24>
 8009978:	4d0b      	ldr	r5, [pc, #44]	; (80099a8 <__libc_init_array+0x40>)
 800997a:	4c0c      	ldr	r4, [pc, #48]	; (80099ac <__libc_init_array+0x44>)
 800997c:	f000 fc6a 	bl	800a254 <_init>
 8009980:	1b64      	subs	r4, r4, r5
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	2600      	movs	r6, #0
 8009986:	42a6      	cmp	r6, r4
 8009988:	d105      	bne.n	8009996 <__libc_init_array+0x2e>
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009990:	4798      	blx	r3
 8009992:	3601      	adds	r6, #1
 8009994:	e7ee      	b.n	8009974 <__libc_init_array+0xc>
 8009996:	f855 3b04 	ldr.w	r3, [r5], #4
 800999a:	4798      	blx	r3
 800999c:	3601      	adds	r6, #1
 800999e:	e7f2      	b.n	8009986 <__libc_init_array+0x1e>
 80099a0:	0800a35c 	.word	0x0800a35c
 80099a4:	0800a35c 	.word	0x0800a35c
 80099a8:	0800a35c 	.word	0x0800a35c
 80099ac:	0800a360 	.word	0x0800a360

080099b0 <__retarget_lock_acquire_recursive>:
 80099b0:	4770      	bx	lr

080099b2 <__retarget_lock_release_recursive>:
 80099b2:	4770      	bx	lr

080099b4 <memcpy>:
 80099b4:	440a      	add	r2, r1
 80099b6:	4291      	cmp	r1, r2
 80099b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099bc:	d100      	bne.n	80099c0 <memcpy+0xc>
 80099be:	4770      	bx	lr
 80099c0:	b510      	push	{r4, lr}
 80099c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ca:	4291      	cmp	r1, r2
 80099cc:	d1f9      	bne.n	80099c2 <memcpy+0xe>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <_free_r>:
 80099d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d2:	2900      	cmp	r1, #0
 80099d4:	d044      	beq.n	8009a60 <_free_r+0x90>
 80099d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099da:	9001      	str	r0, [sp, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f1a1 0404 	sub.w	r4, r1, #4
 80099e2:	bfb8      	it	lt
 80099e4:	18e4      	addlt	r4, r4, r3
 80099e6:	f000 f8df 	bl	8009ba8 <__malloc_lock>
 80099ea:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <_free_r+0x94>)
 80099ec:	9801      	ldr	r0, [sp, #4]
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b933      	cbnz	r3, 8009a00 <_free_r+0x30>
 80099f2:	6063      	str	r3, [r4, #4]
 80099f4:	6014      	str	r4, [r2, #0]
 80099f6:	b003      	add	sp, #12
 80099f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099fc:	f000 b8da 	b.w	8009bb4 <__malloc_unlock>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d908      	bls.n	8009a16 <_free_r+0x46>
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	1961      	adds	r1, r4, r5
 8009a08:	428b      	cmp	r3, r1
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6819      	ldreq	r1, [r3, #0]
 8009a0e:	685b      	ldreq	r3, [r3, #4]
 8009a10:	1949      	addeq	r1, r1, r5
 8009a12:	6021      	streq	r1, [r4, #0]
 8009a14:	e7ed      	b.n	80099f2 <_free_r+0x22>
 8009a16:	461a      	mov	r2, r3
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b10b      	cbz	r3, 8009a20 <_free_r+0x50>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x46>
 8009a20:	6811      	ldr	r1, [r2, #0]
 8009a22:	1855      	adds	r5, r2, r1
 8009a24:	42a5      	cmp	r5, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x70>
 8009a28:	6824      	ldr	r4, [r4, #0]
 8009a2a:	4421      	add	r1, r4
 8009a2c:	1854      	adds	r4, r2, r1
 8009a2e:	42a3      	cmp	r3, r4
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	d1e0      	bne.n	80099f6 <_free_r+0x26>
 8009a34:	681c      	ldr	r4, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	6053      	str	r3, [r2, #4]
 8009a3a:	440c      	add	r4, r1
 8009a3c:	6014      	str	r4, [r2, #0]
 8009a3e:	e7da      	b.n	80099f6 <_free_r+0x26>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x78>
 8009a42:	230c      	movs	r3, #12
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	e7d6      	b.n	80099f6 <_free_r+0x26>
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf04      	itt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	bf04      	itt	eq
 8009a58:	1949      	addeq	r1, r1, r5
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	6054      	str	r4, [r2, #4]
 8009a5e:	e7ca      	b.n	80099f6 <_free_r+0x26>
 8009a60:	b003      	add	sp, #12
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	24000b14 	.word	0x24000b14

08009a68 <sbrk_aligned>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	4e0e      	ldr	r6, [pc, #56]	; (8009aa4 <sbrk_aligned+0x3c>)
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	6831      	ldr	r1, [r6, #0]
 8009a70:	4605      	mov	r5, r0
 8009a72:	b911      	cbnz	r1, 8009a7a <sbrk_aligned+0x12>
 8009a74:	f000 fba6 	bl	800a1c4 <_sbrk_r>
 8009a78:	6030      	str	r0, [r6, #0]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 fba1 	bl	800a1c4 <_sbrk_r>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d00a      	beq.n	8009a9c <sbrk_aligned+0x34>
 8009a86:	1cc4      	adds	r4, r0, #3
 8009a88:	f024 0403 	bic.w	r4, r4, #3
 8009a8c:	42a0      	cmp	r0, r4
 8009a8e:	d007      	beq.n	8009aa0 <sbrk_aligned+0x38>
 8009a90:	1a21      	subs	r1, r4, r0
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 fb96 	bl	800a1c4 <_sbrk_r>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d101      	bne.n	8009aa0 <sbrk_aligned+0x38>
 8009a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	24000b18 	.word	0x24000b18

08009aa8 <_malloc_r>:
 8009aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	1ccd      	adds	r5, r1, #3
 8009aae:	f025 0503 	bic.w	r5, r5, #3
 8009ab2:	3508      	adds	r5, #8
 8009ab4:	2d0c      	cmp	r5, #12
 8009ab6:	bf38      	it	cc
 8009ab8:	250c      	movcc	r5, #12
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	4607      	mov	r7, r0
 8009abe:	db01      	blt.n	8009ac4 <_malloc_r+0x1c>
 8009ac0:	42a9      	cmp	r1, r5
 8009ac2:	d905      	bls.n	8009ad0 <_malloc_r+0x28>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	2600      	movs	r6, #0
 8009aca:	4630      	mov	r0, r6
 8009acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ba4 <_malloc_r+0xfc>
 8009ad4:	f000 f868 	bl	8009ba8 <__malloc_lock>
 8009ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8009adc:	461c      	mov	r4, r3
 8009ade:	bb5c      	cbnz	r4, 8009b38 <_malloc_r+0x90>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f7ff ffc0 	bl	8009a68 <sbrk_aligned>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	4604      	mov	r4, r0
 8009aec:	d155      	bne.n	8009b9a <_malloc_r+0xf2>
 8009aee:	f8d8 4000 	ldr.w	r4, [r8]
 8009af2:	4626      	mov	r6, r4
 8009af4:	2e00      	cmp	r6, #0
 8009af6:	d145      	bne.n	8009b84 <_malloc_r+0xdc>
 8009af8:	2c00      	cmp	r4, #0
 8009afa:	d048      	beq.n	8009b8e <_malloc_r+0xe6>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	4631      	mov	r1, r6
 8009b00:	4638      	mov	r0, r7
 8009b02:	eb04 0903 	add.w	r9, r4, r3
 8009b06:	f000 fb5d 	bl	800a1c4 <_sbrk_r>
 8009b0a:	4581      	cmp	r9, r0
 8009b0c:	d13f      	bne.n	8009b8e <_malloc_r+0xe6>
 8009b0e:	6821      	ldr	r1, [r4, #0]
 8009b10:	1a6d      	subs	r5, r5, r1
 8009b12:	4629      	mov	r1, r5
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7ff ffa7 	bl	8009a68 <sbrk_aligned>
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d037      	beq.n	8009b8e <_malloc_r+0xe6>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	442b      	add	r3, r5
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	f8d8 3000 	ldr.w	r3, [r8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d038      	beq.n	8009b9e <_malloc_r+0xf6>
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	42a2      	cmp	r2, r4
 8009b30:	d12b      	bne.n	8009b8a <_malloc_r+0xe2>
 8009b32:	2200      	movs	r2, #0
 8009b34:	605a      	str	r2, [r3, #4]
 8009b36:	e00f      	b.n	8009b58 <_malloc_r+0xb0>
 8009b38:	6822      	ldr	r2, [r4, #0]
 8009b3a:	1b52      	subs	r2, r2, r5
 8009b3c:	d41f      	bmi.n	8009b7e <_malloc_r+0xd6>
 8009b3e:	2a0b      	cmp	r2, #11
 8009b40:	d917      	bls.n	8009b72 <_malloc_r+0xca>
 8009b42:	1961      	adds	r1, r4, r5
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	6025      	str	r5, [r4, #0]
 8009b48:	bf18      	it	ne
 8009b4a:	6059      	strne	r1, [r3, #4]
 8009b4c:	6863      	ldr	r3, [r4, #4]
 8009b4e:	bf08      	it	eq
 8009b50:	f8c8 1000 	streq.w	r1, [r8]
 8009b54:	5162      	str	r2, [r4, r5]
 8009b56:	604b      	str	r3, [r1, #4]
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f104 060b 	add.w	r6, r4, #11
 8009b5e:	f000 f829 	bl	8009bb4 <__malloc_unlock>
 8009b62:	f026 0607 	bic.w	r6, r6, #7
 8009b66:	1d23      	adds	r3, r4, #4
 8009b68:	1af2      	subs	r2, r6, r3
 8009b6a:	d0ae      	beq.n	8009aca <_malloc_r+0x22>
 8009b6c:	1b9b      	subs	r3, r3, r6
 8009b6e:	50a3      	str	r3, [r4, r2]
 8009b70:	e7ab      	b.n	8009aca <_malloc_r+0x22>
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	6862      	ldr	r2, [r4, #4]
 8009b76:	d1dd      	bne.n	8009b34 <_malloc_r+0x8c>
 8009b78:	f8c8 2000 	str.w	r2, [r8]
 8009b7c:	e7ec      	b.n	8009b58 <_malloc_r+0xb0>
 8009b7e:	4623      	mov	r3, r4
 8009b80:	6864      	ldr	r4, [r4, #4]
 8009b82:	e7ac      	b.n	8009ade <_malloc_r+0x36>
 8009b84:	4634      	mov	r4, r6
 8009b86:	6876      	ldr	r6, [r6, #4]
 8009b88:	e7b4      	b.n	8009af4 <_malloc_r+0x4c>
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	e7cc      	b.n	8009b28 <_malloc_r+0x80>
 8009b8e:	230c      	movs	r3, #12
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4638      	mov	r0, r7
 8009b94:	f000 f80e 	bl	8009bb4 <__malloc_unlock>
 8009b98:	e797      	b.n	8009aca <_malloc_r+0x22>
 8009b9a:	6025      	str	r5, [r4, #0]
 8009b9c:	e7dc      	b.n	8009b58 <_malloc_r+0xb0>
 8009b9e:	605b      	str	r3, [r3, #4]
 8009ba0:	deff      	udf	#255	; 0xff
 8009ba2:	bf00      	nop
 8009ba4:	24000b14 	.word	0x24000b14

08009ba8 <__malloc_lock>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	; (8009bb0 <__malloc_lock+0x8>)
 8009baa:	f7ff bf01 	b.w	80099b0 <__retarget_lock_acquire_recursive>
 8009bae:	bf00      	nop
 8009bb0:	24000b10 	.word	0x24000b10

08009bb4 <__malloc_unlock>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__malloc_unlock+0x8>)
 8009bb6:	f7ff befc 	b.w	80099b2 <__retarget_lock_release_recursive>
 8009bba:	bf00      	nop
 8009bbc:	24000b10 	.word	0x24000b10

08009bc0 <__ssputs_r>:
 8009bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc4:	688e      	ldr	r6, [r1, #8]
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	42be      	cmp	r6, r7
 8009bca:	680b      	ldr	r3, [r1, #0]
 8009bcc:	4682      	mov	sl, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	d82c      	bhi.n	8009c2e <__ssputs_r+0x6e>
 8009bd4:	898a      	ldrh	r2, [r1, #12]
 8009bd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bda:	d026      	beq.n	8009c2a <__ssputs_r+0x6a>
 8009bdc:	6965      	ldr	r5, [r4, #20]
 8009bde:	6909      	ldr	r1, [r1, #16]
 8009be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009be4:	eba3 0901 	sub.w	r9, r3, r1
 8009be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bec:	1c7b      	adds	r3, r7, #1
 8009bee:	444b      	add	r3, r9
 8009bf0:	106d      	asrs	r5, r5, #1
 8009bf2:	429d      	cmp	r5, r3
 8009bf4:	bf38      	it	cc
 8009bf6:	461d      	movcc	r5, r3
 8009bf8:	0553      	lsls	r3, r2, #21
 8009bfa:	d527      	bpl.n	8009c4c <__ssputs_r+0x8c>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7ff ff53 	bl	8009aa8 <_malloc_r>
 8009c02:	4606      	mov	r6, r0
 8009c04:	b360      	cbz	r0, 8009c60 <__ssputs_r+0xa0>
 8009c06:	6921      	ldr	r1, [r4, #16]
 8009c08:	464a      	mov	r2, r9
 8009c0a:	f7ff fed3 	bl	80099b4 <memcpy>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c18:	81a3      	strh	r3, [r4, #12]
 8009c1a:	6126      	str	r6, [r4, #16]
 8009c1c:	6165      	str	r5, [r4, #20]
 8009c1e:	444e      	add	r6, r9
 8009c20:	eba5 0509 	sub.w	r5, r5, r9
 8009c24:	6026      	str	r6, [r4, #0]
 8009c26:	60a5      	str	r5, [r4, #8]
 8009c28:	463e      	mov	r6, r7
 8009c2a:	42be      	cmp	r6, r7
 8009c2c:	d900      	bls.n	8009c30 <__ssputs_r+0x70>
 8009c2e:	463e      	mov	r6, r7
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	4632      	mov	r2, r6
 8009c34:	4641      	mov	r1, r8
 8009c36:	f000 faab 	bl	800a190 <memmove>
 8009c3a:	68a3      	ldr	r3, [r4, #8]
 8009c3c:	1b9b      	subs	r3, r3, r6
 8009c3e:	60a3      	str	r3, [r4, #8]
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	4433      	add	r3, r6
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	2000      	movs	r0, #0
 8009c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4c:	462a      	mov	r2, r5
 8009c4e:	f000 fac9 	bl	800a1e4 <_realloc_r>
 8009c52:	4606      	mov	r6, r0
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d1e0      	bne.n	8009c1a <__ssputs_r+0x5a>
 8009c58:	6921      	ldr	r1, [r4, #16]
 8009c5a:	4650      	mov	r0, sl
 8009c5c:	f7ff feb8 	bl	80099d0 <_free_r>
 8009c60:	230c      	movs	r3, #12
 8009c62:	f8ca 3000 	str.w	r3, [sl]
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c72:	e7e9      	b.n	8009c48 <__ssputs_r+0x88>

08009c74 <_svfiprintf_r>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	4698      	mov	r8, r3
 8009c7a:	898b      	ldrh	r3, [r1, #12]
 8009c7c:	061b      	lsls	r3, r3, #24
 8009c7e:	b09d      	sub	sp, #116	; 0x74
 8009c80:	4607      	mov	r7, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	4614      	mov	r4, r2
 8009c86:	d50e      	bpl.n	8009ca6 <_svfiprintf_r+0x32>
 8009c88:	690b      	ldr	r3, [r1, #16]
 8009c8a:	b963      	cbnz	r3, 8009ca6 <_svfiprintf_r+0x32>
 8009c8c:	2140      	movs	r1, #64	; 0x40
 8009c8e:	f7ff ff0b 	bl	8009aa8 <_malloc_r>
 8009c92:	6028      	str	r0, [r5, #0]
 8009c94:	6128      	str	r0, [r5, #16]
 8009c96:	b920      	cbnz	r0, 8009ca2 <_svfiprintf_r+0x2e>
 8009c98:	230c      	movs	r3, #12
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e0d0      	b.n	8009e44 <_svfiprintf_r+0x1d0>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	616b      	str	r3, [r5, #20]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8009caa:	2320      	movs	r3, #32
 8009cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cb4:	2330      	movs	r3, #48	; 0x30
 8009cb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e5c <_svfiprintf_r+0x1e8>
 8009cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cbe:	f04f 0901 	mov.w	r9, #1
 8009cc2:	4623      	mov	r3, r4
 8009cc4:	469a      	mov	sl, r3
 8009cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cca:	b10a      	cbz	r2, 8009cd0 <_svfiprintf_r+0x5c>
 8009ccc:	2a25      	cmp	r2, #37	; 0x25
 8009cce:	d1f9      	bne.n	8009cc4 <_svfiprintf_r+0x50>
 8009cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd4:	d00b      	beq.n	8009cee <_svfiprintf_r+0x7a>
 8009cd6:	465b      	mov	r3, fp
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f7ff ff6f 	bl	8009bc0 <__ssputs_r>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f000 80a9 	beq.w	8009e3a <_svfiprintf_r+0x1c6>
 8009ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cea:	445a      	add	r2, fp
 8009cec:	9209      	str	r2, [sp, #36]	; 0x24
 8009cee:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 80a1 	beq.w	8009e3a <_svfiprintf_r+0x1c6>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d02:	f10a 0a01 	add.w	sl, sl, #1
 8009d06:	9304      	str	r3, [sp, #16]
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d10:	4654      	mov	r4, sl
 8009d12:	2205      	movs	r2, #5
 8009d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d18:	4850      	ldr	r0, [pc, #320]	; (8009e5c <_svfiprintf_r+0x1e8>)
 8009d1a:	f7f6 fae1 	bl	80002e0 <memchr>
 8009d1e:	9a04      	ldr	r2, [sp, #16]
 8009d20:	b9d8      	cbnz	r0, 8009d5a <_svfiprintf_r+0xe6>
 8009d22:	06d0      	lsls	r0, r2, #27
 8009d24:	bf44      	itt	mi
 8009d26:	2320      	movmi	r3, #32
 8009d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d2c:	0711      	lsls	r1, r2, #28
 8009d2e:	bf44      	itt	mi
 8009d30:	232b      	movmi	r3, #43	; 0x2b
 8009d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d36:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d3c:	d015      	beq.n	8009d6a <_svfiprintf_r+0xf6>
 8009d3e:	9a07      	ldr	r2, [sp, #28]
 8009d40:	4654      	mov	r4, sl
 8009d42:	2000      	movs	r0, #0
 8009d44:	f04f 0c0a 	mov.w	ip, #10
 8009d48:	4621      	mov	r1, r4
 8009d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d4e:	3b30      	subs	r3, #48	; 0x30
 8009d50:	2b09      	cmp	r3, #9
 8009d52:	d94d      	bls.n	8009df0 <_svfiprintf_r+0x17c>
 8009d54:	b1b0      	cbz	r0, 8009d84 <_svfiprintf_r+0x110>
 8009d56:	9207      	str	r2, [sp, #28]
 8009d58:	e014      	b.n	8009d84 <_svfiprintf_r+0x110>
 8009d5a:	eba0 0308 	sub.w	r3, r0, r8
 8009d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d62:	4313      	orrs	r3, r2
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	46a2      	mov	sl, r4
 8009d68:	e7d2      	b.n	8009d10 <_svfiprintf_r+0x9c>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	1d19      	adds	r1, r3, #4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	9103      	str	r1, [sp, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bfbb      	ittet	lt
 8009d76:	425b      	neglt	r3, r3
 8009d78:	f042 0202 	orrlt.w	r2, r2, #2
 8009d7c:	9307      	strge	r3, [sp, #28]
 8009d7e:	9307      	strlt	r3, [sp, #28]
 8009d80:	bfb8      	it	lt
 8009d82:	9204      	strlt	r2, [sp, #16]
 8009d84:	7823      	ldrb	r3, [r4, #0]
 8009d86:	2b2e      	cmp	r3, #46	; 0x2e
 8009d88:	d10c      	bne.n	8009da4 <_svfiprintf_r+0x130>
 8009d8a:	7863      	ldrb	r3, [r4, #1]
 8009d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8e:	d134      	bne.n	8009dfa <_svfiprintf_r+0x186>
 8009d90:	9b03      	ldr	r3, [sp, #12]
 8009d92:	1d1a      	adds	r2, r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	9203      	str	r2, [sp, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bfb8      	it	lt
 8009d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009da0:	3402      	adds	r4, #2
 8009da2:	9305      	str	r3, [sp, #20]
 8009da4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e6c <_svfiprintf_r+0x1f8>
 8009da8:	7821      	ldrb	r1, [r4, #0]
 8009daa:	2203      	movs	r2, #3
 8009dac:	4650      	mov	r0, sl
 8009dae:	f7f6 fa97 	bl	80002e0 <memchr>
 8009db2:	b138      	cbz	r0, 8009dc4 <_svfiprintf_r+0x150>
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	eba0 000a 	sub.w	r0, r0, sl
 8009dba:	2240      	movs	r2, #64	; 0x40
 8009dbc:	4082      	lsls	r2, r0
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	3401      	adds	r4, #1
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc8:	4825      	ldr	r0, [pc, #148]	; (8009e60 <_svfiprintf_r+0x1ec>)
 8009dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dce:	2206      	movs	r2, #6
 8009dd0:	f7f6 fa86 	bl	80002e0 <memchr>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d038      	beq.n	8009e4a <_svfiprintf_r+0x1d6>
 8009dd8:	4b22      	ldr	r3, [pc, #136]	; (8009e64 <_svfiprintf_r+0x1f0>)
 8009dda:	bb1b      	cbnz	r3, 8009e24 <_svfiprintf_r+0x1b0>
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	3307      	adds	r3, #7
 8009de0:	f023 0307 	bic.w	r3, r3, #7
 8009de4:	3308      	adds	r3, #8
 8009de6:	9303      	str	r3, [sp, #12]
 8009de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dea:	4433      	add	r3, r6
 8009dec:	9309      	str	r3, [sp, #36]	; 0x24
 8009dee:	e768      	b.n	8009cc2 <_svfiprintf_r+0x4e>
 8009df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df4:	460c      	mov	r4, r1
 8009df6:	2001      	movs	r0, #1
 8009df8:	e7a6      	b.n	8009d48 <_svfiprintf_r+0xd4>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	3401      	adds	r4, #1
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	4619      	mov	r1, r3
 8009e02:	f04f 0c0a 	mov.w	ip, #10
 8009e06:	4620      	mov	r0, r4
 8009e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0c:	3a30      	subs	r2, #48	; 0x30
 8009e0e:	2a09      	cmp	r2, #9
 8009e10:	d903      	bls.n	8009e1a <_svfiprintf_r+0x1a6>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0c6      	beq.n	8009da4 <_svfiprintf_r+0x130>
 8009e16:	9105      	str	r1, [sp, #20]
 8009e18:	e7c4      	b.n	8009da4 <_svfiprintf_r+0x130>
 8009e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e1e:	4604      	mov	r4, r0
 8009e20:	2301      	movs	r3, #1
 8009e22:	e7f0      	b.n	8009e06 <_svfiprintf_r+0x192>
 8009e24:	ab03      	add	r3, sp, #12
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <_svfiprintf_r+0x1f4>)
 8009e2c:	a904      	add	r1, sp, #16
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f3af 8000 	nop.w
 8009e34:	1c42      	adds	r2, r0, #1
 8009e36:	4606      	mov	r6, r0
 8009e38:	d1d6      	bne.n	8009de8 <_svfiprintf_r+0x174>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	065b      	lsls	r3, r3, #25
 8009e3e:	f53f af2d 	bmi.w	8009c9c <_svfiprintf_r+0x28>
 8009e42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e44:	b01d      	add	sp, #116	; 0x74
 8009e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <_svfiprintf_r+0x1f4>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4638      	mov	r0, r7
 8009e56:	f000 f879 	bl	8009f4c <_printf_i>
 8009e5a:	e7eb      	b.n	8009e34 <_svfiprintf_r+0x1c0>
 8009e5c:	0800a320 	.word	0x0800a320
 8009e60:	0800a32a 	.word	0x0800a32a
 8009e64:	00000000 	.word	0x00000000
 8009e68:	08009bc1 	.word	0x08009bc1
 8009e6c:	0800a326 	.word	0x0800a326

08009e70 <_printf_common>:
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	4616      	mov	r6, r2
 8009e76:	4699      	mov	r9, r3
 8009e78:	688a      	ldr	r2, [r1, #8]
 8009e7a:	690b      	ldr	r3, [r1, #16]
 8009e7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e80:	4293      	cmp	r3, r2
 8009e82:	bfb8      	it	lt
 8009e84:	4613      	movlt	r3, r2
 8009e86:	6033      	str	r3, [r6, #0]
 8009e88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e8c:	4607      	mov	r7, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b10a      	cbz	r2, 8009e96 <_printf_common+0x26>
 8009e92:	3301      	adds	r3, #1
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	0699      	lsls	r1, r3, #26
 8009e9a:	bf42      	ittt	mi
 8009e9c:	6833      	ldrmi	r3, [r6, #0]
 8009e9e:	3302      	addmi	r3, #2
 8009ea0:	6033      	strmi	r3, [r6, #0]
 8009ea2:	6825      	ldr	r5, [r4, #0]
 8009ea4:	f015 0506 	ands.w	r5, r5, #6
 8009ea8:	d106      	bne.n	8009eb8 <_printf_common+0x48>
 8009eaa:	f104 0a19 	add.w	sl, r4, #25
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	6832      	ldr	r2, [r6, #0]
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dc26      	bgt.n	8009f06 <_printf_common+0x96>
 8009eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ebc:	1e13      	subs	r3, r2, #0
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	bf18      	it	ne
 8009ec2:	2301      	movne	r3, #1
 8009ec4:	0692      	lsls	r2, r2, #26
 8009ec6:	d42b      	bmi.n	8009f20 <_printf_common+0xb0>
 8009ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4638      	mov	r0, r7
 8009ed0:	47c0      	blx	r8
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d01e      	beq.n	8009f14 <_printf_common+0xa4>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	6922      	ldr	r2, [r4, #16]
 8009eda:	f003 0306 	and.w	r3, r3, #6
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	bf02      	ittt	eq
 8009ee2:	68e5      	ldreq	r5, [r4, #12]
 8009ee4:	6833      	ldreq	r3, [r6, #0]
 8009ee6:	1aed      	subeq	r5, r5, r3
 8009ee8:	68a3      	ldr	r3, [r4, #8]
 8009eea:	bf0c      	ite	eq
 8009eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ef0:	2500      	movne	r5, #0
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	bfc4      	itt	gt
 8009ef6:	1a9b      	subgt	r3, r3, r2
 8009ef8:	18ed      	addgt	r5, r5, r3
 8009efa:	2600      	movs	r6, #0
 8009efc:	341a      	adds	r4, #26
 8009efe:	42b5      	cmp	r5, r6
 8009f00:	d11a      	bne.n	8009f38 <_printf_common+0xc8>
 8009f02:	2000      	movs	r0, #0
 8009f04:	e008      	b.n	8009f18 <_printf_common+0xa8>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	47c0      	blx	r8
 8009f10:	3001      	adds	r0, #1
 8009f12:	d103      	bne.n	8009f1c <_printf_common+0xac>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	e7c6      	b.n	8009eae <_printf_common+0x3e>
 8009f20:	18e1      	adds	r1, r4, r3
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	2030      	movs	r0, #48	; 0x30
 8009f26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f2a:	4422      	add	r2, r4
 8009f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f34:	3302      	adds	r3, #2
 8009f36:	e7c7      	b.n	8009ec8 <_printf_common+0x58>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	4638      	mov	r0, r7
 8009f40:	47c0      	blx	r8
 8009f42:	3001      	adds	r0, #1
 8009f44:	d0e6      	beq.n	8009f14 <_printf_common+0xa4>
 8009f46:	3601      	adds	r6, #1
 8009f48:	e7d9      	b.n	8009efe <_printf_common+0x8e>
	...

08009f4c <_printf_i>:
 8009f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	7e0f      	ldrb	r7, [r1, #24]
 8009f52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f54:	2f78      	cmp	r7, #120	; 0x78
 8009f56:	4691      	mov	r9, r2
 8009f58:	4680      	mov	r8, r0
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	469a      	mov	sl, r3
 8009f5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f62:	d807      	bhi.n	8009f74 <_printf_i+0x28>
 8009f64:	2f62      	cmp	r7, #98	; 0x62
 8009f66:	d80a      	bhi.n	8009f7e <_printf_i+0x32>
 8009f68:	2f00      	cmp	r7, #0
 8009f6a:	f000 80d4 	beq.w	800a116 <_printf_i+0x1ca>
 8009f6e:	2f58      	cmp	r7, #88	; 0x58
 8009f70:	f000 80c0 	beq.w	800a0f4 <_printf_i+0x1a8>
 8009f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f7c:	e03a      	b.n	8009ff4 <_printf_i+0xa8>
 8009f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f82:	2b15      	cmp	r3, #21
 8009f84:	d8f6      	bhi.n	8009f74 <_printf_i+0x28>
 8009f86:	a101      	add	r1, pc, #4	; (adr r1, 8009f8c <_printf_i+0x40>)
 8009f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f8c:	08009fe5 	.word	0x08009fe5
 8009f90:	08009ff9 	.word	0x08009ff9
 8009f94:	08009f75 	.word	0x08009f75
 8009f98:	08009f75 	.word	0x08009f75
 8009f9c:	08009f75 	.word	0x08009f75
 8009fa0:	08009f75 	.word	0x08009f75
 8009fa4:	08009ff9 	.word	0x08009ff9
 8009fa8:	08009f75 	.word	0x08009f75
 8009fac:	08009f75 	.word	0x08009f75
 8009fb0:	08009f75 	.word	0x08009f75
 8009fb4:	08009f75 	.word	0x08009f75
 8009fb8:	0800a0fd 	.word	0x0800a0fd
 8009fbc:	0800a025 	.word	0x0800a025
 8009fc0:	0800a0b7 	.word	0x0800a0b7
 8009fc4:	08009f75 	.word	0x08009f75
 8009fc8:	08009f75 	.word	0x08009f75
 8009fcc:	0800a11f 	.word	0x0800a11f
 8009fd0:	08009f75 	.word	0x08009f75
 8009fd4:	0800a025 	.word	0x0800a025
 8009fd8:	08009f75 	.word	0x08009f75
 8009fdc:	08009f75 	.word	0x08009f75
 8009fe0:	0800a0bf 	.word	0x0800a0bf
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	1d1a      	adds	r2, r3, #4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	602a      	str	r2, [r5, #0]
 8009fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e09f      	b.n	800a138 <_printf_i+0x1ec>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	0607      	lsls	r7, r0, #24
 8009ffe:	f103 0104 	add.w	r1, r3, #4
 800a002:	6029      	str	r1, [r5, #0]
 800a004:	d501      	bpl.n	800a00a <_printf_i+0xbe>
 800a006:	681e      	ldr	r6, [r3, #0]
 800a008:	e003      	b.n	800a012 <_printf_i+0xc6>
 800a00a:	0646      	lsls	r6, r0, #25
 800a00c:	d5fb      	bpl.n	800a006 <_printf_i+0xba>
 800a00e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a012:	2e00      	cmp	r6, #0
 800a014:	da03      	bge.n	800a01e <_printf_i+0xd2>
 800a016:	232d      	movs	r3, #45	; 0x2d
 800a018:	4276      	negs	r6, r6
 800a01a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a01e:	485a      	ldr	r0, [pc, #360]	; (800a188 <_printf_i+0x23c>)
 800a020:	230a      	movs	r3, #10
 800a022:	e012      	b.n	800a04a <_printf_i+0xfe>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	6820      	ldr	r0, [r4, #0]
 800a028:	1d19      	adds	r1, r3, #4
 800a02a:	6029      	str	r1, [r5, #0]
 800a02c:	0605      	lsls	r5, r0, #24
 800a02e:	d501      	bpl.n	800a034 <_printf_i+0xe8>
 800a030:	681e      	ldr	r6, [r3, #0]
 800a032:	e002      	b.n	800a03a <_printf_i+0xee>
 800a034:	0641      	lsls	r1, r0, #25
 800a036:	d5fb      	bpl.n	800a030 <_printf_i+0xe4>
 800a038:	881e      	ldrh	r6, [r3, #0]
 800a03a:	4853      	ldr	r0, [pc, #332]	; (800a188 <_printf_i+0x23c>)
 800a03c:	2f6f      	cmp	r7, #111	; 0x6f
 800a03e:	bf0c      	ite	eq
 800a040:	2308      	moveq	r3, #8
 800a042:	230a      	movne	r3, #10
 800a044:	2100      	movs	r1, #0
 800a046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a04a:	6865      	ldr	r5, [r4, #4]
 800a04c:	60a5      	str	r5, [r4, #8]
 800a04e:	2d00      	cmp	r5, #0
 800a050:	bfa2      	ittt	ge
 800a052:	6821      	ldrge	r1, [r4, #0]
 800a054:	f021 0104 	bicge.w	r1, r1, #4
 800a058:	6021      	strge	r1, [r4, #0]
 800a05a:	b90e      	cbnz	r6, 800a060 <_printf_i+0x114>
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	d04b      	beq.n	800a0f8 <_printf_i+0x1ac>
 800a060:	4615      	mov	r5, r2
 800a062:	fbb6 f1f3 	udiv	r1, r6, r3
 800a066:	fb03 6711 	mls	r7, r3, r1, r6
 800a06a:	5dc7      	ldrb	r7, [r0, r7]
 800a06c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a070:	4637      	mov	r7, r6
 800a072:	42bb      	cmp	r3, r7
 800a074:	460e      	mov	r6, r1
 800a076:	d9f4      	bls.n	800a062 <_printf_i+0x116>
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d10b      	bne.n	800a094 <_printf_i+0x148>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	07de      	lsls	r6, r3, #31
 800a080:	d508      	bpl.n	800a094 <_printf_i+0x148>
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	6861      	ldr	r1, [r4, #4]
 800a086:	4299      	cmp	r1, r3
 800a088:	bfde      	ittt	le
 800a08a:	2330      	movle	r3, #48	; 0x30
 800a08c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a090:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a094:	1b52      	subs	r2, r2, r5
 800a096:	6122      	str	r2, [r4, #16]
 800a098:	f8cd a000 	str.w	sl, [sp]
 800a09c:	464b      	mov	r3, r9
 800a09e:	aa03      	add	r2, sp, #12
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f7ff fee4 	bl	8009e70 <_printf_common>
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d14a      	bne.n	800a142 <_printf_i+0x1f6>
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	b004      	add	sp, #16
 800a0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	f043 0320 	orr.w	r3, r3, #32
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	4833      	ldr	r0, [pc, #204]	; (800a18c <_printf_i+0x240>)
 800a0c0:	2778      	movs	r7, #120	; 0x78
 800a0c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	6829      	ldr	r1, [r5, #0]
 800a0ca:	061f      	lsls	r7, r3, #24
 800a0cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0d0:	d402      	bmi.n	800a0d8 <_printf_i+0x18c>
 800a0d2:	065f      	lsls	r7, r3, #25
 800a0d4:	bf48      	it	mi
 800a0d6:	b2b6      	uxthmi	r6, r6
 800a0d8:	07df      	lsls	r7, r3, #31
 800a0da:	bf48      	it	mi
 800a0dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a0e0:	6029      	str	r1, [r5, #0]
 800a0e2:	bf48      	it	mi
 800a0e4:	6023      	strmi	r3, [r4, #0]
 800a0e6:	b91e      	cbnz	r6, 800a0f0 <_printf_i+0x1a4>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	f023 0320 	bic.w	r3, r3, #32
 800a0ee:	6023      	str	r3, [r4, #0]
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	e7a7      	b.n	800a044 <_printf_i+0xf8>
 800a0f4:	4824      	ldr	r0, [pc, #144]	; (800a188 <_printf_i+0x23c>)
 800a0f6:	e7e4      	b.n	800a0c2 <_printf_i+0x176>
 800a0f8:	4615      	mov	r5, r2
 800a0fa:	e7bd      	b.n	800a078 <_printf_i+0x12c>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	6826      	ldr	r6, [r4, #0]
 800a100:	6961      	ldr	r1, [r4, #20]
 800a102:	1d18      	adds	r0, r3, #4
 800a104:	6028      	str	r0, [r5, #0]
 800a106:	0635      	lsls	r5, r6, #24
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	d501      	bpl.n	800a110 <_printf_i+0x1c4>
 800a10c:	6019      	str	r1, [r3, #0]
 800a10e:	e002      	b.n	800a116 <_printf_i+0x1ca>
 800a110:	0670      	lsls	r0, r6, #25
 800a112:	d5fb      	bpl.n	800a10c <_printf_i+0x1c0>
 800a114:	8019      	strh	r1, [r3, #0]
 800a116:	2300      	movs	r3, #0
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	4615      	mov	r5, r2
 800a11c:	e7bc      	b.n	800a098 <_printf_i+0x14c>
 800a11e:	682b      	ldr	r3, [r5, #0]
 800a120:	1d1a      	adds	r2, r3, #4
 800a122:	602a      	str	r2, [r5, #0]
 800a124:	681d      	ldr	r5, [r3, #0]
 800a126:	6862      	ldr	r2, [r4, #4]
 800a128:	2100      	movs	r1, #0
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7f6 f8d8 	bl	80002e0 <memchr>
 800a130:	b108      	cbz	r0, 800a136 <_printf_i+0x1ea>
 800a132:	1b40      	subs	r0, r0, r5
 800a134:	6060      	str	r0, [r4, #4]
 800a136:	6863      	ldr	r3, [r4, #4]
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	2300      	movs	r3, #0
 800a13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a140:	e7aa      	b.n	800a098 <_printf_i+0x14c>
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	462a      	mov	r2, r5
 800a146:	4649      	mov	r1, r9
 800a148:	4640      	mov	r0, r8
 800a14a:	47d0      	blx	sl
 800a14c:	3001      	adds	r0, #1
 800a14e:	d0ad      	beq.n	800a0ac <_printf_i+0x160>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	079b      	lsls	r3, r3, #30
 800a154:	d413      	bmi.n	800a17e <_printf_i+0x232>
 800a156:	68e0      	ldr	r0, [r4, #12]
 800a158:	9b03      	ldr	r3, [sp, #12]
 800a15a:	4298      	cmp	r0, r3
 800a15c:	bfb8      	it	lt
 800a15e:	4618      	movlt	r0, r3
 800a160:	e7a6      	b.n	800a0b0 <_printf_i+0x164>
 800a162:	2301      	movs	r3, #1
 800a164:	4632      	mov	r2, r6
 800a166:	4649      	mov	r1, r9
 800a168:	4640      	mov	r0, r8
 800a16a:	47d0      	blx	sl
 800a16c:	3001      	adds	r0, #1
 800a16e:	d09d      	beq.n	800a0ac <_printf_i+0x160>
 800a170:	3501      	adds	r5, #1
 800a172:	68e3      	ldr	r3, [r4, #12]
 800a174:	9903      	ldr	r1, [sp, #12]
 800a176:	1a5b      	subs	r3, r3, r1
 800a178:	42ab      	cmp	r3, r5
 800a17a:	dcf2      	bgt.n	800a162 <_printf_i+0x216>
 800a17c:	e7eb      	b.n	800a156 <_printf_i+0x20a>
 800a17e:	2500      	movs	r5, #0
 800a180:	f104 0619 	add.w	r6, r4, #25
 800a184:	e7f5      	b.n	800a172 <_printf_i+0x226>
 800a186:	bf00      	nop
 800a188:	0800a331 	.word	0x0800a331
 800a18c:	0800a342 	.word	0x0800a342

0800a190 <memmove>:
 800a190:	4288      	cmp	r0, r1
 800a192:	b510      	push	{r4, lr}
 800a194:	eb01 0402 	add.w	r4, r1, r2
 800a198:	d902      	bls.n	800a1a0 <memmove+0x10>
 800a19a:	4284      	cmp	r4, r0
 800a19c:	4623      	mov	r3, r4
 800a19e:	d807      	bhi.n	800a1b0 <memmove+0x20>
 800a1a0:	1e43      	subs	r3, r0, #1
 800a1a2:	42a1      	cmp	r1, r4
 800a1a4:	d008      	beq.n	800a1b8 <memmove+0x28>
 800a1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ae:	e7f8      	b.n	800a1a2 <memmove+0x12>
 800a1b0:	4402      	add	r2, r0
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	428a      	cmp	r2, r1
 800a1b6:	d100      	bne.n	800a1ba <memmove+0x2a>
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1c2:	e7f7      	b.n	800a1b4 <memmove+0x24>

0800a1c4 <_sbrk_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d06      	ldr	r5, [pc, #24]	; (800a1e0 <_sbrk_r+0x1c>)
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	f7f7 f97a 	bl	80014c8 <_sbrk>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_sbrk_r+0x1a>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_sbrk_r+0x1a>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	24000b0c 	.word	0x24000b0c

0800a1e4 <_realloc_r>:
 800a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	4680      	mov	r8, r0
 800a1ea:	4614      	mov	r4, r2
 800a1ec:	460e      	mov	r6, r1
 800a1ee:	b921      	cbnz	r1, 800a1fa <_realloc_r+0x16>
 800a1f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	f7ff bc57 	b.w	8009aa8 <_malloc_r>
 800a1fa:	b92a      	cbnz	r2, 800a208 <_realloc_r+0x24>
 800a1fc:	f7ff fbe8 	bl	80099d0 <_free_r>
 800a200:	4625      	mov	r5, r4
 800a202:	4628      	mov	r0, r5
 800a204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a208:	f000 f81b 	bl	800a242 <_malloc_usable_size_r>
 800a20c:	4284      	cmp	r4, r0
 800a20e:	4607      	mov	r7, r0
 800a210:	d802      	bhi.n	800a218 <_realloc_r+0x34>
 800a212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a216:	d812      	bhi.n	800a23e <_realloc_r+0x5a>
 800a218:	4621      	mov	r1, r4
 800a21a:	4640      	mov	r0, r8
 800a21c:	f7ff fc44 	bl	8009aa8 <_malloc_r>
 800a220:	4605      	mov	r5, r0
 800a222:	2800      	cmp	r0, #0
 800a224:	d0ed      	beq.n	800a202 <_realloc_r+0x1e>
 800a226:	42bc      	cmp	r4, r7
 800a228:	4622      	mov	r2, r4
 800a22a:	4631      	mov	r1, r6
 800a22c:	bf28      	it	cs
 800a22e:	463a      	movcs	r2, r7
 800a230:	f7ff fbc0 	bl	80099b4 <memcpy>
 800a234:	4631      	mov	r1, r6
 800a236:	4640      	mov	r0, r8
 800a238:	f7ff fbca 	bl	80099d0 <_free_r>
 800a23c:	e7e1      	b.n	800a202 <_realloc_r+0x1e>
 800a23e:	4635      	mov	r5, r6
 800a240:	e7df      	b.n	800a202 <_realloc_r+0x1e>

0800a242 <_malloc_usable_size_r>:
 800a242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a246:	1f18      	subs	r0, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bfbc      	itt	lt
 800a24c:	580b      	ldrlt	r3, [r1, r0]
 800a24e:	18c0      	addlt	r0, r0, r3
 800a250:	4770      	bx	lr
	...

0800a254 <_init>:
 800a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a256:	bf00      	nop
 800a258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25a:	bc08      	pop	{r3}
 800a25c:	469e      	mov	lr, r3
 800a25e:	4770      	bx	lr

0800a260 <_fini>:
 800a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a262:	bf00      	nop
 800a264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a266:	bc08      	pop	{r3}
 800a268:	469e      	mov	lr, r3
 800a26a:	4770      	bx	lr
