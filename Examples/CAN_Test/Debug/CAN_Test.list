
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009ec4  08009ec4  00019ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fa4  08009fa4  00019fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08009fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800a014  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a074  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  24000120  0800a0d4  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000b1c  0800a0d4  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d9fd  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e97  00000000  00000000  0003db8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00040a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f26  00000000  00000000  00041da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038c4d  00000000  00000000  00042cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b7b  00000000  00000000  0007b91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001692ca  00000000  00000000  00095496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059c8  00000000  00000000  001fe760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00204128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009eac 	.word	0x08009eac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08009eac 	.word	0x08009eac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// FDCAN1 Callback for interrupt
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d014      	beq.n	80006ba <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f002 fe78 	bl	800338c <HAL_FDCAN_GetRxMessage>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80006a2:	f000 fc31 	bl	8000f08 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f002 ffdc 	bl	8003668 <HAL_FDCAN_ActivateNotification>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80006b6:	f000 fc27 	bl	8000f08 <Error_Handler>
    }
  }
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000958 	.word	0x24000958
 80006c8:	24000928 	.word	0x24000928

080006cc <HAL_FDCAN_RxFifo1Callback>:

// FDCAN2 Callback for interrupt
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d028      	beq.n	8000732 <HAL_FDCAN_RxFifo1Callback+0x66>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_FDCAN_RxFifo1Callback+0x70>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80006e4:	2141      	movs	r1, #65	; 0x41
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f002 fe50 	bl	800338c <HAL_FDCAN_GetRxMessage>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80006f2:	f000 fc09 	bl	8000f08 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f002 ffb4 	bl	8003668 <HAL_FDCAN_ActivateNotification>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000706:	f000 fbff 	bl	8000f08 <Error_Handler>
    }

	  sprintf ((char *)TxData2, "CAN2 %d", indx++);
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_FDCAN_RxFifo1Callback+0x78>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000712:	600a      	str	r2, [r1, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	490c      	ldr	r1, [pc, #48]	; (8000748 <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <HAL_FDCAN_RxFifo1Callback+0x80>)
 800071a:	f008 ff23 	bl	8009564 <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000720:	490b      	ldr	r1, [pc, #44]	; (8000750 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000724:	f002 fdd7 	bl	80032d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_FDCAN_RxFifo1Callback+0x66>
	  {
		  Error_Handler();
 800072e:	f000 fbeb 	bl	8000f08 <Error_Handler>
	  }
  }
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	240009b4 	.word	0x240009b4
 8000740:	24000984 	.word	0x24000984
 8000744:	240009bc 	.word	0x240009bc
 8000748:	08009ec4 	.word	0x08009ec4
 800074c:	240009ac 	.word	0x240009ac
 8000750:	24000960 	.word	0x24000960
 8000754:	240002c4 	.word	0x240002c4

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 ffce 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f890 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 faf4 	bl	8000d50 <MX_GPIO_Init>
  MX_ETH_Init();
 8000768:	f000 f90c 	bl	8000984 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800076c:	f000 fa72 	bl	8000c54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000770:	f000 fabc 	bl	8000cec <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8000774:	f000 f952 	bl	8000a1c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000778:	f000 f9de 	bl	8000b38 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  // Start FDCAN 1 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800077c:	483a      	ldr	r0, [pc, #232]	; (8000868 <main+0x110>)
 800077e:	f002 fd7f 	bl	8003280 <HAL_FDCAN_Start>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x34>
	  Error_Handler();
 8000788:	f000 fbbe 	bl	8000f08 <Error_Handler>
  }

  // Start FDCAN 2 w/ Error Checking
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800078c:	4837      	ldr	r0, [pc, #220]	; (800086c <main+0x114>)
 800078e:	f002 fd77 	bl	8003280 <HAL_FDCAN_Start>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <main+0x44>
	  Error_Handler();
 8000798:	f000 fbb6 	bl	8000f08 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1 which triggers the Interrupt
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	4831      	ldr	r0, [pc, #196]	; (8000868 <main+0x110>)
 80007a2:	f002 ff61 	bl	8003668 <HAL_FDCAN_ActivateNotification>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <main+0x58>
	  Error_Handler();
 80007ac:	f000 fbac 	bl	8000f08 <Error_Handler>
  }


  // Activate the notification for new data in FIFO1 for FDCAN2 which triggers the Interrupt
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK) {
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	482d      	ldr	r0, [pc, #180]	; (800086c <main+0x114>)
 80007b6:	f002 ff57 	bl	8003668 <HAL_FDCAN_ActivateNotification>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <main+0x6c>
	  Error_Handler();
 80007c0:	f000 fba2 	bl	8000f08 <Error_Handler>
  }

  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11; // ID of the Transmitter, which is going to be 0x11 for the FDCAN1
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <main+0x118>)
 80007c6:	2211      	movs	r2, #17
 80007c8:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID; // Type of CAN ID
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <main+0x118>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME; // Implies whether we are sending a Data frame or Remote frame
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <main+0x118>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8; // This is the length of the actual Data we are going to send
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <main+0x118>)
 80007d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007dc:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // Will notify us if there is any error in transmission
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <main+0x118>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF; // Using the same bitrate for both Arbitration and Data Fields
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <main+0x118>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN; // Implies whether you want to use the standard CAN or FD CAN
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <main+0x118>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // Not using TXEvent or MessageMarker
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <main+0x118>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <main+0x118>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]


  // Configure TX Header for FDCAN2
  TxHeader2.Identifier = 0x22;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <main+0x11c>)
 80007fe:	2222      	movs	r2, #34	; 0x22
 8000800:	601a      	str	r2, [r3, #0]
  TxHeader2.IdType = FDCAN_STANDARD_ID;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main+0x11c>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <main+0x11c>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <main+0x11c>)
 8000810:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000814:	60da      	str	r2, [r3, #12]
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0x11c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <main+0x11c>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0x11c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <main+0x11c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <main+0x11c>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf ((char *)TxData1, "CAN1 %d", indx++); // Add data to the TX Buffer
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <main+0x120>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	490f      	ldr	r1, [pc, #60]	; (8000878 <main+0x120>)
 800083c:	600a      	str	r2, [r1, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	490e      	ldr	r1, [pc, #56]	; (800087c <main+0x124>)
 8000842:	480f      	ldr	r0, [pc, #60]	; (8000880 <main+0x128>)
 8000844:	f008 fe8e 	bl	8009564 <siprintf>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK) { // Add the message to the TX Queue and send it
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <main+0x128>)
 800084a:	4909      	ldr	r1, [pc, #36]	; (8000870 <main+0x118>)
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <main+0x110>)
 800084e:	f002 fd42 	bl	80032d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <main+0x104>
		  Error_Handler();
 8000858:	f000 fb56 	bl	8000f08 <Error_Handler>
	  }

	  HAL_Delay (1000); // Delay for 1 Second
 800085c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000860:	f000 ffde 	bl	8001820 <HAL_Delay>
	  sprintf ((char *)TxData1, "CAN1 %d", indx++); // Add data to the TX Buffer
 8000864:	e7e6      	b.n	8000834 <main+0xdc>
 8000866:	bf00      	nop
 8000868:	24000224 	.word	0x24000224
 800086c:	240002c4 	.word	0x240002c4
 8000870:	24000904 	.word	0x24000904
 8000874:	24000960 	.word	0x24000960
 8000878:	240009bc 	.word	0x240009bc
 800087c:	08009ecc 	.word	0x08009ecc
 8000880:	24000950 	.word	0x24000950

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f008 fe86 	bl	80095a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f008 fe80 	bl	80095a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f003 ff5b 	bl	8004760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <SystemClock_Config+0xf8>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	4a32      	ldr	r2, [pc, #200]	; (800097c <SystemClock_Config+0xf8>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <SystemClock_Config+0xf8>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <SystemClock_Config+0xfc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <SystemClock_Config+0xfc>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <SystemClock_Config+0xfc>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e0:	bf00      	nop
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <SystemClock_Config+0xfc>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ee:	d1f8      	bne.n	80008e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008f0:	2303      	movs	r3, #3
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2340      	movs	r3, #64	; 0x40
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	2302      	movs	r3, #2
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800090e:	2312      	movs	r3, #18
 8000910:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000916:	2303      	movs	r3, #3
 8000918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800091e:	230c      	movs	r3, #12
 8000920:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000922:	2302      	movs	r3, #2
 8000924:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4618      	mov	r0, r3
 8000932:	f003 ff5f 	bl	80047f4 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800093c:	f000 fae4 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	233f      	movs	r3, #63	; 0x3f
 8000942:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2101      	movs	r1, #1
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fb9f 	bl	80050a8 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000970:	f000 faca 	bl	8000f08 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3770      	adds	r7, #112	; 0x70
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58000400 	.word	0x58000400
 8000980:	58024800 	.word	0x58024800

08000984 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_ETH_Init+0x80>)
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <MX_ETH_Init+0x84>)
 800098c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_ETH_Init+0x88>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_ETH_Init+0x88>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_ETH_Init+0x88>)
 800099c:	22e1      	movs	r2, #225	; 0xe1
 800099e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_ETH_Init+0x88>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_ETH_Init+0x88>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_ETH_Init+0x88>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_ETH_Init+0x80>)
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_ETH_Init+0x88>)
 80009b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_ETH_Init+0x80>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_ETH_Init+0x80>)
 80009c0:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <MX_ETH_Init+0x8c>)
 80009c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_ETH_Init+0x80>)
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <MX_ETH_Init+0x90>)
 80009c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_ETH_Init+0x80>)
 80009cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_ETH_Init+0x80>)
 80009d4:	f001 fddc 	bl	8002590 <HAL_ETH_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009de:	f000 fa93 	bl	8000f08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009e2:	2238      	movs	r2, #56	; 0x38
 80009e4:	2100      	movs	r1, #0
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_ETH_Init+0x94>)
 80009e8:	f008 fddc 	bl	80095a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_ETH_Init+0x94>)
 80009ee:	2221      	movs	r2, #33	; 0x21
 80009f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_ETH_Init+0x94>)
 80009f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_ETH_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000174 	.word	0x24000174
 8000a08:	40028000 	.word	0x40028000
 8000a0c:	240009c0 	.word	0x240009c0
 8000a10:	240000c0 	.word	0x240000c0
 8000a14:	24000060 	.word	0x24000060
 8000a18:	2400013c 	.word	0x2400013c

08000a1c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a22:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a24:	4a42      	ldr	r2, [pc, #264]	; (8000b30 <MX_FDCAN1_Init+0x114>)
 8000a26:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a28:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a34:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a40:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a4e:	220d      	movs	r2, #13
 8000a50:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8000a52:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a54:	2256      	movs	r2, #86	; 0x56
 8000a56:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a5a:	220d      	movs	r2, #13
 8000a5c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8000a5e:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a60:	2219      	movs	r2, #25
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000acc:	f002 f984 	bl	8002dd8 <HAL_FDCAN_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000ad6:	f000 fa17 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; // Send the data to FIFO 0
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x22;
 8000aea:	2322      	movs	r3, #34	; 0x22
 8000aec:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x22;
 8000aee:	2322      	movs	r3, #34	; 0x22
 8000af0:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000afc:	f002 fb4a 	bl	8003194 <HAL_FDCAN_ConfigFilter>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_FDCAN1_Init+0xee>
  	Error_Handler();
 8000b06:	f000 f9ff 	bl	8000f08 <Error_Handler>
  }

  __HAL_FDCAN_ENABLE_IT(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_FDCAN1_Init+0x110>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 0201 	orr.w	r2, r2, #1
 8000b18:	655a      	str	r2, [r3, #84]	; 0x54
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_FDCAN1_Init+0x118>)
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <MX_FDCAN1_Init+0x118>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	6153      	str	r3, [r2, #20]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000224 	.word	0x24000224
 8000b30:	4000a000 	.word	0x4000a000
 8000b34:	4000a800 	.word	0x4000a800

08000b38 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b40:	4a42      	ldr	r2, [pc, #264]	; (8000c4c <MX_FDCAN2_Init+0x114>)
 8000b42:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b6a:	220d      	movs	r2, #13
 8000b6c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b70:	2256      	movs	r2, #86	; 0x56
 8000b72:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b76:	220d      	movs	r2, #13
 8000b78:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b7c:	2219      	movs	r2, #25
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 10;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000be8:	f002 f8f6 	bl	8002dd8 <HAL_FDCAN_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000bf2:	f000 f989 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1; // Send the Data to FIFO 1
 8000c02:	2302      	movs	r3, #2
 8000c04:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 8000c06:	2311      	movs	r3, #17
 8000c08:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 8000c0a:	2311      	movs	r3, #17
 8000c0c:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000c18:	f002 fabc 	bl	8003194 <HAL_FDCAN_ConfigFilter>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_FDCAN2_Init+0xee>
    Error_Handler();
 8000c22:	f000 f971 	bl	8000f08 <Error_Handler>
  }

  __HAL_FDCAN_ENABLE_IT(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE);
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_FDCAN2_Init+0x110>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0210 	orr.w	r2, r2, #16
 8000c34:	655a      	str	r2, [r3, #84]	; 0x54
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_FDCAN2_Init+0x118>)
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <MX_FDCAN2_Init+0x118>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	6153      	str	r3, [r2, #20]


  /* USER CODE END FDCAN2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	240002c4 	.word	0x240002c4
 8000c4c:	4000a400 	.word	0x4000a400
 8000c50:	4000a800 	.word	0x4000a800

08000c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_USART3_UART_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c9e:	f006 fbbb 	bl	8007418 <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f92e 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cb0:	f008 f884 	bl	8008dbc <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 f925 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cc2:	f008 f8b9 	bl	8008e38 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f000 f91c 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cd2:	f008 f83a 	bl	8008d4a <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f914 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000364 	.word	0x24000364
 8000ce8:	40004800 	.word	0x40004800

08000cec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf8:	2209      	movs	r2, #9
 8000cfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d34:	f003 fbcb 	bl	80044ce <HAL_PCD_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d3e:	f000 f8e3 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	240003f8 	.word	0x240003f8
 8000d4c:	40080000 	.word	0x40080000

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b62      	ldr	r3, [pc, #392]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a60      	ldr	r2, [pc, #384]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d84:	4b5a      	ldr	r3, [pc, #360]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a59      	ldr	r2, [pc, #356]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a33      	ldr	r2, [pc, #204]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0x1a0>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e3e:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0x1a4>)
 8000e40:	f003 fb2c 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <MX_GPIO_Init+0x1a8>)
 8000e4c:	f003 fb26 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	4829      	ldr	r0, [pc, #164]	; (8000efc <MX_GPIO_Init+0x1ac>)
 8000e56:	f003 fb21 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4824      	ldr	r0, [pc, #144]	; (8000f00 <MX_GPIO_Init+0x1b0>)
 8000e70:	f003 f964 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e74:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <MX_GPIO_Init+0x1a4>)
 8000e8e:	f003 f955 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <MX_GPIO_Init+0x1a8>)
 8000eac:	f003 f946 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_GPIO_Init+0x1b4>)
 8000ec6:	f003 f939 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_GPIO_Init+0x1ac>)
 8000ee2:	f003 f92b 	bl	800413c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	; 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58020c00 	.word	0x58020c00
 8000efc:	58021000 	.word	0x58021000
 8000f00:	58020800 	.word	0x58020800
 8000f04:	58021800 	.word	0x58021800

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0e:	b672      	cpsid	i
}
 8000f10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint8_t eMessage[16];
  sprintf((char*) &eMessage, "Error\n");
 8000f12:	463b      	mov	r3, r7
 8000f14:	4905      	ldr	r1, [pc, #20]	; (8000f2c <Error_Handler+0x24>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f008 fb24 	bl	8009564 <siprintf>
  HAL_UART_Transmit(&huart3, eMessage, sizeof(eMessage), HAL_MAX_DELAY);
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	2210      	movs	r2, #16
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <Error_Handler+0x28>)
 8000f26:	f006 fac7 	bl	80074b8 <HAL_UART_Transmit>
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <Error_Handler+0x22>
 8000f2c:	08009ed4 	.word	0x08009ed4
 8000f30:	24000364 	.word	0x24000364

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_MspInit+0x30>)
 8000f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_MspInit+0x30>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_MspInit+0x30>)
 8000f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	58024400 	.word	0x58024400

08000f68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a59      	ldr	r2, [pc, #356]	; (80010ec <HAL_ETH_MspInit+0x184>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	f040 80ab 	bne.w	80010e2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f92:	4a57      	ldr	r2, [pc, #348]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9c:	4b54      	ldr	r3, [pc, #336]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000f9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa6:	623b      	str	r3, [r7, #32]
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000faa:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fc8:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fce:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a39      	ldr	r2, [pc, #228]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_ETH_MspInit+0x188>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800105e:	2332      	movs	r3, #50	; 0x32
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	481e      	ldr	r0, [pc, #120]	; (80010f4 <HAL_ETH_MspInit+0x18c>)
 800107a:	f003 f85f 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800107e:	2386      	movs	r3, #134	; 0x86
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108e:	230b      	movs	r3, #11
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <HAL_ETH_MspInit+0x190>)
 800109a:	f003 f84f 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800109e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b0:	230b      	movs	r3, #11
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <HAL_ETH_MspInit+0x194>)
 80010bc:	f003 f83e 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d2:	230b      	movs	r3, #11
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <HAL_ETH_MspInit+0x198>)
 80010de:	f003 f82d 	bl	800413c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3738      	adds	r7, #56	; 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40028000 	.word	0x40028000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020800 	.word	0x58020800
 80010f8:	58020000 	.word	0x58020000
 80010fc:	58020400 	.word	0x58020400
 8001100:	58021800 	.word	0x58021800

08001104 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0bc      	sub	sp, #240	; 0xf0
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	22c0      	movs	r2, #192	; 0xc0
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f008 fa3d 	bl	80095a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a5e      	ldr	r2, [pc, #376]	; (80012a8 <HAL_FDCAN_MspInit+0x1a4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d158      	bne.n	80011e6 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001134:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fb37 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001158:	f7ff fed6 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <HAL_FDCAN_MspInit+0x1a8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_FDCAN_MspInit+0x1a8>)
 8001164:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <HAL_FDCAN_MspInit+0x1a8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10e      	bne.n	800118c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 8001170:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 8001180:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	4a47      	ldr	r2, [pc, #284]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011c2:	2309      	movs	r3, #9
 80011c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011cc:	4619      	mov	r1, r3
 80011ce:	4839      	ldr	r0, [pc, #228]	; (80012b4 <HAL_FDCAN_MspInit+0x1b0>)
 80011d0:	f002 ffb4 	bl	800413c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2013      	movs	r0, #19
 80011da:	f000 fc40 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011de:	2013      	movs	r0, #19
 80011e0:	f000 fc57 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80011e4:	e05c      	b.n	80012a0 <HAL_FDCAN_MspInit+0x19c>
  else if(hfdcan->Instance==FDCAN2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <HAL_FDCAN_MspInit+0x1b4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d157      	bne.n	80012a0 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fad9 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 8001214:	f7ff fe78 	bl	8000f08 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_FDCAN_MspInit+0x1a8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_FDCAN_MspInit+0x1a8>)
 8001220:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <HAL_FDCAN_MspInit+0x1a8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10e      	bne.n	8001248 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 800122c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 800123c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_FDCAN_MspInit+0x1ac>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001266:	2360      	movs	r3, #96	; 0x60
 8001268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800127e:	2309      	movs	r3, #9
 8001280:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <HAL_FDCAN_MspInit+0x1b8>)
 800128c:	f002 ff56 	bl	800413c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2014      	movs	r0, #20
 8001296:	f000 fbe2 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800129a:	2014      	movs	r0, #20
 800129c:	f000 fbf9 	bl	8001a92 <HAL_NVIC_EnableIRQ>
}
 80012a0:	bf00      	nop
 80012a2:	37f0      	adds	r7, #240	; 0xf0
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	4000a000 	.word	0x4000a000
 80012ac:	240009c8 	.word	0x240009c8
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020c00 	.word	0x58020c00
 80012b8:	4000a400 	.word	0x4000a400
 80012bc:	58020400 	.word	0x58020400

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ba      	sub	sp, #232	; 0xe8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	22c0      	movs	r2, #192	; 0xc0
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f008 f95f 	bl	80095a4 <memset>
  if(huart->Instance==USART3)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <HAL_UART_MspInit+0xd8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d14e      	bne.n	800138e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012f0:	f04f 0202 	mov.w	r2, #2
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f004 fa5a 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001312:	f7ff fdf9 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_UART_MspInit+0xdc>)
 8001318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_UART_MspInit+0xdc>)
 800131e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001322:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_UART_MspInit+0xdc>)
 8001328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800132c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_UART_MspInit+0xdc>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_UART_MspInit+0xdc>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_UART_MspInit+0xdc>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800136c:	2307      	movs	r3, #7
 800136e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001376:	4619      	mov	r1, r3
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <HAL_UART_MspInit+0xe0>)
 800137a:	f002 fedf 	bl	800413c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2027      	movs	r0, #39	; 0x27
 8001384:	f000 fb6b 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001388:	2027      	movs	r0, #39	; 0x27
 800138a:	f000 fb82 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	37e8      	adds	r7, #232	; 0xe8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40004800 	.word	0x40004800
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020c00 	.word	0x58020c00

080013a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0ba      	sub	sp, #232	; 0xe8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	22c0      	movs	r2, #192	; 0xc0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 f8ed 	bl	80095a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a30      	ldr	r2, [pc, #192]	; (8001490 <HAL_PCD_MspInit+0xec>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d159      	bne.n	8001488 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 f9e7 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013f8:	f7ff fd86 	bl	8000f08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013fc:	f003 f9ea 	bl	80047d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_PCD_MspInit+0xf0>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_PCD_MspInit+0xf0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_PCD_MspInit+0xf0>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800141e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001438:	230a      	movs	r3, #10
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001442:	4619      	mov	r1, r3
 8001444:	4814      	ldr	r0, [pc, #80]	; (8001498 <HAL_PCD_MspInit+0xf4>)
 8001446:	f002 fe79 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <HAL_PCD_MspInit+0xf4>)
 8001466:	f002 fe69 	bl	800413c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_PCD_MspInit+0xf0>)
 800146c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_PCD_MspInit+0xf0>)
 8001472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001476:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_PCD_MspInit+0xf0>)
 800147c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	37e8      	adds	r7, #232	; 0xe8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40080000 	.word	0x40080000
 8001494:	58024400 	.word	0x58024400
 8001498:	58020000 	.word	0x58020000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 f97a 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <FDCAN1_IT0_IRQHandler+0x10>)
 80014f6:	f002 f931 	bl	800375c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	24000224 	.word	0x24000224

08001504 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <FDCAN2_IT0_IRQHandler+0x10>)
 800150a:	f002 f927 	bl	800375c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240002c4 	.word	0x240002c4

08001518 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <USART3_IRQHandler+0x10>)
 800151e:	f006 f859 	bl	80075d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000364 	.word	0x24000364

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f008 f82a 	bl	80095b4 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24080000 	.word	0x24080000
 800158c:	00000400 	.word	0x00000400
 8001590:	240009cc 	.word	0x240009cc
 8001594:	24000b20 	.word	0x24000b20

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <SystemInit+0xe4>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a36      	ldr	r2, [pc, #216]	; (800167c <SystemInit+0xe4>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <SystemInit+0xe8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d807      	bhi.n	80015c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <SystemInit+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <SystemInit+0xe8>)
 80015c2:	f043 0307 	orr.w	r3, r3, #7
 80015c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <SystemInit+0xec>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <SystemInit+0xec>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <SystemInit+0xec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <SystemInit+0xec>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4929      	ldr	r1, [pc, #164]	; (8001684 <SystemInit+0xec>)
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <SystemInit+0xf0>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <SystemInit+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <SystemInit+0xe8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 030f 	bic.w	r3, r3, #15
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <SystemInit+0xe8>)
 80015fc:	f043 0307 	orr.w	r3, r3, #7
 8001600:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <SystemInit+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <SystemInit+0xec>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <SystemInit+0xec>)
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <SystemInit+0xf4>)
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <SystemInit+0xec>)
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <SystemInit+0xf8>)
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <SystemInit+0xec>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <SystemInit+0xfc>)
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <SystemInit+0xec>)
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <SystemInit+0xfc>)
 8001630:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <SystemInit+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <SystemInit+0xec>)
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <SystemInit+0xfc>)
 800163c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <SystemInit+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <SystemInit+0xec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <SystemInit+0xec>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <SystemInit+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <SystemInit+0x100>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <SystemInit+0x104>)
 800165c:	4013      	ands	r3, r2
 800165e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001662:	d202      	bcs.n	800166a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <SystemInit+0x108>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <SystemInit+0x10c>)
 800166c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001670:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	52002000 	.word	0x52002000
 8001684:	58024400 	.word	0x58024400
 8001688:	eaf6ed7f 	.word	0xeaf6ed7f
 800168c:	02020200 	.word	0x02020200
 8001690:	01ff0000 	.word	0x01ff0000
 8001694:	01010280 	.word	0x01010280
 8001698:	5c001000 	.word	0x5c001000
 800169c:	ffff0000 	.word	0xffff0000
 80016a0:	51008108 	.word	0x51008108
 80016a4:	52004000 	.word	0x52004000

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ac:	f7ff ff74 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f007 ff73 	bl	80095c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff f83d 	bl	8000758 <main>
  bx  lr
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016ec:	08009fb4 	.word	0x08009fb4
  ldr r2, =_sbss
 80016f0:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80016f4:	24000b1c 	.word	0x24000b1c

080016f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC3_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001702:	2003      	movs	r0, #3
 8001704:	f000 f9a0 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001708:	f003 fe84 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	4913      	ldr	r1, [pc, #76]	; (8001768 <HAL_Init+0x6c>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_Init+0x68>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_Init+0x6c>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_Init+0x70>)
 800173e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_Init+0x74>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f814 	bl	8001774 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e002      	b.n	800175c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001756:	f7ff fbed 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400
 8001768:	08009f28 	.word	0x08009f28
 800176c:	24000004 	.word	0x24000004
 8001770:	24000000 	.word	0x24000000

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_InitTick+0x60>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e021      	b.n	80017cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_InitTick+0x64>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_InitTick+0x60>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f985 	bl	8001aae <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f94f 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x68>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400000c 	.word	0x2400000c
 80017d8:	24000000 	.word	0x24000000
 80017dc:	24000008 	.word	0x24000008

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2400000c 	.word	0x2400000c
 8001804:	240009d0 	.word	0x240009d0

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	240009d0 	.word	0x240009d0

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2400000c 	.word	0x2400000c

08001868 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetREVID+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1b      	lsrs	r3, r3, #16
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	5c001000 	.word	0x5c001000

08001880 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001890:	4904      	ldr	r1, [pc, #16]	; (80018a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58000400 	.word	0x58000400

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00
 80018ec:	05fa0000 	.word	0x05fa0000

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff40 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff90 	bl	800199c <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5f 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff33 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa4 	bl	8001a04 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fe9a 	bl	8001808 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e2dc      	b.n	800209a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d008      	beq.n	8001afe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e2cd      	b.n	800209a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <HAL_DMA_Abort+0x214>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d04a      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a74      	ldr	r2, [pc, #464]	; (8001ce0 <HAL_DMA_Abort+0x218>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d045      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a73      	ldr	r2, [pc, #460]	; (8001ce4 <HAL_DMA_Abort+0x21c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d040      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a71      	ldr	r2, [pc, #452]	; (8001ce8 <HAL_DMA_Abort+0x220>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d03b      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a70      	ldr	r2, [pc, #448]	; (8001cec <HAL_DMA_Abort+0x224>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d036      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_DMA_Abort+0x228>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a6d      	ldr	r2, [pc, #436]	; (8001cf4 <HAL_DMA_Abort+0x22c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d02c      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6b      	ldr	r2, [pc, #428]	; (8001cf8 <HAL_DMA_Abort+0x230>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d027      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_DMA_Abort+0x234>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d022      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <HAL_DMA_Abort+0x238>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01d      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <HAL_DMA_Abort+0x23c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d018      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <HAL_DMA_Abort+0x240>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a64      	ldr	r2, [pc, #400]	; (8001d0c <HAL_DMA_Abort+0x244>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a62      	ldr	r2, [pc, #392]	; (8001d10 <HAL_DMA_Abort+0x248>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <HAL_DMA_Abort+0x24c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d004      	beq.n	8001b9e <HAL_DMA_Abort+0xd6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5f      	ldr	r2, [pc, #380]	; (8001d18 <HAL_DMA_Abort+0x250>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_DMA_Abort+0xda>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_DMA_Abort+0xdc>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 021e 	bic.w	r2, r2, #30
 8001bb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e00a      	b.n	8001be6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 020e 	bic.w	r2, r2, #14
 8001bde:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3c      	ldr	r2, [pc, #240]	; (8001cdc <HAL_DMA_Abort+0x214>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d072      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <HAL_DMA_Abort+0x218>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d06d      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <HAL_DMA_Abort+0x21c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d068      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a37      	ldr	r2, [pc, #220]	; (8001ce8 <HAL_DMA_Abort+0x220>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d063      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a36      	ldr	r2, [pc, #216]	; (8001cec <HAL_DMA_Abort+0x224>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d05e      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_DMA_Abort+0x228>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d059      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <HAL_DMA_Abort+0x22c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d054      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a31      	ldr	r2, [pc, #196]	; (8001cf8 <HAL_DMA_Abort+0x230>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d04f      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_DMA_Abort+0x234>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d04a      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2e      	ldr	r2, [pc, #184]	; (8001d00 <HAL_DMA_Abort+0x238>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d045      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	; (8001d04 <HAL_DMA_Abort+0x23c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d040      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_DMA_Abort+0x240>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d03b      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_DMA_Abort+0x244>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d036      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <HAL_DMA_Abort+0x248>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d031      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_DMA_Abort+0x24c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d02c      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <HAL_DMA_Abort+0x250>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d027      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_DMA_Abort+0x254>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_DMA_Abort+0x258>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01d      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_DMA_Abort+0x25c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d018      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_DMA_Abort+0x260>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_DMA_Abort+0x264>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_DMA_Abort+0x268>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d009      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_DMA_Abort+0x26c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d004      	beq.n	8001cd6 <HAL_DMA_Abort+0x20e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_DMA_Abort+0x270>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d132      	bne.n	8001d3c <HAL_DMA_Abort+0x274>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e031      	b.n	8001d3e <HAL_DMA_Abort+0x276>
 8001cda:	bf00      	nop
 8001cdc:	40020010 	.word	0x40020010
 8001ce0:	40020028 	.word	0x40020028
 8001ce4:	40020040 	.word	0x40020040
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40020070 	.word	0x40020070
 8001cf0:	40020088 	.word	0x40020088
 8001cf4:	400200a0 	.word	0x400200a0
 8001cf8:	400200b8 	.word	0x400200b8
 8001cfc:	40020410 	.word	0x40020410
 8001d00:	40020428 	.word	0x40020428
 8001d04:	40020440 	.word	0x40020440
 8001d08:	40020458 	.word	0x40020458
 8001d0c:	40020470 	.word	0x40020470
 8001d10:	40020488 	.word	0x40020488
 8001d14:	400204a0 	.word	0x400204a0
 8001d18:	400204b8 	.word	0x400204b8
 8001d1c:	58025408 	.word	0x58025408
 8001d20:	5802541c 	.word	0x5802541c
 8001d24:	58025430 	.word	0x58025430
 8001d28:	58025444 	.word	0x58025444
 8001d2c:	58025458 	.word	0x58025458
 8001d30:	5802546c 	.word	0x5802546c
 8001d34:	58025480 	.word	0x58025480
 8001d38:	58025494 	.word	0x58025494
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6d      	ldr	r2, [pc, #436]	; (8001f0c <HAL_DMA_Abort+0x444>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04a      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <HAL_DMA_Abort+0x448>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d045      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <HAL_DMA_Abort+0x44c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d040      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a68      	ldr	r2, [pc, #416]	; (8001f18 <HAL_DMA_Abort+0x450>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d03b      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_DMA_Abort+0x454>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d036      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_DMA_Abort+0x458>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a64      	ldr	r2, [pc, #400]	; (8001f24 <HAL_DMA_Abort+0x45c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d02c      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a62      	ldr	r2, [pc, #392]	; (8001f28 <HAL_DMA_Abort+0x460>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a61      	ldr	r2, [pc, #388]	; (8001f2c <HAL_DMA_Abort+0x464>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5f      	ldr	r2, [pc, #380]	; (8001f30 <HAL_DMA_Abort+0x468>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a5e      	ldr	r2, [pc, #376]	; (8001f34 <HAL_DMA_Abort+0x46c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <HAL_DMA_Abort+0x470>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5b      	ldr	r2, [pc, #364]	; (8001f3c <HAL_DMA_Abort+0x474>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a59      	ldr	r2, [pc, #356]	; (8001f40 <HAL_DMA_Abort+0x478>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_DMA_Abort+0x47c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_Abort+0x32a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a56      	ldr	r2, [pc, #344]	; (8001f48 <HAL_DMA_Abort+0x480>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <HAL_DMA_Abort+0x33c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_DMA_Abort+0x34c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e14:	e013      	b.n	8001e3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e16:	f7ff fcf7 	bl	8001808 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d90c      	bls.n	8001e3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e12d      	b.n	800209a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e5      	bne.n	8001e16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_DMA_Abort+0x444>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d04a      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_DMA_Abort+0x448>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d045      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <HAL_DMA_Abort+0x44c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d040      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <HAL_DMA_Abort+0x450>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d03b      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_DMA_Abort+0x454>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d036      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <HAL_DMA_Abort+0x458>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d031      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <HAL_DMA_Abort+0x45c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d02c      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <HAL_DMA_Abort+0x460>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d027      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_DMA_Abort+0x464>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d022      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_DMA_Abort+0x468>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01d      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_DMA_Abort+0x46c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d018      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_DMA_Abort+0x470>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_DMA_Abort+0x474>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00e      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_DMA_Abort+0x478>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_DMA_Abort+0x47c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_DMA_Abort+0x422>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_DMA_Abort+0x480>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA_Abort+0x426>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_DMA_Abort+0x428>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d02b      	beq.n	8001f4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	223f      	movs	r2, #63	; 0x3f
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e02a      	b.n	8001f62 <HAL_DMA_Abort+0x49a>
 8001f0c:	40020010 	.word	0x40020010
 8001f10:	40020028 	.word	0x40020028
 8001f14:	40020040 	.word	0x40020040
 8001f18:	40020058 	.word	0x40020058
 8001f1c:	40020070 	.word	0x40020070
 8001f20:	40020088 	.word	0x40020088
 8001f24:	400200a0 	.word	0x400200a0
 8001f28:	400200b8 	.word	0x400200b8
 8001f2c:	40020410 	.word	0x40020410
 8001f30:	40020428 	.word	0x40020428
 8001f34:	40020440 	.word	0x40020440
 8001f38:	40020458 	.word	0x40020458
 8001f3c:	40020470 	.word	0x40020470
 8001f40:	40020488 	.word	0x40020488
 8001f44:	400204a0 	.word	0x400204a0
 8001f48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_DMA_Abort+0x5dc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d072      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4d      	ldr	r2, [pc, #308]	; (80020a8 <HAL_DMA_Abort+0x5e0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d06d      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_DMA_Abort+0x5e4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d068      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_DMA_Abort+0x5e8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d063      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_DMA_Abort+0x5ec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d05e      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_DMA_Abort+0x5f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d059      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_DMA_Abort+0x5f4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d054      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a44      	ldr	r2, [pc, #272]	; (80020c0 <HAL_DMA_Abort+0x5f8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d04f      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HAL_DMA_Abort+0x5fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d04a      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a41      	ldr	r2, [pc, #260]	; (80020c8 <HAL_DMA_Abort+0x600>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d045      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <HAL_DMA_Abort+0x604>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d040      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3e      	ldr	r2, [pc, #248]	; (80020d0 <HAL_DMA_Abort+0x608>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d03b      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <HAL_DMA_Abort+0x60c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d036      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <HAL_DMA_Abort+0x610>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <HAL_DMA_Abort+0x614>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d02c      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a38      	ldr	r2, [pc, #224]	; (80020e0 <HAL_DMA_Abort+0x618>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d027      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <HAL_DMA_Abort+0x61c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <HAL_DMA_Abort+0x620>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01d      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_DMA_Abort+0x624>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d018      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_DMA_Abort+0x628>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_DMA_Abort+0x62c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00e      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <HAL_DMA_Abort+0x630>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_DMA_Abort+0x634>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_DMA_Abort+0x58a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2c      	ldr	r2, [pc, #176]	; (8002100 <HAL_DMA_Abort+0x638>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_DMA_Abort+0x58e>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_DMA_Abort+0x590>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002064:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800207c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002086:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40020028 	.word	0x40020028
 80020ac:	40020040 	.word	0x40020040
 80020b0:	40020058 	.word	0x40020058
 80020b4:	40020070 	.word	0x40020070
 80020b8:	40020088 	.word	0x40020088
 80020bc:	400200a0 	.word	0x400200a0
 80020c0:	400200b8 	.word	0x400200b8
 80020c4:	40020410 	.word	0x40020410
 80020c8:	40020428 	.word	0x40020428
 80020cc:	40020440 	.word	0x40020440
 80020d0:	40020458 	.word	0x40020458
 80020d4:	40020470 	.word	0x40020470
 80020d8:	40020488 	.word	0x40020488
 80020dc:	400204a0 	.word	0x400204a0
 80020e0:	400204b8 	.word	0x400204b8
 80020e4:	58025408 	.word	0x58025408
 80020e8:	5802541c 	.word	0x5802541c
 80020ec:	58025430 	.word	0x58025430
 80020f0:	58025444 	.word	0x58025444
 80020f4:	58025458 	.word	0x58025458
 80020f8:	5802546c 	.word	0x5802546c
 80020fc:	58025480 	.word	0x58025480
 8002100:	58025494 	.word	0x58025494

08002104 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e237      	b.n	8002586 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d004      	beq.n	800212c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e22c      	b.n	8002586 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a5c      	ldr	r2, [pc, #368]	; (80022a4 <HAL_DMA_Abort_IT+0x1a0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d04a      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5b      	ldr	r2, [pc, #364]	; (80022a8 <HAL_DMA_Abort_IT+0x1a4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d045      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a59      	ldr	r2, [pc, #356]	; (80022ac <HAL_DMA_Abort_IT+0x1a8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d040      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_DMA_Abort_IT+0x1ac>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d03b      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <HAL_DMA_Abort_IT+0x1b0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d036      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a55      	ldr	r2, [pc, #340]	; (80022b8 <HAL_DMA_Abort_IT+0x1b4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d031      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a53      	ldr	r2, [pc, #332]	; (80022bc <HAL_DMA_Abort_IT+0x1b8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02c      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_DMA_Abort_IT+0x1bc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d027      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a50      	ldr	r2, [pc, #320]	; (80022c4 <HAL_DMA_Abort_IT+0x1c0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d022      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a4f      	ldr	r2, [pc, #316]	; (80022c8 <HAL_DMA_Abort_IT+0x1c4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01d      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_DMA_Abort_IT+0x1c8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <HAL_DMA_Abort_IT+0x1cc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4a      	ldr	r2, [pc, #296]	; (80022d4 <HAL_DMA_Abort_IT+0x1d0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a49      	ldr	r2, [pc, #292]	; (80022d8 <HAL_DMA_Abort_IT+0x1d4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a47      	ldr	r2, [pc, #284]	; (80022dc <HAL_DMA_Abort_IT+0x1d8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_Abort_IT+0xc8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_DMA_Abort_IT+0x1dc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_DMA_Abort_IT+0xcc>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_Abort_IT+0xce>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8086 	beq.w	80022e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2204      	movs	r2, #4
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <HAL_DMA_Abort_IT+0x1a0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d04a      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_DMA_Abort_IT+0x1a4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d045      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_DMA_Abort_IT+0x1a8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d040      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_DMA_Abort_IT+0x1ac>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d03b      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_DMA_Abort_IT+0x1b0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d036      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_DMA_Abort_IT+0x1b4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d031      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a26      	ldr	r2, [pc, #152]	; (80022bc <HAL_DMA_Abort_IT+0x1b8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02c      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_DMA_Abort_IT+0x1bc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d027      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <HAL_DMA_Abort_IT+0x1c0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d022      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_DMA_Abort_IT+0x1c4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d01d      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_DMA_Abort_IT+0x1c8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d018      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_DMA_Abort_IT+0x1cc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d013      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_DMA_Abort_IT+0x1d0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00e      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_DMA_Abort_IT+0x1d4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <HAL_DMA_Abort_IT+0x1d8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_DMA_Abort_IT+0x17c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_DMA_Abort_IT+0x1dc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d108      	bne.n	8002292 <HAL_DMA_Abort_IT+0x18e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e178      	b.n	8002584 <HAL_DMA_Abort_IT+0x480>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e16f      	b.n	8002584 <HAL_DMA_Abort_IT+0x480>
 80022a4:	40020010 	.word	0x40020010
 80022a8:	40020028 	.word	0x40020028
 80022ac:	40020040 	.word	0x40020040
 80022b0:	40020058 	.word	0x40020058
 80022b4:	40020070 	.word	0x40020070
 80022b8:	40020088 	.word	0x40020088
 80022bc:	400200a0 	.word	0x400200a0
 80022c0:	400200b8 	.word	0x400200b8
 80022c4:	40020410 	.word	0x40020410
 80022c8:	40020428 	.word	0x40020428
 80022cc:	40020440 	.word	0x40020440
 80022d0:	40020458 	.word	0x40020458
 80022d4:	40020470 	.word	0x40020470
 80022d8:	40020488 	.word	0x40020488
 80022dc:	400204a0 	.word	0x400204a0
 80022e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020e 	bic.w	r2, r2, #14
 80022f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <HAL_DMA_Abort_IT+0x3a8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04a      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6b      	ldr	r2, [pc, #428]	; (80024b0 <HAL_DMA_Abort_IT+0x3ac>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d045      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_DMA_Abort_IT+0x3b0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d040      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a68      	ldr	r2, [pc, #416]	; (80024b8 <HAL_DMA_Abort_IT+0x3b4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d03b      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a66      	ldr	r2, [pc, #408]	; (80024bc <HAL_DMA_Abort_IT+0x3b8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d036      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a65      	ldr	r2, [pc, #404]	; (80024c0 <HAL_DMA_Abort_IT+0x3bc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d031      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <HAL_DMA_Abort_IT+0x3c0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02c      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a62      	ldr	r2, [pc, #392]	; (80024c8 <HAL_DMA_Abort_IT+0x3c4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d027      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a60      	ldr	r2, [pc, #384]	; (80024cc <HAL_DMA_Abort_IT+0x3c8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d022      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5f      	ldr	r2, [pc, #380]	; (80024d0 <HAL_DMA_Abort_IT+0x3cc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01d      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5d      	ldr	r2, [pc, #372]	; (80024d4 <HAL_DMA_Abort_IT+0x3d0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d018      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_DMA_Abort_IT+0x3d4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <HAL_DMA_Abort_IT+0x3d8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00e      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <HAL_DMA_Abort_IT+0x3dc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <HAL_DMA_Abort_IT+0x3e0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Abort_IT+0x290>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a56      	ldr	r2, [pc, #344]	; (80024e8 <HAL_DMA_Abort_IT+0x3e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <HAL_DMA_Abort_IT+0x2a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_DMA_Abort_IT+0x2b2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <HAL_DMA_Abort_IT+0x3a8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d072      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <HAL_DMA_Abort_IT+0x3ac>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d06d      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <HAL_DMA_Abort_IT+0x3b0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d068      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a37      	ldr	r2, [pc, #220]	; (80024b8 <HAL_DMA_Abort_IT+0x3b4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d063      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a36      	ldr	r2, [pc, #216]	; (80024bc <HAL_DMA_Abort_IT+0x3b8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d05e      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_DMA_Abort_IT+0x3bc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d059      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_DMA_Abort_IT+0x3c0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d054      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <HAL_DMA_Abort_IT+0x3c4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d04f      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_DMA_Abort_IT+0x3c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2e      	ldr	r2, [pc, #184]	; (80024d0 <HAL_DMA_Abort_IT+0x3cc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_DMA_Abort_IT+0x3d0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <HAL_DMA_Abort_IT+0x3d4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <HAL_DMA_Abort_IT+0x3d8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <HAL_DMA_Abort_IT+0x3dc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a27      	ldr	r2, [pc, #156]	; (80024e4 <HAL_DMA_Abort_IT+0x3e0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <HAL_DMA_Abort_IT+0x3e4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_DMA_Abort_IT+0x3e8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_DMA_Abort_IT+0x3ec>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <HAL_DMA_Abort_IT+0x3f0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_DMA_Abort_IT+0x3f4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_DMA_Abort_IT+0x3f8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <HAL_DMA_Abort_IT+0x3fc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <HAL_DMA_Abort_IT+0x400>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x3a2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <HAL_DMA_Abort_IT+0x404>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d132      	bne.n	800250c <HAL_DMA_Abort_IT+0x408>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e031      	b.n	800250e <HAL_DMA_Abort_IT+0x40a>
 80024aa:	bf00      	nop
 80024ac:	40020010 	.word	0x40020010
 80024b0:	40020028 	.word	0x40020028
 80024b4:	40020040 	.word	0x40020040
 80024b8:	40020058 	.word	0x40020058
 80024bc:	40020070 	.word	0x40020070
 80024c0:	40020088 	.word	0x40020088
 80024c4:	400200a0 	.word	0x400200a0
 80024c8:	400200b8 	.word	0x400200b8
 80024cc:	40020410 	.word	0x40020410
 80024d0:	40020428 	.word	0x40020428
 80024d4:	40020440 	.word	0x40020440
 80024d8:	40020458 	.word	0x40020458
 80024dc:	40020470 	.word	0x40020470
 80024e0:	40020488 	.word	0x40020488
 80024e4:	400204a0 	.word	0x400204a0
 80024e8:	400204b8 	.word	0x400204b8
 80024ec:	58025408 	.word	0x58025408
 80024f0:	5802541c 	.word	0x5802541c
 80024f4:	58025430 	.word	0x58025430
 80024f8:	58025444 	.word	0x58025444
 80024fc:	58025458 	.word	0x58025458
 8002500:	5802546c 	.word	0x5802546c
 8002504:	58025480 	.word	0x58025480
 8002508:	58025494 	.word	0x58025494
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d028      	beq.n	8002564 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002520:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002540:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002558:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002562:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop

08002590 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0cf      	b.n	8002742 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2223      	movs	r2, #35	; 0x23
 80025b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe fcd7 	bl	8000f68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_ETH_Init+0x1bc>)
 80025bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025c0:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_ETH_Init+0x1bc>)
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025ca:	4b60      	ldr	r3, [pc, #384]	; (800274c <HAL_ETH_Init+0x1bc>)
 80025cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7a1b      	ldrb	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff f94d 	bl	8001880 <HAL_SYSCFG_ETHInterfaceSelect>
 80025e6:	e003      	b.n	80025f0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80025e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80025ec:	f7ff f948 	bl	8001880 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80025f0:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_ETH_Init+0x1c0>)
 80025f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800260a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800260c:	f7ff f8fc 	bl	8001808 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002612:	e011      	b.n	8002638 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002614:	f7ff f8f8 	bl	8001808 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002622:	d909      	bls.n	8002638 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2204      	movs	r2, #4
 8002628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	22e0      	movs	r2, #224	; 0xe0
 8002630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e084      	b.n	8002742 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e4      	bne.n	8002614 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f886 	bl	800275c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002650:	f003 f85a 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8002654:	4603      	mov	r3, r0
 8002656:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <HAL_ETH_Init+0x1c4>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	0c9a      	lsrs	r2, r3, #18
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3a01      	subs	r2, #1
 8002664:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa71 	bl	8002b50 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002676:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800267a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800268a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	22e0      	movs	r2, #224	; 0xe0
 80026a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e049      	b.n	8002742 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_ETH_Init+0x1c8>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6952      	ldr	r2, [r2, #20]
 80026c2:	0051      	lsls	r1, r2, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ce:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fad9 	bl	8002c8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fb1f 	bl	8002d1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	3305      	adds	r3, #5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	021a      	lsls	r2, r3, #8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	3303      	adds	r3, #3
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	061a      	lsls	r2, r3, #24
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	3302      	adds	r3, #2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	3301      	adds	r3, #1
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800271c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800272a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800272c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2210      	movs	r2, #16
 800273c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	58024400 	.word	0x58024400
 8002750:	58000400 	.word	0x58000400
 8002754:	431bde83 	.word	0x431bde83
 8002758:	ffff8001 	.word	0xffff8001

0800275c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002774:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002776:	f002 ffc7 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 800277a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d908      	bls.n	8002796 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d804      	bhi.n	8002796 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e027      	b.n	80027e6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d908      	bls.n	80027b0 <HAL_ETH_SetMDIOClockRange+0x54>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d204      	bcs.n	80027b0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e01a      	b.n	80027e6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d303      	bcc.n	80027c0 <HAL_ETH_SetMDIOClockRange+0x64>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d911      	bls.n	80027e4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d908      	bls.n	80027da <HAL_ETH_SetMDIOClockRange+0x7e>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <HAL_ETH_SetMDIOClockRange+0xac>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d804      	bhi.n	80027da <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e005      	b.n	80027e6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e000      	b.n	80027e6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027e4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	01312cff 	.word	0x01312cff
 80027fc:	02160ebf 	.word	0x02160ebf
 8002800:	03938700 	.word	0x03938700
 8002804:	05f5e0ff 	.word	0x05f5e0ff
 8002808:	08f0d17f 	.word	0x08f0d17f

0800280c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800281e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7b1b      	ldrb	r3, [r3, #12]
 800282c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800282e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7b5b      	ldrb	r3, [r3, #13]
 8002834:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	7b9b      	ldrb	r3, [r3, #14]
 800283c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800283e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7bdb      	ldrb	r3, [r3, #15]
 8002844:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002846:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	7c12      	ldrb	r2, [r2, #16]
 800284c:	2a00      	cmp	r2, #0
 800284e:	d102      	bne.n	8002856 <ETH_SetMACConfig+0x4a>
 8002850:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002854:	e000      	b.n	8002858 <ETH_SetMACConfig+0x4c>
 8002856:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002858:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	7c52      	ldrb	r2, [r2, #17]
 800285e:	2a00      	cmp	r2, #0
 8002860:	d102      	bne.n	8002868 <ETH_SetMACConfig+0x5c>
 8002862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002866:	e000      	b.n	800286a <ETH_SetMACConfig+0x5e>
 8002868:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800286a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	7c9b      	ldrb	r3, [r3, #18]
 8002870:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002872:	431a      	orrs	r2, r3
               macconf->Speed |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002878:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800287e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	7f1b      	ldrb	r3, [r3, #28]
 8002884:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	7f5b      	ldrb	r3, [r3, #29]
 800288c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800288e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	7f92      	ldrb	r2, [r2, #30]
 8002894:	2a00      	cmp	r2, #0
 8002896:	d102      	bne.n	800289e <ETH_SetMACConfig+0x92>
 8002898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800289c:	e000      	b.n	80028a0 <ETH_SetMACConfig+0x94>
 800289e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80028a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	7fdb      	ldrb	r3, [r3, #31]
 80028a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80028a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d102      	bne.n	80028ba <ETH_SetMACConfig+0xae>
 80028b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b8:	e000      	b.n	80028bc <ETH_SetMACConfig+0xb0>
 80028ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80028c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80028cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <ETH_SetMACConfig+0x22c>)
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	430b      	orrs	r3, r1
 80028e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80028f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002900:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002902:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800290a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800290c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002914:	2a00      	cmp	r2, #0
 8002916:	d102      	bne.n	800291e <ETH_SetMACConfig+0x112>
 8002918:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800291c:	e000      	b.n	8002920 <ETH_SetMACConfig+0x114>
 800291e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002920:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <ETH_SetMACConfig+0x230>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	430b      	orrs	r3, r1
 800293c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002944:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <ETH_SetMACConfig+0x234>)
 8002956:	4013      	ands	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	430b      	orrs	r3, r1
 8002960:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002968:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800296e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002976:	2a00      	cmp	r2, #0
 8002978:	d101      	bne.n	800297e <ETH_SetMACConfig+0x172>
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	e000      	b.n	8002980 <ETH_SetMACConfig+0x174>
 800297e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002980:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002986:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002992:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002996:	4013      	ands	r3, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	430b      	orrs	r3, r1
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80029a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80029b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f023 0103 	bic.w	r1, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80029d6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	d101      	bne.n	80029fa <ETH_SetMACConfig+0x1ee>
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	e000      	b.n	80029fc <ETH_SetMACConfig+0x1f0>
 80029fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80029fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002a04:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a0e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a1c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	00048083 	.word	0x00048083
 8002a3c:	c0f88000 	.word	0xc0f88000
 8002a40:	fffffef0 	.word	0xfffffef0

08002a44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <ETH_SetDMAConfig+0xf8>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a6a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	791b      	ldrb	r3, [r3, #4]
 8002a70:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	7b1b      	ldrb	r3, [r3, #12]
 8002a7c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <ETH_SetDMAConfig+0xfc>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	68f9      	ldr	r1, [r7, #12]
 8002a96:	430b      	orrs	r3, r1
 8002a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a9c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7b5b      	ldrb	r3, [r3, #13]
 8002aa2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <ETH_SetDMAConfig+0x100>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	68f9      	ldr	r1, [r7, #12]
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	7d1b      	ldrb	r3, [r3, #20]
 8002ad4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ad6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	7f5b      	ldrb	r3, [r3, #29]
 8002adc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <ETH_SetDMAConfig+0x104>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002afe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	7f1b      	ldrb	r3, [r3, #28]
 8002b06:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b18:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <ETH_SetDMAConfig+0x108>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	68f9      	ldr	r1, [r7, #12]
 8002b26:	430b      	orrs	r3, r1
 8002b28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b2c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	ffff87fd 	.word	0xffff87fd
 8002b40:	ffff2ffe 	.word	0xffff2ffe
 8002b44:	fffec000 	.word	0xfffec000
 8002b48:	ffc0efef 	.word	0xffc0efef
 8002b4c:	7fc0ffff 	.word	0x7fc0ffff

08002b50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0a4      	sub	sp, #144	; 0x90
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b90:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002ba8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002bac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002be8:	2320      	movs	r3, #32
 8002bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002bfa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c04:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fde6 	bl	800280c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c70:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fee1 	bl	8002a44 <ETH_SetDMAConfig>
}
 8002c82:	bf00      	nop
 8002c84:	3790      	adds	r7, #144	; 0x90
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e01d      	b.n	8002cd4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68d9      	ldr	r1, [r3, #12]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	3206      	adds	r2, #6
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d9de      	bls.n	8002c98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2303      	movs	r3, #3
 8002cec:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e023      	b.n	8002d72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6919      	ldr	r1, [r3, #16]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	3212      	adds	r2, #18
 8002d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d9d8      	bls.n	8002d2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2303      	movs	r3, #3
 8002da2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b098      	sub	sp, #96	; 0x60
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002de0:	4a84      	ldr	r2, [pc, #528]	; (8002ff4 <HAL_FDCAN_Init+0x21c>)
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	4611      	mov	r1, r2
 8002de8:	224c      	movs	r2, #76	; 0x4c
 8002dea:	4618      	mov	r0, r3
 8002dec:	f006 fc0e 	bl	800960c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1c6      	b.n	8003188 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <HAL_FDCAN_Init+0x220>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d106      	bne.n	8002e12 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe f96c 	bl	8001104 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0210 	bic.w	r2, r2, #16
 8002e3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e3c:	f7fe fce4 	bl	8001808 <HAL_GetTick>
 8002e40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e42:	e014      	b.n	8002e6e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e44:	f7fe fce0 	bl	8001808 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d90d      	bls.n	8002e6e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e18c      	b.n	8003188 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d0e3      	beq.n	8002e44 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8c:	f7fe fcbc 	bl	8001808 <HAL_GetTick>
 8002e90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e92:	e014      	b.n	8002ebe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e94:	f7fe fcb8 	bl	8001808 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b0a      	cmp	r3, #10
 8002ea0:	d90d      	bls.n	8002ebe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e164      	b.n	8003188 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0e3      	beq.n	8002e94 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0202 	orr.w	r2, r2, #2
 8002eda:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7c1b      	ldrb	r3, [r3, #16]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	e007      	b.n	8002f06 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7c5b      	ldrb	r3, [r3, #17]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1c:	619a      	str	r2, [r3, #24]
 8002f1e:	e007      	b.n	8002f30 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7c9b      	ldrb	r3, [r3, #18]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f46:	619a      	str	r2, [r3, #24]
 8002f48:	e007      	b.n	8002f5a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f58:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002f7e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0210 	bic.w	r2, r2, #16
 8002f8e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0204 	orr.w	r2, r2, #4
 8002fa6:	619a      	str	r2, [r3, #24]
 8002fa8:	e030      	b.n	800300c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02c      	beq.n	800300c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d020      	beq.n	8002ffc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fc8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0210 	orr.w	r2, r2, #16
 8002fd8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d114      	bne.n	800300c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	619a      	str	r2, [r3, #24]
 8002ff2:	e00b      	b.n	800300c <HAL_FDCAN_Init+0x234>
 8002ff4:	08009edc 	.word	0x08009edc
 8002ff8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	3b01      	subs	r3, #1
 8003012:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	3b01      	subs	r3, #1
 800301a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800301c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003024:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	3b01      	subs	r3, #1
 800302e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003034:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003036:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003040:	d115      	bne.n	800306e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	3b01      	subs	r3, #1
 800304e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003050:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	3b01      	subs	r3, #1
 8003058:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800305a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	3b01      	subs	r3, #1
 8003064:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800306a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800306c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003094:	4413      	add	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d011      	beq.n	80030be <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80030a2:	f023 0107 	bic.w	r1, r3, #7
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	3360      	adds	r3, #96	; 0x60
 80030ae:	443b      	add	r3, r7
 80030b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d011      	beq.n	80030ea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030ce:	f023 0107 	bic.w	r1, r3, #7
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	3360      	adds	r3, #96	; 0x60
 80030da:	443b      	add	r3, r7
 80030dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030fa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3360      	adds	r3, #96	; 0x60
 8003106:	443b      	add	r3, r7
 8003108:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800310c:	011a      	lsls	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003128:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3360      	adds	r3, #96	; 0x60
 8003134:	443b      	add	r3, r7
 8003136:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a11      	ldr	r2, [pc, #68]	; (8003190 <HAL_FDCAN_Init+0x3b8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d107      	bne.n	8003160 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f022 0203 	bic.w	r2, r2, #3
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fddb 	bl	8003d34 <FDCAN_CalcultateRamBlockAddresses>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003184:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003188:	4618      	mov	r0, r3
 800318a:	3760      	adds	r7, #96	; 0x60
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	4000a000 	.word	0x4000a000

08003194 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031a4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <HAL_FDCAN_ConfigFilter+0x1e>
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d157      	bne.n	8003262 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d12b      	bne.n	8003212 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b07      	cmp	r3, #7
 80031c0:	d10d      	bne.n	80031de <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80031ce:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80031d4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80031d6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e00e      	b.n	80031fc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031ea:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80031f2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e025      	b.n	800325e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	075a      	lsls	r2, r3, #29
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b07      	cmp	r3, #7
 8003226:	d103      	bne.n	8003230 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e006      	b.n	800323e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	079a      	lsls	r2, r3, #30
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3304      	adds	r3, #4
 8003256:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e008      	b.n	8003274 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003268:	f043 0202 	orr.w	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d111      	bne.n	80032b8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e008      	b.n	80032ca <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
  }
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d141      	bne.n	8003372 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032f6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e038      	b.n	8003384 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003328:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e026      	b.n	8003384 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800333e:	0c1b      	lsrs	r3, r3, #16
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fe77 	bl	8004040 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003362:	2201      	movs	r2, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e008      	b.n	8003384 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003378:	f043 0208 	orr.w	r2, r3, #8
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800338c:	b480      	push	{r7}
 800338e:	b08b      	sub	sp, #44	; 0x2c
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	f040 814b 	bne.w	8003644 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d14d      	bne.n	8003450 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e13e      	b.n	8003656 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e12c      	b.n	8003656 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10b      	bne.n	8003426 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003416:	0fdb      	lsrs	r3, r3, #31
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003420:	d101      	bne.n	8003426 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003422:	2301      	movs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	69f9      	ldr	r1, [r7, #28]
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	e069      	b.n	8003524 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b41      	cmp	r3, #65	; 0x41
 8003454:	d14d      	bne.n	80034f2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800345e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0ed      	b.n	8003656 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0db      	b.n	8003656 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034a6:	0e1b      	lsrs	r3, r3, #24
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10b      	bne.n	80034c8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034b8:	0fdb      	lsrs	r3, r3, #31
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c2:	d101      	bne.n	80034c8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80034c4:	2301      	movs	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	69f9      	ldr	r1, [r7, #28]
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e018      	b.n	8003524 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d309      	bcc.n	8003510 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0a2      	b.n	8003656 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0c9b      	lsrs	r3, r3, #18
 800353e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e005      	b.n	8003554 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	3304      	adds	r3, #4
 8003570:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	0fda      	lsrs	r2, r3, #31
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	3304      	adds	r3, #4
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	e00a      	b.n	80035de <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	441a      	add	r2, r3
 80035ce:	6839      	ldr	r1, [r7, #0]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	440b      	add	r3, r1
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	3301      	adds	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	461a      	mov	r2, r3
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d3eb      	bcc.n	80035c8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d105      	bne.n	8003602 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003600:	e01e      	b.n	8003640 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b41      	cmp	r3, #65	; 0x41
 8003606:	d105      	bne.n	8003614 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003612:	e015      	b.n	8003640 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b1f      	cmp	r3, #31
 8003618:	d808      	bhi.n	800362c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800362a:	e009      	b.n	8003640 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 021f 	and.w	r2, r3, #31
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e008      	b.n	8003656 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364a:	f043 0208 	orr.w	r2, r3, #8
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	372c      	adds	r7, #44	; 0x2c
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	08009f38 	.word	0x08009f38

08003668 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800367a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d002      	beq.n	8003688 <HAL_FDCAN_ActivateNotification+0x20>
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d155      	bne.n	8003734 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80036a6:	e014      	b.n	80036d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d108      	bne.n	80036ca <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0202 	orr.w	r2, r2, #2
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c8:	e003      	b.n	80036d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2203      	movs	r2, #3
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	430a      	orrs	r2, r1
 800370a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_FDCAN_ActivateNotification+0xec>)
 8003718:	4013      	ands	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	430b      	orrs	r3, r1
 8003720:	6553      	str	r3, [r2, #84]	; 0x54
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	0f9b      	lsrs	r3, r3, #30
 800372a:	490b      	ldr	r1, [pc, #44]	; (8003758 <HAL_FDCAN_ActivateNotification+0xf0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e008      	b.n	8003746 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	3fcfffff 	.word	0x3fcfffff
 8003758:	4000a800 	.word	0x4000a800

0800375c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b096      	sub	sp, #88	; 0x58
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003764:	4b95      	ldr	r3, [pc, #596]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	079b      	lsls	r3, r3, #30
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800376c:	4b93      	ldr	r3, [pc, #588]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	079b      	lsls	r3, r3, #30
 8003772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003774:	4013      	ands	r3, r2
 8003776:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003782:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800378c:	4013      	ands	r3, r2
 800378e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037a4:	4013      	ands	r3, r2
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037bc:	4013      	ands	r3, r2
 80037be:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d4:	4013      	ands	r3, r2
 80037d6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ec:	4013      	ands	r3, r2
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00f      	beq.n	800382a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381c:	651a      	str	r2, [r3, #80]	; 0x50
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa39 	bl	8003c9c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01c      	beq.n	800386e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003852:	4013      	ands	r3, r2
 8003854:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385e:	651a      	str	r2, [r3, #80]	; 0x50
 8003860:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003866:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f9ee 	bl	8003c4a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800386e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00d      	beq.n	8003890 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800387a:	4b51      	ldr	r3, [pc, #324]	; (80039c0 <HAL_FDCAN_IRQHandler+0x264>)
 800387c:	400b      	ands	r3, r1
 800387e:	6513      	str	r3, [r2, #80]	; 0x50
 8003880:	4a4e      	ldr	r2, [pc, #312]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003884:	0f9b      	lsrs	r3, r3, #30
 8003886:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9b2 	bl	8003bf4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800389c:	4b48      	ldr	r3, [pc, #288]	; (80039c0 <HAL_FDCAN_IRQHandler+0x264>)
 800389e:	400b      	ands	r3, r1
 80038a0:	6513      	str	r3, [r2, #80]	; 0x50
 80038a2:	4a46      	ldr	r2, [pc, #280]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 80038a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a6:	0f9b      	lsrs	r3, r3, #30
 80038a8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80038aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f9ac 	bl	8003c0a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80038b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038be:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_FDCAN_IRQHandler+0x264>)
 80038c0:	400b      	ands	r3, r1
 80038c2:	6513      	str	r3, [r2, #80]	; 0x50
 80038c4:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	0f9b      	lsrs	r3, r3, #30
 80038ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80038cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fc fed4 	bl	800067c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80038d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038e0:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <HAL_FDCAN_IRQHandler+0x264>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	6513      	str	r3, [r2, #80]	; 0x50
 80038e6:	4a35      	ldr	r2, [pc, #212]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	0f9b      	lsrs	r3, r3, #30
 80038ec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80038ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fc feeb 	bl	80006cc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00f      	beq.n	8003920 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003912:	651a      	str	r2, [r3, #80]	; 0x50
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f980 	bl	8003c20 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01c      	beq.n	8003964 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003930:	2b00      	cmp	r3, #0
 8003932:	d017      	beq.n	8003964 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003948:	4013      	ands	r3, r2
 800394a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003954:	651a      	str	r2, [r3, #80]	; 0x50
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003958:	2200      	movs	r2, #0
 800395a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800395c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f968 	bl	8003c34 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003980:	651a      	str	r2, [r3, #80]	; 0x50
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f969 	bl	8003c60 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039aa:	651a      	str	r2, [r3, #80]	; 0x50
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_FDCAN_IRQHandler+0x260>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f95e 	bl	8003c74 <HAL_FDCAN_TimestampWraparoundCallback>
 80039b8:	e004      	b.n	80039c4 <HAL_FDCAN_IRQHandler+0x268>
 80039ba:	bf00      	nop
 80039bc:	4000a800 	.word	0x4000a800
 80039c0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00f      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039e0:	651a      	str	r2, [r3, #80]	; 0x50
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_FDCAN_IRQHandler+0x48c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f94d 	bl	8003c88 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d014      	beq.n	8003a22 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00f      	beq.n	8003a22 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a0c:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_FDCAN_IRQHandler+0x48c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a2e:	4b6f      	ldr	r3, [pc, #444]	; (8003bec <HAL_FDCAN_IRQHandler+0x490>)
 8003a30:	400b      	ands	r3, r1
 8003a32:	6513      	str	r3, [r2, #80]	; 0x50
 8003a34:	4a6c      	ldr	r2, [pc, #432]	; (8003be8 <HAL_FDCAN_IRQHandler+0x48c>)
 8003a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a38:	0f9b      	lsrs	r3, r3, #30
 8003a3a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f940 	bl	8003cc4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a50:	4b66      	ldr	r3, [pc, #408]	; (8003bec <HAL_FDCAN_IRQHandler+0x490>)
 8003a52:	400b      	ands	r3, r1
 8003a54:	6513      	str	r3, [r2, #80]	; 0x50
 8003a56:	4a64      	ldr	r2, [pc, #400]	; (8003be8 <HAL_FDCAN_IRQHandler+0x48c>)
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	0f9b      	lsrs	r3, r3, #30
 8003a5c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5f      	ldr	r2, [pc, #380]	; (8003bf0 <HAL_FDCAN_IRQHandler+0x494>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	f040 80aa 	bne.w	8003bce <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80a2 	beq.w	8003bce <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	4013      	ands	r3, r2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003adc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8003af4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8d9 	bl	8003cda <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b34:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8d9 	bl	8003cf0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d019      	beq.n	8003b7c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b68:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8c5 	bl	8003d06 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8c6 	bl	8003d1e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00b      	beq.n	8003bb0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f869 	bl	8003cb0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003bde:	bf00      	nop
 8003be0:	3758      	adds	r7, #88	; 0x58
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	4000a800 	.word	0x4000a800
 8003bec:	3fcfffff 	.word	0x3fcfffff
 8003bf0:	4000a000 	.word	0x4000a000

08003bf4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d4a:	4ba7      	ldr	r3, [pc, #668]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0091      	lsls	r1, r2, #2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	430b      	orrs	r3, r1
 8003d58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d64:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	041a      	lsls	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d8a:	4b97      	ldr	r3, [pc, #604]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	0091      	lsls	r1, r2, #2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	430b      	orrs	r3, r1
 8003d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003dcc:	4b86      	ldr	r3, [pc, #536]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	0091      	lsls	r1, r2, #2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003de6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	041a      	lsls	r2, r3, #16
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4413      	add	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e14:	4b74      	ldr	r3, [pc, #464]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	0091      	lsls	r1, r2, #2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e2e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	041a      	lsls	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4413      	add	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e5c:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	0091      	lsls	r1, r2, #2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003e88:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	0091      	lsls	r1, r2, #2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ea2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	041a      	lsls	r2, r3, #16
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0091      	lsls	r1, r2, #2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ee4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	041a      	lsls	r2, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f00:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	061a      	lsls	r2, r3, #24
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f18:	4b34      	ldr	r3, [pc, #208]	; (8003fec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	441a      	add	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d915      	bls.n	8004010 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003fe4:	e006      	b.n	8003ff4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003fe6:	bf00      	nop
 8003fe8:	ffff0003 	.word	0xffff0003
 8003fec:	10002b00 	.word	0x10002b00
 8003ff0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2203      	movs	r2, #3
 8004008:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e010      	b.n	8004032 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e005      	b.n	8004024 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3304      	adds	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3f3      	bcc.n	8004018 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop

08004040 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800405e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004066:	4313      	orrs	r3, r2
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e00a      	b.n	8004082 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004074:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800407a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800407c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004080:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800408c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004092:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004098:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3304      	adds	r3, #4
 80040c2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3304      	adds	r3, #4
 80040ce:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e020      	b.n	8004118 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	3303      	adds	r3, #3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3302      	adds	r3, #2
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	440b      	add	r3, r1
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80040ee:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	440b      	add	r3, r1
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80040fc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	440a      	add	r2, r1
 8004104:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004106:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	3304      	adds	r3, #4
 8004110:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3304      	adds	r3, #4
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	4a06      	ldr	r2, [pc, #24]	; (8004138 <FDCAN_CopyMessageToRAM+0xf8>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	461a      	mov	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4293      	cmp	r3, r2
 8004128:	d3d5      	bcc.n	80040d6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	3724      	adds	r7, #36	; 0x24
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	08009f38 	.word	0x08009f38

0800413c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800414a:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_GPIO_Init+0x234>)
 800414c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800414e:	e194      	b.n	800447a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2101      	movs	r1, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8186 	beq.w	8004474 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d005      	beq.n	8004180 <HAL_GPIO_Init+0x44>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d130      	bne.n	80041e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041b6:	2201      	movs	r2, #1
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	f003 0201 	and.w	r2, r3, #1
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d017      	beq.n	800421e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d123      	bne.n	8004272 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	08da      	lsrs	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3208      	adds	r2, #8
 8004232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	220f      	movs	r2, #15
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	08da      	lsrs	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3208      	adds	r2, #8
 800426c:	69b9      	ldr	r1, [r7, #24]
 800426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0203 	and.w	r2, r3, #3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80e0 	beq.w	8004474 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <HAL_GPIO_Init+0x238>)
 80042b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ba:	4a2e      	ldr	r2, [pc, #184]	; (8004374 <HAL_GPIO_Init+0x238>)
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <HAL_GPIO_Init+0x238>)
 80042c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042d2:	4a29      	ldr	r2, [pc, #164]	; (8004378 <HAL_GPIO_Init+0x23c>)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	3302      	adds	r3, #2
 80042da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	220f      	movs	r2, #15
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a20      	ldr	r2, [pc, #128]	; (800437c <HAL_GPIO_Init+0x240>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d052      	beq.n	80043a4 <HAL_GPIO_Init+0x268>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_GPIO_Init+0x244>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d031      	beq.n	800436a <HAL_GPIO_Init+0x22e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_GPIO_Init+0x248>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d02b      	beq.n	8004366 <HAL_GPIO_Init+0x22a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_GPIO_Init+0x24c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d025      	beq.n	8004362 <HAL_GPIO_Init+0x226>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_GPIO_Init+0x250>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01f      	beq.n	800435e <HAL_GPIO_Init+0x222>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_GPIO_Init+0x254>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d019      	beq.n	800435a <HAL_GPIO_Init+0x21e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_GPIO_Init+0x258>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_GPIO_Init+0x21a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_GPIO_Init+0x25c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00d      	beq.n	8004352 <HAL_GPIO_Init+0x216>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_GPIO_Init+0x260>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <HAL_GPIO_Init+0x212>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <HAL_GPIO_Init+0x264>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_GPIO_Init+0x20e>
 8004346:	2309      	movs	r3, #9
 8004348:	e02d      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 800434a:	230a      	movs	r3, #10
 800434c:	e02b      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 800434e:	2308      	movs	r3, #8
 8004350:	e029      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 8004352:	2307      	movs	r3, #7
 8004354:	e027      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 8004356:	2306      	movs	r3, #6
 8004358:	e025      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 800435a:	2305      	movs	r3, #5
 800435c:	e023      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 800435e:	2304      	movs	r3, #4
 8004360:	e021      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 8004362:	2303      	movs	r3, #3
 8004364:	e01f      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 8004366:	2302      	movs	r3, #2
 8004368:	e01d      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 800436a:	2301      	movs	r3, #1
 800436c:	e01b      	b.n	80043a6 <HAL_GPIO_Init+0x26a>
 800436e:	bf00      	nop
 8004370:	58000080 	.word	0x58000080
 8004374:	58024400 	.word	0x58024400
 8004378:	58000400 	.word	0x58000400
 800437c:	58020000 	.word	0x58020000
 8004380:	58020400 	.word	0x58020400
 8004384:	58020800 	.word	0x58020800
 8004388:	58020c00 	.word	0x58020c00
 800438c:	58021000 	.word	0x58021000
 8004390:	58021400 	.word	0x58021400
 8004394:	58021800 	.word	0x58021800
 8004398:	58021c00 	.word	0x58021c00
 800439c:	58022000 	.word	0x58022000
 80043a0:	58022400 	.word	0x58022400
 80043a4:	2300      	movs	r3, #0
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	f002 0203 	and.w	r2, r2, #3
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	4093      	lsls	r3, r2
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b6:	4938      	ldr	r1, [pc, #224]	; (8004498 <HAL_GPIO_Init+0x35c>)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f ae63 	bne.w	8004150 <HAL_GPIO_Init+0x14>
  }
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	3724      	adds	r7, #36	; 0x24
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	58000400 	.word	0x58000400

0800449c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	807b      	strh	r3, [r7, #2]
 80044a8:	4613      	mov	r3, r2
 80044aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ac:	787b      	ldrb	r3, [r7, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044b8:	e003      	b.n	80044c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044ba:	887b      	ldrh	r3, [r7, #2]
 80044bc:	041a      	lsls	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d0:	b08f      	sub	sp, #60	; 0x3c
 80044d2:	af0a      	add	r7, sp, #40	; 0x28
 80044d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e116      	b.n	800470e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fc ff52 	bl	80013a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2203      	movs	r2, #3
 8004504:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d102      	bne.n	800451a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 fd84 	bl	800902c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	687e      	ldr	r6, [r7, #4]
 800452c:	466d      	mov	r5, sp
 800452e:	f106 0410 	add.w	r4, r6, #16
 8004532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800453e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004542:	1d33      	adds	r3, r6, #4
 8004544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004546:	6838      	ldr	r0, [r7, #0]
 8004548:	f004 fd02 	bl	8008f50 <USB_CoreInit>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0d7      	b.n	800470e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2100      	movs	r1, #0
 8004564:	4618      	mov	r0, r3
 8004566:	f004 fd72 	bl	800904e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]
 800456e:	e04a      	b.n	8004606 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004570:	7bfa      	ldrb	r2, [r7, #15]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	333d      	adds	r3, #61	; 0x3d
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	333c      	adds	r3, #60	; 0x3c
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	b298      	uxth	r0, r3
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3356      	adds	r3, #86	; 0x56
 80045ac:	4602      	mov	r2, r0
 80045ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3340      	adds	r3, #64	; 0x40
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3344      	adds	r3, #68	; 0x44
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3348      	adds	r3, #72	; 0x48
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	334c      	adds	r3, #76	; 0x4c
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	3301      	adds	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d3af      	bcc.n	8004570 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e044      	b.n	80046a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004616:	7bfa      	ldrb	r2, [r7, #15]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800463e:	7bfa      	ldrb	r2, [r7, #15]
 8004640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	3301      	adds	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d3b5      	bcc.n	8004616 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	687e      	ldr	r6, [r7, #4]
 80046b2:	466d      	mov	r5, sp
 80046b4:	f106 0410 	add.w	r4, r6, #16
 80046b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80046c8:	1d33      	adds	r3, r6, #4
 80046ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f004 fd0b 	bl	80090e8 <USB_DevInit>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e014      	b.n	800470e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d102      	bne.n	8004702 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f80b 	bl	8004718 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f004 fec9 	bl	800949e <USB_DevDisconnect>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_PCDEx_ActivateLPM+0x44>)
 8004748:	4313      	orrs	r3, r2
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	10000003 	.word	0x10000003

08004760 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004768:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_PWREx_ConfigSupply+0x70>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d00a      	beq.n	800478a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004774:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	429a      	cmp	r2, r3
 8004780:	d001      	beq.n	8004786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e01f      	b.n	80047c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e01d      	b.n	80047c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_PWREx_ConfigSupply+0x70>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	490f      	ldr	r1, [pc, #60]	; (80047d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4313      	orrs	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800479a:	f7fd f835 	bl	8001808 <HAL_GetTick>
 800479e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047a0:	e009      	b.n	80047b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047a2:	f7fd f831 	bl	8001808 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b0:	d901      	bls.n	80047b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e007      	b.n	80047c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_PWREx_ConfigSupply+0x70>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d1ee      	bne.n	80047a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	58024800 	.word	0x58024800

080047d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e2:	60d3      	str	r3, [r2, #12]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	58024800 	.word	0x58024800

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08c      	sub	sp, #48	; 0x30
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f000 bc48 	b.w	8005098 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8088 	beq.w	8004926 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004816:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004820:	4b96      	ldr	r3, [pc, #600]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	2b10      	cmp	r3, #16
 800482a:	d007      	beq.n	800483c <HAL_RCC_OscConfig+0x48>
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2b18      	cmp	r3, #24
 8004830:	d111      	bne.n	8004856 <HAL_RCC_OscConfig+0x62>
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d10c      	bne.n	8004856 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	4b8f      	ldr	r3, [pc, #572]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d06d      	beq.n	8004924 <HAL_RCC_OscConfig+0x130>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d169      	bne.n	8004924 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f000 bc21 	b.w	8005098 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x7a>
 8004860:	4b86      	ldr	r3, [pc, #536]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a85      	ldr	r2, [pc, #532]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e02e      	b.n	80048cc <HAL_RCC_OscConfig+0xd8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x9c>
 8004876:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 800487c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b7e      	ldr	r3, [pc, #504]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a7d      	ldr	r2, [pc, #500]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xd8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0xc0>
 800489a:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a77      	ldr	r2, [pc, #476]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b75      	ldr	r3, [pc, #468]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a74      	ldr	r2, [pc, #464]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xd8>
 80048b4:	4b71      	ldr	r3, [pc, #452]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a70      	ldr	r2, [pc, #448]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b6e      	ldr	r3, [pc, #440]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6d      	ldr	r2, [pc, #436]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fc ff98 	bl	8001808 <HAL_GetTick>
 80048d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fc ff94 	bl	8001808 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e3d4      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048ee:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xe8>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fc ff84 	bl	8001808 <HAL_GetTick>
 8004900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fc ff80 	bl	8001808 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e3c0      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x110>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80ca 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004934:	4b51      	ldr	r3, [pc, #324]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800493c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_RCC_OscConfig+0x166>
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b18      	cmp	r3, #24
 800494e:	d156      	bne.n	80049fe <HAL_RCC_OscConfig+0x20a>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d151      	bne.n	80049fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800495a:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_RCC_OscConfig+0x17e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e392      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004972:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0219 	bic.w	r2, r3, #25
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	493f      	ldr	r1, [pc, #252]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fc ff40 	bl	8001808 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498c:	f7fc ff3c 	bl	8001808 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e37c      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049aa:	f7fc ff5d 	bl	8001868 <HAL_GetREVID>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d817      	bhi.n	80049e8 <HAL_RCC_OscConfig+0x1f4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d108      	bne.n	80049d2 <HAL_RCC_OscConfig+0x1de>
 80049c0:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80049c8:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d0:	e07a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	031b      	lsls	r3, r3, #12
 80049e0:	4926      	ldr	r1, [pc, #152]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e6:	e06f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	061b      	lsls	r3, r3, #24
 80049f6:	4921      	ldr	r1, [pc, #132]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	e064      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d047      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 0219 	bic.w	r2, r3, #25
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	491a      	ldr	r1, [pc, #104]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fc fef6 	bl	8001808 <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fc fef2 	bl	8001808 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e332      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3e:	f7fc ff13 	bl	8001868 <HAL_GetREVID>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d819      	bhi.n	8004a80 <HAL_RCC_OscConfig+0x28c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d108      	bne.n	8004a66 <HAL_RCC_OscConfig+0x272>
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a5c:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	6053      	str	r3, [r2, #4]
 8004a64:	e030      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	031b      	lsls	r3, r3, #12
 8004a74:	4901      	ldr	r1, [pc, #4]	; (8004a7c <HAL_RCC_OscConfig+0x288>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
 8004a7a:	e025      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	4b9a      	ldr	r3, [pc, #616]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	4997      	ldr	r1, [pc, #604]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
 8004a94:	e018      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a96:	4b95      	ldr	r3, [pc, #596]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a94      	ldr	r2, [pc, #592]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fc feb1 	bl	8001808 <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aaa:	f7fc fead 	bl	8001808 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e2ed      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004abc:	4b8b      	ldr	r3, [pc, #556]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80a9 	beq.w	8004c28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad6:	4b85      	ldr	r3, [pc, #532]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ade:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ae0:	4b82      	ldr	r3, [pc, #520]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d007      	beq.n	8004afc <HAL_RCC_OscConfig+0x308>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b18      	cmp	r3, #24
 8004af0:	d13a      	bne.n	8004b68 <HAL_RCC_OscConfig+0x374>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d135      	bne.n	8004b68 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004afc:	4b7b      	ldr	r3, [pc, #492]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_OscConfig+0x320>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e2c1      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b14:	f7fc fea8 	bl	8001868 <HAL_GetREVID>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d817      	bhi.n	8004b52 <HAL_RCC_OscConfig+0x35e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d108      	bne.n	8004b3c <HAL_RCC_OscConfig+0x348>
 8004b2a:	4b70      	ldr	r3, [pc, #448]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b32:	4a6e      	ldr	r2, [pc, #440]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b38:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b3a:	e075      	b.n	8004c28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b3c:	4b6b      	ldr	r3, [pc, #428]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	069b      	lsls	r3, r3, #26
 8004b4a:	4968      	ldr	r1, [pc, #416]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b50:	e06a      	b.n	8004c28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b52:	4b66      	ldr	r3, [pc, #408]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	4962      	ldr	r1, [pc, #392]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b66:	e05f      	b.n	8004c28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d042      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b70:	4b5e      	ldr	r3, [pc, #376]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a5d      	ldr	r2, [pc, #372]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fc fe44 	bl	8001808 <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b84:	f7fc fe40 	bl	8001808 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e280      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b96:	4b55      	ldr	r3, [pc, #340]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ba2:	f7fc fe61 	bl	8001868 <HAL_GetREVID>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d817      	bhi.n	8004be0 <HAL_RCC_OscConfig+0x3ec>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d108      	bne.n	8004bca <HAL_RCC_OscConfig+0x3d6>
 8004bb8:	4b4c      	ldr	r3, [pc, #304]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bc0:	4a4a      	ldr	r2, [pc, #296]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc6:	6053      	str	r3, [r2, #4]
 8004bc8:	e02e      	b.n	8004c28 <HAL_RCC_OscConfig+0x434>
 8004bca:	4b48      	ldr	r3, [pc, #288]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	069b      	lsls	r3, r3, #26
 8004bd8:	4944      	ldr	r1, [pc, #272]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	e023      	b.n	8004c28 <HAL_RCC_OscConfig+0x434>
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	493f      	ldr	r1, [pc, #252]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60cb      	str	r3, [r1, #12]
 8004bf4:	e018      	b.n	8004c28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3c      	ldr	r2, [pc, #240]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fc fe01 	bl	8001808 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c0a:	f7fc fdfd 	bl	8001808 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e23d      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c1c:	4b33      	ldr	r3, [pc, #204]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d036      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d019      	beq.n	8004c70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fc fdde 	bl	8001808 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fc fdda 	bl	8001808 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e21a      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c62:	4b22      	ldr	r3, [pc, #136]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x45c>
 8004c6e:	e018      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c74:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fc fdc4 	bl	8001808 <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fc fdc0 	bl	8001808 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e200      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d039      	beq.n	8004d22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d01c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cc2:	f7fc fda1 	bl	8001808 <HAL_GetTick>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cca:	f7fc fd9d 	bl	8001808 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e1dd      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x4d6>
 8004ce8:	e01b      	b.n	8004d22 <HAL_RCC_OscConfig+0x52e>
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cf0:	4b9b      	ldr	r3, [pc, #620]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a9a      	ldr	r2, [pc, #616]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cfc:	f7fc fd84 	bl	8001808 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d04:	f7fc fd80 	bl	8001808 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1c0      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d16:	4b92      	ldr	r3, [pc, #584]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8081 	beq.w	8004e32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d30:	4b8c      	ldr	r3, [pc, #560]	; (8004f64 <HAL_RCC_OscConfig+0x770>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a8b      	ldr	r2, [pc, #556]	; (8004f64 <HAL_RCC_OscConfig+0x770>)
 8004d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d3c:	f7fc fd64 	bl	8001808 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d44:	f7fc fd60 	bl	8001808 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e1a0      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d56:	4b83      	ldr	r3, [pc, #524]	; (8004f64 <HAL_RCC_OscConfig+0x770>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d106      	bne.n	8004d78 <HAL_RCC_OscConfig+0x584>
 8004d6a:	4b7d      	ldr	r3, [pc, #500]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	4a7c      	ldr	r2, [pc, #496]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	6713      	str	r3, [r2, #112]	; 0x70
 8004d76:	e02d      	b.n	8004dd4 <HAL_RCC_OscConfig+0x5e0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10c      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5a6>
 8004d80:	4b77      	ldr	r3, [pc, #476]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	4a76      	ldr	r2, [pc, #472]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8c:	4b74      	ldr	r3, [pc, #464]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a73      	ldr	r2, [pc, #460]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004d92:	f023 0304 	bic.w	r3, r3, #4
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e01c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x5e0>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x5c8>
 8004da2:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a6e      	ldr	r2, [pc, #440]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	4b6c      	ldr	r3, [pc, #432]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a6b      	ldr	r2, [pc, #428]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x5e0>
 8004dbc:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a67      	ldr	r2, [pc, #412]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b65      	ldr	r3, [pc, #404]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a64      	ldr	r2, [pc, #400]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fc fd14 	bl	8001808 <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fc fd10 	bl	8001808 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e14e      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dfa:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ee      	beq.n	8004de4 <HAL_RCC_OscConfig+0x5f0>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fc fcfe 	bl	8001808 <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fc fcfa 	bl	8001808 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e138      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e26:	4b4e      	ldr	r3, [pc, #312]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 812d 	beq.w	8005096 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e3c:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e44:	2b18      	cmp	r3, #24
 8004e46:	f000 80bd 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	f040 809e 	bne.w	8004f90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e54:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fc fcd2 	bl	8001808 <HAL_GetTick>
 8004e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fc fcce 	bl	8001808 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e10e      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e86:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8a:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <HAL_RCC_OscConfig+0x774>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	4931      	ldr	r1, [pc, #196]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ed0:	4923      	ldr	r1, [pc, #140]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ed6:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ee2:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee6:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004eee:	00d2      	lsls	r2, r2, #3
 8004ef0:	491b      	ldr	r1, [pc, #108]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f023 020c 	bic.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4917      	ldr	r1, [pc, #92]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f08:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f023 0202 	bic.w	r2, r3, #2
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	4912      	ldr	r1, [pc, #72]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4a10      	ldr	r2, [pc, #64]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f3e:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f44:	f043 0301 	orr.w	r3, r3, #1
 8004f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_OscConfig+0x76c>)
 8004f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fc fc57 	bl	8001808 <HAL_GetTick>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f5c:	e011      	b.n	8004f82 <HAL_RCC_OscConfig+0x78e>
 8004f5e:	bf00      	nop
 8004f60:	58024400 	.word	0x58024400
 8004f64:	58024800 	.word	0x58024800
 8004f68:	fffffc0c 	.word	0xfffffc0c
 8004f6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f70:	f7fc fc4a 	bl	8001808 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e08a      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f82:	4b47      	ldr	r3, [pc, #284]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x77c>
 8004f8e:	e082      	b.n	8005096 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f90:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a42      	ldr	r2, [pc, #264]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8004f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fc fc34 	bl	8001808 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fc fc30 	bl	8001808 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e070      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x7b0>
 8004fc2:	e068      	b.n	8005096 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fc4:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fca:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d031      	beq.n	800503c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d12a      	bne.n	800503c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d122      	bne.n	800503c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d11a      	bne.n	800503c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	0a5b      	lsrs	r3, r3, #9
 800500a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d111      	bne.n	800503c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d108      	bne.n	800503c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	0e1b      	lsrs	r3, r3, #24
 800502e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e02b      	b.n	8005098 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	08db      	lsrs	r3, r3, #3
 8005046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800504a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	d01f      	beq.n	8005096 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005062:	f7fc fbd1 	bl	8001808 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005068:	bf00      	nop
 800506a:	f7fc fbcd 	bl	8001808 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	4293      	cmp	r3, r2
 8005074:	d0f9      	beq.n	800506a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8005078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <HAL_RCC_OscConfig+0x8b0>)
 800507c:	4013      	ands	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005082:	00d2      	lsls	r2, r2, #3
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8005086:	4313      	orrs	r3, r2
 8005088:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_RCC_OscConfig+0x8ac>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3730      	adds	r7, #48	; 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	58024400 	.word	0x58024400
 80050a4:	ffff0007 	.word	0xffff0007

080050a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e19c      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050bc:	4b8a      	ldr	r3, [pc, #552]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d910      	bls.n	80050ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b87      	ldr	r3, [pc, #540]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 020f 	bic.w	r2, r3, #15
 80050d2:	4985      	ldr	r1, [pc, #532]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e184      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	4b7b      	ldr	r3, [pc, #492]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005104:	429a      	cmp	r2, r3
 8005106:	d908      	bls.n	800511a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005108:	4b78      	ldr	r3, [pc, #480]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	4975      	ldr	r1, [pc, #468]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005116:	4313      	orrs	r3, r2
 8005118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d010      	beq.n	8005148 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005132:	429a      	cmp	r2, r3
 8005134:	d908      	bls.n	8005148 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	496a      	ldr	r1, [pc, #424]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005144:	4313      	orrs	r3, r2
 8005146:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	d010      	beq.n	8005176 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	4b64      	ldr	r3, [pc, #400]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005160:	429a      	cmp	r2, r3
 8005162:	d908      	bls.n	8005176 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	495e      	ldr	r1, [pc, #376]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005172:	4313      	orrs	r3, r2
 8005174:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d010      	beq.n	80051a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800518e:	429a      	cmp	r2, r3
 8005190:	d908      	bls.n	80051a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005192:	4b56      	ldr	r3, [pc, #344]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4953      	ldr	r1, [pc, #332]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d010      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	429a      	cmp	r2, r3
 80051be:	d908      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f023 020f 	bic.w	r2, r3, #15
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4947      	ldr	r1, [pc, #284]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d055      	beq.n	800528a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051de:	4b43      	ldr	r3, [pc, #268]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4940      	ldr	r1, [pc, #256]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d107      	bne.n	8005208 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051f8:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d121      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0f6      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d107      	bne.n	8005220 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d115      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0ea      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d107      	bne.n	8005238 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0de      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005238:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0d6      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f023 0207 	bic.w	r2, r3, #7
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4925      	ldr	r1, [pc, #148]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 8005256:	4313      	orrs	r3, r2
 8005258:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fc fad5 	bl	8001808 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005260:	e00a      	b.n	8005278 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005262:	f7fc fad1 	bl	8001808 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e0be      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	429a      	cmp	r2, r3
 8005288:	d1eb      	bne.n	8005262 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d208      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	490e      	ldr	r1, [pc, #56]	; (80052ec <HAL_RCC_ClockConfig+0x244>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d214      	bcs.n	80052f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 020f 	bic.w	r2, r3, #15
 80052ce:	4906      	ldr	r1, [pc, #24]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_RCC_ClockConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e086      	b.n	80053f6 <HAL_RCC_ClockConfig+0x34e>
 80052e8:	52002000 	.word	0x52002000
 80052ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d010      	beq.n	800531e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005308:	429a      	cmp	r2, r3
 800530a:	d208      	bcs.n	800531e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800530c:	4b3c      	ldr	r3, [pc, #240]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	4939      	ldr	r1, [pc, #228]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800531a:	4313      	orrs	r3, r2
 800531c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d010      	beq.n	800534c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	4b34      	ldr	r3, [pc, #208]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005336:	429a      	cmp	r2, r3
 8005338:	d208      	bcs.n	800534c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	492e      	ldr	r1, [pc, #184]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005348:	4313      	orrs	r3, r2
 800534a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005364:	429a      	cmp	r2, r3
 8005366:	d208      	bcs.n	800537a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4922      	ldr	r1, [pc, #136]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005376:	4313      	orrs	r3, r2
 8005378:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005392:	429a      	cmp	r2, r3
 8005394:	d208      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4917      	ldr	r1, [pc, #92]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053a8:	f000 f834 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	4912      	ldr	r1, [pc, #72]	; (8005404 <HAL_RCC_ClockConfig+0x35c>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_RCC_ClockConfig+0x358>)
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <HAL_RCC_ClockConfig+0x35c>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_RCC_ClockConfig+0x360>)
 80053de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x364>)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_ClockConfig+0x368>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fc f9c2 	bl	8001774 <HAL_InitTick>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
 8005404:	08009f28 	.word	0x08009f28
 8005408:	24000004 	.word	0x24000004
 800540c:	24000000 	.word	0x24000000
 8005410:	24000008 	.word	0x24000008

08005414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800541a:	4bb3      	ldr	r3, [pc, #716]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005422:	2b18      	cmp	r3, #24
 8005424:	f200 8155 	bhi.w	80056d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <HAL_RCC_GetSysClockFreq+0x1c>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005495 	.word	0x08005495
 8005434:	080056d3 	.word	0x080056d3
 8005438:	080056d3 	.word	0x080056d3
 800543c:	080056d3 	.word	0x080056d3
 8005440:	080056d3 	.word	0x080056d3
 8005444:	080056d3 	.word	0x080056d3
 8005448:	080056d3 	.word	0x080056d3
 800544c:	080056d3 	.word	0x080056d3
 8005450:	080054bb 	.word	0x080054bb
 8005454:	080056d3 	.word	0x080056d3
 8005458:	080056d3 	.word	0x080056d3
 800545c:	080056d3 	.word	0x080056d3
 8005460:	080056d3 	.word	0x080056d3
 8005464:	080056d3 	.word	0x080056d3
 8005468:	080056d3 	.word	0x080056d3
 800546c:	080056d3 	.word	0x080056d3
 8005470:	080054c1 	.word	0x080054c1
 8005474:	080056d3 	.word	0x080056d3
 8005478:	080056d3 	.word	0x080056d3
 800547c:	080056d3 	.word	0x080056d3
 8005480:	080056d3 	.word	0x080056d3
 8005484:	080056d3 	.word	0x080056d3
 8005488:	080056d3 	.word	0x080056d3
 800548c:	080056d3 	.word	0x080056d3
 8005490:	080054c7 	.word	0x080054c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005494:	4b94      	ldr	r3, [pc, #592]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054a0:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	4a90      	ldr	r2, [pc, #576]	; (80056ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
 80054b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80054b2:	e111      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054b4:	4b8d      	ldr	r3, [pc, #564]	; (80056ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054b6:	61bb      	str	r3, [r7, #24]
      break;
 80054b8:	e10e      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054ba:	4b8d      	ldr	r3, [pc, #564]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054bc:	61bb      	str	r3, [r7, #24]
      break;
 80054be:	e10b      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054c0:	4b8c      	ldr	r3, [pc, #560]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054c2:	61bb      	str	r3, [r7, #24]
      break;
 80054c4:	e108      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054c6:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80054d0:	4b85      	ldr	r3, [pc, #532]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054dc:	4b82      	ldr	r3, [pc, #520]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054e6:	4b80      	ldr	r3, [pc, #512]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80e1 	beq.w	80056cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b02      	cmp	r3, #2
 800550e:	f000 8083 	beq.w	8005618 <HAL_RCC_GetSysClockFreq+0x204>
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b02      	cmp	r3, #2
 8005516:	f200 80a1 	bhi.w	800565c <HAL_RCC_GetSysClockFreq+0x248>
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x114>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d056      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005526:	e099      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005528:	4b6f      	ldr	r3, [pc, #444]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02d      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005534:	4b6c      	ldr	r3, [pc, #432]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	4a6b      	ldr	r2, [pc, #428]	; (80056ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b62      	ldr	r3, [pc, #392]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005572:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800558e:	e087      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055d2:	e065      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005700 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005616:	e043      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005704 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a02 	vldr	s12, [r7, #8]
 800563e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800565a:	e021      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005700 <HAL_RCC_GetSysClockFreq+0x2ec>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005682:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800569e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	0a5b      	lsrs	r3, r3, #9
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	3301      	adds	r3, #1
 80056ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c4:	ee17 3a90 	vmov	r3, s15
 80056c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80056ca:	e005      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61bb      	str	r3, [r7, #24]
      break;
 80056d0:	e002      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056d4:	61bb      	str	r3, [r7, #24]
      break;
 80056d6:	bf00      	nop
  }

  return sysclockfreq;
 80056d8:	69bb      	ldr	r3, [r7, #24]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3724      	adds	r7, #36	; 0x24
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	03d09000 	.word	0x03d09000
 80056f0:	003d0900 	.word	0x003d0900
 80056f4:	007a1200 	.word	0x007a1200
 80056f8:	46000000 	.word	0x46000000
 80056fc:	4c742400 	.word	0x4c742400
 8005700:	4a742400 	.word	0x4a742400
 8005704:	4af42400 	.word	0x4af42400

08005708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800570e:	f7ff fe81 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8005712:	4602      	mov	r2, r0
 8005714:	4b10      	ldr	r3, [pc, #64]	; (8005758 <HAL_RCC_GetHCLKFreq+0x50>)
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	490f      	ldr	r1, [pc, #60]	; (800575c <HAL_RCC_GetHCLKFreq+0x54>)
 8005720:	5ccb      	ldrb	r3, [r1, r3]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800572c:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <HAL_RCC_GetHCLKFreq+0x50>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	4a09      	ldr	r2, [pc, #36]	; (800575c <HAL_RCC_GetHCLKFreq+0x54>)
 8005736:	5cd3      	ldrb	r3, [r2, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	fa22 f303 	lsr.w	r3, r2, r3
 8005742:	4a07      	ldr	r2, [pc, #28]	; (8005760 <HAL_RCC_GetHCLKFreq+0x58>)
 8005744:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <HAL_RCC_GetHCLKFreq+0x58>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	58024400 	.word	0x58024400
 800575c:	08009f28 	.word	0x08009f28
 8005760:	24000004 	.word	0x24000004
 8005764:	24000000 	.word	0x24000000

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800576c:	f7ff ffcc 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	58024400 	.word	0x58024400
 8005790:	08009f28 	.word	0x08009f28

08005794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005798:	f7ff ffb6 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4904      	ldr	r1, [pc, #16]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	58024400 	.word	0x58024400
 80057bc:	08009f28 	.word	0x08009f28

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c4:	b0ca      	sub	sp, #296	; 0x128
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80057e4:	2500      	movs	r5, #0
 80057e6:	ea54 0305 	orrs.w	r3, r4, r5
 80057ea:	d049      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057f6:	d02f      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057fc:	d828      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005802:	d01a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005808:	d822      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800580e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005812:	d007      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005814:	e01c      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005816:	4bb8      	ldr	r3, [pc, #736]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	4ab7      	ldr	r2, [pc, #732]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800581c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005822:	e01a      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005828:	3308      	adds	r3, #8
 800582a:	2102      	movs	r1, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fc8f 	bl	8007150 <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005838:	e00f      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583e:	3328      	adds	r3, #40	; 0x28
 8005840:	2102      	movs	r1, #2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fd36 	bl	80072b4 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800584e:	e004      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005856:	e000      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005862:	4ba5      	ldr	r3, [pc, #660]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005866:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005870:	4aa1      	ldr	r2, [pc, #644]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005872:	430b      	orrs	r3, r1
 8005874:	6513      	str	r3, [r2, #80]	; 0x50
 8005876:	e003      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800587c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800588c:	f04f 0900 	mov.w	r9, #0
 8005890:	ea58 0309 	orrs.w	r3, r8, r9
 8005894:	d047      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	2b04      	cmp	r3, #4
 800589e:	d82a      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080058cb 	.word	0x080058cb
 80058b0:	080058e1 	.word	0x080058e1
 80058b4:	080058ff 	.word	0x080058ff
 80058b8:	080058ff 	.word	0x080058ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058bc:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	4a8d      	ldr	r2, [pc, #564]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c8:	e01a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	3308      	adds	r3, #8
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 fc3c 	bl	8007150 <RCCEx_PLL2_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058de:	e00f      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	3328      	adds	r3, #40	; 0x28
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fce3 	bl	80072b4 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058f4:	e004      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005908:	4b7b      	ldr	r3, [pc, #492]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800590a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590c:	f023 0107 	bic.w	r1, r3, #7
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	4a78      	ldr	r2, [pc, #480]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6513      	str	r3, [r2, #80]	; 0x50
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005932:	f04f 0b00 	mov.w	fp, #0
 8005936:	ea5a 030b 	orrs.w	r3, sl, fp
 800593a:	d04c      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d030      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594c:	d829      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800594e:	2bc0      	cmp	r3, #192	; 0xc0
 8005950:	d02d      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005952:	2bc0      	cmp	r3, #192	; 0xc0
 8005954:	d825      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d018      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800595a:	2b80      	cmp	r3, #128	; 0x80
 800595c:	d821      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d007      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005966:	e01c      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005968:	4b63      	ldr	r3, [pc, #396]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a62      	ldr	r2, [pc, #392]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005974:	e01c      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597a:	3308      	adds	r3, #8
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f001 fbe6 	bl	8007150 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800598a:	e011      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	3328      	adds	r3, #40	; 0x28
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f001 fc8d 	bl	80072b4 <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059a0:	e006      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80059b8:	4b4f      	ldr	r3, [pc, #316]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c6:	4a4c      	ldr	r2, [pc, #304]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6513      	str	r3, [r2, #80]	; 0x50
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80059e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d053      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a02:	d035      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a08:	d82e      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a0e:	d031      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a14:	d828      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1a:	d01a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a20:	d822      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a2a:	d007      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2e:	4b32      	ldr	r3, [pc, #200]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a31      	ldr	r2, [pc, #196]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e01c      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a40:	3308      	adds	r3, #8
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 fb83 	bl	8007150 <RCCEx_PLL2_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a50:	e011      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a56:	3328      	adds	r3, #40	; 0x28
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fc2a 	bl	80072b4 <RCCEx_PLL3_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a66:	e006      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a7e:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6593      	str	r3, [r2, #88]	; 0x58
 8005a94:	e003      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005aaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ab4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d056      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aca:	d038      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad0:	d831      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ad2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ad6:	d034      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005ad8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005adc:	d82b      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ade:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae2:	d01d      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae8:	d825      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af2:	d00a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005af4:	e01f      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afc:	4ba2      	ldr	r3, [pc, #648]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4aa1      	ldr	r2, [pc, #644]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b08:	e01c      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b0e:	3308      	adds	r3, #8
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fb1c 	bl	8007150 <RCCEx_PLL2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b1e:	e011      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	3328      	adds	r3, #40	; 0x28
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fbc3 	bl	80072b4 <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e006      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b3c:	e002      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b4c:	4b8e      	ldr	r3, [pc, #568]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b5c:	4a8a      	ldr	r2, [pc, #552]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	6593      	str	r3, [r2, #88]	; 0x58
 8005b62:	e003      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b86:	460b      	mov	r3, r1
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	d03a      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	2b30      	cmp	r3, #48	; 0x30
 8005b94:	d01f      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b96:	2b30      	cmp	r3, #48	; 0x30
 8005b98:	d819      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d815      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d019      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d111      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005baa:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a76      	ldr	r2, [pc, #472]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fac5 	bl	8007150 <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005bcc:	e006      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005be4:	4b68      	ldr	r3, [pc, #416]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	4a65      	ldr	r2, [pc, #404]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d051      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d035      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c32:	d82e      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c38:	d031      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c3e:	d828      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c44:	d01a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4a:	d822      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d007      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005c56:	e01c      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c58:	4b4b      	ldr	r3, [pc, #300]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4a4a      	ldr	r2, [pc, #296]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c64:	e01c      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fa6e 	bl	8007150 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c7a:	e011      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	3328      	adds	r3, #40	; 0x28
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fb15 	bl	80072b4 <RCCEx_PLL3_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ca8:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	4a34      	ldr	r2, [pc, #208]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6513      	str	r3, [r2, #80]	; 0x50
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	d056      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf0:	d033      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf6:	d82c      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cfc:	d02f      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d02:	d826      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d08:	d02b      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005d0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d0e:	d820      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d14:	d012      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d1a:	d81a      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d022      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d24:	d115      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fa0e 	bl	8007150 <RCCEx_PLL2_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d3a:	e015      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d40:	3328      	adds	r3, #40	; 0x28
 8005d42:	2101      	movs	r1, #1
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fab5 	bl	80072b4 <RCCEx_PLL3_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d50:	e00a      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d58:	e006      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d5a:	bf00      	nop
 8005d5c:	e004      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d5e:	bf00      	nop
 8005d60:	e002      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d62:	bf00      	nop
 8005d64:	e000      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d7e:	4a02      	ldr	r2, [pc, #8]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6513      	str	r3, [r2, #80]	; 0x50
 8005d84:	e006      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d86:	bf00      	nop
 8005d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005daa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	d055      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc0:	d033      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc6:	d82c      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dcc:	d02f      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d826      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dd8:	d02b      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dde:	d820      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d012      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dea:	d81a      	bhi.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d022      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df4:	d115      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f9a6 	bl	8007150 <RCCEx_PLL2_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e0a:	e015      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e10:	3328      	adds	r3, #40	; 0x28
 8005e12:	2101      	movs	r1, #1
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fa4d 	bl	80072b4 <RCCEx_PLL3_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e20:	e00a      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e28:	e006      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e004      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e40:	4ba3      	ldr	r3, [pc, #652]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e50:	4a9f      	ldr	r2, [pc, #636]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e52:	430b      	orrs	r3, r1
 8005e54:	6593      	str	r3, [r2, #88]	; 0x58
 8005e56:	e003      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e70:	2300      	movs	r3, #0
 8005e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	d037      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8a:	d00e      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e90:	d816      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d018      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e9a:	d111      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9c:	4b8c      	ldr	r3, [pc, #560]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	4a8b      	ldr	r2, [pc, #556]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ea8:	e00f      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eae:	3308      	adds	r3, #8
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 f94c 	bl	8007150 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ed2:	4b7f      	ldr	r3, [pc, #508]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee0:	4a7b      	ldr	r2, [pc, #492]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6513      	str	r3, [r2, #80]	; 0x50
 8005ee6:	e003      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d039      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d81c      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f5d 	.word	0x08005f5d
 8005f24:	08005f31 	.word	0x08005f31
 8005f28:	08005f3f 	.word	0x08005f3f
 8005f2c:	08005f5d 	.word	0x08005f5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f30:	4b67      	ldr	r3, [pc, #412]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a66      	ldr	r2, [pc, #408]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f3c:	e00f      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f42:	3308      	adds	r3, #8
 8005f44:	2102      	movs	r1, #2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f902 	bl	8007150 <RCCEx_PLL2_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f52:	e004      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f5a:	e000      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f66:	4b5a      	ldr	r3, [pc, #360]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	f023 0103 	bic.w	r1, r3, #3
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f74:	4a56      	ldr	r2, [pc, #344]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f76:	430b      	orrs	r3, r1
 8005f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f7a:	e003      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f000 809f 	beq.w	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa6:	4b4b      	ldr	r3, [pc, #300]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a4a      	ldr	r2, [pc, #296]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fb2:	f7fb fc29 	bl	8001808 <HAL_GetTick>
 8005fb6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fba:	e00b      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbc:	f7fb fc24 	bl	8001808 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b64      	cmp	r3, #100	; 0x64
 8005fca:	d903      	bls.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fd2:	e005      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd4:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0ed      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d179      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fe8:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ff4:	4053      	eors	r3, r2
 8005ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d015      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ffe:	4b34      	ldr	r3, [pc, #208]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006006:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800600a:	4b31      	ldr	r3, [pc, #196]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	4a30      	ldr	r2, [pc, #192]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006014:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006016:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800601c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006020:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006022:	4a2b      	ldr	r2, [pc, #172]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006024:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006028:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006036:	d118      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fb fbe6 	bl	8001808 <HAL_GetTick>
 800603c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006040:	e00d      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006042:	f7fb fbe1 	bl	8001808 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800604c:	1ad2      	subs	r2, r2, r3
 800604e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006052:	429a      	cmp	r2, r3
 8006054:	d903      	bls.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800605c:	e005      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800605e:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0eb      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800606a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800606e:	2b00      	cmp	r3, #0
 8006070:	d129      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006082:	d10e      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006084:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006094:	091a      	lsrs	r2, r3, #4
 8006096:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006098:	4013      	ands	r3, r2
 800609a:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609c:	430b      	orrs	r3, r1
 800609e:	6113      	str	r3, [r2, #16]
 80060a0:	e005      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	4a0a      	ldr	r2, [pc, #40]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060ac:	6113      	str	r3, [r2, #16]
 80060ae:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060be:	4a04      	ldr	r2, [pc, #16]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c0:	430b      	orrs	r3, r1
 80060c2:	6713      	str	r3, [r2, #112]	; 0x70
 80060c4:	e00e      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80060ce:	e009      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80060d0:	58024400 	.word	0x58024400
 80060d4:	58024800 	.word	0x58024800
 80060d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f002 0301 	and.w	r3, r2, #1
 80060f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	f000 8089 	beq.w	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800610c:	2b28      	cmp	r3, #40	; 0x28
 800610e:	d86b      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	080061f1 	.word	0x080061f1
 800611c:	080061e9 	.word	0x080061e9
 8006120:	080061e9 	.word	0x080061e9
 8006124:	080061e9 	.word	0x080061e9
 8006128:	080061e9 	.word	0x080061e9
 800612c:	080061e9 	.word	0x080061e9
 8006130:	080061e9 	.word	0x080061e9
 8006134:	080061e9 	.word	0x080061e9
 8006138:	080061bd 	.word	0x080061bd
 800613c:	080061e9 	.word	0x080061e9
 8006140:	080061e9 	.word	0x080061e9
 8006144:	080061e9 	.word	0x080061e9
 8006148:	080061e9 	.word	0x080061e9
 800614c:	080061e9 	.word	0x080061e9
 8006150:	080061e9 	.word	0x080061e9
 8006154:	080061e9 	.word	0x080061e9
 8006158:	080061d3 	.word	0x080061d3
 800615c:	080061e9 	.word	0x080061e9
 8006160:	080061e9 	.word	0x080061e9
 8006164:	080061e9 	.word	0x080061e9
 8006168:	080061e9 	.word	0x080061e9
 800616c:	080061e9 	.word	0x080061e9
 8006170:	080061e9 	.word	0x080061e9
 8006174:	080061e9 	.word	0x080061e9
 8006178:	080061f1 	.word	0x080061f1
 800617c:	080061e9 	.word	0x080061e9
 8006180:	080061e9 	.word	0x080061e9
 8006184:	080061e9 	.word	0x080061e9
 8006188:	080061e9 	.word	0x080061e9
 800618c:	080061e9 	.word	0x080061e9
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061e9 	.word	0x080061e9
 8006198:	080061f1 	.word	0x080061f1
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	080061e9 	.word	0x080061e9
 80061a4:	080061e9 	.word	0x080061e9
 80061a8:	080061e9 	.word	0x080061e9
 80061ac:	080061e9 	.word	0x080061e9
 80061b0:	080061e9 	.word	0x080061e9
 80061b4:	080061e9 	.word	0x080061e9
 80061b8:	080061f1 	.word	0x080061f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c0:	3308      	adds	r3, #8
 80061c2:	2101      	movs	r1, #1
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ffc3 	bl	8007150 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061d0:	e00f      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d6:	3328      	adds	r3, #40	; 0x28
 80061d8:	2101      	movs	r1, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f86a 	bl	80072b4 <RCCEx_PLL3_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061e6:	e004      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80061f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061fa:	4bbf      	ldr	r3, [pc, #764]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006208:	4abb      	ldr	r2, [pc, #748]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800620a:	430b      	orrs	r3, r1
 800620c:	6553      	str	r3, [r2, #84]	; 0x54
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006214:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f002 0302 	and.w	r3, r2, #2
 8006224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800622e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006232:	460b      	mov	r3, r1
 8006234:	4313      	orrs	r3, r2
 8006236:	d041      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623e:	2b05      	cmp	r3, #5
 8006240:	d824      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006295 	.word	0x08006295
 800624c:	08006261 	.word	0x08006261
 8006250:	08006277 	.word	0x08006277
 8006254:	08006295 	.word	0x08006295
 8006258:	08006295 	.word	0x08006295
 800625c:	08006295 	.word	0x08006295
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006264:	3308      	adds	r3, #8
 8006266:	2101      	movs	r1, #1
 8006268:	4618      	mov	r0, r3
 800626a:	f000 ff71 	bl	8007150 <RCCEx_PLL2_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006274:	e00f      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627a:	3328      	adds	r3, #40	; 0x28
 800627c:	2101      	movs	r1, #1
 800627e:	4618      	mov	r0, r3
 8006280:	f001 f818 	bl	80072b4 <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800628a:	e004      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006292:	e000      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800629e:	4b96      	ldr	r3, [pc, #600]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	f023 0107 	bic.w	r1, r3, #7
 80062a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ac:	4a92      	ldr	r2, [pc, #584]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6553      	str	r3, [r2, #84]	; 0x54
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 0304 	and.w	r3, r2, #4
 80062c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d044      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	d825      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	0800633d 	.word	0x0800633d
 80062f4:	08006309 	.word	0x08006309
 80062f8:	0800631f 	.word	0x0800631f
 80062fc:	0800633d 	.word	0x0800633d
 8006300:	0800633d 	.word	0x0800633d
 8006304:	0800633d 	.word	0x0800633d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630c:	3308      	adds	r3, #8
 800630e:	2101      	movs	r1, #1
 8006310:	4618      	mov	r0, r3
 8006312:	f000 ff1d 	bl	8007150 <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800631c:	e00f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006322:	3328      	adds	r3, #40	; 0x28
 8006324:	2101      	movs	r1, #1
 8006326:	4618      	mov	r0, r3
 8006328:	f000 ffc4 	bl	80072b4 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006346:	4b6c      	ldr	r3, [pc, #432]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	f023 0107 	bic.w	r1, r3, #7
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006356:	4a68      	ldr	r2, [pc, #416]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006358:	430b      	orrs	r3, r1
 800635a:	6593      	str	r3, [r2, #88]	; 0x58
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f002 0320 	and.w	r3, r2, #32
 8006372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006376:	2300      	movs	r3, #0
 8006378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800637c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d055      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006392:	d033      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006398:	d82c      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639e:	d02f      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d826      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063aa:	d02b      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80063ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063b0:	d820      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b6:	d012      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80063b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063bc:	d81a      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d022      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80063c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063c6:	d115      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063cc:	3308      	adds	r3, #8
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 febd 	bl	8007150 <RCCEx_PLL2_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063dc:	e015      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	3328      	adds	r3, #40	; 0x28
 80063e4:	2102      	movs	r1, #2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 ff64 	bl	80072b4 <RCCEx_PLL3_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063f2:	e00a      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063fa:	e006      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063fc:	bf00      	nop
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006412:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	4a35      	ldr	r2, [pc, #212]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006424:	430b      	orrs	r3, r1
 8006426:	6553      	str	r3, [r2, #84]	; 0x54
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800642e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800643e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006448:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d058      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800645a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800645e:	d033      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006460:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006464:	d82c      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	d02f      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800646c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006470:	d826      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006476:	d02b      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800647c:	d820      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800647e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006482:	d012      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006488:	d81a      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d022      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006492:	d115      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006498:	3308      	adds	r3, #8
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fe57 	bl	8007150 <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064a8:	e015      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	3328      	adds	r3, #40	; 0x28
 80064b0:	2102      	movs	r1, #2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fefe 	bl	80072b4 <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064be:	e00a      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064c6:	e006      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064c8:	bf00      	nop
 80064ca:	e004      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064cc:	bf00      	nop
 80064ce:	e002      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064d0:	bf00      	nop
 80064d2:	e000      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80064d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10e      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ee:	4a02      	ldr	r2, [pc, #8]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6593      	str	r3, [r2, #88]	; 0x58
 80064f4:	e006      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80064f6:	bf00      	nop
 80064f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800651a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	d055      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800652c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006530:	d033      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006532:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006536:	d82c      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653c:	d02f      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800653e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006542:	d826      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006548:	d02b      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800654a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800654e:	d820      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006554:	d012      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655a:	d81a      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d022      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006564:	d115      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656a:	3308      	adds	r3, #8
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fdee 	bl	8007150 <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800657a:	e015      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006580:	3328      	adds	r3, #40	; 0x28
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fe95 	bl	80072b4 <RCCEx_PLL3_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006590:	e00a      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80065a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10b      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065b0:	4ba1      	ldr	r3, [pc, #644]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065c0:	4a9d      	ldr	r2, [pc, #628]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c2:	430b      	orrs	r3, r1
 80065c4:	6593      	str	r3, [r2, #88]	; 0x58
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f002 0308 	and.w	r3, r2, #8
 80065dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80065ea:	460b      	mov	r3, r1
 80065ec:	4313      	orrs	r3, r2
 80065ee:	d01e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fc:	d10c      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006602:	3328      	adds	r3, #40	; 0x28
 8006604:	2102      	movs	r1, #2
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fe54 	bl	80072b4 <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006618:	4b87      	ldr	r3, [pc, #540]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006628:	4a83      	ldr	r2, [pc, #524]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662a:	430b      	orrs	r3, r1
 800662c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f002 0310 	and.w	r3, r2, #16
 800663a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800663e:	2300      	movs	r3, #0
 8006640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006644:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006648:	460b      	mov	r3, r1
 800664a:	4313      	orrs	r3, r2
 800664c:	d01e      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665a:	d10c      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006660:	3328      	adds	r3, #40	; 0x28
 8006662:	2102      	movs	r1, #2
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fe25 	bl	80072b4 <RCCEx_PLL3_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006676:	4b70      	ldr	r3, [pc, #448]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006686:	4a6c      	ldr	r2, [pc, #432]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800669c:	2300      	movs	r3, #0
 800669e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80066a6:	460b      	mov	r3, r1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	d03e      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b8:	d022      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80066ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066be:	d81b      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d00b      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80066ca:	e015      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d0:	3308      	adds	r3, #8
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fd3b 	bl	8007150 <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066e0:	e00f      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e6:	3328      	adds	r3, #40	; 0x28
 80066e8:	2102      	movs	r1, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fde2 	bl	80072b4 <RCCEx_PLL3_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800670a:	4b4b      	ldr	r3, [pc, #300]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800671a:	4a47      	ldr	r2, [pc, #284]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800671c:	430b      	orrs	r3, r1
 800671e:	6593      	str	r3, [r2, #88]	; 0x58
 8006720:	e003      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006736:	67bb      	str	r3, [r7, #120]	; 0x78
 8006738:	2300      	movs	r3, #0
 800673a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800673c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006740:	460b      	mov	r3, r1
 8006742:	4313      	orrs	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006752:	d01f      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006758:	d818      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800675a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675e:	d003      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006764:	d007      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006766:	e011      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006768:	4b33      	ldr	r3, [pc, #204]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4a32      	ldr	r2, [pc, #200]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006774:	e00f      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800677a:	3328      	adds	r3, #40	; 0x28
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fd98 	bl	80072b4 <RCCEx_PLL3_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800678a:	e004      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006792:	e000      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10b      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	4a22      	ldr	r2, [pc, #136]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6553      	str	r3, [r2, #84]	; 0x54
 80067b4:	e003      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80067ca:	673b      	str	r3, [r7, #112]	; 0x70
 80067cc:	2300      	movs	r3, #0
 80067ce:	677b      	str	r3, [r7, #116]	; 0x74
 80067d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80067d4:	460b      	mov	r3, r1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	d034      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d007      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80067ea:	e011      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	4a11      	ldr	r2, [pc, #68]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067f8:	e00e      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067fe:	3308      	adds	r3, #8
 8006800:	2102      	movs	r1, #2
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fca4 	bl	8007150 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800680e:	e003      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682e:	4a02      	ldr	r2, [pc, #8]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006830:	430b      	orrs	r3, r1
 8006832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006834:	e006      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006836:	bf00      	nop
 8006838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006850:	66bb      	str	r3, [r7, #104]	; 0x68
 8006852:	2300      	movs	r3, #0
 8006854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006856:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d00c      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006864:	3328      	adds	r3, #40	; 0x28
 8006866:	2102      	movs	r1, #2
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fd23 	bl	80072b4 <RCCEx_PLL3_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006886:	663b      	str	r3, [r7, #96]	; 0x60
 8006888:	2300      	movs	r3, #0
 800688a:	667b      	str	r3, [r7, #100]	; 0x64
 800688c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006890:	460b      	mov	r3, r1
 8006892:	4313      	orrs	r3, r2
 8006894:	d038      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800689e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a2:	d018      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80068a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a8:	d811      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ae:	d014      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80068b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b4:	d80b      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d011      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068be:	d106      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c0:	4bc3      	ldr	r3, [pc, #780]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c4:	4ac2      	ldr	r2, [pc, #776]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068cc:	e008      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068d4:	e004      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068d6:	bf00      	nop
 80068d8:	e002      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80068de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e8:	4bb9      	ldr	r3, [pc, #740]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f8:	4ab5      	ldr	r2, [pc, #724]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	6553      	str	r3, [r2, #84]	; 0x54
 80068fe:	e003      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006914:	65bb      	str	r3, [r7, #88]	; 0x58
 8006916:	2300      	movs	r3, #0
 8006918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800691a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800691e:	460b      	mov	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	d009      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006924:	4baa      	ldr	r3, [pc, #680]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006932:	4aa7      	ldr	r2, [pc, #668]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
 8006946:	2300      	movs	r3, #0
 8006948:	657b      	str	r3, [r7, #84]	; 0x54
 800694a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006954:	4b9e      	ldr	r3, [pc, #632]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006964:	4a9a      	ldr	r2, [pc, #616]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006966:	430b      	orrs	r3, r1
 8006968:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006976:	64bb      	str	r3, [r7, #72]	; 0x48
 8006978:	2300      	movs	r3, #0
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006986:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006994:	4a8e      	ldr	r2, [pc, #568]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006996:	430b      	orrs	r3, r1
 8006998:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80069a6:	643b      	str	r3, [r7, #64]	; 0x40
 80069a8:	2300      	movs	r3, #0
 80069aa:	647b      	str	r3, [r7, #68]	; 0x44
 80069ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d00e      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069b6:	4b86      	ldr	r3, [pc, #536]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	4a85      	ldr	r2, [pc, #532]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069c0:	6113      	str	r3, [r2, #16]
 80069c2:	4b83      	ldr	r3, [pc, #524]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c4:	6919      	ldr	r1, [r3, #16]
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80069ce:	4a80      	ldr	r2, [pc, #512]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80069e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e2:	2300      	movs	r3, #0
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069f0:	4b77      	ldr	r3, [pc, #476]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	4a74      	ldr	r2, [pc, #464]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006a10:	633b      	str	r3, [r7, #48]	; 0x30
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a20:	4b6b      	ldr	r3, [pc, #428]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a30:	4a67      	ldr	r2, [pc, #412]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d011      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a56:	3308      	adds	r3, #8
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fb78 	bl	8007150 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	2100      	movs	r1, #0
 8006a80:	6239      	str	r1, [r7, #32]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
 8006a88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	d011      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a96:	3308      	adds	r3, #8
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fb58 	bl	8007150 <RCCEx_PLL2_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	61b9      	str	r1, [r7, #24]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006acc:	460b      	mov	r3, r1
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	d011      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	2102      	movs	r1, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fb38 	bl	8007150 <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	2100      	movs	r1, #0
 8006b00:	6139      	str	r1, [r7, #16]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d011      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b16:	3328      	adds	r3, #40	; 0x28
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fbca 	bl	80072b4 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	2100      	movs	r1, #0
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	d011      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b56:	3328      	adds	r3, #40	; 0x28
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fbaa 	bl	80072b4 <RCCEx_PLL3_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	2100      	movs	r1, #0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d011      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b96:	3328      	adds	r3, #40	; 0x28
 8006b98:	2102      	movs	r1, #2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb8a 	bl	80072b4 <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006bb6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd0:	58024400 	.word	0x58024400

08006bd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006bd8:	f7fe fd96 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	091b      	lsrs	r3, r3, #4
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4904      	ldr	r1, [pc, #16]	; (8006bfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	08009f28 	.word	0x08009f28

08006c00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	; 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c08:	4ba1      	ldr	r3, [pc, #644]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c12:	4b9f      	ldr	r3, [pc, #636]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	0b1b      	lsrs	r3, r3, #12
 8006c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c1e:	4b9c      	ldr	r3, [pc, #624]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c2a:	4b99      	ldr	r3, [pc, #612]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	08db      	lsrs	r3, r3, #3
 8006c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8111 	beq.w	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	f000 8083 	beq.w	8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	f200 80a1 	bhi.w	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d056      	beq.n	8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c6a:	e099      	b.n	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c6c:	4b88      	ldr	r3, [pc, #544]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02d      	beq.n	8006cd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c78:	4b85      	ldr	r3, [pc, #532]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	08db      	lsrs	r3, r3, #3
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	4a84      	ldr	r2, [pc, #528]	; (8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca2:	4b7b      	ldr	r3, [pc, #492]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006cd2:	e087      	b.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b6a      	ldr	r3, [pc, #424]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d16:	e065      	b.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d5a:	e043      	b.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b48      	ldr	r3, [pc, #288]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d9e:	e021      	b.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006de4:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	0a5b      	lsrs	r3, r3, #9
 8006dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e0a:	ee17 2a90 	vmov	r2, s15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006e12:	4b1f      	ldr	r3, [pc, #124]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	0c1b      	lsrs	r3, r3, #16
 8006e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1c:	ee07 3a90 	vmov	s15, r3
 8006e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e38:	ee17 2a90 	vmov	r2, s15
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	0e1b      	lsrs	r3, r3, #24
 8006e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e66:	ee17 2a90 	vmov	r2, s15
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e6e:	e008      	b.n	8006e82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
}
 8006e82:	bf00      	nop
 8006e84:	3724      	adds	r7, #36	; 0x24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
 8006e94:	03d09000 	.word	0x03d09000
 8006e98:	46000000 	.word	0x46000000
 8006e9c:	4c742400 	.word	0x4c742400
 8006ea0:	4a742400 	.word	0x4a742400
 8006ea4:	4af42400 	.word	0x4af42400

08006ea8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b089      	sub	sp, #36	; 0x24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006eb0:	4ba1      	ldr	r3, [pc, #644]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006eba:	4b9f      	ldr	r3, [pc, #636]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebe:	0d1b      	lsrs	r3, r3, #20
 8006ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ec6:	4b9c      	ldr	r3, [pc, #624]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006ed2:	4b99      	ldr	r3, [pc, #612]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	08db      	lsrs	r3, r3, #3
 8006ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8111 	beq.w	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	f000 8083 	beq.w	8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	f200 80a1 	bhi.w	8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d056      	beq.n	8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f12:	e099      	b.n	8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f14:	4b88      	ldr	r3, [pc, #544]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02d      	beq.n	8006f7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f20:	4b85      	ldr	r3, [pc, #532]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	08db      	lsrs	r3, r3, #3
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	4a84      	ldr	r2, [pc, #528]	; (800713c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4a:	4b7b      	ldr	r3, [pc, #492]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f7a:	e087      	b.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007144 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8e:	4b6a      	ldr	r3, [pc, #424]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fa2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fbe:	e065      	b.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd2:	4b59      	ldr	r3, [pc, #356]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007002:	e043      	b.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800714c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b48      	ldr	r3, [pc, #288]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a03 	vldr	s12, [r7, #12]
 800702a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007046:	e021      	b.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b37      	ldr	r3, [pc, #220]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800708c:	4b2a      	ldr	r3, [pc, #168]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	0a5b      	lsrs	r3, r3, #9
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b2:	ee17 2a90 	vmov	r2, s15
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80070ba:	4b1f      	ldr	r3, [pc, #124]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c4:	ee07 3a90 	vmov	s15, r3
 80070c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e0:	ee17 2a90 	vmov	r2, s15
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	0e1b      	lsrs	r3, r3, #24
 80070ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007102:	edd7 6a07 	vldr	s13, [r7, #28]
 8007106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800710a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800710e:	ee17 2a90 	vmov	r2, s15
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007116:	e008      	b.n	800712a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
}
 800712a:	bf00      	nop
 800712c:	3724      	adds	r7, #36	; 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	58024400 	.word	0x58024400
 800713c:	03d09000 	.word	0x03d09000
 8007140:	46000000 	.word	0x46000000
 8007144:	4c742400 	.word	0x4c742400
 8007148:	4a742400 	.word	0x4a742400
 800714c:	4af42400 	.word	0x4af42400

08007150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800715e:	4b53      	ldr	r3, [pc, #332]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	2b03      	cmp	r3, #3
 8007168:	d101      	bne.n	800716e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e099      	b.n	80072a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800716e:	4b4f      	ldr	r3, [pc, #316]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a4e      	ldr	r2, [pc, #312]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007174:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800717a:	f7fa fb45 	bl	8001808 <HAL_GetTick>
 800717e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007180:	e008      	b.n	8007194 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007182:	f7fa fb41 	bl	8001808 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e086      	b.n	80072a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007194:	4b45      	ldr	r3, [pc, #276]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f0      	bne.n	8007182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071a0:	4b42      	ldr	r3, [pc, #264]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	031b      	lsls	r3, r3, #12
 80071ae:	493f      	ldr	r1, [pc, #252]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	628b      	str	r3, [r1, #40]	; 0x28
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	025b      	lsls	r3, r3, #9
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	431a      	orrs	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	3b01      	subs	r3, #1
 80071de:	061b      	lsls	r3, r3, #24
 80071e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071e4:	4931      	ldr	r1, [pc, #196]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071ea:	4b30      	ldr	r3, [pc, #192]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	492d      	ldr	r1, [pc, #180]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071fc:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	f023 0220 	bic.w	r2, r3, #32
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	4928      	ldr	r1, [pc, #160]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 800720a:	4313      	orrs	r3, r2
 800720c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800720e:	4b27      	ldr	r3, [pc, #156]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	4a26      	ldr	r2, [pc, #152]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007214:	f023 0310 	bic.w	r3, r3, #16
 8007218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800721a:	4b24      	ldr	r3, [pc, #144]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 800721c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <RCCEx_PLL2_Config+0x160>)
 8007220:	4013      	ands	r3, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	69d2      	ldr	r2, [r2, #28]
 8007226:	00d2      	lsls	r2, r2, #3
 8007228:	4920      	ldr	r1, [pc, #128]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800722e:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007234:	f043 0310 	orr.w	r3, r3, #16
 8007238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4a19      	ldr	r2, [pc, #100]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800724a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800724c:	e00f      	b.n	800726e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d106      	bne.n	8007262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007254:	4b15      	ldr	r3, [pc, #84]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	4a14      	ldr	r2, [pc, #80]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 800725a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800725e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007260:	e005      	b.n	800726e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007262:	4b12      	ldr	r3, [pc, #72]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	4a11      	ldr	r2, [pc, #68]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800726c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800726e:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a0e      	ldr	r2, [pc, #56]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800727a:	f7fa fac5 	bl	8001808 <HAL_GetTick>
 800727e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007280:	e008      	b.n	8007294 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007282:	f7fa fac1 	bl	8001808 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d901      	bls.n	8007294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e006      	b.n	80072a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <RCCEx_PLL2_Config+0x15c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0f0      	beq.n	8007282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	58024400 	.word	0x58024400
 80072b0:	ffff0007 	.word	0xffff0007

080072b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072c2:	4b53      	ldr	r3, [pc, #332]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d101      	bne.n	80072d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e099      	b.n	8007406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80072d2:	4b4f      	ldr	r3, [pc, #316]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a4e      	ldr	r2, [pc, #312]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80072d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072de:	f7fa fa93 	bl	8001808 <HAL_GetTick>
 80072e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072e4:	e008      	b.n	80072f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072e6:	f7fa fa8f 	bl	8001808 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e086      	b.n	8007406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072f8:	4b45      	ldr	r3, [pc, #276]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f0      	bne.n	80072e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007304:	4b42      	ldr	r3, [pc, #264]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	051b      	lsls	r3, r3, #20
 8007312:	493f      	ldr	r1, [pc, #252]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007314:	4313      	orrs	r3, r2
 8007316:	628b      	str	r3, [r1, #40]	; 0x28
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	3b01      	subs	r3, #1
 800731e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	3b01      	subs	r3, #1
 8007328:	025b      	lsls	r3, r3, #9
 800732a:	b29b      	uxth	r3, r3
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	3b01      	subs	r3, #1
 8007334:	041b      	lsls	r3, r3, #16
 8007336:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	3b01      	subs	r3, #1
 8007342:	061b      	lsls	r3, r3, #24
 8007344:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007348:	4931      	ldr	r1, [pc, #196]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 800734a:	4313      	orrs	r3, r2
 800734c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800734e:	4b30      	ldr	r3, [pc, #192]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	492d      	ldr	r1, [pc, #180]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 800735c:	4313      	orrs	r3, r2
 800735e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007360:	4b2b      	ldr	r3, [pc, #172]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	4928      	ldr	r1, [pc, #160]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007372:	4b27      	ldr	r3, [pc, #156]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a26      	ldr	r2, [pc, #152]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800737c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800737e:	4b24      	ldr	r3, [pc, #144]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <RCCEx_PLL3_Config+0x160>)
 8007384:	4013      	ands	r3, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	69d2      	ldr	r2, [r2, #28]
 800738a:	00d2      	lsls	r2, r2, #3
 800738c:	4920      	ldr	r1, [pc, #128]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 800738e:	4313      	orrs	r3, r2
 8007390:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007392:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 8007398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800739c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4a19      	ldr	r2, [pc, #100]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073b0:	e00f      	b.n	80073d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d106      	bne.n	80073c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073b8:	4b15      	ldr	r3, [pc, #84]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	4a14      	ldr	r2, [pc, #80]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073c4:	e005      	b.n	80073d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073c6:	4b12      	ldr	r3, [pc, #72]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	4a11      	ldr	r2, [pc, #68]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80073d2:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a0e      	ldr	r2, [pc, #56]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073de:	f7fa fa13 	bl	8001808 <HAL_GetTick>
 80073e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073e4:	e008      	b.n	80073f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073e6:	f7fa fa0f 	bl	8001808 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e006      	b.n	8007406 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0f0      	beq.n	80073e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	58024400 	.word	0x58024400
 8007414:	ffff0007 	.word	0xffff0007

08007418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e042      	b.n	80074b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7f9 ff3f 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	; 0x24
 8007446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fc94 	bl	8007d88 <UART_SetConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e022      	b.n	80074b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 f9f0 	bl	8008858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 fa77 	bl	800899c <UART_CheckIdleState>
 80074ae:	4603      	mov	r3, r0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	; 0x28
 80074bc:	af02      	add	r7, sp, #8
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d17b      	bne.n	80075ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_UART_Transmit+0x26>
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e074      	b.n	80075cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2221      	movs	r2, #33	; 0x21
 80074ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074f2:	f7fa f989 	bl	8001808 <HAL_GetTick>
 80074f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007510:	d108      	bne.n	8007524 <HAL_UART_Transmit+0x6c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d104      	bne.n	8007524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	e003      	b.n	800752c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800752c:	e030      	b.n	8007590 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2200      	movs	r2, #0
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f001 fad9 	bl	8008af0 <UART_WaitOnFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e03d      	b.n	80075cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10b      	bne.n	800756e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	3302      	adds	r3, #2
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	e007      	b.n	800757e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	3301      	adds	r3, #1
 800757c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1c8      	bne.n	800752e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2140      	movs	r1, #64	; 0x40
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f001 faa2 	bl	8008af0 <UART_WaitOnFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e006      	b.n	80075cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e000      	b.n	80075cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075ca:	2302      	movs	r3, #2
  }
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b0ba      	sub	sp, #232	; 0xe8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007602:	4013      	ands	r3, r2
 8007604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11b      	bne.n	8007648 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d015      	beq.n	8007648 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800761c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8377 	beq.w	8007d2c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
      }
      return;
 8007646:	e371      	b.n	8007d2c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8123 	beq.w	8007898 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007652:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007656:	4b8d      	ldr	r3, [pc, #564]	; (800788c <HAL_UART_IRQHandler+0x2b8>)
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800765e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007662:	4b8b      	ldr	r3, [pc, #556]	; (8007890 <HAL_UART_IRQHandler+0x2bc>)
 8007664:	4013      	ands	r3, r2
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8116 	beq.w	8007898 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d011      	beq.n	800769c <HAL_UART_IRQHandler+0xc8>
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2201      	movs	r2, #1
 800768a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f043 0201 	orr.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800769c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d011      	beq.n	80076cc <HAL_UART_IRQHandler+0xf8>
 80076a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2202      	movs	r2, #2
 80076ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f043 0204 	orr.w	r2, r3, #4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d011      	beq.n	80076fc <HAL_UART_IRQHandler+0x128>
 80076d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2204      	movs	r2, #4
 80076ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f2:	f043 0202 	orr.w	r2, r3, #2
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d017      	beq.n	8007738 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007714:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007718:	4b5c      	ldr	r3, [pc, #368]	; (800788c <HAL_UART_IRQHandler+0x2b8>)
 800771a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2208      	movs	r2, #8
 8007726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	f043 0208 	orr.w	r2, r3, #8
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	2b00      	cmp	r3, #0
 8007742:	d012      	beq.n	800776a <HAL_UART_IRQHandler+0x196>
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00c      	beq.n	800776a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007760:	f043 0220 	orr.w	r2, r3, #32
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 82dd 	beq.w	8007d30 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d013      	beq.n	80077aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d105      	bne.n	800779a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800778e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d007      	beq.n	80077aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d005      	beq.n	80077ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d054      	beq.n	8007878 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 f9f6 	bl	8008bc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d146      	bne.n	8007870 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800780e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800781a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1d9      	bne.n	80077e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	d017      	beq.n	8007868 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783e:	4a15      	ldr	r2, [pc, #84]	; (8007894 <HAL_UART_IRQHandler+0x2c0>)
 8007840:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007848:	4618      	mov	r0, r3
 800784a:	f7fa fc5b 	bl	8002104 <HAL_DMA_Abort_IT>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d019      	beq.n	8007888 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007862:	4610      	mov	r0, r2
 8007864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007866:	e00f      	b.n	8007888 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa77 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786e:	e00b      	b.n	8007888 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa73 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007876:	e007      	b.n	8007888 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa6f 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007886:	e253      	b.n	8007d30 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	bf00      	nop
    return;
 800788a:	e251      	b.n	8007d30 <HAL_UART_IRQHandler+0x75c>
 800788c:	10000001 	.word	0x10000001
 8007890:	04000120 	.word	0x04000120
 8007894:	08008c8d 	.word	0x08008c8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789c:	2b01      	cmp	r3, #1
 800789e:	f040 81e7 	bne.w	8007c70 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 81e0 	beq.w	8007c70 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 81d9 	beq.w	8007c70 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2210      	movs	r2, #16
 80078c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	f040 8151 	bne.w	8007b78 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a96      	ldr	r2, [pc, #600]	; (8007b38 <HAL_UART_IRQHandler+0x564>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d068      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a93      	ldr	r2, [pc, #588]	; (8007b3c <HAL_UART_IRQHandler+0x568>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d061      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a91      	ldr	r2, [pc, #580]	; (8007b40 <HAL_UART_IRQHandler+0x56c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d05a      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a8e      	ldr	r2, [pc, #568]	; (8007b44 <HAL_UART_IRQHandler+0x570>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d053      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a8c      	ldr	r2, [pc, #560]	; (8007b48 <HAL_UART_IRQHandler+0x574>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d04c      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a89      	ldr	r2, [pc, #548]	; (8007b4c <HAL_UART_IRQHandler+0x578>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d045      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a87      	ldr	r2, [pc, #540]	; (8007b50 <HAL_UART_IRQHandler+0x57c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d03e      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a84      	ldr	r2, [pc, #528]	; (8007b54 <HAL_UART_IRQHandler+0x580>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d037      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a82      	ldr	r2, [pc, #520]	; (8007b58 <HAL_UART_IRQHandler+0x584>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d030      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a7f      	ldr	r2, [pc, #508]	; (8007b5c <HAL_UART_IRQHandler+0x588>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d029      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a7d      	ldr	r2, [pc, #500]	; (8007b60 <HAL_UART_IRQHandler+0x58c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d022      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a7a      	ldr	r2, [pc, #488]	; (8007b64 <HAL_UART_IRQHandler+0x590>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d01b      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a78      	ldr	r2, [pc, #480]	; (8007b68 <HAL_UART_IRQHandler+0x594>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d014      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a75      	ldr	r2, [pc, #468]	; (8007b6c <HAL_UART_IRQHandler+0x598>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00d      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a73      	ldr	r2, [pc, #460]	; (8007b70 <HAL_UART_IRQHandler+0x59c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d006      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3e2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a70      	ldr	r2, [pc, #448]	; (8007b74 <HAL_UART_IRQHandler+0x5a0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d106      	bne.n	80079c4 <HAL_UART_IRQHandler+0x3f0>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	e005      	b.n	80079d0 <HAL_UART_IRQHandler+0x3fc>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 81ab 	beq.w	8007d34 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079e8:	429a      	cmp	r2, r3
 80079ea:	f080 81a3 	bcs.w	8007d34 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a04:	f000 8087 	beq.w	8007b16 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1da      	bne.n	8007a08 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a64:	f023 0301 	bic.w	r3, r3, #1
 8007a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3308      	adds	r3, #8
 8007a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e1      	bne.n	8007a52 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ab4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e3      	bne.n	8007a8e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae4:	f023 0310 	bic.w	r3, r3, #16
 8007ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007af8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e4      	bne.n	8007ad4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7f9 ffd9 	bl	8001ac8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f91d 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b36:	e0fd      	b.n	8007d34 <HAL_UART_IRQHandler+0x760>
 8007b38:	40020010 	.word	0x40020010
 8007b3c:	40020028 	.word	0x40020028
 8007b40:	40020040 	.word	0x40020040
 8007b44:	40020058 	.word	0x40020058
 8007b48:	40020070 	.word	0x40020070
 8007b4c:	40020088 	.word	0x40020088
 8007b50:	400200a0 	.word	0x400200a0
 8007b54:	400200b8 	.word	0x400200b8
 8007b58:	40020410 	.word	0x40020410
 8007b5c:	40020428 	.word	0x40020428
 8007b60:	40020440 	.word	0x40020440
 8007b64:	40020458 	.word	0x40020458
 8007b68:	40020470 	.word	0x40020470
 8007b6c:	40020488 	.word	0x40020488
 8007b70:	400204a0 	.word	0x400204a0
 8007b74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80cf 	beq.w	8007d38 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80ca 	beq.w	8007d38 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e4      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	4b55      	ldr	r3, [pc, #340]	; (8007d44 <HAL_UART_IRQHandler+0x770>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e3      	bne.n	8007bda <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0310 	bic.w	r3, r3, #16
 8007c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c48:	61fb      	str	r3, [r7, #28]
 8007c4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	69b9      	ldr	r1, [r7, #24]
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	617b      	str	r3, [r7, #20]
   return(result);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e4      	bne.n	8007c26 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f881 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c6e:	e063      	b.n	8007d38 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00e      	beq.n	8007c9a <HAL_UART_IRQHandler+0x6c6>
 8007c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 f83b 	bl	8008d0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c98:	e051      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d014      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d03a      	beq.n	8007d3c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
    }
    return;
 8007cce:	e035      	b.n	8007d3c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x71c>
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 ffe5 	bl	8008cb8 <UART_EndTransmit_IT>
    return;
 8007cee:	e026      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <HAL_UART_IRQHandler+0x73c>
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f814 	bl	8008d36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d0e:	e016      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d010      	beq.n	8007d3e <HAL_UART_IRQHandler+0x76a>
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da0c      	bge.n	8007d3e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fffc 	bl	8008d22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d2a:	e008      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
      return;
 8007d2c:	bf00      	nop
 8007d2e:	e006      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
    return;
 8007d30:	bf00      	nop
 8007d32:	e004      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
      return;
 8007d34:	bf00      	nop
 8007d36:	e002      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
      return;
 8007d38:	bf00      	nop
 8007d3a:	e000      	b.n	8007d3e <HAL_UART_IRQHandler+0x76a>
    return;
 8007d3c:	bf00      	nop
  }
}
 8007d3e:	37e8      	adds	r7, #232	; 0xe8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	effffffe 	.word	0xeffffffe

08007d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d8c:	b092      	sub	sp, #72	; 0x48
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	431a      	orrs	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4bbe      	ldr	r3, [pc, #760]	; (80080b0 <UART_SetConfig+0x328>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4ab3      	ldr	r2, [pc, #716]	; (80080b4 <UART_SetConfig+0x32c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df0:	4313      	orrs	r3, r2
 8007df2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	4baf      	ldr	r3, [pc, #700]	; (80080b8 <UART_SetConfig+0x330>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e04:	430b      	orrs	r3, r1
 8007e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	f023 010f 	bic.w	r1, r3, #15
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4aa6      	ldr	r2, [pc, #664]	; (80080bc <UART_SetConfig+0x334>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d177      	bne.n	8007f18 <UART_SetConfig+0x190>
 8007e28:	4ba5      	ldr	r3, [pc, #660]	; (80080c0 <UART_SetConfig+0x338>)
 8007e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e30:	2b28      	cmp	r3, #40	; 0x28
 8007e32:	d86d      	bhi.n	8007f10 <UART_SetConfig+0x188>
 8007e34:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <UART_SetConfig+0xb4>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007ee1 	.word	0x08007ee1
 8007e40:	08007f11 	.word	0x08007f11
 8007e44:	08007f11 	.word	0x08007f11
 8007e48:	08007f11 	.word	0x08007f11
 8007e4c:	08007f11 	.word	0x08007f11
 8007e50:	08007f11 	.word	0x08007f11
 8007e54:	08007f11 	.word	0x08007f11
 8007e58:	08007f11 	.word	0x08007f11
 8007e5c:	08007ee9 	.word	0x08007ee9
 8007e60:	08007f11 	.word	0x08007f11
 8007e64:	08007f11 	.word	0x08007f11
 8007e68:	08007f11 	.word	0x08007f11
 8007e6c:	08007f11 	.word	0x08007f11
 8007e70:	08007f11 	.word	0x08007f11
 8007e74:	08007f11 	.word	0x08007f11
 8007e78:	08007f11 	.word	0x08007f11
 8007e7c:	08007ef1 	.word	0x08007ef1
 8007e80:	08007f11 	.word	0x08007f11
 8007e84:	08007f11 	.word	0x08007f11
 8007e88:	08007f11 	.word	0x08007f11
 8007e8c:	08007f11 	.word	0x08007f11
 8007e90:	08007f11 	.word	0x08007f11
 8007e94:	08007f11 	.word	0x08007f11
 8007e98:	08007f11 	.word	0x08007f11
 8007e9c:	08007ef9 	.word	0x08007ef9
 8007ea0:	08007f11 	.word	0x08007f11
 8007ea4:	08007f11 	.word	0x08007f11
 8007ea8:	08007f11 	.word	0x08007f11
 8007eac:	08007f11 	.word	0x08007f11
 8007eb0:	08007f11 	.word	0x08007f11
 8007eb4:	08007f11 	.word	0x08007f11
 8007eb8:	08007f11 	.word	0x08007f11
 8007ebc:	08007f01 	.word	0x08007f01
 8007ec0:	08007f11 	.word	0x08007f11
 8007ec4:	08007f11 	.word	0x08007f11
 8007ec8:	08007f11 	.word	0x08007f11
 8007ecc:	08007f11 	.word	0x08007f11
 8007ed0:	08007f11 	.word	0x08007f11
 8007ed4:	08007f11 	.word	0x08007f11
 8007ed8:	08007f11 	.word	0x08007f11
 8007edc:	08007f09 	.word	0x08007f09
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e222      	b.n	800832e <UART_SetConfig+0x5a6>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e21e      	b.n	800832e <UART_SetConfig+0x5a6>
 8007ef0:	2308      	movs	r3, #8
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e21a      	b.n	800832e <UART_SetConfig+0x5a6>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e216      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f00:	2320      	movs	r3, #32
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f06:	e212      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0e:	e20e      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f10:	2380      	movs	r3, #128	; 0x80
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f16:	e20a      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a69      	ldr	r2, [pc, #420]	; (80080c4 <UART_SetConfig+0x33c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d130      	bne.n	8007f84 <UART_SetConfig+0x1fc>
 8007f22:	4b67      	ldr	r3, [pc, #412]	; (80080c0 <UART_SetConfig+0x338>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d826      	bhi.n	8007f7c <UART_SetConfig+0x1f4>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <UART_SetConfig+0x1ac>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f4d 	.word	0x08007f4d
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f5d 	.word	0x08007f5d
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e1ec      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e1e8      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e1e4      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e1e0      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f72:	e1dc      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7a:	e1d8      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f7c:	2380      	movs	r3, #128	; 0x80
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f82:	e1d4      	b.n	800832e <UART_SetConfig+0x5a6>
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a4f      	ldr	r2, [pc, #316]	; (80080c8 <UART_SetConfig+0x340>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d130      	bne.n	8007ff0 <UART_SetConfig+0x268>
 8007f8e:	4b4c      	ldr	r3, [pc, #304]	; (80080c0 <UART_SetConfig+0x338>)
 8007f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d826      	bhi.n	8007fe8 <UART_SetConfig+0x260>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <UART_SetConfig+0x218>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fd9 	.word	0x08007fd9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fbe:	e1b6      	b.n	800832e <UART_SetConfig+0x5a6>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc6:	e1b2      	b.n	800832e <UART_SetConfig+0x5a6>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fce:	e1ae      	b.n	800832e <UART_SetConfig+0x5a6>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e1aa      	b.n	800832e <UART_SetConfig+0x5a6>
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e1a6      	b.n	800832e <UART_SetConfig+0x5a6>
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e1a2      	b.n	800832e <UART_SetConfig+0x5a6>
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fee:	e19e      	b.n	800832e <UART_SetConfig+0x5a6>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a35      	ldr	r2, [pc, #212]	; (80080cc <UART_SetConfig+0x344>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d130      	bne.n	800805c <UART_SetConfig+0x2d4>
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <UART_SetConfig+0x338>)
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b05      	cmp	r3, #5
 8008004:	d826      	bhi.n	8008054 <UART_SetConfig+0x2cc>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <UART_SetConfig+0x284>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008025 	.word	0x08008025
 8008010:	0800802d 	.word	0x0800802d
 8008014:	08008035 	.word	0x08008035
 8008018:	0800803d 	.word	0x0800803d
 800801c:	08008045 	.word	0x08008045
 8008020:	0800804d 	.word	0x0800804d
 8008024:	2300      	movs	r3, #0
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e180      	b.n	800832e <UART_SetConfig+0x5a6>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e17c      	b.n	800832e <UART_SetConfig+0x5a6>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e178      	b.n	800832e <UART_SetConfig+0x5a6>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e174      	b.n	800832e <UART_SetConfig+0x5a6>
 8008044:	2320      	movs	r3, #32
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e170      	b.n	800832e <UART_SetConfig+0x5a6>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e16c      	b.n	800832e <UART_SetConfig+0x5a6>
 8008054:	2380      	movs	r3, #128	; 0x80
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e168      	b.n	800832e <UART_SetConfig+0x5a6>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <UART_SetConfig+0x348>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d142      	bne.n	80080ec <UART_SetConfig+0x364>
 8008066:	4b16      	ldr	r3, [pc, #88]	; (80080c0 <UART_SetConfig+0x338>)
 8008068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	2b05      	cmp	r3, #5
 8008070:	d838      	bhi.n	80080e4 <UART_SetConfig+0x35c>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <UART_SetConfig+0x2f0>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	08008091 	.word	0x08008091
 800807c:	08008099 	.word	0x08008099
 8008080:	080080a1 	.word	0x080080a1
 8008084:	080080a9 	.word	0x080080a9
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080dd 	.word	0x080080dd
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e14a      	b.n	800832e <UART_SetConfig+0x5a6>
 8008098:	2304      	movs	r3, #4
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809e:	e146      	b.n	800832e <UART_SetConfig+0x5a6>
 80080a0:	2308      	movs	r3, #8
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a6:	e142      	b.n	800832e <UART_SetConfig+0x5a6>
 80080a8:	2310      	movs	r3, #16
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e13e      	b.n	800832e <UART_SetConfig+0x5a6>
 80080b0:	cfff69f3 	.word	0xcfff69f3
 80080b4:	58000c00 	.word	0x58000c00
 80080b8:	11fff4ff 	.word	0x11fff4ff
 80080bc:	40011000 	.word	0x40011000
 80080c0:	58024400 	.word	0x58024400
 80080c4:	40004400 	.word	0x40004400
 80080c8:	40004800 	.word	0x40004800
 80080cc:	40004c00 	.word	0x40004c00
 80080d0:	40005000 	.word	0x40005000
 80080d4:	2320      	movs	r3, #32
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e128      	b.n	800832e <UART_SetConfig+0x5a6>
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e124      	b.n	800832e <UART_SetConfig+0x5a6>
 80080e4:	2380      	movs	r3, #128	; 0x80
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e120      	b.n	800832e <UART_SetConfig+0x5a6>
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4acb      	ldr	r2, [pc, #812]	; (8008420 <UART_SetConfig+0x698>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d176      	bne.n	80081e4 <UART_SetConfig+0x45c>
 80080f6:	4bcb      	ldr	r3, [pc, #812]	; (8008424 <UART_SetConfig+0x69c>)
 80080f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080fe:	2b28      	cmp	r3, #40	; 0x28
 8008100:	d86c      	bhi.n	80081dc <UART_SetConfig+0x454>
 8008102:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <UART_SetConfig+0x380>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	080081ad 	.word	0x080081ad
 800810c:	080081dd 	.word	0x080081dd
 8008110:	080081dd 	.word	0x080081dd
 8008114:	080081dd 	.word	0x080081dd
 8008118:	080081dd 	.word	0x080081dd
 800811c:	080081dd 	.word	0x080081dd
 8008120:	080081dd 	.word	0x080081dd
 8008124:	080081dd 	.word	0x080081dd
 8008128:	080081b5 	.word	0x080081b5
 800812c:	080081dd 	.word	0x080081dd
 8008130:	080081dd 	.word	0x080081dd
 8008134:	080081dd 	.word	0x080081dd
 8008138:	080081dd 	.word	0x080081dd
 800813c:	080081dd 	.word	0x080081dd
 8008140:	080081dd 	.word	0x080081dd
 8008144:	080081dd 	.word	0x080081dd
 8008148:	080081bd 	.word	0x080081bd
 800814c:	080081dd 	.word	0x080081dd
 8008150:	080081dd 	.word	0x080081dd
 8008154:	080081dd 	.word	0x080081dd
 8008158:	080081dd 	.word	0x080081dd
 800815c:	080081dd 	.word	0x080081dd
 8008160:	080081dd 	.word	0x080081dd
 8008164:	080081dd 	.word	0x080081dd
 8008168:	080081c5 	.word	0x080081c5
 800816c:	080081dd 	.word	0x080081dd
 8008170:	080081dd 	.word	0x080081dd
 8008174:	080081dd 	.word	0x080081dd
 8008178:	080081dd 	.word	0x080081dd
 800817c:	080081dd 	.word	0x080081dd
 8008180:	080081dd 	.word	0x080081dd
 8008184:	080081dd 	.word	0x080081dd
 8008188:	080081cd 	.word	0x080081cd
 800818c:	080081dd 	.word	0x080081dd
 8008190:	080081dd 	.word	0x080081dd
 8008194:	080081dd 	.word	0x080081dd
 8008198:	080081dd 	.word	0x080081dd
 800819c:	080081dd 	.word	0x080081dd
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081dd 	.word	0x080081dd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e0bc      	b.n	800832e <UART_SetConfig+0x5a6>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ba:	e0b8      	b.n	800832e <UART_SetConfig+0x5a6>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c2:	e0b4      	b.n	800832e <UART_SetConfig+0x5a6>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e0b0      	b.n	800832e <UART_SetConfig+0x5a6>
 80081cc:	2320      	movs	r3, #32
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d2:	e0ac      	b.n	800832e <UART_SetConfig+0x5a6>
 80081d4:	2340      	movs	r3, #64	; 0x40
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081da:	e0a8      	b.n	800832e <UART_SetConfig+0x5a6>
 80081dc:	2380      	movs	r3, #128	; 0x80
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e2:	e0a4      	b.n	800832e <UART_SetConfig+0x5a6>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a8f      	ldr	r2, [pc, #572]	; (8008428 <UART_SetConfig+0x6a0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d130      	bne.n	8008250 <UART_SetConfig+0x4c8>
 80081ee:	4b8d      	ldr	r3, [pc, #564]	; (8008424 <UART_SetConfig+0x69c>)
 80081f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d826      	bhi.n	8008248 <UART_SetConfig+0x4c0>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <UART_SetConfig+0x478>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008219 	.word	0x08008219
 8008204:	08008221 	.word	0x08008221
 8008208:	08008229 	.word	0x08008229
 800820c:	08008231 	.word	0x08008231
 8008210:	08008239 	.word	0x08008239
 8008214:	08008241 	.word	0x08008241
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821e:	e086      	b.n	800832e <UART_SetConfig+0x5a6>
 8008220:	2304      	movs	r3, #4
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008226:	e082      	b.n	800832e <UART_SetConfig+0x5a6>
 8008228:	2308      	movs	r3, #8
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e07e      	b.n	800832e <UART_SetConfig+0x5a6>
 8008230:	2310      	movs	r3, #16
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e07a      	b.n	800832e <UART_SetConfig+0x5a6>
 8008238:	2320      	movs	r3, #32
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e076      	b.n	800832e <UART_SetConfig+0x5a6>
 8008240:	2340      	movs	r3, #64	; 0x40
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e072      	b.n	800832e <UART_SetConfig+0x5a6>
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e06e      	b.n	800832e <UART_SetConfig+0x5a6>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a75      	ldr	r2, [pc, #468]	; (800842c <UART_SetConfig+0x6a4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d130      	bne.n	80082bc <UART_SetConfig+0x534>
 800825a:	4b72      	ldr	r3, [pc, #456]	; (8008424 <UART_SetConfig+0x69c>)
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b05      	cmp	r3, #5
 8008264:	d826      	bhi.n	80082b4 <UART_SetConfig+0x52c>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <UART_SetConfig+0x4e4>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008285 	.word	0x08008285
 8008270:	0800828d 	.word	0x0800828d
 8008274:	08008295 	.word	0x08008295
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082ad 	.word	0x080082ad
 8008284:	2300      	movs	r3, #0
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828a:	e050      	b.n	800832e <UART_SetConfig+0x5a6>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008292:	e04c      	b.n	800832e <UART_SetConfig+0x5a6>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e048      	b.n	800832e <UART_SetConfig+0x5a6>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e044      	b.n	800832e <UART_SetConfig+0x5a6>
 80082a4:	2320      	movs	r3, #32
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e040      	b.n	800832e <UART_SetConfig+0x5a6>
 80082ac:	2340      	movs	r3, #64	; 0x40
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e03c      	b.n	800832e <UART_SetConfig+0x5a6>
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e038      	b.n	800832e <UART_SetConfig+0x5a6>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a5b      	ldr	r2, [pc, #364]	; (8008430 <UART_SetConfig+0x6a8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d130      	bne.n	8008328 <UART_SetConfig+0x5a0>
 80082c6:	4b57      	ldr	r3, [pc, #348]	; (8008424 <UART_SetConfig+0x69c>)
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d826      	bhi.n	8008320 <UART_SetConfig+0x598>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <UART_SetConfig+0x550>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082f1 	.word	0x080082f1
 80082dc:	080082f9 	.word	0x080082f9
 80082e0:	08008301 	.word	0x08008301
 80082e4:	08008309 	.word	0x08008309
 80082e8:	08008311 	.word	0x08008311
 80082ec:	08008319 	.word	0x08008319
 80082f0:	2302      	movs	r3, #2
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e01a      	b.n	800832e <UART_SetConfig+0x5a6>
 80082f8:	2304      	movs	r3, #4
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e016      	b.n	800832e <UART_SetConfig+0x5a6>
 8008300:	2308      	movs	r3, #8
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e012      	b.n	800832e <UART_SetConfig+0x5a6>
 8008308:	2310      	movs	r3, #16
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e00e      	b.n	800832e <UART_SetConfig+0x5a6>
 8008310:	2320      	movs	r3, #32
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e00a      	b.n	800832e <UART_SetConfig+0x5a6>
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e006      	b.n	800832e <UART_SetConfig+0x5a6>
 8008320:	2380      	movs	r3, #128	; 0x80
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e002      	b.n	800832e <UART_SetConfig+0x5a6>
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a3f      	ldr	r2, [pc, #252]	; (8008430 <UART_SetConfig+0x6a8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	f040 80f8 	bne.w	800852a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800833a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800833e:	2b20      	cmp	r3, #32
 8008340:	dc46      	bgt.n	80083d0 <UART_SetConfig+0x648>
 8008342:	2b02      	cmp	r3, #2
 8008344:	f2c0 8082 	blt.w	800844c <UART_SetConfig+0x6c4>
 8008348:	3b02      	subs	r3, #2
 800834a:	2b1e      	cmp	r3, #30
 800834c:	d87e      	bhi.n	800844c <UART_SetConfig+0x6c4>
 800834e:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <UART_SetConfig+0x5cc>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	080083d7 	.word	0x080083d7
 8008358:	0800844d 	.word	0x0800844d
 800835c:	080083df 	.word	0x080083df
 8008360:	0800844d 	.word	0x0800844d
 8008364:	0800844d 	.word	0x0800844d
 8008368:	0800844d 	.word	0x0800844d
 800836c:	080083ef 	.word	0x080083ef
 8008370:	0800844d 	.word	0x0800844d
 8008374:	0800844d 	.word	0x0800844d
 8008378:	0800844d 	.word	0x0800844d
 800837c:	0800844d 	.word	0x0800844d
 8008380:	0800844d 	.word	0x0800844d
 8008384:	0800844d 	.word	0x0800844d
 8008388:	0800844d 	.word	0x0800844d
 800838c:	080083ff 	.word	0x080083ff
 8008390:	0800844d 	.word	0x0800844d
 8008394:	0800844d 	.word	0x0800844d
 8008398:	0800844d 	.word	0x0800844d
 800839c:	0800844d 	.word	0x0800844d
 80083a0:	0800844d 	.word	0x0800844d
 80083a4:	0800844d 	.word	0x0800844d
 80083a8:	0800844d 	.word	0x0800844d
 80083ac:	0800844d 	.word	0x0800844d
 80083b0:	0800844d 	.word	0x0800844d
 80083b4:	0800844d 	.word	0x0800844d
 80083b8:	0800844d 	.word	0x0800844d
 80083bc:	0800844d 	.word	0x0800844d
 80083c0:	0800844d 	.word	0x0800844d
 80083c4:	0800844d 	.word	0x0800844d
 80083c8:	0800844d 	.word	0x0800844d
 80083cc:	0800843f 	.word	0x0800843f
 80083d0:	2b40      	cmp	r3, #64	; 0x40
 80083d2:	d037      	beq.n	8008444 <UART_SetConfig+0x6bc>
 80083d4:	e03a      	b.n	800844c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083d6:	f7fe fbfd 	bl	8006bd4 <HAL_RCCEx_GetD3PCLK1Freq>
 80083da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083dc:	e03c      	b.n	8008458 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fc0c 	bl	8006c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ec:	e034      	b.n	8008458 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ee:	f107 0318 	add.w	r3, r7, #24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fd58 	bl	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fc:	e02c      	b.n	8008458 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <UART_SetConfig+0x69c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d016      	beq.n	8008438 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <UART_SetConfig+0x69c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	08db      	lsrs	r3, r3, #3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	4a07      	ldr	r2, [pc, #28]	; (8008434 <UART_SetConfig+0x6ac>)
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800841c:	e01c      	b.n	8008458 <UART_SetConfig+0x6d0>
 800841e:	bf00      	nop
 8008420:	40011400 	.word	0x40011400
 8008424:	58024400 	.word	0x58024400
 8008428:	40007800 	.word	0x40007800
 800842c:	40007c00 	.word	0x40007c00
 8008430:	58000c00 	.word	0x58000c00
 8008434:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008438:	4b9d      	ldr	r3, [pc, #628]	; (80086b0 <UART_SetConfig+0x928>)
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843c:	e00c      	b.n	8008458 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800843e:	4b9d      	ldr	r3, [pc, #628]	; (80086b4 <UART_SetConfig+0x92c>)
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008442:	e009      	b.n	8008458 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844a:	e005      	b.n	8008458 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008456:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 81de 	beq.w	800881c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	4a94      	ldr	r2, [pc, #592]	; (80086b8 <UART_SetConfig+0x930>)
 8008466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800846a:	461a      	mov	r2, r3
 800846c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008472:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	4413      	add	r3, r2
 800847e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008480:	429a      	cmp	r2, r3
 8008482:	d305      	bcc.n	8008490 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800848a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848c:	429a      	cmp	r2, r3
 800848e:	d903      	bls.n	8008498 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008496:	e1c1      	b.n	800881c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849a:	2200      	movs	r2, #0
 800849c:	60bb      	str	r3, [r7, #8]
 800849e:	60fa      	str	r2, [r7, #12]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	4a84      	ldr	r2, [pc, #528]	; (80086b8 <UART_SetConfig+0x930>)
 80084a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2200      	movs	r2, #0
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084ba:	f7f7 ff61 	bl	8000380 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4610      	mov	r0, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	f04f 0200 	mov.w	r2, #0
 80084ca:	f04f 0300 	mov.w	r3, #0
 80084ce:	020b      	lsls	r3, r1, #8
 80084d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084d4:	0202      	lsls	r2, r0, #8
 80084d6:	6979      	ldr	r1, [r7, #20]
 80084d8:	6849      	ldr	r1, [r1, #4]
 80084da:	0849      	lsrs	r1, r1, #1
 80084dc:	2000      	movs	r0, #0
 80084de:	460c      	mov	r4, r1
 80084e0:	4605      	mov	r5, r0
 80084e2:	eb12 0804 	adds.w	r8, r2, r4
 80084e6:	eb43 0905 	adc.w	r9, r3, r5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	469a      	mov	sl, r3
 80084f2:	4693      	mov	fp, r2
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	4640      	mov	r0, r8
 80084fa:	4649      	mov	r1, r9
 80084fc:	f7f7 ff40 	bl	8000380 <__aeabi_uldivmod>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4613      	mov	r3, r2
 8008506:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800850e:	d308      	bcc.n	8008522 <UART_SetConfig+0x79a>
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008516:	d204      	bcs.n	8008522 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851e:	60da      	str	r2, [r3, #12]
 8008520:	e17c      	b.n	800881c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008528:	e178      	b.n	800881c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008532:	f040 80c5 	bne.w	80086c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008536:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800853a:	2b20      	cmp	r3, #32
 800853c:	dc48      	bgt.n	80085d0 <UART_SetConfig+0x848>
 800853e:	2b00      	cmp	r3, #0
 8008540:	db7b      	blt.n	800863a <UART_SetConfig+0x8b2>
 8008542:	2b20      	cmp	r3, #32
 8008544:	d879      	bhi.n	800863a <UART_SetConfig+0x8b2>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0x7c4>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	080085d7 	.word	0x080085d7
 8008550:	080085df 	.word	0x080085df
 8008554:	0800863b 	.word	0x0800863b
 8008558:	0800863b 	.word	0x0800863b
 800855c:	080085e7 	.word	0x080085e7
 8008560:	0800863b 	.word	0x0800863b
 8008564:	0800863b 	.word	0x0800863b
 8008568:	0800863b 	.word	0x0800863b
 800856c:	080085f7 	.word	0x080085f7
 8008570:	0800863b 	.word	0x0800863b
 8008574:	0800863b 	.word	0x0800863b
 8008578:	0800863b 	.word	0x0800863b
 800857c:	0800863b 	.word	0x0800863b
 8008580:	0800863b 	.word	0x0800863b
 8008584:	0800863b 	.word	0x0800863b
 8008588:	0800863b 	.word	0x0800863b
 800858c:	08008607 	.word	0x08008607
 8008590:	0800863b 	.word	0x0800863b
 8008594:	0800863b 	.word	0x0800863b
 8008598:	0800863b 	.word	0x0800863b
 800859c:	0800863b 	.word	0x0800863b
 80085a0:	0800863b 	.word	0x0800863b
 80085a4:	0800863b 	.word	0x0800863b
 80085a8:	0800863b 	.word	0x0800863b
 80085ac:	0800863b 	.word	0x0800863b
 80085b0:	0800863b 	.word	0x0800863b
 80085b4:	0800863b 	.word	0x0800863b
 80085b8:	0800863b 	.word	0x0800863b
 80085bc:	0800863b 	.word	0x0800863b
 80085c0:	0800863b 	.word	0x0800863b
 80085c4:	0800863b 	.word	0x0800863b
 80085c8:	0800863b 	.word	0x0800863b
 80085cc:	0800862d 	.word	0x0800862d
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d02e      	beq.n	8008632 <UART_SetConfig+0x8aa>
 80085d4:	e031      	b.n	800863a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d6:	f7fd f8c7 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 80085da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085dc:	e033      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085de:	f7fd f8d9 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 80085e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085e4:	e02f      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fb08 	bl	8006c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f4:	e027      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f6:	f107 0318 	add.w	r3, r7, #24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fc54 	bl	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008604:	e01f      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008606:	4b2d      	ldr	r3, [pc, #180]	; (80086bc <UART_SetConfig+0x934>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008612:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <UART_SetConfig+0x934>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	08db      	lsrs	r3, r3, #3
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	4a24      	ldr	r2, [pc, #144]	; (80086b0 <UART_SetConfig+0x928>)
 800861e:	fa22 f303 	lsr.w	r3, r2, r3
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008624:	e00f      	b.n	8008646 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008626:	4b22      	ldr	r3, [pc, #136]	; (80086b0 <UART_SetConfig+0x928>)
 8008628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800862a:	e00c      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800862c:	4b21      	ldr	r3, [pc, #132]	; (80086b4 <UART_SetConfig+0x92c>)
 800862e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008630:	e009      	b.n	8008646 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008638:	e005      	b.n	8008646 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80e7 	beq.w	800881c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	4a19      	ldr	r2, [pc, #100]	; (80086b8 <UART_SetConfig+0x930>)
 8008654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008658:	461a      	mov	r2, r3
 800865a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008660:	005a      	lsls	r2, r3, #1
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	441a      	add	r2, r3
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	2b0f      	cmp	r3, #15
 8008678:	d916      	bls.n	80086a8 <UART_SetConfig+0x920>
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008680:	d212      	bcs.n	80086a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	b29b      	uxth	r3, r3
 8008686:	f023 030f 	bic.w	r3, r3, #15
 800868a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	b29b      	uxth	r3, r3
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	b29a      	uxth	r2, r3
 8008698:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800869a:	4313      	orrs	r3, r2
 800869c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	e0b9      	b.n	800881c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086ae:	e0b5      	b.n	800881c <UART_SetConfig+0xa94>
 80086b0:	03d09000 	.word	0x03d09000
 80086b4:	003d0900 	.word	0x003d0900
 80086b8:	08009f48 	.word	0x08009f48
 80086bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80086c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	dc49      	bgt.n	800875c <UART_SetConfig+0x9d4>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db7c      	blt.n	80087c6 <UART_SetConfig+0xa3e>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d87a      	bhi.n	80087c6 <UART_SetConfig+0xa3e>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <UART_SetConfig+0x950>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	08008763 	.word	0x08008763
 80086dc:	0800876b 	.word	0x0800876b
 80086e0:	080087c7 	.word	0x080087c7
 80086e4:	080087c7 	.word	0x080087c7
 80086e8:	08008773 	.word	0x08008773
 80086ec:	080087c7 	.word	0x080087c7
 80086f0:	080087c7 	.word	0x080087c7
 80086f4:	080087c7 	.word	0x080087c7
 80086f8:	08008783 	.word	0x08008783
 80086fc:	080087c7 	.word	0x080087c7
 8008700:	080087c7 	.word	0x080087c7
 8008704:	080087c7 	.word	0x080087c7
 8008708:	080087c7 	.word	0x080087c7
 800870c:	080087c7 	.word	0x080087c7
 8008710:	080087c7 	.word	0x080087c7
 8008714:	080087c7 	.word	0x080087c7
 8008718:	08008793 	.word	0x08008793
 800871c:	080087c7 	.word	0x080087c7
 8008720:	080087c7 	.word	0x080087c7
 8008724:	080087c7 	.word	0x080087c7
 8008728:	080087c7 	.word	0x080087c7
 800872c:	080087c7 	.word	0x080087c7
 8008730:	080087c7 	.word	0x080087c7
 8008734:	080087c7 	.word	0x080087c7
 8008738:	080087c7 	.word	0x080087c7
 800873c:	080087c7 	.word	0x080087c7
 8008740:	080087c7 	.word	0x080087c7
 8008744:	080087c7 	.word	0x080087c7
 8008748:	080087c7 	.word	0x080087c7
 800874c:	080087c7 	.word	0x080087c7
 8008750:	080087c7 	.word	0x080087c7
 8008754:	080087c7 	.word	0x080087c7
 8008758:	080087b9 	.word	0x080087b9
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d02e      	beq.n	80087be <UART_SetConfig+0xa36>
 8008760:	e031      	b.n	80087c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008762:	f7fd f801 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8008766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008768:	e033      	b.n	80087d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800876a:	f7fd f813 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 800876e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008770:	e02f      	b.n	80087d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fa42 	bl	8006c00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008780:	e027      	b.n	80087d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008782:	f107 0318 	add.w	r3, r7, #24
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fb8e 	bl	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008790:	e01f      	b.n	80087d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008792:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <UART_SetConfig+0xac0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800879e:	4b2a      	ldr	r3, [pc, #168]	; (8008848 <UART_SetConfig+0xac0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	08db      	lsrs	r3, r3, #3
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	4a28      	ldr	r2, [pc, #160]	; (800884c <UART_SetConfig+0xac4>)
 80087aa:	fa22 f303 	lsr.w	r3, r2, r3
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087b0:	e00f      	b.n	80087d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80087b2:	4b26      	ldr	r3, [pc, #152]	; (800884c <UART_SetConfig+0xac4>)
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b6:	e00c      	b.n	80087d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087b8:	4b25      	ldr	r3, [pc, #148]	; (8008850 <UART_SetConfig+0xac8>)
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087bc:	e009      	b.n	80087d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c4:	e005      	b.n	80087d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087d0:	bf00      	nop
    }

    if (pclk != 0U)
 80087d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d021      	beq.n	800881c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <UART_SetConfig+0xacc>)
 80087de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	441a      	add	r2, r3
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	2b0f      	cmp	r3, #15
 8008800:	d909      	bls.n	8008816 <UART_SetConfig+0xa8e>
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008808:	d205      	bcs.n	8008816 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	b29a      	uxth	r2, r3
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60da      	str	r2, [r3, #12]
 8008814:	e002      	b.n	800881c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2201      	movs	r2, #1
 8008820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2201      	movs	r2, #1
 8008828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008838:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800883c:	4618      	mov	r0, r3
 800883e:	3748      	adds	r7, #72	; 0x48
 8008840:	46bd      	mov	sp, r7
 8008842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008846:	bf00      	nop
 8008848:	58024400 	.word	0x58024400
 800884c:	03d09000 	.word	0x03d09000
 8008850:	003d0900 	.word	0x003d0900
 8008854:	08009f48 	.word	0x08009f48

08008858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	f003 0308 	and.w	r3, r3, #8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01a      	beq.n	800896e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008956:	d10a      	bne.n	800896e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b098      	sub	sp, #96	; 0x60
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089ac:	f7f8 ff2c 	bl	8001808 <HAL_GetTick>
 80089b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d12f      	bne.n	8008a20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c8:	2200      	movs	r2, #0
 80089ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f88e 	bl	8008af0 <UART_WaitOnFlagUntilTimeout>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d022      	beq.n	8008a20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ee:	653b      	str	r3, [r7, #80]	; 0x50
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f8:	647b      	str	r3, [r7, #68]	; 0x44
 80089fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e6      	bne.n	80089da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e063      	b.n	8008ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d149      	bne.n	8008ac2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a36:	2200      	movs	r2, #0
 8008a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f857 	bl	8008af0 <UART_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d03c      	beq.n	8008ac2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	623b      	str	r3, [r7, #32]
   return(result);
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a66:	633b      	str	r3, [r7, #48]	; 0x30
 8008a68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e6      	bne.n	8008a48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a9a:	61fa      	str	r2, [r7, #28]
 8008a9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	69b9      	ldr	r1, [r7, #24]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	617b      	str	r3, [r7, #20]
   return(result);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e5      	bne.n	8008a7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e012      	b.n	8008ae8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3758      	adds	r7, #88	; 0x58
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4613      	mov	r3, r2
 8008afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b00:	e049      	b.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b08:	d045      	beq.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b0a:	f7f8 fe7d 	bl	8001808 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d302      	bcc.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e048      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d031      	beq.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d110      	bne.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2208      	movs	r2, #8
 8008b46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f839 	bl	8008bc0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2208      	movs	r2, #8
 8008b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e029      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b70:	d111      	bne.n	8008b96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f81f 	bl	8008bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e00f      	b.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	bf0c      	ite	eq
 8008ba6:	2301      	moveq	r3, #1
 8008ba8:	2300      	movne	r3, #0
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d0a6      	beq.n	8008b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b095      	sub	sp, #84	; 0x54
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be6:	643b      	str	r3, [r7, #64]	; 0x40
 8008be8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e6      	bne.n	8008bc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	4b1e      	ldr	r3, [pc, #120]	; (8008c88 <UART_EndRxTransfer+0xc8>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e5      	bne.n	8008bfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d118      	bne.n	8008c68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f023 0310 	bic.w	r3, r3, #16
 8008c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6979      	ldr	r1, [r7, #20]
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	613b      	str	r3, [r7, #16]
   return(result);
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c7c:	bf00      	nop
 8008c7e:	3754      	adds	r7, #84	; 0x54
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	effffffe 	.word	0xeffffffe

08008c8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff f856 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6979      	ldr	r1, [r7, #20]
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	613b      	str	r3, [r7, #16]
   return(result);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff f821 	bl	8007d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d06:	bf00      	nop
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d2a:	bf00      	nop
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e027      	b.n	8008db0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2224      	movs	r2, #36	; 0x24
 8008d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0201 	bic.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e02d      	b.n	8008e30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2224      	movs	r2, #36	; 0x24
 8008de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0201 	bic.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f84f 	bl	8008eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e02d      	b.n	8008eac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2224      	movs	r2, #36	; 0x24
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0201 	bic.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f811 	bl	8008eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d108      	bne.n	8008ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ed4:	e031      	b.n	8008f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eda:	2310      	movs	r3, #16
 8008edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	0e5b      	lsrs	r3, r3, #25
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	0f5b      	lsrs	r3, r3, #29
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	7b3a      	ldrb	r2, [r7, #12]
 8008f02:	4911      	ldr	r1, [pc, #68]	; (8008f48 <UARTEx_SetNbDataToProcess+0x94>)
 8008f04:	5c8a      	ldrb	r2, [r1, r2]
 8008f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f0a:	7b3a      	ldrb	r2, [r7, #12]
 8008f0c:	490f      	ldr	r1, [pc, #60]	; (8008f4c <UARTEx_SetNbDataToProcess+0x98>)
 8008f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	7b7a      	ldrb	r2, [r7, #13]
 8008f20:	4909      	ldr	r1, [pc, #36]	; (8008f48 <UARTEx_SetNbDataToProcess+0x94>)
 8008f22:	5c8a      	ldrb	r2, [r1, r2]
 8008f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f28:	7b7a      	ldrb	r2, [r7, #13]
 8008f2a:	4908      	ldr	r1, [pc, #32]	; (8008f4c <UARTEx_SetNbDataToProcess+0x98>)
 8008f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	08009f60 	.word	0x08009f60
 8008f4c:	08009f68 	.word	0x08009f68

08008f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f50:	b084      	sub	sp, #16
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	f107 001c 	add.w	r0, r7, #28
 8008f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d120      	bne.n	8008faa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <USB_CoreInit+0xd4>)
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d105      	bne.n	8008f9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 faac 	bl	80094fc <USB_CoreReset>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	e01a      	b.n	8008fe0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 faa0 	bl	80094fc <USB_CoreReset>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8008fd2:	e005      	b.n	8008fe0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d116      	bne.n	8009014 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <USB_CoreInit+0xd8>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f043 0206 	orr.w	r2, r3, #6
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f043 0220 	orr.w	r2, r3, #32
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009020:	b004      	add	sp, #16
 8009022:	4770      	bx	lr
 8009024:	ffbdffbf 	.word	0xffbdffbf
 8009028:	03ee0000 	.word	0x03ee0000

0800902c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f023 0201 	bic.w	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d115      	bne.n	800909c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800907c:	2001      	movs	r0, #1
 800907e:	f7f8 fbcf 	bl	8001820 <HAL_Delay>
      ms++;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3301      	adds	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa29 	bl	80094e0 <USB_GetMode>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d01e      	beq.n	80090d2 <USB_SetCurrentMode+0x84>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b31      	cmp	r3, #49	; 0x31
 8009098:	d9f0      	bls.n	800907c <USB_SetCurrentMode+0x2e>
 800909a:	e01a      	b.n	80090d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800909c:	78fb      	ldrb	r3, [r7, #3]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d115      	bne.n	80090ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090ae:	2001      	movs	r0, #1
 80090b0:	f7f8 fbb6 	bl	8001820 <HAL_Delay>
      ms++;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa10 	bl	80094e0 <USB_GetMode>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <USB_SetCurrentMode+0x84>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b31      	cmp	r3, #49	; 0x31
 80090ca:	d9f0      	bls.n	80090ae <USB_SetCurrentMode+0x60>
 80090cc:	e001      	b.n	80090d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e005      	b.n	80090de <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b32      	cmp	r3, #50	; 0x32
 80090d6:	d101      	bne.n	80090dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090e8:	b084      	sub	sp, #16
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
 8009106:	e009      	b.n	800911c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3340      	adds	r3, #64	; 0x40
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	2200      	movs	r2, #0
 8009114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	3301      	adds	r3, #1
 800911a:	613b      	str	r3, [r7, #16]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	2b0e      	cmp	r3, #14
 8009120:	d9f2      	bls.n	8009108 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11c      	bne.n	8009162 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009136:	f043 0302 	orr.w	r3, r3, #2
 800913a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	e005      	b.n	800916e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009174:	461a      	mov	r2, r3
 8009176:	2300      	movs	r3, #0
 8009178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009180:	4619      	mov	r1, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	461a      	mov	r2, r3
 800918a:	680b      	ldr	r3, [r1, #0]
 800918c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	2b01      	cmp	r3, #1
 8009192:	d10c      	bne.n	80091ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800919a:	2100      	movs	r1, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f965 	bl	800946c <USB_SetDevSpeed>
 80091a2:	e008      	b.n	80091b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091a4:	2101      	movs	r1, #1
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f960 	bl	800946c <USB_SetDevSpeed>
 80091ac:	e003      	b.n	80091b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091ae:	2103      	movs	r1, #3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f95b 	bl	800946c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091b6:	2110      	movs	r1, #16
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8f3 	bl	80093a4 <USB_FlushTxFifo>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f91f 	bl	800940c <USB_FlushRxFifo>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091de:	461a      	mov	r2, r3
 80091e0:	2300      	movs	r3, #0
 80091e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ea:	461a      	mov	r2, r3
 80091ec:	2300      	movs	r3, #0
 80091ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f6:	461a      	mov	r2, r3
 80091f8:	2300      	movs	r3, #0
 80091fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	e043      	b.n	800928a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009218:	d118      	bne.n	800924c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	461a      	mov	r2, r3
 800922e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e013      	b.n	800925e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009242:	461a      	mov	r2, r3
 8009244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	e008      	b.n	800925e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	461a      	mov	r2, r3
 800925a:	2300      	movs	r3, #0
 800925c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926a:	461a      	mov	r2, r3
 800926c:	2300      	movs	r3, #0
 800926e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	461a      	mov	r2, r3
 800927e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	3301      	adds	r3, #1
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	429a      	cmp	r2, r3
 8009290:	d3b7      	bcc.n	8009202 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009292:	2300      	movs	r3, #0
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	e043      	b.n	8009320 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ae:	d118      	bne.n	80092e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	461a      	mov	r2, r3
 80092c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	e013      	b.n	80092f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	461a      	mov	r2, r3
 80092da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	e008      	b.n	80092f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	461a      	mov	r2, r3
 80092f0:	2300      	movs	r3, #0
 80092f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009300:	461a      	mov	r2, r3
 8009302:	2300      	movs	r3, #0
 8009304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	461a      	mov	r2, r3
 8009314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3301      	adds	r3, #1
 800931e:	613b      	str	r3, [r7, #16]
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	429a      	cmp	r2, r3
 8009326:	d3b7      	bcc.n	8009298 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800933a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f043 0210 	orr.w	r2, r3, #16
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699a      	ldr	r2, [r3, #24]
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <USB_DevInit+0x2b4>)
 8009362:	4313      	orrs	r3, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d005      	beq.n	800937a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f043 0208 	orr.w	r2, r3, #8
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800937a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d105      	bne.n	800938c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699a      	ldr	r2, [r3, #24]
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <USB_DevInit+0x2b8>)
 8009386:	4313      	orrs	r3, r2
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009398:	b004      	add	sp, #16
 800939a:	4770      	bx	lr
 800939c:	803c3800 	.word	0x803c3800
 80093a0:	40000004 	.word	0x40000004

080093a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a13      	ldr	r2, [pc, #76]	; (8009408 <USB_FlushTxFifo+0x64>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d901      	bls.n	80093c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e01b      	b.n	80093fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	daf2      	bge.n	80093b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	019b      	lsls	r3, r3, #6
 80093d4:	f043 0220 	orr.w	r2, r3, #32
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4a08      	ldr	r2, [pc, #32]	; (8009408 <USB_FlushTxFifo+0x64>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d901      	bls.n	80093ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e006      	b.n	80093fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d0f0      	beq.n	80093dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	00030d40 	.word	0x00030d40

0800940c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3301      	adds	r3, #1
 800941c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4a11      	ldr	r2, [pc, #68]	; (8009468 <USB_FlushRxFifo+0x5c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d901      	bls.n	800942a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e018      	b.n	800945c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	daf2      	bge.n	8009418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2210      	movs	r2, #16
 800943a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3301      	adds	r3, #1
 8009440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4a08      	ldr	r2, [pc, #32]	; (8009468 <USB_FlushRxFifo+0x5c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d901      	bls.n	800944e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e006      	b.n	800945c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b10      	cmp	r3, #16
 8009458:	d0f0      	beq.n	800943c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	00030d40 	.word	0x00030d40

0800946c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800948c:	4313      	orrs	r3, r2
 800948e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800949e:	b480      	push	{r7}
 80094a0:	b085      	sub	sp, #20
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094b8:	f023 0303 	bic.w	r3, r3, #3
 80094bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094cc:	f043 0302 	orr.w	r3, r3, #2
 80094d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	f003 0301 	and.w	r3, r3, #1
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3301      	adds	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <USB_CoreReset+0x64>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d901      	bls.n	800951a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e01b      	b.n	8009552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	daf2      	bge.n	8009508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f043 0201 	orr.w	r2, r3, #1
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a09      	ldr	r2, [pc, #36]	; (8009560 <USB_CoreReset+0x64>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d901      	bls.n	8009544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e006      	b.n	8009552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b01      	cmp	r3, #1
 800954e:	d0f0      	beq.n	8009532 <USB_CoreReset+0x36>

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	00030d40 	.word	0x00030d40

08009564 <siprintf>:
 8009564:	b40e      	push	{r1, r2, r3}
 8009566:	b500      	push	{lr}
 8009568:	b09c      	sub	sp, #112	; 0x70
 800956a:	ab1d      	add	r3, sp, #116	; 0x74
 800956c:	9002      	str	r0, [sp, #8]
 800956e:	9006      	str	r0, [sp, #24]
 8009570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009574:	4809      	ldr	r0, [pc, #36]	; (800959c <siprintf+0x38>)
 8009576:	9107      	str	r1, [sp, #28]
 8009578:	9104      	str	r1, [sp, #16]
 800957a:	4909      	ldr	r1, [pc, #36]	; (80095a0 <siprintf+0x3c>)
 800957c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009580:	9105      	str	r1, [sp, #20]
 8009582:	6800      	ldr	r0, [r0, #0]
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	a902      	add	r1, sp, #8
 8009588:	f000 f9a0 	bl	80098cc <_svfiprintf_r>
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	b01c      	add	sp, #112	; 0x70
 8009594:	f85d eb04 	ldr.w	lr, [sp], #4
 8009598:	b003      	add	sp, #12
 800959a:	4770      	bx	lr
 800959c:	2400005c 	.word	0x2400005c
 80095a0:	ffff0208 	.word	0xffff0208

080095a4 <memset>:
 80095a4:	4402      	add	r2, r0
 80095a6:	4603      	mov	r3, r0
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d100      	bne.n	80095ae <memset+0xa>
 80095ac:	4770      	bx	lr
 80095ae:	f803 1b01 	strb.w	r1, [r3], #1
 80095b2:	e7f9      	b.n	80095a8 <memset+0x4>

080095b4 <__errno>:
 80095b4:	4b01      	ldr	r3, [pc, #4]	; (80095bc <__errno+0x8>)
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	2400005c 	.word	0x2400005c

080095c0 <__libc_init_array>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	4d0d      	ldr	r5, [pc, #52]	; (80095f8 <__libc_init_array+0x38>)
 80095c4:	4c0d      	ldr	r4, [pc, #52]	; (80095fc <__libc_init_array+0x3c>)
 80095c6:	1b64      	subs	r4, r4, r5
 80095c8:	10a4      	asrs	r4, r4, #2
 80095ca:	2600      	movs	r6, #0
 80095cc:	42a6      	cmp	r6, r4
 80095ce:	d109      	bne.n	80095e4 <__libc_init_array+0x24>
 80095d0:	4d0b      	ldr	r5, [pc, #44]	; (8009600 <__libc_init_array+0x40>)
 80095d2:	4c0c      	ldr	r4, [pc, #48]	; (8009604 <__libc_init_array+0x44>)
 80095d4:	f000 fc6a 	bl	8009eac <_init>
 80095d8:	1b64      	subs	r4, r4, r5
 80095da:	10a4      	asrs	r4, r4, #2
 80095dc:	2600      	movs	r6, #0
 80095de:	42a6      	cmp	r6, r4
 80095e0:	d105      	bne.n	80095ee <__libc_init_array+0x2e>
 80095e2:	bd70      	pop	{r4, r5, r6, pc}
 80095e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e8:	4798      	blx	r3
 80095ea:	3601      	adds	r6, #1
 80095ec:	e7ee      	b.n	80095cc <__libc_init_array+0xc>
 80095ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f2:	4798      	blx	r3
 80095f4:	3601      	adds	r6, #1
 80095f6:	e7f2      	b.n	80095de <__libc_init_array+0x1e>
 80095f8:	08009fac 	.word	0x08009fac
 80095fc:	08009fac 	.word	0x08009fac
 8009600:	08009fac 	.word	0x08009fac
 8009604:	08009fb0 	.word	0x08009fb0

08009608 <__retarget_lock_acquire_recursive>:
 8009608:	4770      	bx	lr

0800960a <__retarget_lock_release_recursive>:
 800960a:	4770      	bx	lr

0800960c <memcpy>:
 800960c:	440a      	add	r2, r1
 800960e:	4291      	cmp	r1, r2
 8009610:	f100 33ff 	add.w	r3, r0, #4294967295
 8009614:	d100      	bne.n	8009618 <memcpy+0xc>
 8009616:	4770      	bx	lr
 8009618:	b510      	push	{r4, lr}
 800961a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800961e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009622:	4291      	cmp	r1, r2
 8009624:	d1f9      	bne.n	800961a <memcpy+0xe>
 8009626:	bd10      	pop	{r4, pc}

08009628 <_free_r>:
 8009628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800962a:	2900      	cmp	r1, #0
 800962c:	d044      	beq.n	80096b8 <_free_r+0x90>
 800962e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009632:	9001      	str	r0, [sp, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f1a1 0404 	sub.w	r4, r1, #4
 800963a:	bfb8      	it	lt
 800963c:	18e4      	addlt	r4, r4, r3
 800963e:	f000 f8df 	bl	8009800 <__malloc_lock>
 8009642:	4a1e      	ldr	r2, [pc, #120]	; (80096bc <_free_r+0x94>)
 8009644:	9801      	ldr	r0, [sp, #4]
 8009646:	6813      	ldr	r3, [r2, #0]
 8009648:	b933      	cbnz	r3, 8009658 <_free_r+0x30>
 800964a:	6063      	str	r3, [r4, #4]
 800964c:	6014      	str	r4, [r2, #0]
 800964e:	b003      	add	sp, #12
 8009650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009654:	f000 b8da 	b.w	800980c <__malloc_unlock>
 8009658:	42a3      	cmp	r3, r4
 800965a:	d908      	bls.n	800966e <_free_r+0x46>
 800965c:	6825      	ldr	r5, [r4, #0]
 800965e:	1961      	adds	r1, r4, r5
 8009660:	428b      	cmp	r3, r1
 8009662:	bf01      	itttt	eq
 8009664:	6819      	ldreq	r1, [r3, #0]
 8009666:	685b      	ldreq	r3, [r3, #4]
 8009668:	1949      	addeq	r1, r1, r5
 800966a:	6021      	streq	r1, [r4, #0]
 800966c:	e7ed      	b.n	800964a <_free_r+0x22>
 800966e:	461a      	mov	r2, r3
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	b10b      	cbz	r3, 8009678 <_free_r+0x50>
 8009674:	42a3      	cmp	r3, r4
 8009676:	d9fa      	bls.n	800966e <_free_r+0x46>
 8009678:	6811      	ldr	r1, [r2, #0]
 800967a:	1855      	adds	r5, r2, r1
 800967c:	42a5      	cmp	r5, r4
 800967e:	d10b      	bne.n	8009698 <_free_r+0x70>
 8009680:	6824      	ldr	r4, [r4, #0]
 8009682:	4421      	add	r1, r4
 8009684:	1854      	adds	r4, r2, r1
 8009686:	42a3      	cmp	r3, r4
 8009688:	6011      	str	r1, [r2, #0]
 800968a:	d1e0      	bne.n	800964e <_free_r+0x26>
 800968c:	681c      	ldr	r4, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	6053      	str	r3, [r2, #4]
 8009692:	440c      	add	r4, r1
 8009694:	6014      	str	r4, [r2, #0]
 8009696:	e7da      	b.n	800964e <_free_r+0x26>
 8009698:	d902      	bls.n	80096a0 <_free_r+0x78>
 800969a:	230c      	movs	r3, #12
 800969c:	6003      	str	r3, [r0, #0]
 800969e:	e7d6      	b.n	800964e <_free_r+0x26>
 80096a0:	6825      	ldr	r5, [r4, #0]
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf04      	itt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	6063      	str	r3, [r4, #4]
 80096ae:	bf04      	itt	eq
 80096b0:	1949      	addeq	r1, r1, r5
 80096b2:	6021      	streq	r1, [r4, #0]
 80096b4:	6054      	str	r4, [r2, #4]
 80096b6:	e7ca      	b.n	800964e <_free_r+0x26>
 80096b8:	b003      	add	sp, #12
 80096ba:	bd30      	pop	{r4, r5, pc}
 80096bc:	24000b14 	.word	0x24000b14

080096c0 <sbrk_aligned>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4e0e      	ldr	r6, [pc, #56]	; (80096fc <sbrk_aligned+0x3c>)
 80096c4:	460c      	mov	r4, r1
 80096c6:	6831      	ldr	r1, [r6, #0]
 80096c8:	4605      	mov	r5, r0
 80096ca:	b911      	cbnz	r1, 80096d2 <sbrk_aligned+0x12>
 80096cc:	f000 fba6 	bl	8009e1c <_sbrk_r>
 80096d0:	6030      	str	r0, [r6, #0]
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f000 fba1 	bl	8009e1c <_sbrk_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d00a      	beq.n	80096f4 <sbrk_aligned+0x34>
 80096de:	1cc4      	adds	r4, r0, #3
 80096e0:	f024 0403 	bic.w	r4, r4, #3
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d007      	beq.n	80096f8 <sbrk_aligned+0x38>
 80096e8:	1a21      	subs	r1, r4, r0
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 fb96 	bl	8009e1c <_sbrk_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d101      	bne.n	80096f8 <sbrk_aligned+0x38>
 80096f4:	f04f 34ff 	mov.w	r4, #4294967295
 80096f8:	4620      	mov	r0, r4
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	24000b18 	.word	0x24000b18

08009700 <_malloc_r>:
 8009700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009704:	1ccd      	adds	r5, r1, #3
 8009706:	f025 0503 	bic.w	r5, r5, #3
 800970a:	3508      	adds	r5, #8
 800970c:	2d0c      	cmp	r5, #12
 800970e:	bf38      	it	cc
 8009710:	250c      	movcc	r5, #12
 8009712:	2d00      	cmp	r5, #0
 8009714:	4607      	mov	r7, r0
 8009716:	db01      	blt.n	800971c <_malloc_r+0x1c>
 8009718:	42a9      	cmp	r1, r5
 800971a:	d905      	bls.n	8009728 <_malloc_r+0x28>
 800971c:	230c      	movs	r3, #12
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	2600      	movs	r6, #0
 8009722:	4630      	mov	r0, r6
 8009724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009728:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097fc <_malloc_r+0xfc>
 800972c:	f000 f868 	bl	8009800 <__malloc_lock>
 8009730:	f8d8 3000 	ldr.w	r3, [r8]
 8009734:	461c      	mov	r4, r3
 8009736:	bb5c      	cbnz	r4, 8009790 <_malloc_r+0x90>
 8009738:	4629      	mov	r1, r5
 800973a:	4638      	mov	r0, r7
 800973c:	f7ff ffc0 	bl	80096c0 <sbrk_aligned>
 8009740:	1c43      	adds	r3, r0, #1
 8009742:	4604      	mov	r4, r0
 8009744:	d155      	bne.n	80097f2 <_malloc_r+0xf2>
 8009746:	f8d8 4000 	ldr.w	r4, [r8]
 800974a:	4626      	mov	r6, r4
 800974c:	2e00      	cmp	r6, #0
 800974e:	d145      	bne.n	80097dc <_malloc_r+0xdc>
 8009750:	2c00      	cmp	r4, #0
 8009752:	d048      	beq.n	80097e6 <_malloc_r+0xe6>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	4631      	mov	r1, r6
 8009758:	4638      	mov	r0, r7
 800975a:	eb04 0903 	add.w	r9, r4, r3
 800975e:	f000 fb5d 	bl	8009e1c <_sbrk_r>
 8009762:	4581      	cmp	r9, r0
 8009764:	d13f      	bne.n	80097e6 <_malloc_r+0xe6>
 8009766:	6821      	ldr	r1, [r4, #0]
 8009768:	1a6d      	subs	r5, r5, r1
 800976a:	4629      	mov	r1, r5
 800976c:	4638      	mov	r0, r7
 800976e:	f7ff ffa7 	bl	80096c0 <sbrk_aligned>
 8009772:	3001      	adds	r0, #1
 8009774:	d037      	beq.n	80097e6 <_malloc_r+0xe6>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	442b      	add	r3, r5
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	f8d8 3000 	ldr.w	r3, [r8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d038      	beq.n	80097f6 <_malloc_r+0xf6>
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	42a2      	cmp	r2, r4
 8009788:	d12b      	bne.n	80097e2 <_malloc_r+0xe2>
 800978a:	2200      	movs	r2, #0
 800978c:	605a      	str	r2, [r3, #4]
 800978e:	e00f      	b.n	80097b0 <_malloc_r+0xb0>
 8009790:	6822      	ldr	r2, [r4, #0]
 8009792:	1b52      	subs	r2, r2, r5
 8009794:	d41f      	bmi.n	80097d6 <_malloc_r+0xd6>
 8009796:	2a0b      	cmp	r2, #11
 8009798:	d917      	bls.n	80097ca <_malloc_r+0xca>
 800979a:	1961      	adds	r1, r4, r5
 800979c:	42a3      	cmp	r3, r4
 800979e:	6025      	str	r5, [r4, #0]
 80097a0:	bf18      	it	ne
 80097a2:	6059      	strne	r1, [r3, #4]
 80097a4:	6863      	ldr	r3, [r4, #4]
 80097a6:	bf08      	it	eq
 80097a8:	f8c8 1000 	streq.w	r1, [r8]
 80097ac:	5162      	str	r2, [r4, r5]
 80097ae:	604b      	str	r3, [r1, #4]
 80097b0:	4638      	mov	r0, r7
 80097b2:	f104 060b 	add.w	r6, r4, #11
 80097b6:	f000 f829 	bl	800980c <__malloc_unlock>
 80097ba:	f026 0607 	bic.w	r6, r6, #7
 80097be:	1d23      	adds	r3, r4, #4
 80097c0:	1af2      	subs	r2, r6, r3
 80097c2:	d0ae      	beq.n	8009722 <_malloc_r+0x22>
 80097c4:	1b9b      	subs	r3, r3, r6
 80097c6:	50a3      	str	r3, [r4, r2]
 80097c8:	e7ab      	b.n	8009722 <_malloc_r+0x22>
 80097ca:	42a3      	cmp	r3, r4
 80097cc:	6862      	ldr	r2, [r4, #4]
 80097ce:	d1dd      	bne.n	800978c <_malloc_r+0x8c>
 80097d0:	f8c8 2000 	str.w	r2, [r8]
 80097d4:	e7ec      	b.n	80097b0 <_malloc_r+0xb0>
 80097d6:	4623      	mov	r3, r4
 80097d8:	6864      	ldr	r4, [r4, #4]
 80097da:	e7ac      	b.n	8009736 <_malloc_r+0x36>
 80097dc:	4634      	mov	r4, r6
 80097de:	6876      	ldr	r6, [r6, #4]
 80097e0:	e7b4      	b.n	800974c <_malloc_r+0x4c>
 80097e2:	4613      	mov	r3, r2
 80097e4:	e7cc      	b.n	8009780 <_malloc_r+0x80>
 80097e6:	230c      	movs	r3, #12
 80097e8:	603b      	str	r3, [r7, #0]
 80097ea:	4638      	mov	r0, r7
 80097ec:	f000 f80e 	bl	800980c <__malloc_unlock>
 80097f0:	e797      	b.n	8009722 <_malloc_r+0x22>
 80097f2:	6025      	str	r5, [r4, #0]
 80097f4:	e7dc      	b.n	80097b0 <_malloc_r+0xb0>
 80097f6:	605b      	str	r3, [r3, #4]
 80097f8:	deff      	udf	#255	; 0xff
 80097fa:	bf00      	nop
 80097fc:	24000b14 	.word	0x24000b14

08009800 <__malloc_lock>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__malloc_lock+0x8>)
 8009802:	f7ff bf01 	b.w	8009608 <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	24000b10 	.word	0x24000b10

0800980c <__malloc_unlock>:
 800980c:	4801      	ldr	r0, [pc, #4]	; (8009814 <__malloc_unlock+0x8>)
 800980e:	f7ff befc 	b.w	800960a <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	24000b10 	.word	0x24000b10

08009818 <__ssputs_r>:
 8009818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	688e      	ldr	r6, [r1, #8]
 800981e:	461f      	mov	r7, r3
 8009820:	42be      	cmp	r6, r7
 8009822:	680b      	ldr	r3, [r1, #0]
 8009824:	4682      	mov	sl, r0
 8009826:	460c      	mov	r4, r1
 8009828:	4690      	mov	r8, r2
 800982a:	d82c      	bhi.n	8009886 <__ssputs_r+0x6e>
 800982c:	898a      	ldrh	r2, [r1, #12]
 800982e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009832:	d026      	beq.n	8009882 <__ssputs_r+0x6a>
 8009834:	6965      	ldr	r5, [r4, #20]
 8009836:	6909      	ldr	r1, [r1, #16]
 8009838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983c:	eba3 0901 	sub.w	r9, r3, r1
 8009840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009844:	1c7b      	adds	r3, r7, #1
 8009846:	444b      	add	r3, r9
 8009848:	106d      	asrs	r5, r5, #1
 800984a:	429d      	cmp	r5, r3
 800984c:	bf38      	it	cc
 800984e:	461d      	movcc	r5, r3
 8009850:	0553      	lsls	r3, r2, #21
 8009852:	d527      	bpl.n	80098a4 <__ssputs_r+0x8c>
 8009854:	4629      	mov	r1, r5
 8009856:	f7ff ff53 	bl	8009700 <_malloc_r>
 800985a:	4606      	mov	r6, r0
 800985c:	b360      	cbz	r0, 80098b8 <__ssputs_r+0xa0>
 800985e:	6921      	ldr	r1, [r4, #16]
 8009860:	464a      	mov	r2, r9
 8009862:	f7ff fed3 	bl	800960c <memcpy>
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800986c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	6126      	str	r6, [r4, #16]
 8009874:	6165      	str	r5, [r4, #20]
 8009876:	444e      	add	r6, r9
 8009878:	eba5 0509 	sub.w	r5, r5, r9
 800987c:	6026      	str	r6, [r4, #0]
 800987e:	60a5      	str	r5, [r4, #8]
 8009880:	463e      	mov	r6, r7
 8009882:	42be      	cmp	r6, r7
 8009884:	d900      	bls.n	8009888 <__ssputs_r+0x70>
 8009886:	463e      	mov	r6, r7
 8009888:	6820      	ldr	r0, [r4, #0]
 800988a:	4632      	mov	r2, r6
 800988c:	4641      	mov	r1, r8
 800988e:	f000 faab 	bl	8009de8 <memmove>
 8009892:	68a3      	ldr	r3, [r4, #8]
 8009894:	1b9b      	subs	r3, r3, r6
 8009896:	60a3      	str	r3, [r4, #8]
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	4433      	add	r3, r6
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	2000      	movs	r0, #0
 80098a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a4:	462a      	mov	r2, r5
 80098a6:	f000 fac9 	bl	8009e3c <_realloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d1e0      	bne.n	8009872 <__ssputs_r+0x5a>
 80098b0:	6921      	ldr	r1, [r4, #16]
 80098b2:	4650      	mov	r0, sl
 80098b4:	f7ff feb8 	bl	8009628 <_free_r>
 80098b8:	230c      	movs	r3, #12
 80098ba:	f8ca 3000 	str.w	r3, [sl]
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ca:	e7e9      	b.n	80098a0 <__ssputs_r+0x88>

080098cc <_svfiprintf_r>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4698      	mov	r8, r3
 80098d2:	898b      	ldrh	r3, [r1, #12]
 80098d4:	061b      	lsls	r3, r3, #24
 80098d6:	b09d      	sub	sp, #116	; 0x74
 80098d8:	4607      	mov	r7, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	d50e      	bpl.n	80098fe <_svfiprintf_r+0x32>
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	b963      	cbnz	r3, 80098fe <_svfiprintf_r+0x32>
 80098e4:	2140      	movs	r1, #64	; 0x40
 80098e6:	f7ff ff0b 	bl	8009700 <_malloc_r>
 80098ea:	6028      	str	r0, [r5, #0]
 80098ec:	6128      	str	r0, [r5, #16]
 80098ee:	b920      	cbnz	r0, 80098fa <_svfiprintf_r+0x2e>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e0d0      	b.n	8009a9c <_svfiprintf_r+0x1d0>
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	616b      	str	r3, [r5, #20]
 80098fe:	2300      	movs	r3, #0
 8009900:	9309      	str	r3, [sp, #36]	; 0x24
 8009902:	2320      	movs	r3, #32
 8009904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009908:	f8cd 800c 	str.w	r8, [sp, #12]
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ab4 <_svfiprintf_r+0x1e8>
 8009912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009916:	f04f 0901 	mov.w	r9, #1
 800991a:	4623      	mov	r3, r4
 800991c:	469a      	mov	sl, r3
 800991e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009922:	b10a      	cbz	r2, 8009928 <_svfiprintf_r+0x5c>
 8009924:	2a25      	cmp	r2, #37	; 0x25
 8009926:	d1f9      	bne.n	800991c <_svfiprintf_r+0x50>
 8009928:	ebba 0b04 	subs.w	fp, sl, r4
 800992c:	d00b      	beq.n	8009946 <_svfiprintf_r+0x7a>
 800992e:	465b      	mov	r3, fp
 8009930:	4622      	mov	r2, r4
 8009932:	4629      	mov	r1, r5
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ff6f 	bl	8009818 <__ssputs_r>
 800993a:	3001      	adds	r0, #1
 800993c:	f000 80a9 	beq.w	8009a92 <_svfiprintf_r+0x1c6>
 8009940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009942:	445a      	add	r2, fp
 8009944:	9209      	str	r2, [sp, #36]	; 0x24
 8009946:	f89a 3000 	ldrb.w	r3, [sl]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80a1 	beq.w	8009a92 <_svfiprintf_r+0x1c6>
 8009950:	2300      	movs	r3, #0
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800995a:	f10a 0a01 	add.w	sl, sl, #1
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	9307      	str	r3, [sp, #28]
 8009962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009966:	931a      	str	r3, [sp, #104]	; 0x68
 8009968:	4654      	mov	r4, sl
 800996a:	2205      	movs	r2, #5
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	4850      	ldr	r0, [pc, #320]	; (8009ab4 <_svfiprintf_r+0x1e8>)
 8009972:	f7f6 fcb5 	bl	80002e0 <memchr>
 8009976:	9a04      	ldr	r2, [sp, #16]
 8009978:	b9d8      	cbnz	r0, 80099b2 <_svfiprintf_r+0xe6>
 800997a:	06d0      	lsls	r0, r2, #27
 800997c:	bf44      	itt	mi
 800997e:	2320      	movmi	r3, #32
 8009980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009984:	0711      	lsls	r1, r2, #28
 8009986:	bf44      	itt	mi
 8009988:	232b      	movmi	r3, #43	; 0x2b
 800998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800998e:	f89a 3000 	ldrb.w	r3, [sl]
 8009992:	2b2a      	cmp	r3, #42	; 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xf6>
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	4654      	mov	r4, sl
 800999a:	2000      	movs	r0, #0
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4621      	mov	r1, r4
 80099a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a6:	3b30      	subs	r3, #48	; 0x30
 80099a8:	2b09      	cmp	r3, #9
 80099aa:	d94d      	bls.n	8009a48 <_svfiprintf_r+0x17c>
 80099ac:	b1b0      	cbz	r0, 80099dc <_svfiprintf_r+0x110>
 80099ae:	9207      	str	r2, [sp, #28]
 80099b0:	e014      	b.n	80099dc <_svfiprintf_r+0x110>
 80099b2:	eba0 0308 	sub.w	r3, r0, r8
 80099b6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	46a2      	mov	sl, r4
 80099c0:	e7d2      	b.n	8009968 <_svfiprintf_r+0x9c>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	1d19      	adds	r1, r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfbb      	ittet	lt
 80099ce:	425b      	neglt	r3, r3
 80099d0:	f042 0202 	orrlt.w	r2, r2, #2
 80099d4:	9307      	strge	r3, [sp, #28]
 80099d6:	9307      	strlt	r3, [sp, #28]
 80099d8:	bfb8      	it	lt
 80099da:	9204      	strlt	r2, [sp, #16]
 80099dc:	7823      	ldrb	r3, [r4, #0]
 80099de:	2b2e      	cmp	r3, #46	; 0x2e
 80099e0:	d10c      	bne.n	80099fc <_svfiprintf_r+0x130>
 80099e2:	7863      	ldrb	r3, [r4, #1]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d134      	bne.n	8009a52 <_svfiprintf_r+0x186>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfb8      	it	lt
 80099f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f8:	3402      	adds	r4, #2
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ac4 <_svfiprintf_r+0x1f8>
 8009a00:	7821      	ldrb	r1, [r4, #0]
 8009a02:	2203      	movs	r2, #3
 8009a04:	4650      	mov	r0, sl
 8009a06:	f7f6 fc6b 	bl	80002e0 <memchr>
 8009a0a:	b138      	cbz	r0, 8009a1c <_svfiprintf_r+0x150>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	eba0 000a 	sub.w	r0, r0, sl
 8009a12:	2240      	movs	r2, #64	; 0x40
 8009a14:	4082      	lsls	r2, r0
 8009a16:	4313      	orrs	r3, r2
 8009a18:	3401      	adds	r4, #1
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a20:	4825      	ldr	r0, [pc, #148]	; (8009ab8 <_svfiprintf_r+0x1ec>)
 8009a22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a26:	2206      	movs	r2, #6
 8009a28:	f7f6 fc5a 	bl	80002e0 <memchr>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d038      	beq.n	8009aa2 <_svfiprintf_r+0x1d6>
 8009a30:	4b22      	ldr	r3, [pc, #136]	; (8009abc <_svfiprintf_r+0x1f0>)
 8009a32:	bb1b      	cbnz	r3, 8009a7c <_svfiprintf_r+0x1b0>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	3307      	adds	r3, #7
 8009a38:	f023 0307 	bic.w	r3, r3, #7
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a42:	4433      	add	r3, r6
 8009a44:	9309      	str	r3, [sp, #36]	; 0x24
 8009a46:	e768      	b.n	800991a <_svfiprintf_r+0x4e>
 8009a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	2001      	movs	r0, #1
 8009a50:	e7a6      	b.n	80099a0 <_svfiprintf_r+0xd4>
 8009a52:	2300      	movs	r3, #0
 8009a54:	3401      	adds	r4, #1
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f04f 0c0a 	mov.w	ip, #10
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a64:	3a30      	subs	r2, #48	; 0x30
 8009a66:	2a09      	cmp	r2, #9
 8009a68:	d903      	bls.n	8009a72 <_svfiprintf_r+0x1a6>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0c6      	beq.n	80099fc <_svfiprintf_r+0x130>
 8009a6e:	9105      	str	r1, [sp, #20]
 8009a70:	e7c4      	b.n	80099fc <_svfiprintf_r+0x130>
 8009a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a76:	4604      	mov	r4, r0
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e7f0      	b.n	8009a5e <_svfiprintf_r+0x192>
 8009a7c:	ab03      	add	r3, sp, #12
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	462a      	mov	r2, r5
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <_svfiprintf_r+0x1f4>)
 8009a84:	a904      	add	r1, sp, #16
 8009a86:	4638      	mov	r0, r7
 8009a88:	f3af 8000 	nop.w
 8009a8c:	1c42      	adds	r2, r0, #1
 8009a8e:	4606      	mov	r6, r0
 8009a90:	d1d6      	bne.n	8009a40 <_svfiprintf_r+0x174>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	065b      	lsls	r3, r3, #25
 8009a96:	f53f af2d 	bmi.w	80098f4 <_svfiprintf_r+0x28>
 8009a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9c:	b01d      	add	sp, #116	; 0x74
 8009a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa2:	ab03      	add	r3, sp, #12
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <_svfiprintf_r+0x1f4>)
 8009aaa:	a904      	add	r1, sp, #16
 8009aac:	4638      	mov	r0, r7
 8009aae:	f000 f879 	bl	8009ba4 <_printf_i>
 8009ab2:	e7eb      	b.n	8009a8c <_svfiprintf_r+0x1c0>
 8009ab4:	08009f70 	.word	0x08009f70
 8009ab8:	08009f7a 	.word	0x08009f7a
 8009abc:	00000000 	.word	0x00000000
 8009ac0:	08009819 	.word	0x08009819
 8009ac4:	08009f76 	.word	0x08009f76

08009ac8 <_printf_common>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	4616      	mov	r6, r2
 8009ace:	4699      	mov	r9, r3
 8009ad0:	688a      	ldr	r2, [r1, #8]
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bfb8      	it	lt
 8009adc:	4613      	movlt	r3, r2
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	b10a      	cbz	r2, 8009aee <_printf_common+0x26>
 8009aea:	3301      	adds	r3, #1
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	0699      	lsls	r1, r3, #26
 8009af2:	bf42      	ittt	mi
 8009af4:	6833      	ldrmi	r3, [r6, #0]
 8009af6:	3302      	addmi	r3, #2
 8009af8:	6033      	strmi	r3, [r6, #0]
 8009afa:	6825      	ldr	r5, [r4, #0]
 8009afc:	f015 0506 	ands.w	r5, r5, #6
 8009b00:	d106      	bne.n	8009b10 <_printf_common+0x48>
 8009b02:	f104 0a19 	add.w	sl, r4, #25
 8009b06:	68e3      	ldr	r3, [r4, #12]
 8009b08:	6832      	ldr	r2, [r6, #0]
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dc26      	bgt.n	8009b5e <_printf_common+0x96>
 8009b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b14:	1e13      	subs	r3, r2, #0
 8009b16:	6822      	ldr	r2, [r4, #0]
 8009b18:	bf18      	it	ne
 8009b1a:	2301      	movne	r3, #1
 8009b1c:	0692      	lsls	r2, r2, #26
 8009b1e:	d42b      	bmi.n	8009b78 <_printf_common+0xb0>
 8009b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b24:	4649      	mov	r1, r9
 8009b26:	4638      	mov	r0, r7
 8009b28:	47c0      	blx	r8
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d01e      	beq.n	8009b6c <_printf_common+0xa4>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	6922      	ldr	r2, [r4, #16]
 8009b32:	f003 0306 	and.w	r3, r3, #6
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	bf02      	ittt	eq
 8009b3a:	68e5      	ldreq	r5, [r4, #12]
 8009b3c:	6833      	ldreq	r3, [r6, #0]
 8009b3e:	1aed      	subeq	r5, r5, r3
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	bf0c      	ite	eq
 8009b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b48:	2500      	movne	r5, #0
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bfc4      	itt	gt
 8009b4e:	1a9b      	subgt	r3, r3, r2
 8009b50:	18ed      	addgt	r5, r5, r3
 8009b52:	2600      	movs	r6, #0
 8009b54:	341a      	adds	r4, #26
 8009b56:	42b5      	cmp	r5, r6
 8009b58:	d11a      	bne.n	8009b90 <_printf_common+0xc8>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e008      	b.n	8009b70 <_printf_common+0xa8>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4652      	mov	r2, sl
 8009b62:	4649      	mov	r1, r9
 8009b64:	4638      	mov	r0, r7
 8009b66:	47c0      	blx	r8
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d103      	bne.n	8009b74 <_printf_common+0xac>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b74:	3501      	adds	r5, #1
 8009b76:	e7c6      	b.n	8009b06 <_printf_common+0x3e>
 8009b78:	18e1      	adds	r1, r4, r3
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	2030      	movs	r0, #48	; 0x30
 8009b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b82:	4422      	add	r2, r4
 8009b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	e7c7      	b.n	8009b20 <_printf_common+0x58>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4622      	mov	r2, r4
 8009b94:	4649      	mov	r1, r9
 8009b96:	4638      	mov	r0, r7
 8009b98:	47c0      	blx	r8
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d0e6      	beq.n	8009b6c <_printf_common+0xa4>
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7d9      	b.n	8009b56 <_printf_common+0x8e>
	...

08009ba4 <_printf_i>:
 8009ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	7e0f      	ldrb	r7, [r1, #24]
 8009baa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bac:	2f78      	cmp	r7, #120	; 0x78
 8009bae:	4691      	mov	r9, r2
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	469a      	mov	sl, r3
 8009bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bba:	d807      	bhi.n	8009bcc <_printf_i+0x28>
 8009bbc:	2f62      	cmp	r7, #98	; 0x62
 8009bbe:	d80a      	bhi.n	8009bd6 <_printf_i+0x32>
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	f000 80d4 	beq.w	8009d6e <_printf_i+0x1ca>
 8009bc6:	2f58      	cmp	r7, #88	; 0x58
 8009bc8:	f000 80c0 	beq.w	8009d4c <_printf_i+0x1a8>
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd4:	e03a      	b.n	8009c4c <_printf_i+0xa8>
 8009bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bda:	2b15      	cmp	r3, #21
 8009bdc:	d8f6      	bhi.n	8009bcc <_printf_i+0x28>
 8009bde:	a101      	add	r1, pc, #4	; (adr r1, 8009be4 <_printf_i+0x40>)
 8009be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be4:	08009c3d 	.word	0x08009c3d
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009bcd 	.word	0x08009bcd
 8009bf0:	08009bcd 	.word	0x08009bcd
 8009bf4:	08009bcd 	.word	0x08009bcd
 8009bf8:	08009bcd 	.word	0x08009bcd
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009bcd 	.word	0x08009bcd
 8009c04:	08009bcd 	.word	0x08009bcd
 8009c08:	08009bcd 	.word	0x08009bcd
 8009c0c:	08009bcd 	.word	0x08009bcd
 8009c10:	08009d55 	.word	0x08009d55
 8009c14:	08009c7d 	.word	0x08009c7d
 8009c18:	08009d0f 	.word	0x08009d0f
 8009c1c:	08009bcd 	.word	0x08009bcd
 8009c20:	08009bcd 	.word	0x08009bcd
 8009c24:	08009d77 	.word	0x08009d77
 8009c28:	08009bcd 	.word	0x08009bcd
 8009c2c:	08009c7d 	.word	0x08009c7d
 8009c30:	08009bcd 	.word	0x08009bcd
 8009c34:	08009bcd 	.word	0x08009bcd
 8009c38:	08009d17 	.word	0x08009d17
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	602a      	str	r2, [r5, #0]
 8009c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e09f      	b.n	8009d90 <_printf_i+0x1ec>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	0607      	lsls	r7, r0, #24
 8009c56:	f103 0104 	add.w	r1, r3, #4
 8009c5a:	6029      	str	r1, [r5, #0]
 8009c5c:	d501      	bpl.n	8009c62 <_printf_i+0xbe>
 8009c5e:	681e      	ldr	r6, [r3, #0]
 8009c60:	e003      	b.n	8009c6a <_printf_i+0xc6>
 8009c62:	0646      	lsls	r6, r0, #25
 8009c64:	d5fb      	bpl.n	8009c5e <_printf_i+0xba>
 8009c66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c6a:	2e00      	cmp	r6, #0
 8009c6c:	da03      	bge.n	8009c76 <_printf_i+0xd2>
 8009c6e:	232d      	movs	r3, #45	; 0x2d
 8009c70:	4276      	negs	r6, r6
 8009c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c76:	485a      	ldr	r0, [pc, #360]	; (8009de0 <_printf_i+0x23c>)
 8009c78:	230a      	movs	r3, #10
 8009c7a:	e012      	b.n	8009ca2 <_printf_i+0xfe>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	1d19      	adds	r1, r3, #4
 8009c82:	6029      	str	r1, [r5, #0]
 8009c84:	0605      	lsls	r5, r0, #24
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0xe8>
 8009c88:	681e      	ldr	r6, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0xee>
 8009c8c:	0641      	lsls	r1, r0, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0xe4>
 8009c90:	881e      	ldrh	r6, [r3, #0]
 8009c92:	4853      	ldr	r0, [pc, #332]	; (8009de0 <_printf_i+0x23c>)
 8009c94:	2f6f      	cmp	r7, #111	; 0x6f
 8009c96:	bf0c      	ite	eq
 8009c98:	2308      	moveq	r3, #8
 8009c9a:	230a      	movne	r3, #10
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca2:	6865      	ldr	r5, [r4, #4]
 8009ca4:	60a5      	str	r5, [r4, #8]
 8009ca6:	2d00      	cmp	r5, #0
 8009ca8:	bfa2      	ittt	ge
 8009caa:	6821      	ldrge	r1, [r4, #0]
 8009cac:	f021 0104 	bicge.w	r1, r1, #4
 8009cb0:	6021      	strge	r1, [r4, #0]
 8009cb2:	b90e      	cbnz	r6, 8009cb8 <_printf_i+0x114>
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	d04b      	beq.n	8009d50 <_printf_i+0x1ac>
 8009cb8:	4615      	mov	r5, r2
 8009cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8009cc2:	5dc7      	ldrb	r7, [r0, r7]
 8009cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cc8:	4637      	mov	r7, r6
 8009cca:	42bb      	cmp	r3, r7
 8009ccc:	460e      	mov	r6, r1
 8009cce:	d9f4      	bls.n	8009cba <_printf_i+0x116>
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d10b      	bne.n	8009cec <_printf_i+0x148>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	07de      	lsls	r6, r3, #31
 8009cd8:	d508      	bpl.n	8009cec <_printf_i+0x148>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	6861      	ldr	r1, [r4, #4]
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	bfde      	ittt	le
 8009ce2:	2330      	movle	r3, #48	; 0x30
 8009ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cec:	1b52      	subs	r2, r2, r5
 8009cee:	6122      	str	r2, [r4, #16]
 8009cf0:	f8cd a000 	str.w	sl, [sp]
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	aa03      	add	r2, sp, #12
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff fee4 	bl	8009ac8 <_printf_common>
 8009d00:	3001      	adds	r0, #1
 8009d02:	d14a      	bne.n	8009d9a <_printf_i+0x1f6>
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b004      	add	sp, #16
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	f043 0320 	orr.w	r3, r3, #32
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	4833      	ldr	r0, [pc, #204]	; (8009de4 <_printf_i+0x240>)
 8009d18:	2778      	movs	r7, #120	; 0x78
 8009d1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	6829      	ldr	r1, [r5, #0]
 8009d22:	061f      	lsls	r7, r3, #24
 8009d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d28:	d402      	bmi.n	8009d30 <_printf_i+0x18c>
 8009d2a:	065f      	lsls	r7, r3, #25
 8009d2c:	bf48      	it	mi
 8009d2e:	b2b6      	uxthmi	r6, r6
 8009d30:	07df      	lsls	r7, r3, #31
 8009d32:	bf48      	it	mi
 8009d34:	f043 0320 	orrmi.w	r3, r3, #32
 8009d38:	6029      	str	r1, [r5, #0]
 8009d3a:	bf48      	it	mi
 8009d3c:	6023      	strmi	r3, [r4, #0]
 8009d3e:	b91e      	cbnz	r6, 8009d48 <_printf_i+0x1a4>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	f023 0320 	bic.w	r3, r3, #32
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	2310      	movs	r3, #16
 8009d4a:	e7a7      	b.n	8009c9c <_printf_i+0xf8>
 8009d4c:	4824      	ldr	r0, [pc, #144]	; (8009de0 <_printf_i+0x23c>)
 8009d4e:	e7e4      	b.n	8009d1a <_printf_i+0x176>
 8009d50:	4615      	mov	r5, r2
 8009d52:	e7bd      	b.n	8009cd0 <_printf_i+0x12c>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	6826      	ldr	r6, [r4, #0]
 8009d58:	6961      	ldr	r1, [r4, #20]
 8009d5a:	1d18      	adds	r0, r3, #4
 8009d5c:	6028      	str	r0, [r5, #0]
 8009d5e:	0635      	lsls	r5, r6, #24
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	d501      	bpl.n	8009d68 <_printf_i+0x1c4>
 8009d64:	6019      	str	r1, [r3, #0]
 8009d66:	e002      	b.n	8009d6e <_printf_i+0x1ca>
 8009d68:	0670      	lsls	r0, r6, #25
 8009d6a:	d5fb      	bpl.n	8009d64 <_printf_i+0x1c0>
 8009d6c:	8019      	strh	r1, [r3, #0]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6123      	str	r3, [r4, #16]
 8009d72:	4615      	mov	r5, r2
 8009d74:	e7bc      	b.n	8009cf0 <_printf_i+0x14c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	1d1a      	adds	r2, r3, #4
 8009d7a:	602a      	str	r2, [r5, #0]
 8009d7c:	681d      	ldr	r5, [r3, #0]
 8009d7e:	6862      	ldr	r2, [r4, #4]
 8009d80:	2100      	movs	r1, #0
 8009d82:	4628      	mov	r0, r5
 8009d84:	f7f6 faac 	bl	80002e0 <memchr>
 8009d88:	b108      	cbz	r0, 8009d8e <_printf_i+0x1ea>
 8009d8a:	1b40      	subs	r0, r0, r5
 8009d8c:	6060      	str	r0, [r4, #4]
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	2300      	movs	r3, #0
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d98:	e7aa      	b.n	8009cf0 <_printf_i+0x14c>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	4649      	mov	r1, r9
 8009da0:	4640      	mov	r0, r8
 8009da2:	47d0      	blx	sl
 8009da4:	3001      	adds	r0, #1
 8009da6:	d0ad      	beq.n	8009d04 <_printf_i+0x160>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	079b      	lsls	r3, r3, #30
 8009dac:	d413      	bmi.n	8009dd6 <_printf_i+0x232>
 8009dae:	68e0      	ldr	r0, [r4, #12]
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	4298      	cmp	r0, r3
 8009db4:	bfb8      	it	lt
 8009db6:	4618      	movlt	r0, r3
 8009db8:	e7a6      	b.n	8009d08 <_printf_i+0x164>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	47d0      	blx	sl
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d09d      	beq.n	8009d04 <_printf_i+0x160>
 8009dc8:	3501      	adds	r5, #1
 8009dca:	68e3      	ldr	r3, [r4, #12]
 8009dcc:	9903      	ldr	r1, [sp, #12]
 8009dce:	1a5b      	subs	r3, r3, r1
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	dcf2      	bgt.n	8009dba <_printf_i+0x216>
 8009dd4:	e7eb      	b.n	8009dae <_printf_i+0x20a>
 8009dd6:	2500      	movs	r5, #0
 8009dd8:	f104 0619 	add.w	r6, r4, #25
 8009ddc:	e7f5      	b.n	8009dca <_printf_i+0x226>
 8009dde:	bf00      	nop
 8009de0:	08009f81 	.word	0x08009f81
 8009de4:	08009f92 	.word	0x08009f92

08009de8 <memmove>:
 8009de8:	4288      	cmp	r0, r1
 8009dea:	b510      	push	{r4, lr}
 8009dec:	eb01 0402 	add.w	r4, r1, r2
 8009df0:	d902      	bls.n	8009df8 <memmove+0x10>
 8009df2:	4284      	cmp	r4, r0
 8009df4:	4623      	mov	r3, r4
 8009df6:	d807      	bhi.n	8009e08 <memmove+0x20>
 8009df8:	1e43      	subs	r3, r0, #1
 8009dfa:	42a1      	cmp	r1, r4
 8009dfc:	d008      	beq.n	8009e10 <memmove+0x28>
 8009dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e06:	e7f8      	b.n	8009dfa <memmove+0x12>
 8009e08:	4402      	add	r2, r0
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	428a      	cmp	r2, r1
 8009e0e:	d100      	bne.n	8009e12 <memmove+0x2a>
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e1a:	e7f7      	b.n	8009e0c <memmove+0x24>

08009e1c <_sbrk_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d06      	ldr	r5, [pc, #24]	; (8009e38 <_sbrk_r+0x1c>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	f7f7 fb80 	bl	800152c <_sbrk>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_sbrk_r+0x1a>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_sbrk_r+0x1a>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	24000b0c 	.word	0x24000b0c

08009e3c <_realloc_r>:
 8009e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e40:	4680      	mov	r8, r0
 8009e42:	4614      	mov	r4, r2
 8009e44:	460e      	mov	r6, r1
 8009e46:	b921      	cbnz	r1, 8009e52 <_realloc_r+0x16>
 8009e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	f7ff bc57 	b.w	8009700 <_malloc_r>
 8009e52:	b92a      	cbnz	r2, 8009e60 <_realloc_r+0x24>
 8009e54:	f7ff fbe8 	bl	8009628 <_free_r>
 8009e58:	4625      	mov	r5, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	f000 f81b 	bl	8009e9a <_malloc_usable_size_r>
 8009e64:	4284      	cmp	r4, r0
 8009e66:	4607      	mov	r7, r0
 8009e68:	d802      	bhi.n	8009e70 <_realloc_r+0x34>
 8009e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e6e:	d812      	bhi.n	8009e96 <_realloc_r+0x5a>
 8009e70:	4621      	mov	r1, r4
 8009e72:	4640      	mov	r0, r8
 8009e74:	f7ff fc44 	bl	8009700 <_malloc_r>
 8009e78:	4605      	mov	r5, r0
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d0ed      	beq.n	8009e5a <_realloc_r+0x1e>
 8009e7e:	42bc      	cmp	r4, r7
 8009e80:	4622      	mov	r2, r4
 8009e82:	4631      	mov	r1, r6
 8009e84:	bf28      	it	cs
 8009e86:	463a      	movcs	r2, r7
 8009e88:	f7ff fbc0 	bl	800960c <memcpy>
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4640      	mov	r0, r8
 8009e90:	f7ff fbca 	bl	8009628 <_free_r>
 8009e94:	e7e1      	b.n	8009e5a <_realloc_r+0x1e>
 8009e96:	4635      	mov	r5, r6
 8009e98:	e7df      	b.n	8009e5a <_realloc_r+0x1e>

08009e9a <_malloc_usable_size_r>:
 8009e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9e:	1f18      	subs	r0, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfbc      	itt	lt
 8009ea4:	580b      	ldrlt	r3, [r1, r0]
 8009ea6:	18c0      	addlt	r0, r0, r3
 8009ea8:	4770      	bx	lr
	...

08009eac <_init>:
 8009eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eae:	bf00      	nop
 8009eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb2:	bc08      	pop	{r3}
 8009eb4:	469e      	mov	lr, r3
 8009eb6:	4770      	bx	lr

08009eb8 <_fini>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr
