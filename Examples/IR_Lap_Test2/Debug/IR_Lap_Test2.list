
IR_Lap_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800822c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800828c  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  080082ec  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  24000120  0800834c  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000b50  0800834c  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200ab  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000325c  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  00043498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e5  00000000  00000000  00044c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000391c3  00000000  00000000  00045f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3e2  00000000  00000000  0007f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016b8ca  00000000  00000000  0009e522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ddc  00000000  00000000  00209dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00210bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008124 	.word	0x08008124

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08008124 	.word	0x08008124

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f001 f81b 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f81f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fa41 	bl	8000b20 <MX_GPIO_Init>
  MX_ETH_Init();
 800069e:	f000 f89b 	bl	80007d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006a2:	f000 f9bf 	bl	8000a24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a6:	f000 fa09 	bl	8000abc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80006aa:	f000 f921 	bl	80008f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80006ae:	f000 f8df 	bl	8000870 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006b2:	f000 f96b 	bl	800098c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
uint8_t lapNumber = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
	uint32_t runTime = lapTimer(lapNumber);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fb27 	bl	8000d10 <lapTimer>
 80006c2:	6038      	str	r0, [r7, #0]
	printer(runTime, lapNumber);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4619      	mov	r1, r3
 80006c8:	6838      	ldr	r0, [r7, #0]
 80006ca:	f000 fb7f 	bl	8000dcc <printer>
	lapNumber++;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	3301      	adds	r3, #1
 80006d2:	71fb      	strb	r3, [r7, #7]
{
 80006d4:	e7f1      	b.n	80006ba <main+0x2e>
	...

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09c      	sub	sp, #112	; 0x70
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	224c      	movs	r2, #76	; 0x4c
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 f898 	bl	800781c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2220      	movs	r2, #32
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f007 f892 	bl	800781c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f002 fa17 	bl	8002b2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <SystemClock_Config+0xf8>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	4a32      	ldr	r2, [pc, #200]	; (80007d0 <SystemClock_Config+0xf8>)
 8000708:	f023 0301 	bic.w	r3, r3, #1
 800070c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <SystemClock_Config+0xf8>)
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <SystemClock_Config+0xfc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemClock_Config+0xfc>)
 8000722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <SystemClock_Config+0xfc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xfc>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000744:	2303      	movs	r3, #3
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000762:	2318      	movs	r3, #24
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000772:	230c      	movs	r3, #12
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fa1c 	bl	8002bc0 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800078e:	f000 fbbb 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fe5c 	bl	8003474 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007c2:	f000 fba1 	bl	8000f08 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3770      	adds	r7, #112	; 0x70
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_ETH_Init+0x80>)
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ETH_Init+0x88>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ETH_Init+0x88>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ETH_Init+0x88>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ETH_Init+0x88>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ETH_Init+0x88>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ETH_Init+0x88>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_ETH_Init+0x80>)
 8000808:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_ETH_Init+0x88>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_ETH_Init+0x80>)
 800080e:	2201      	movs	r2, #1
 8000810:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_ETH_Init+0x80>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_ETH_Init+0x8c>)
 8000816:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_ETH_Init+0x80>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_ETH_Init+0x90>)
 800081c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_ETH_Init+0x80>)
 8000820:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000824:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_ETH_Init+0x80>)
 8000828:	f001 f90a 	bl	8001a40 <HAL_ETH_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 fb69 	bl	8000f08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000836:	2238      	movs	r2, #56	; 0x38
 8000838:	2100      	movs	r1, #0
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_ETH_Init+0x94>)
 800083c:	f006 ffee 	bl	800781c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_ETH_Init+0x94>)
 8000842:	2221      	movs	r2, #33	; 0x21
 8000844:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_ETH_Init+0x94>)
 8000848:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800084c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_ETH_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	24000274 	.word	0x24000274
 800085c:	40028000 	.word	0x40028000
 8000860:	240009f8 	.word	0x240009f8
 8000864:	240000c0 	.word	0x240000c0
 8000868:	24000060 	.word	0x24000060
 800086c:	2400023c 	.word	0x2400023c

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f001 fece 	bl	800264c <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fb27 	bl	8000f08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f001 ff55 	bl	800276c <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 fb1e 	bl	8000f08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f001 ff97 	bl	8002802 <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fb15 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000324 	.word	0x24000324
 80008e8:	40005400 	.word	0x40005400
 80008ec:	10707dbc 	.word	0x10707dbc

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM2_Init+0x98>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_TIM2_Init+0x98>)
 8000918:	223f      	movs	r2, #63	; 0x3f
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM2_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM2_Init+0x98>)
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_TIM2_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM2_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MX_TIM2_Init+0x98>)
 8000938:	f004 ff54 	bl	80057e4 <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 fae1 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM2_Init+0x98>)
 8000954:	f005 f816 	bl	8005984 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800095e:	f000 fad3 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM2_Init+0x98>)
 8000970:	f005 fa38 	bl	8005de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 fac5 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	24000378 	.word	0x24000378

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_USART2_UART_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009d6:	f005 fa93 	bl	8005f00 <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 fa92 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009e8:	f006 fb23 	bl	8007032 <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 fa89 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 80009fa:	f006 fb58 	bl	80070ae <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 fa80 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_USART2_UART_Init+0x90>)
 8000a0a:	f006 fad9 	bl	8006fc0 <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 fa78 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	240003c4 	.word	0x240003c4
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART3_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	f005 fa47 	bl	8005f00 <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 fa46 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a80:	f006 fad7 	bl	8007032 <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 fa3d 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000a92:	f006 fb0c 	bl	80070ae <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 fa34 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART3_UART_Init+0x90>)
 8000aa2:	f006 fa8d 	bl	8006fc0 <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 fa2c 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000458 	.word	0x24000458
 8000ab8:	40004800 	.word	0x40004800

08000abc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2209      	movs	r2, #9
 8000aca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	f001 fec9 	bl	800289a <HAL_PCD_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b0e:	f000 f9fb 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	240004ec 	.word	0x240004ec
 8000b1c:	40080000 	.word	0x40080000

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b6f      	ldr	r3, [pc, #444]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a6d      	ldr	r2, [pc, #436]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b6b      	ldr	r3, [pc, #428]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b54:	4b67      	ldr	r3, [pc, #412]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a66      	ldr	r2, [pc, #408]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b63      	ldr	r3, [pc, #396]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0320 	and.w	r3, r3, #32
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a5e      	ldr	r2, [pc, #376]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b58      	ldr	r3, [pc, #352]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	4a57      	ldr	r2, [pc, #348]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b51      	ldr	r3, [pc, #324]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <MX_GPIO_Init+0x1d4>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c2c:	4832      	ldr	r0, [pc, #200]	; (8000cf8 <MX_GPIO_Init+0x1d8>)
 8000c2e:	f001 fcf3 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c38:	4830      	ldr	r0, [pc, #192]	; (8000cfc <MX_GPIO_Init+0x1dc>)
 8000c3a:	f001 fced 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2102      	movs	r1, #2
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <MX_GPIO_Init+0x1e0>)
 8000c44:	f001 fce8 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4829      	ldr	r0, [pc, #164]	; (8000d04 <MX_GPIO_Init+0x1e4>)
 8000c5e:	f001 fb13 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4824      	ldr	r0, [pc, #144]	; (8000d08 <MX_GPIO_Init+0x1e8>)
 8000c76:	f001 fb07 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c7a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4819      	ldr	r0, [pc, #100]	; (8000cf8 <MX_GPIO_Init+0x1d8>)
 8000c94:	f001 faf8 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4812      	ldr	r0, [pc, #72]	; (8000cfc <MX_GPIO_Init+0x1dc>)
 8000cb2:	f001 fae9 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <MX_GPIO_Init+0x1ec>)
 8000ccc:	f001 fadc 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_GPIO_Init+0x1e0>)
 8000ce8:	f001 face 	bl	8002288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	; 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020400 	.word	0x58020400
 8000cfc:	58020c00 	.word	0x58020c00
 8000d00:	58021000 	.word	0x58021000
 8000d04:	58020800 	.word	0x58020800
 8000d08:	58021400 	.word	0x58021400
 8000d0c:	58021800 	.word	0x58021800

08000d10 <lapTimer>:

/* USER CODE BEGIN 4 */
uint32_t lapTimer(uint8_t lapNumber){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	alrPrint = 0;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <lapTimer+0x9c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){if(alrPrint == 0){messanger("Get on start line...");}}
 8000d20:	e006      	b.n	8000d30 <lapTimer+0x20>
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <lapTimer+0x9c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <lapTimer+0x20>
 8000d2a:	4821      	ldr	r0, [pc, #132]	; (8000db0 <lapTimer+0xa0>)
 8000d2c:	f000 f8ba 	bl	8000ea4 <messanger>
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <lapTimer+0xa4>)
 8000d36:	f001 fc57 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f0      	beq.n	8000d22 <lapTimer+0x12>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1){if(alrPrint == 1){messanger("On start line...");}}
 8000d40:	e006      	b.n	8000d50 <lapTimer+0x40>
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <lapTimer+0x9c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d102      	bne.n	8000d50 <lapTimer+0x40>
 8000d4a:	481b      	ldr	r0, [pc, #108]	; (8000db8 <lapTimer+0xa8>)
 8000d4c:	f000 f8aa 	bl	8000ea4 <messanger>
 8000d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d54:	4817      	ldr	r0, [pc, #92]	; (8000db4 <lapTimer+0xa4>)
 8000d56:	f001 fc47 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d0f0      	beq.n	8000d42 <lapTimer+0x32>
	HAL_TIM_Base_Start_IT(&htim2);
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <lapTimer+0xac>)
 8000d62:	f004 fd97 	bl	8005894 <HAL_TIM_Base_Start_IT>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){if(alrPrint == 2){messanger("Driving...");}}
 8000d66:	e006      	b.n	8000d76 <lapTimer+0x66>
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <lapTimer+0x9c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d102      	bne.n	8000d76 <lapTimer+0x66>
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <lapTimer+0xb0>)
 8000d72:	f000 f897 	bl	8000ea4 <messanger>
 8000d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <lapTimer+0xa4>)
 8000d7c:	f001 fc34 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <lapTimer+0x58>
	uint32_t runTime = (__HAL_TIM_GET_COUNTER(&htim2))/1000;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <lapTimer+0xac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <lapTimer+0xb4>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	099b      	lsrs	r3, r3, #6
 8000d94:	60fb      	str	r3, [r7, #12]
	runTimeDatabase[lapNumber - 1] = runTime;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	b2d1      	uxtb	r1, r2
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <lapTimer+0xb8>)
 8000da0:	54d1      	strb	r1, [r2, r3]
	return runTime;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2400023b 	.word	0x2400023b
 8000db0:	0800813c 	.word	0x0800813c
 8000db4:	58020000 	.word	0x58020000
 8000db8:	08008154 	.word	0x08008154
 8000dbc:	24000378 	.word	0x24000378
 8000dc0:	08008168 	.word	0x08008168
 8000dc4:	10624dd3 	.word	0x10624dd3
 8000dc8:	2400013c 	.word	0x2400013c

08000dcc <printer>:
void printer(uint32_t runTime, uint8_t lapNumber){
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b0c7      	sub	sp, #284	; 0x11c
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dda:	6018      	str	r0, [r3, #0]
 8000ddc:	460a      	mov	r2, r1
 8000dde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000de2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000de6:	701a      	strb	r2, [r3, #0]
	uint8_t minutes = runTime/60000;
 8000de8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <printer+0xc8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0b9b      	lsrs	r3, r3, #14
 8000dfa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t seconds = (runTime%60000)/1000;
 8000dfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <printer+0xc8>)
 8000e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e0e:	0b9b      	lsrs	r3, r3, #14
 8000e10:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000e14:	fb01 f303 	mul.w	r3, r1, r3
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <printer+0xcc>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	099b      	lsrs	r3, r3, #6
 8000e22:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t milliseconds = runTime%1000;
 8000e26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <printer+0xcc>)
 8000e32:	fba3 1302 	umull	r1, r3, r3, r2
 8000e36:	099b      	lsrs	r3, r3, #6
 8000e38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	char buf[255];
	sprintf(buf, "Lap #%u:	%u minutes, %u seconds, %u milliseconds\r\n", lapNumber, minutes, seconds, milliseconds);
 8000e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e4a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000e4e:	7819      	ldrb	r1, [r3, #0]
 8000e50:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
 8000e54:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8000e58:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8000e5c:	f107 000c 	add.w	r0, r7, #12
 8000e60:	9201      	str	r2, [sp, #4]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	4623      	mov	r3, r4
 8000e66:	460a      	mov	r2, r1
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <printer+0xd0>)
 8000e6a:	f006 fcb7 	bl	80077dc <siprintf>
	HAL_UART_Transmit(&huart3, buf, strlen(buf), HAL_MAX_DELAY);
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fa34 	bl	80002e0 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 010c 	add.w	r1, r7, #12
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <printer+0xd4>)
 8000e86:	f005 f88b 	bl	8005fa0 <HAL_UART_Transmit>
}
 8000e8a:	bf00      	nop
 8000e8c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	45e7b273 	.word	0x45e7b273
 8000e98:	10624dd3 	.word	0x10624dd3
 8000e9c:	08008174 	.word	0x08008174
 8000ea0:	24000458 	.word	0x24000458

08000ea4 <messanger>:
void messanger(char* message){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0c2      	sub	sp, #264	; 0x108
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eb2:	6018      	str	r0, [r3, #0]
	char buf[255];
	sprintf(buf, "%s\r\n", message);
 8000eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ebc:	f107 0008 	add.w	r0, r7, #8
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <messanger+0x58>)
 8000ec4:	f006 fc8a 	bl	80077dc <siprintf>
	HAL_UART_Transmit(&huart3, buf, strlen(buf), HAL_MAX_DELAY);
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa07 	bl	80002e0 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f107 0108 	add.w	r1, r7, #8
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <messanger+0x5c>)
 8000ee0:	f005 f85e 	bl	8005fa0 <HAL_UART_Transmit>
	alrPrint++;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <messanger+0x60>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <messanger+0x60>)
 8000eee:	701a      	strb	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	080081a8 	.word	0x080081a8
 8000f00:	24000458 	.word	0x24000458
 8000f04:	2400023b 	.word	0x2400023b

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_MspInit+0x30>)
 8000f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x30>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x30>)
 8000f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	58024400 	.word	0x58024400

08000f48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a59      	ldr	r2, [pc, #356]	; (80010cc <HAL_ETH_MspInit+0x184>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	f040 80ab 	bne.w	80010c2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f6c:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f72:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f7c:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fa8:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fae:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb8:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	4a40      	ldr	r2, [pc, #256]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	4a39      	ldr	r2, [pc, #228]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff4:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8001028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_ETH_MspInit+0x188>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800103e:	2332      	movs	r3, #50	; 0x32
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104e:	230b      	movs	r3, #11
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <HAL_ETH_MspInit+0x18c>)
 800105a:	f001 f915 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800105e:	2386      	movs	r3, #134	; 0x86
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <HAL_ETH_MspInit+0x190>)
 800107a:	f001 f905 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001090:	230b      	movs	r3, #11
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <HAL_ETH_MspInit+0x194>)
 800109c:	f001 f8f4 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b2:	230b      	movs	r3, #11
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <HAL_ETH_MspInit+0x198>)
 80010be:	f001 f8e3 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	; 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40028000 	.word	0x40028000
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58020800 	.word	0x58020800
 80010d8:	58020000 	.word	0x58020000
 80010dc:	58020400 	.word	0x58020400
 80010e0:	58021800 	.word	0x58021800

080010e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ba      	sub	sp, #232	; 0xe8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	22c0      	movs	r2, #192	; 0xc0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fb89 	bl	800781c <memset>
  if(hi2c->Instance==I2C1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_I2C_MspInit+0xc4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d145      	bne.n	80011a0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001114:	f04f 0208 	mov.w	r2, #8
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fd2e 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001136:	f7ff fee7 	bl	8000f08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_I2C_MspInit+0xc8>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_I2C_MspInit+0xc8>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_I2C_MspInit+0xc8>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2304      	movs	r3, #4
 8001172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_I2C_MspInit+0xcc>)
 800117e:	f001 f883 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_I2C_MspInit+0xc8>)
 8001184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_I2C_MspInit+0xc8>)
 800118a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_I2C_MspInit+0xc8>)
 8001194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	37e8      	adds	r7, #232	; 0xe8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40005400 	.word	0x40005400
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020400 	.word	0x58020400

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d10e      	bne.n	80011e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_TIM_Base_MspInit+0x3c>)
 80011d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0be      	sub	sp, #248	; 0xf8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	22c0      	movs	r2, #192	; 0xc0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fb01 	bl	800781c <memset>
  if(huart->Instance==USART2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5f      	ldr	r2, [pc, #380]	; (800139c <HAL_UART_MspInit+0x1a8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d16a      	bne.n	80012fa <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001224:	f04f 0202 	mov.w	r2, #2
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fca6 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001246:	f7ff fe5f 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124a:	4b55      	ldr	r3, [pc, #340]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001256:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800125c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a4:	2308      	movs	r3, #8
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4836      	ldr	r0, [pc, #216]	; (80013a4 <HAL_UART_MspInit+0x1b0>)
 80012ca:	f000 ffdd 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ce:	2320      	movs	r3, #32
 80012d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e6:	2307      	movs	r3, #7
 80012e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012f0:	4619      	mov	r1, r3
 80012f2:	482d      	ldr	r0, [pc, #180]	; (80013a8 <HAL_UART_MspInit+0x1b4>)
 80012f4:	f000 ffc8 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f8:	e04b      	b.n	8001392 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2b      	ldr	r2, [pc, #172]	; (80013ac <HAL_UART_MspInit+0x1b8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d146      	bne.n	8001392 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001304:	f04f 0202 	mov.w	r2, #2
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fc36 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001326:	f7ff fdef 	bl	8000f08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x1ac>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001380:	2307      	movs	r3, #7
 8001382:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001386:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <HAL_UART_MspInit+0x1b4>)
 800138e:	f000 ff7b 	bl	8002288 <HAL_GPIO_Init>
}
 8001392:	bf00      	nop
 8001394:	37f8      	adds	r7, #248	; 0xf8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	58024400 	.word	0x58024400
 80013a4:	58020000 	.word	0x58020000
 80013a8:	58020c00 	.word	0x58020c00
 80013ac:	40004800 	.word	0x40004800

080013b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0ba      	sub	sp, #232	; 0xe8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	22c0      	movs	r2, #192	; 0xc0
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fa23 	bl	800781c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a30      	ldr	r2, [pc, #192]	; (800149c <HAL_PCD_MspInit+0xec>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d159      	bne.n	8001494 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fbc7 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001404:	f7ff fd80 	bl	8000f08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001408:	f001 fbca 	bl	8002ba0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_PCD_MspInit+0xf0>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_PCD_MspInit+0xf0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_PCD_MspInit+0xf0>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800142a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800142e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001444:	230a      	movs	r3, #10
 8001446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144e:	4619      	mov	r1, r3
 8001450:	4814      	ldr	r0, [pc, #80]	; (80014a4 <HAL_PCD_MspInit+0xf4>)
 8001452:	f000 ff19 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <HAL_PCD_MspInit+0xf4>)
 8001472:	f000 ff09 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_PCD_MspInit+0xf0>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_PCD_MspInit+0xf0>)
 800147e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_PCD_MspInit+0xf0>)
 8001488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	37e8      	adds	r7, #232	; 0xe8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40080000 	.word	0x40080000
 80014a0:	58024400 	.word	0x58024400
 80014a4:	58020000 	.word	0x58020000

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f95c 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f006 f97e 	bl	800782c <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	24080000 	.word	0x24080000
 800155c:	00000400 	.word	0x00000400
 8001560:	24000a00 	.word	0x24000a00
 8001564:	24000b50 	.word	0x24000b50

08001568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <SystemInit+0xe4>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a36      	ldr	r2, [pc, #216]	; (800164c <SystemInit+0xe4>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <SystemInit+0xe8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	2b06      	cmp	r3, #6
 8001586:	d807      	bhi.n	8001598 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <SystemInit+0xe8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 030f 	bic.w	r3, r3, #15
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <SystemInit+0xe8>)
 8001592:	f043 0307 	orr.w	r3, r3, #7
 8001596:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <SystemInit+0xec>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <SystemInit+0xec>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <SystemInit+0xec>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <SystemInit+0xec>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4929      	ldr	r1, [pc, #164]	; (8001654 <SystemInit+0xec>)
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <SystemInit+0xf0>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <SystemInit+0xe8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <SystemInit+0xe8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 030f 	bic.w	r3, r3, #15
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <SystemInit+0xe8>)
 80015cc:	f043 0307 	orr.w	r3, r3, #7
 80015d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <SystemInit+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <SystemInit+0xec>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <SystemInit+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <SystemInit+0xec>)
 80015e6:	4a1d      	ldr	r2, [pc, #116]	; (800165c <SystemInit+0xf4>)
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <SystemInit+0xec>)
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <SystemInit+0xf8>)
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <SystemInit+0xec>)
 80015f2:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <SystemInit+0xfc>)
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <SystemInit+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <SystemInit+0xec>)
 80015fe:	4a19      	ldr	r2, [pc, #100]	; (8001664 <SystemInit+0xfc>)
 8001600:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <SystemInit+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <SystemInit+0xec>)
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <SystemInit+0xfc>)
 800160c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <SystemInit+0xec>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <SystemInit+0xec>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <SystemInit+0xec>)
 8001622:	2200      	movs	r2, #0
 8001624:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SystemInit+0x100>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <SystemInit+0x104>)
 800162c:	4013      	ands	r3, r2
 800162e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001632:	d202      	bcs.n	800163a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <SystemInit+0x108>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <SystemInit+0x10c>)
 800163c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001640:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	52002000 	.word	0x52002000
 8001654:	58024400 	.word	0x58024400
 8001658:	eaf6ed7f 	.word	0xeaf6ed7f
 800165c:	02020200 	.word	0x02020200
 8001660:	01ff0000 	.word	0x01ff0000
 8001664:	01010280 	.word	0x01010280
 8001668:	5c001000 	.word	0x5c001000
 800166c:	ffff0000 	.word	0xffff0000
 8001670:	51008108 	.word	0x51008108
 8001674:	52004000 	.word	0x52004000

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800167c:	f7ff ff74 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	; (80016c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a6:	f006 f8c7 	bl	8007838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7fe ffef 	bl	800068c <main>
  bx  lr
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016b8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016bc:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 80016c0:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80016c4:	24000b50 	.word	0x24000b50

080016c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC3_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d2:	2003      	movs	r0, #3
 80016d4:	f000 f982 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016d8:	f002 f882 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_Init+0x68>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	4913      	ldr	r1, [pc, #76]	; (8001738 <HAL_Init+0x6c>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_Init+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_Init+0x6c>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_Init+0x70>)
 800170e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_Init+0x74>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f814 	bl	8001744 <HAL_InitTick>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e002      	b.n	800172c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001726:	f7ff fbf5 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58024400 	.word	0x58024400
 8001738:	080081b0 	.word	0x080081b0
 800173c:	24000004 	.word	0x24000004
 8001740:	24000000 	.word	0x24000000

08001744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_InitTick+0x60>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e021      	b.n	800179c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_InitTick+0x64>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_InitTick+0x60>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f959 	bl	8001a26 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f931 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x68>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2400000c 	.word	0x2400000c
 80017a8:	24000000 	.word	0x24000000
 80017ac:	24000008 	.word	0x24000008

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2400000c 	.word	0x2400000c
 80017d4:	24000a04 	.word	0x24000a04

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	24000a04 	.word	0x24000a04

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2400000c 	.word	0x2400000c

08001838 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_GetREVID+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0c1b      	lsrs	r3, r3, #16
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	5c001000 	.word	0x5c001000

08001850 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001860:	4904      	ldr	r1, [pc, #16]	; (8001874 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	58000400 	.word	0x58000400

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	05fa0000 	.word	0x05fa0000

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff47 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff5e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffb2 	bl	8001998 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0cf      	b.n	8001bf2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d106      	bne.n	8001a6a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2223      	movs	r2, #35	; 0x23
 8001a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fa6f 	bl	8000f48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	4b64      	ldr	r3, [pc, #400]	; (8001bfc <HAL_ETH_Init+0x1bc>)
 8001a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a70:	4a62      	ldr	r2, [pc, #392]	; (8001bfc <HAL_ETH_Init+0x1bc>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a7a:	4b60      	ldr	r3, [pc, #384]	; (8001bfc <HAL_ETH_Init+0x1bc>)
 8001a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7a1b      	ldrb	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fedd 	bl	8001850 <HAL_SYSCFG_ETHInterfaceSelect>
 8001a96:	e003      	b.n	8001aa0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a98:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a9c:	f7ff fed8 	bl	8001850 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_ETH_Init+0x1c0>)
 8001aa2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001abc:	f7ff fe8c 	bl	80017d8 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ac2:	e011      	b.n	8001ae8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ac4:	f7ff fe88 	bl	80017d8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ad2:	d909      	bls.n	8001ae8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22e0      	movs	r2, #224	; 0xe0
 8001ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e084      	b.n	8001bf2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1e4      	bne.n	8001ac4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f886 	bl	8001c0c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b00:	f001 ffe8 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_ETH_Init+0x1c4>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	0c9a      	lsrs	r2, r3, #18
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3a01      	subs	r2, #1
 8001b14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fa71 	bl	8002000 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001b2a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	22e0      	movs	r2, #224	; 0xe0
 8001b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e049      	b.n	8001bf2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b66:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_ETH_Init+0x1c8>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6952      	ldr	r2, [r2, #20]
 8001b72:	0051      	lsls	r1, r2, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b7e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fad9 	bl	800213a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fb1f 	bl	80021cc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	3305      	adds	r3, #5
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	021a      	lsls	r2, r3, #8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	061a      	lsls	r2, r3, #24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bcc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bda:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bdc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2210      	movs	r2, #16
 8001bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	58000400 	.word	0x58000400
 8001c04:	431bde83 	.word	0x431bde83
 8001c08:	ffff8001 	.word	0xffff8001

08001c0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c26:	f001 ff55 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8001c2a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d908      	bls.n	8001c46 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d804      	bhi.n	8001c46 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e027      	b.n	8001c96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d908      	bls.n	8001c60 <HAL_ETH_SetMDIOClockRange+0x54>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d204      	bcs.n	8001c60 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e01a      	b.n	8001c96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d303      	bcc.n	8001c70 <HAL_ETH_SetMDIOClockRange+0x64>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d911      	bls.n	8001c94 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d908      	bls.n	8001c8a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d804      	bhi.n	8001c8a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e005      	b.n	8001c96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e000      	b.n	8001c96 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c94:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	01312cff 	.word	0x01312cff
 8001cac:	02160ebf 	.word	0x02160ebf
 8001cb0:	03938700 	.word	0x03938700
 8001cb4:	05f5e0ff 	.word	0x05f5e0ff
 8001cb8:	08f0d17f 	.word	0x08f0d17f

08001cbc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001cd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7b1b      	ldrb	r3, [r3, #12]
 8001cdc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7b5b      	ldrb	r3, [r3, #13]
 8001ce4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	7b9b      	ldrb	r3, [r3, #14]
 8001cec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	7bdb      	ldrb	r3, [r3, #15]
 8001cf4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cf6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	7c12      	ldrb	r2, [r2, #16]
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d102      	bne.n	8001d06 <ETH_SetMACConfig+0x4a>
 8001d00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d04:	e000      	b.n	8001d08 <ETH_SetMACConfig+0x4c>
 8001d06:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	7c52      	ldrb	r2, [r2, #17]
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	d102      	bne.n	8001d18 <ETH_SetMACConfig+0x5c>
 8001d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d16:	e000      	b.n	8001d1a <ETH_SetMACConfig+0x5e>
 8001d18:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	7c9b      	ldrb	r3, [r3, #18]
 8001d20:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d22:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d28:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001d36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	7f5b      	ldrb	r3, [r3, #29]
 8001d3c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	7f92      	ldrb	r2, [r2, #30]
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d102      	bne.n	8001d4e <ETH_SetMACConfig+0x92>
 8001d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4c:	e000      	b.n	8001d50 <ETH_SetMACConfig+0x94>
 8001d4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	7fdb      	ldrb	r3, [r3, #31]
 8001d56:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d102      	bne.n	8001d6a <ETH_SetMACConfig+0xae>
 8001d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d68:	e000      	b.n	8001d6c <ETH_SetMACConfig+0xb0>
 8001d6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d6c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d7a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d7c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <ETH_SetMACConfig+0x22c>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001da8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001db2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001dba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001dbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d102      	bne.n	8001dce <ETH_SetMACConfig+0x112>
 8001dc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x114>
 8001dce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001dd0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <ETH_SetMACConfig+0x230>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	430b      	orrs	r3, r1
 8001dec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <ETH_SetMACConfig+0x234>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d101      	bne.n	8001e2e <ETH_SetMACConfig+0x172>
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	e000      	b.n	8001e30 <ETH_SetMACConfig+0x174>
 8001e2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e42:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f023 0103 	bic.w	r1, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e86:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d101      	bne.n	8001eaa <ETH_SetMACConfig+0x1ee>
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	e000      	b.n	8001eac <ETH_SetMACConfig+0x1f0>
 8001eaa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001eac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001eb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001eb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001ebe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001ecc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	00048083 	.word	0x00048083
 8001eec:	c0f88000 	.word	0xc0f88000
 8001ef0:	fffffef0 	.word	0xfffffef0

08001ef4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b38      	ldr	r3, [pc, #224]	; (8001fec <ETH_SetDMAConfig+0xf8>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	6811      	ldr	r1, [r2, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	791b      	ldrb	r3, [r3, #4]
 8001f20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
 8001f2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <ETH_SetDMAConfig+0xfc>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	7b5b      	ldrb	r3, [r3, #13]
 8001f52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <ETH_SetDMAConfig+0x100>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	430b      	orrs	r3, r1
 8001f74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f78:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	7d1b      	ldrb	r3, [r3, #20]
 8001f84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	7f5b      	ldrb	r3, [r3, #29]
 8001f8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <ETH_SetDMAConfig+0x104>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
 8001fb6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <ETH_SetDMAConfig+0x108>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fdc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	ffff87fd 	.word	0xffff87fd
 8001ff0:	ffff2ffe 	.word	0xffff2ffe
 8001ff4:	fffec000 	.word	0xfffec000
 8001ff8:	ffc0efef 	.word	0xffc0efef
 8001ffc:	7fc0ffff 	.word	0x7fc0ffff

08002000 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b0a4      	sub	sp, #144	; 0x90
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800200e:	2300      	movs	r3, #0
 8002010:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002036:	2301      	movs	r3, #1
 8002038:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800203c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002040:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002048:	2300      	movs	r3, #0
 800204a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002058:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800205c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002064:	2300      	movs	r3, #0
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800207a:	2300      	movs	r3, #0
 800207c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800207e:	2300      	movs	r3, #0
 8002080:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002082:	2300      	movs	r3, #0
 8002084:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002092:	2301      	movs	r3, #1
 8002094:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002098:	2320      	movs	r3, #32
 800209a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80020aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80020bc:	2302      	movs	r3, #2
 80020be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020da:	2300      	movs	r3, #0
 80020dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fde6 	bl	8001cbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020f0:	2301      	movs	r3, #1
 80020f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800210a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800210e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002114:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002118:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002120:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fee1 	bl	8001ef4 <ETH_SetDMAConfig>
}
 8002132:	bf00      	nop
 8002134:	3790      	adds	r7, #144	; 0x90
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e01d      	b.n	8002184 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	3206      	adds	r2, #6
 800217a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d9de      	bls.n	8002148 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	461a      	mov	r2, r3
 800219a:	2303      	movs	r3, #3
 800219c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021bc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e023      	b.n	8002222 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6919      	ldr	r1, [r3, #16]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	3212      	adds	r2, #18
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d9d8      	bls.n	80021da <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224e:	461a      	mov	r2, r3
 8002250:	2303      	movs	r3, #3
 8002252:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002262:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002276:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002296:	4b89      	ldr	r3, [pc, #548]	; (80024bc <HAL_GPIO_Init+0x234>)
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800229a:	e194      	b.n	80025c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8186 	beq.w	80025c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d005      	beq.n	80022cc <HAL_GPIO_Init+0x44>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d017      	beq.n	800236a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	69b9      	ldr	r1, [r7, #24]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80e0 	beq.w	80025c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_GPIO_Init+0x238>)
 8002402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002406:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <HAL_GPIO_Init+0x238>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_GPIO_Init+0x238>)
 8002412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241e:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <HAL_GPIO_Init+0x23c>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <HAL_GPIO_Init+0x240>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d052      	beq.n	80024f0 <HAL_GPIO_Init+0x268>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <HAL_GPIO_Init+0x244>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_GPIO_Init+0x22e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_GPIO_Init+0x248>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02b      	beq.n	80024b2 <HAL_GPIO_Init+0x22a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_GPIO_Init+0x24c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x226>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_GPIO_Init+0x250>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x222>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_GPIO_Init+0x254>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x21e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_GPIO_Init+0x258>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x21a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_GPIO_Init+0x25c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x216>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_GPIO_Init+0x260>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x212>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_GPIO_Init+0x264>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x20e>
 8002492:	2309      	movs	r3, #9
 8002494:	e02d      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 8002496:	230a      	movs	r3, #10
 8002498:	e02b      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 800249a:	2308      	movs	r3, #8
 800249c:	e029      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 800249e:	2307      	movs	r3, #7
 80024a0:	e027      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024a2:	2306      	movs	r3, #6
 80024a4:	e025      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e023      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e021      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e01f      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e01d      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e01b      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024ba:	bf00      	nop
 80024bc:	58000080 	.word	0x58000080
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58000400 	.word	0x58000400
 80024c8:	58020000 	.word	0x58020000
 80024cc:	58020400 	.word	0x58020400
 80024d0:	58020800 	.word	0x58020800
 80024d4:	58020c00 	.word	0x58020c00
 80024d8:	58021000 	.word	0x58021000
 80024dc:	58021400 	.word	0x58021400
 80024e0:	58021800 	.word	0x58021800
 80024e4:	58021c00 	.word	0x58021c00
 80024e8:	58022000 	.word	0x58022000
 80024ec:	58022400 	.word	0x58022400
 80024f0:	2300      	movs	r3, #0
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002502:	4938      	ldr	r1, [pc, #224]	; (80025e4 <HAL_GPIO_Init+0x35c>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f ae63 	bne.w	800229c <HAL_GPIO_Init+0x14>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	3724      	adds	r7, #36	; 0x24
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	58000400 	.word	0x58000400

080025e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07f      	b.n	800275e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fd36 	bl	80010e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800269c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e006      	b.n	80026d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d104      	bne.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_I2C_Init+0x11c>)
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69d9      	ldr	r1, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	02008000 	.word	0x02008000

0800276c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	d138      	bne.n	80027f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800278c:	2302      	movs	r3, #2
 800278e:	e032      	b.n	80027f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b20      	cmp	r3, #32
 8002816:	d139      	bne.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002822:	2302      	movs	r3, #2
 8002824:	e033      	b.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2224      	movs	r2, #36	; 0x24
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800289a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289c:	b08f      	sub	sp, #60	; 0x3c
 800289e:	af0a      	add	r7, sp, #40	; 0x28
 80028a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e116      	b.n	8002ada <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fd72 	bl	80013b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 fcda 	bl	80072a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	687e      	ldr	r6, [r7, #4]
 80028f8:	466d      	mov	r5, sp
 80028fa:	f106 0410 	add.w	r4, r6, #16
 80028fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800290a:	e885 0003 	stmia.w	r5, {r0, r1}
 800290e:	1d33      	adds	r3, r6, #4
 8002910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	f004 fc58 	bl	80071c8 <USB_CoreInit>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0d7      	b.n	8002ada <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f004 fcc8 	bl	80072c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e04a      	b.n	80029d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	333d      	adds	r3, #61	; 0x3d
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	333c      	adds	r3, #60	; 0x3c
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	b298      	uxth	r0, r3
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3356      	adds	r3, #86	; 0x56
 8002978:	4602      	mov	r2, r0
 800297a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3340      	adds	r3, #64	; 0x40
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3344      	adds	r3, #68	; 0x44
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3348      	adds	r3, #72	; 0x48
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334c      	adds	r3, #76	; 0x4c
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	3301      	adds	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3af      	bcc.n	800293c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e044      	b.n	8002a6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3b5      	bcc.n	80029e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	687e      	ldr	r6, [r7, #4]
 8002a7e:	466d      	mov	r5, sp
 8002a80:	f106 0410 	add.w	r4, r6, #16
 8002a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a94:	1d33      	adds	r3, r6, #4
 8002a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f004 fc61 	bl	8007360 <USB_DevInit>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e014      	b.n	8002ada <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d102      	bne.n	8002ace <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f80b 	bl	8002ae4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fe1f 	bl	8007716 <USB_DevDisconnect>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ae4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	10000003 	.word	0x10000003

08002b2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d00a      	beq.n	8002b56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01f      	b.n	8002b92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e01d      	b.n	8002b92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	490f      	ldr	r1, [pc, #60]	; (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b66:	f7fe fe37 	bl	80017d8 <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b6c:	e009      	b.n	8002b82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b6e:	f7fe fe33 	bl	80017d8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7c:	d901      	bls.n	8002b82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_PWREx_ConfigSupply+0x70>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	58024800 	.word	0x58024800

08002ba0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58024800 	.word	0x58024800

08002bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f000 bc48 	b.w	8003464 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8088 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4b99      	ldr	r3, [pc, #612]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bec:	4b96      	ldr	r3, [pc, #600]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCC_OscConfig+0x48>
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b18      	cmp	r3, #24
 8002bfc:	d111      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62>
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d06d      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x130>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d169      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f000 bc21 	b.w	8003464 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x7a>
 8002c2c:	4b86      	ldr	r3, [pc, #536]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a85      	ldr	r2, [pc, #532]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e02e      	b.n	8002c98 <HAL_RCC_OscConfig+0xd8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x9c>
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b7e      	ldr	r3, [pc, #504]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xd8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0xc0>
 8002c66:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a77      	ldr	r2, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a74      	ldr	r2, [pc, #464]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xd8>
 8002c80:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6d      	ldr	r2, [pc, #436]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fd9a 	bl	80017d8 <HAL_GetTick>
 8002ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fd96 	bl	80017d8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e3d4      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe8>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fd86 	bl	80017d8 <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fd82 	bl	80017d8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e3c0      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x110>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80ca 	beq.w	8002e94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d00:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_RCC_OscConfig+0x166>
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2b18      	cmp	r3, #24
 8002d1a:	d156      	bne.n	8002dca <HAL_RCC_OscConfig+0x20a>
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d151      	bne.n	8002dca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d26:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x17e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e392      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d3e:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0219 	bic.w	r2, r3, #25
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	493f      	ldr	r1, [pc, #252]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fd42 	bl	80017d8 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe fd3e 	bl	80017d8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e37c      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d6a:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	f7fe fd5f 	bl	8001838 <HAL_GetREVID>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d817      	bhi.n	8002db4 <HAL_RCC_OscConfig+0x1f4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d108      	bne.n	8002d9e <HAL_RCC_OscConfig+0x1de>
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d9c:	e07a      	b.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	031b      	lsls	r3, r3, #12
 8002dac:	4926      	ldr	r1, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db2:	e06f      	b.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	4921      	ldr	r1, [pc, #132]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc8:	e064      	b.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d047      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0219 	bic.w	r2, r3, #25
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	491a      	ldr	r1, [pc, #104]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fcf8 	bl	80017d8 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fcf4 	bl	80017d8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e332      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	f7fe fd15 	bl	8001838 <HAL_GetREVID>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d819      	bhi.n	8002e4c <HAL_RCC_OscConfig+0x28c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d108      	bne.n	8002e32 <HAL_RCC_OscConfig+0x272>
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2e:	6053      	str	r3, [r2, #4]
 8002e30:	e030      	b.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	031b      	lsls	r3, r3, #12
 8002e40:	4901      	ldr	r1, [pc, #4]	; (8002e48 <HAL_RCC_OscConfig+0x288>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 8002e46:	e025      	b.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	4b9a      	ldr	r3, [pc, #616]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	4997      	ldr	r1, [pc, #604]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
 8002e60:	e018      	b.n	8002e94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b95      	ldr	r3, [pc, #596]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a94      	ldr	r2, [pc, #592]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fcb3 	bl	80017d8 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fcaf 	bl	80017d8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e2ed      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e88:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a9 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eac:	4b82      	ldr	r3, [pc, #520]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d007      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x308>
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b18      	cmp	r3, #24
 8002ebc:	d13a      	bne.n	8002f34 <HAL_RCC_OscConfig+0x374>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d135      	bne.n	8002f34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ec8:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x320>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e2c1      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee0:	f7fe fcaa 	bl	8001838 <HAL_GetREVID>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d817      	bhi.n	8002f1e <HAL_RCC_OscConfig+0x35e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCC_OscConfig+0x348>
 8002ef6:	4b70      	ldr	r3, [pc, #448]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002efe:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f06:	e075      	b.n	8002ff4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	069b      	lsls	r3, r3, #26
 8002f16:	4968      	ldr	r1, [pc, #416]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f1c:	e06a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1e:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	4962      	ldr	r1, [pc, #392]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f32:	e05f      	b.n	8002ff4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d042      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5d      	ldr	r2, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc46 	bl	80017d8 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f50:	f7fe fc42 	bl	80017d8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e280      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f62:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f6e:	f7fe fc63 	bl	8001838 <HAL_GetREVID>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d817      	bhi.n	8002fac <HAL_RCC_OscConfig+0x3ec>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d108      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3d6>
 8002f84:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f8c:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f92:	6053      	str	r3, [r2, #4]
 8002f94:	e02e      	b.n	8002ff4 <HAL_RCC_OscConfig+0x434>
 8002f96:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	069b      	lsls	r3, r3, #26
 8002fa4:	4944      	ldr	r1, [pc, #272]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
 8002faa:	e023      	b.n	8002ff4 <HAL_RCC_OscConfig+0x434>
 8002fac:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	493f      	ldr	r1, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60cb      	str	r3, [r1, #12]
 8002fc0:	e018      	b.n	8002ff4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3c      	ldr	r2, [pc, #240]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe fc03 	bl	80017d8 <HAL_GetTick>
 8002fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fd6:	f7fe fbff 	bl	80017d8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e23d      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d036      	beq.n	800306e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d019      	beq.n	800303c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 800300a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fbe0 	bl	80017d8 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fbdc 	bl	80017d8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e21a      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x45c>
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 800303e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fbc6 	bl	80017d8 <HAL_GetTick>
 800304c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe fbc2 	bl	80017d8 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e200      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d039      	beq.n	80030ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01c      	beq.n	80030bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 8003088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800308c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800308e:	f7fe fba3 	bl	80017d8 <HAL_GetTick>
 8003092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003096:	f7fe fb9f 	bl	80017d8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1dd      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x4d6>
 80030b4:	e01b      	b.n	80030ee <HAL_RCC_OscConfig+0x52e>
 80030b6:	bf00      	nop
 80030b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030bc:	4b9b      	ldr	r3, [pc, #620]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a9a      	ldr	r2, [pc, #616]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80030c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030c8:	f7fe fb86 	bl	80017d8 <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d0:	f7fe fb82 	bl	80017d8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1c0      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030e2:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8081 	beq.w	80031fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030fc:	4b8c      	ldr	r3, [pc, #560]	; (8003330 <HAL_RCC_OscConfig+0x770>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a8b      	ldr	r2, [pc, #556]	; (8003330 <HAL_RCC_OscConfig+0x770>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003108:	f7fe fb66 	bl	80017d8 <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fe fb62 	bl	80017d8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1a0      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003122:	4b83      	ldr	r3, [pc, #524]	; (8003330 <HAL_RCC_OscConfig+0x770>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x584>
 8003136:	4b7d      	ldr	r3, [pc, #500]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a7c      	ldr	r2, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	e02d      	b.n	80031a0 <HAL_RCC_OscConfig+0x5e0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <HAL_RCC_OscConfig+0x5a6>
 800314c:	4b77      	ldr	r3, [pc, #476]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a76      	ldr	r2, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b74      	ldr	r3, [pc, #464]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a73      	ldr	r2, [pc, #460]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x5e0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c8>
 800316e:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a6e      	ldr	r2, [pc, #440]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a6b      	ldr	r2, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x5e0>
 8003188:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	4b65      	ldr	r3, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a64      	ldr	r2, [pc, #400]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fb16 	bl	80017d8 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe fb12 	bl	80017d8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e14e      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x5f0>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fb00 	bl	80017d8 <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe fafc 	bl	80017d8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e138      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031f2:	4b4e      	ldr	r3, [pc, #312]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 812d 	beq.w	8003462 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003208:	4b48      	ldr	r3, [pc, #288]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003210:	2b18      	cmp	r3, #24
 8003212:	f000 80bd 	beq.w	8003390 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 809e 	bne.w	800335c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b42      	ldr	r3, [pc, #264]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a41      	ldr	r2, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe fad4 	bl	80017d8 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe fad0 	bl	80017d8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e10e      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003246:	4b39      	ldr	r3, [pc, #228]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x774>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	430a      	orrs	r2, r1
 8003266:	4931      	ldr	r1, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	628b      	str	r3, [r1, #40]	; 0x28
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	3b01      	subs	r3, #1
 8003272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	3b01      	subs	r3, #1
 800327c:	025b      	lsls	r3, r3, #9
 800327e:	b29b      	uxth	r3, r3
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	3b01      	subs	r3, #1
 8003288:	041b      	lsls	r3, r3, #16
 800328a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	3b01      	subs	r3, #1
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800329c:	4923      	ldr	r1, [pc, #140]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032a2:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032ae:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_RCC_OscConfig+0x778>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ba:	00d2      	lsls	r2, r2, #3
 80032bc:	491b      	ldr	r1, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f023 020c 	bic.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4917      	ldr	r1, [pc, #92]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f023 0202 	bic.w	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	4912      	ldr	r1, [pc, #72]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4a0d      	ldr	r2, [pc, #52]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_RCC_OscConfig+0x76c>)
 800331c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fa59 	bl	80017d8 <HAL_GetTick>
 8003326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003328:	e011      	b.n	800334e <HAL_RCC_OscConfig+0x78e>
 800332a:	bf00      	nop
 800332c:	58024400 	.word	0x58024400
 8003330:	58024800 	.word	0x58024800
 8003334:	fffffc0c 	.word	0xfffffc0c
 8003338:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fa4c 	bl	80017d8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e08a      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x77c>
 800335a:	e082      	b.n	8003462 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fa36 	bl	80017d8 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fa32 	bl	80017d8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e070      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003382:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x7b0>
 800338e:	e068      	b.n	8003462 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003396:	4b35      	ldr	r3, [pc, #212]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d031      	beq.n	8003408 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0203 	and.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d12a      	bne.n	8003408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d122      	bne.n	8003408 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11a      	bne.n	8003408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0a5b      	lsrs	r3, r3, #9
 80033d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0e1b      	lsrs	r3, r3, #24
 80033fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e02b      	b.n	8003464 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003416:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d01f      	beq.n	8003462 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	4a11      	ldr	r2, [pc, #68]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800342e:	f7fe f9d3 	bl	80017d8 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003434:	bf00      	nop
 8003436:	f7fe f9cf 	bl	80017d8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	4293      	cmp	r3, r2
 8003440:	d0f9      	beq.n	8003436 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x8b0>)
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800344e:	00d2      	lsls	r2, r2, #3
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003452:	4313      	orrs	r3, r2
 8003454:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_RCC_OscConfig+0x8ac>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	58024400 	.word	0x58024400
 8003470:	ffff0007 	.word	0xffff0007

08003474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e19c      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b8a      	ldr	r3, [pc, #552]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b87      	ldr	r3, [pc, #540]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 020f 	bic.w	r2, r3, #15
 800349e:	4985      	ldr	r1, [pc, #532]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b83      	ldr	r3, [pc, #524]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e184      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d908      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034d4:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4975      	ldr	r1, [pc, #468]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d908      	bls.n	8003514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003502:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	496a      	ldr	r1, [pc, #424]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	4b64      	ldr	r3, [pc, #400]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800352c:	429a      	cmp	r2, r3
 800352e:	d908      	bls.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	495e      	ldr	r1, [pc, #376]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800353e:	4313      	orrs	r3, r2
 8003540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355a:	429a      	cmp	r2, r3
 800355c:	d908      	bls.n	8003570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800355e:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4953      	ldr	r1, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	429a      	cmp	r2, r3
 800358a:	d908      	bls.n	800359e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f023 020f 	bic.w	r2, r3, #15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4947      	ldr	r1, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800359a:	4313      	orrs	r3, r2
 800359c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d055      	beq.n	8003656 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4940      	ldr	r1, [pc, #256]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c4:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0f6      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0ea      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035f4:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0de      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003604:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0d6      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4925      	ldr	r1, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003622:	4313      	orrs	r3, r2
 8003624:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fe f8d7 	bl	80017d8 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	e00a      	b.n	8003644 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fe f8d3 	bl	80017d8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0be      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	429a      	cmp	r2, r3
 8003654:	d1eb      	bne.n	800362e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	429a      	cmp	r2, r3
 8003670:	d208      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003680:	4313      	orrs	r3, r2
 8003682:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d214      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 020f 	bic.w	r2, r3, #15
 800369a:	4906      	ldr	r1, [pc, #24]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e086      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
 80036b4:	52002000 	.word	0x52002000
 80036b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d208      	bcs.n	80036ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036d8:	4b3c      	ldr	r3, [pc, #240]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4939      	ldr	r1, [pc, #228]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003702:	429a      	cmp	r2, r3
 8003704:	d208      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	492e      	ldr	r1, [pc, #184]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003730:	429a      	cmp	r2, r3
 8003732:	d208      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4922      	ldr	r1, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003742:	4313      	orrs	r3, r2
 8003744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375e:	429a      	cmp	r2, r3
 8003760:	d208      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4917      	ldr	r1, [pc, #92]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003774:	f000 f834 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4912      	ldr	r1, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x35c>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_RCC_ClockConfig+0x35c>)
 800379c:	5cd3      	ldrb	r3, [r2, r3]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x360>)
 80037aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x364>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x368>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd ffc4 	bl	8001744 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
 80037d0:	080081b0 	.word	0x080081b0
 80037d4:	24000004 	.word	0x24000004
 80037d8:	24000000 	.word	0x24000000
 80037dc:	24000008 	.word	0x24000008

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e6:	4bb3      	ldr	r3, [pc, #716]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ee:	2b18      	cmp	r3, #24
 80037f0:	f200 8155 	bhi.w	8003a9e <HAL_RCC_GetSysClockFreq+0x2be>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003861 	.word	0x08003861
 8003800:	08003a9f 	.word	0x08003a9f
 8003804:	08003a9f 	.word	0x08003a9f
 8003808:	08003a9f 	.word	0x08003a9f
 800380c:	08003a9f 	.word	0x08003a9f
 8003810:	08003a9f 	.word	0x08003a9f
 8003814:	08003a9f 	.word	0x08003a9f
 8003818:	08003a9f 	.word	0x08003a9f
 800381c:	08003887 	.word	0x08003887
 8003820:	08003a9f 	.word	0x08003a9f
 8003824:	08003a9f 	.word	0x08003a9f
 8003828:	08003a9f 	.word	0x08003a9f
 800382c:	08003a9f 	.word	0x08003a9f
 8003830:	08003a9f 	.word	0x08003a9f
 8003834:	08003a9f 	.word	0x08003a9f
 8003838:	08003a9f 	.word	0x08003a9f
 800383c:	0800388d 	.word	0x0800388d
 8003840:	08003a9f 	.word	0x08003a9f
 8003844:	08003a9f 	.word	0x08003a9f
 8003848:	08003a9f 	.word	0x08003a9f
 800384c:	08003a9f 	.word	0x08003a9f
 8003850:	08003a9f 	.word	0x08003a9f
 8003854:	08003a9f 	.word	0x08003a9f
 8003858:	08003a9f 	.word	0x08003a9f
 800385c:	08003893 	.word	0x08003893
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003860:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800386c:	4b91      	ldr	r3, [pc, #580]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	4a90      	ldr	r2, [pc, #576]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800387e:	e111      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003880:	4b8d      	ldr	r3, [pc, #564]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003882:	61bb      	str	r3, [r7, #24]
      break;
 8003884:	e10e      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003888:	61bb      	str	r3, [r7, #24]
      break;
 800388a:	e10b      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800388c:	4b8c      	ldr	r3, [pc, #560]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800388e:	61bb      	str	r3, [r7, #24]
      break;
 8003890:	e108      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003892:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800389c:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038a8:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038b2:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	08db      	lsrs	r3, r3, #3
 80038b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80e1 	beq.w	8003a98 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	f000 8083 	beq.w	80039e4 <HAL_RCC_GetSysClockFreq+0x204>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f200 80a1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x248>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x114>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d056      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038f2:	e099      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f4:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02d      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003900:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	4a6b      	ldr	r2, [pc, #428]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a02 	vldr	s12, [r7, #8]
 800393e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800395a:	e087      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ac8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800399e:	e065      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039e2:	e043      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a26:	e021      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	0a5b      	lsrs	r3, r3, #9
 8003a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a76:	3301      	adds	r3, #1
 8003a78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a90:	ee17 3a90 	vmov	r3, s15
 8003a94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
      break;
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa0:	61bb      	str	r3, [r7, #24]
      break;
 8003aa2:	bf00      	nop
  }

  return sysclockfreq;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	03d09000 	.word	0x03d09000
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	46000000 	.word	0x46000000
 8003ac8:	4c742400 	.word	0x4c742400
 8003acc:	4a742400 	.word	0x4a742400
 8003ad0:	4af42400 	.word	0x4af42400

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ada:	f7ff fe81 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490f      	ldr	r1, [pc, #60]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58024400 	.word	0x58024400
 8003b28:	080081b0 	.word	0x080081b0
 8003b2c:	24000004 	.word	0x24000004
 8003b30:	24000000 	.word	0x24000000

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b38:	f7ff ffcc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	080081b0 	.word	0x080081b0

08003b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b64:	f7ff ffb6 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	58024400 	.word	0x58024400
 8003b88:	080081b0 	.word	0x080081b0

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b90:	b0ca      	sub	sp, #296	; 0x128
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003bb0:	2500      	movs	r5, #0
 8003bb2:	ea54 0305 	orrs.w	r3, r4, r5
 8003bb6:	d049      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bc2:	d02f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bc8:	d828      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bce:	d01a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd4:	d822      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bde:	d007      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be0:	e01c      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be2:	4bb8      	ldr	r3, [pc, #736]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	4ab7      	ldr	r2, [pc, #732]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bee:	e01a      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fc8f 	bl	800551c <RCCEx_PLL2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c04:	e00f      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	3328      	adds	r3, #40	; 0x28
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 fd36 	bl	8005680 <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c1a:	e004      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c2e:	4ba5      	ldr	r3, [pc, #660]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c3c:	4aa1      	ldr	r2, [pc, #644]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6513      	str	r3, [r2, #80]	; 0x50
 8003c42:	e003      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c58:	f04f 0900 	mov.w	r9, #0
 8003c5c:	ea58 0309 	orrs.w	r3, r8, r9
 8003c60:	d047      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d82a      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c89 	.word	0x08003c89
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003ccb 	.word	0x08003ccb
 8003c84:	08003ccb 	.word	0x08003ccb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c88:	4b8e      	ldr	r3, [pc, #568]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a8d      	ldr	r2, [pc, #564]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c94:	e01a      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fc3c 	bl	800551c <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003caa:	e00f      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb0:	3328      	adds	r3, #40	; 0x28
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fce3 	bl	8005680 <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e004      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cc8:	e000      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4b7b      	ldr	r3, [pc, #492]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	f023 0107 	bic.w	r1, r3, #7
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4a78      	ldr	r2, [pc, #480]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ce8:	e003      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003cfe:	f04f 0b00 	mov.w	fp, #0
 8003d02:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d06:	d04c      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	d030      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d18:	d829      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d1c:	d02d      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d20:	d825      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	d018      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d26:	2b80      	cmp	r3, #128	; 0x80
 8003d28:	d821      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d007      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d32:	e01c      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d34:	4b63      	ldr	r3, [pc, #396]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a62      	ldr	r2, [pc, #392]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d40:	e01c      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d46:	3308      	adds	r3, #8
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 fbe6 	bl	800551c <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d56:	e011      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5c:	3328      	adds	r3, #40	; 0x28
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 fc8d 	bl	8005680 <RCCEx_PLL3_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	4a4c      	ldr	r2, [pc, #304]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6513      	str	r3, [r2, #80]	; 0x50
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003dae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003db8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	d053      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dce:	d035      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dd4:	d82e      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dda:	d031      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ddc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003de0:	d828      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d01a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dec:	d822      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df6:	d007      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003df8:	e01c      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfa:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4a31      	ldr	r2, [pc, #196]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e06:	e01c      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fb83 	bl	800551c <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e011      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3328      	adds	r3, #40	; 0x28
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fc2a 	bl	8005680 <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e32:	e006      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3a:	e002      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d056      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e96:	d038      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9c:	d831      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea2:	d034      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea8:	d82b      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eae:	d01d      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb4:	d825      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ec0:	e01f      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ec2:	bf00      	nop
 8003ec4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec8:	4ba2      	ldr	r3, [pc, #648]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	4aa1      	ldr	r2, [pc, #644]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ed4:	e01c      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eda:	3308      	adds	r3, #8
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fb1c 	bl	800551c <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003eea:	e011      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef0:	3328      	adds	r3, #40	; 0x28
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fbc3 	bl	8005680 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f18:	4b8e      	ldr	r3, [pc, #568]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f28:	4a8a      	ldr	r2, [pc, #552]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d03a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d01f      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f62:	2b30      	cmp	r3, #48	; 0x30
 8003f64:	d819      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d00c      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d815      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d019      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d111      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f76:	4b77      	ldr	r3, [pc, #476]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4a76      	ldr	r2, [pc, #472]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f82:	e011      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f88:	3308      	adds	r3, #8
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 fac5 	bl	800551c <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fb0:	4b68      	ldr	r3, [pc, #416]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	4a65      	ldr	r2, [pc, #404]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003fda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fe4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d051      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff8:	d035      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ffe:	d82e      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004004:	d031      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800400a:	d828      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d01a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004016:	d822      	bhi.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004020:	d007      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004022:	e01c      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004024:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004030:	e01c      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	3308      	adds	r3, #8
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fa6e 	bl	800551c <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004046:	e011      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	3328      	adds	r3, #40	; 0x28
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fb15 	bl	8005680 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800406a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004074:	4b37      	ldr	r3, [pc, #220]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004082:	4a34      	ldr	r2, [pc, #208]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004084:	430b      	orrs	r3, r1
 8004086:	6513      	str	r3, [r2, #80]	; 0x50
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800409e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80040ac:	460b      	mov	r3, r1
 80040ae:	4313      	orrs	r3, r2
 80040b0:	d056      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040bc:	d033      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c2:	d82c      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c8:	d02f      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ce:	d826      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d4:	d02b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040da:	d820      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e0:	d012      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e6:	d81a      	bhi.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d115      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f6:	3308      	adds	r3, #8
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 fa0e 	bl	800551c <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004106:	e015      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	3328      	adds	r3, #40	; 0x28
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fab5 	bl	8005680 <RCCEx_PLL3_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800411c:	e00a      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004124:	e006      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004126:	bf00      	nop
 8004128:	e004      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414a:	4a02      	ldr	r2, [pc, #8]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6513      	str	r3, [r2, #80]	; 0x50
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800415c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800416c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004176:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800417a:	460b      	mov	r3, r1
 800417c:	4313      	orrs	r3, r2
 800417e:	d055      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418c:	d033      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800418e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004192:	d82c      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d02f      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419e:	d826      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a4:	d02b      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041aa:	d820      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d012      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b6:	d81a      	bhi.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d022      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c0:	d115      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c6:	3308      	adds	r3, #8
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 f9a6 	bl	800551c <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041d6:	e015      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041dc:	3328      	adds	r3, #40	; 0x28
 80041de:	2101      	movs	r1, #1
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 fa4d 	bl	8005680 <RCCEx_PLL3_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041ec:	e00a      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041f6:	bf00      	nop
 80041f8:	e004      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800420c:	4ba3      	ldr	r3, [pc, #652]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800421c:	4a9f      	ldr	r2, [pc, #636]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421e:	430b      	orrs	r3, r1
 8004220:	6593      	str	r3, [r2, #88]	; 0x58
 8004222:	e003      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	d037      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004256:	d00e      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425c:	d816      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004266:	d111      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004268:	4b8c      	ldr	r3, [pc, #560]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4a8b      	ldr	r2, [pc, #556]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004274:	e00f      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	3308      	adds	r3, #8
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f94c 	bl	800551c <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800429e:	4b7f      	ldr	r3, [pc, #508]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a7b      	ldr	r2, [pc, #492]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ae:	430b      	orrs	r3, r1
 80042b0:	6513      	str	r3, [r2, #80]	; 0x50
 80042b2:	e003      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4313      	orrs	r3, r2
 80042da:	d039      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d81c      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004329 	.word	0x08004329
 80042f0:	080042fd 	.word	0x080042fd
 80042f4:	0800430b 	.word	0x0800430b
 80042f8:	08004329 	.word	0x08004329
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042fc:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	4a66      	ldr	r2, [pc, #408]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430e:	3308      	adds	r3, #8
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f902 	bl	800551c <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004332:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	f023 0103 	bic.w	r1, r3, #3
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	4a56      	ldr	r2, [pc, #344]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004342:	430b      	orrs	r3, r1
 8004344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800435c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004366:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	f000 809f 	beq.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004372:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a4a      	ldr	r2, [pc, #296]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800437e:	f7fd fa2b 	bl	80017d8 <HAL_GetTick>
 8004382:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004386:	e00b      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004388:	f7fd fa26 	bl	80017d8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d903      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a0:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ed      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80043ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d179      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043c0:	4053      	eors	r3, r2
 80043c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d015      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ca:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d6:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	4a30      	ldr	r2, [pc, #192]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043ee:	4a2b      	ldr	r2, [pc, #172]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d118      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd f9e8 	bl	80017d8 <HAL_GetTick>
 8004408:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440c:	e00d      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd f9e3 	bl	80017d8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	f241 3388 	movw	r3, #5000	; 0x1388
 800441e:	429a      	cmp	r2, r3
 8004420:	d903      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004428:	e005      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0eb      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443a:	2b00      	cmp	r3, #0
 800443c:	d129      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444e:	d10e      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004460:	091a      	lsrs	r2, r3, #4
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004464:	4013      	ands	r3, r2
 8004466:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6113      	str	r3, [r2, #16]
 800446c:	e005      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004474:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004478:	6113      	str	r3, [r2, #16]
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800447c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448a:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	e00e      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800449a:	e009      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800449c:	58024400 	.word	0x58024400
 80044a0:	58024800 	.word	0x58024800
 80044a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f002 0301 	and.w	r3, r2, #1
 80044bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f000 8089 	beq.w	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d8:	2b28      	cmp	r3, #40	; 0x28
 80044da:	d86b      	bhi.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	080045bd 	.word	0x080045bd
 80044e8:	080045b5 	.word	0x080045b5
 80044ec:	080045b5 	.word	0x080045b5
 80044f0:	080045b5 	.word	0x080045b5
 80044f4:	080045b5 	.word	0x080045b5
 80044f8:	080045b5 	.word	0x080045b5
 80044fc:	080045b5 	.word	0x080045b5
 8004500:	080045b5 	.word	0x080045b5
 8004504:	08004589 	.word	0x08004589
 8004508:	080045b5 	.word	0x080045b5
 800450c:	080045b5 	.word	0x080045b5
 8004510:	080045b5 	.word	0x080045b5
 8004514:	080045b5 	.word	0x080045b5
 8004518:	080045b5 	.word	0x080045b5
 800451c:	080045b5 	.word	0x080045b5
 8004520:	080045b5 	.word	0x080045b5
 8004524:	0800459f 	.word	0x0800459f
 8004528:	080045b5 	.word	0x080045b5
 800452c:	080045b5 	.word	0x080045b5
 8004530:	080045b5 	.word	0x080045b5
 8004534:	080045b5 	.word	0x080045b5
 8004538:	080045b5 	.word	0x080045b5
 800453c:	080045b5 	.word	0x080045b5
 8004540:	080045b5 	.word	0x080045b5
 8004544:	080045bd 	.word	0x080045bd
 8004548:	080045b5 	.word	0x080045b5
 800454c:	080045b5 	.word	0x080045b5
 8004550:	080045b5 	.word	0x080045b5
 8004554:	080045b5 	.word	0x080045b5
 8004558:	080045b5 	.word	0x080045b5
 800455c:	080045b5 	.word	0x080045b5
 8004560:	080045b5 	.word	0x080045b5
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045b5 	.word	0x080045b5
 800456c:	080045b5 	.word	0x080045b5
 8004570:	080045b5 	.word	0x080045b5
 8004574:	080045b5 	.word	0x080045b5
 8004578:	080045b5 	.word	0x080045b5
 800457c:	080045b5 	.word	0x080045b5
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045bd 	.word	0x080045bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458c:	3308      	adds	r3, #8
 800458e:	2101      	movs	r1, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f000 ffc3 	bl	800551c <RCCEx_PLL2_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800459c:	e00f      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	3328      	adds	r3, #40	; 0x28
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f86a 	bl	8005680 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045c6:	4bbf      	ldr	r3, [pc, #764]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d4:	4abb      	ldr	r2, [pc, #748]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d6:	430b      	orrs	r3, r1
 80045d8:	6553      	str	r3, [r2, #84]	; 0x54
 80045da:	e003      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f002 0302 	and.w	r3, r2, #2
 80045f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d041      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800460a:	2b05      	cmp	r3, #5
 800460c:	d824      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004661 	.word	0x08004661
 8004618:	0800462d 	.word	0x0800462d
 800461c:	08004643 	.word	0x08004643
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004661 	.word	0x08004661
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	3308      	adds	r3, #8
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 ff71 	bl	800551c <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004640:	e00f      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004646:	3328      	adds	r3, #40	; 0x28
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f001 f818 	bl	8005680 <RCCEx_PLL3_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800465e:	e000      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800466a:	4b96      	ldr	r3, [pc, #600]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f023 0107 	bic.w	r1, r3, #7
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004678:	4a92      	ldr	r2, [pc, #584]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6553      	str	r3, [r2, #84]	; 0x54
 800467e:	e003      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 0304 	and.w	r3, r2, #4
 8004694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800469e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d044      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d825      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	08004709 	.word	0x08004709
 80046c0:	080046d5 	.word	0x080046d5
 80046c4:	080046eb 	.word	0x080046eb
 80046c8:	08004709 	.word	0x08004709
 80046cc:	08004709 	.word	0x08004709
 80046d0:	08004709 	.word	0x08004709
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	3308      	adds	r3, #8
 80046da:	2101      	movs	r1, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 ff1d 	bl	800551c <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046e8:	e00f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	3328      	adds	r3, #40	; 0x28
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 ffc4 	bl	8005680 <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046fe:	e004      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004712:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f023 0107 	bic.w	r1, r3, #7
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004722:	4a68      	ldr	r2, [pc, #416]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6593      	str	r3, [r2, #88]	; 0x58
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f002 0320 	and.w	r3, r2, #32
 800473e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d055      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800475e:	d033      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004764:	d82c      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d02f      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d826      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004776:	d02b      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800477c:	d820      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800477e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004782:	d012      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004788:	d81a      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d022      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800478e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004792:	d115      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004798:	3308      	adds	r3, #8
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 febd 	bl	800551c <RCCEx_PLL2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047a8:	e015      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ae:	3328      	adds	r3, #40	; 0x28
 80047b0:	2102      	movs	r1, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff64 	bl	8005680 <RCCEx_PLL3_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047be:	e00a      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047c6:	e006      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047c8:	bf00      	nop
 80047ca:	e004      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047cc:	bf00      	nop
 80047ce:	e002      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	4a35      	ldr	r2, [pc, #212]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6553      	str	r3, [r2, #84]	; 0x54
 80047f4:	e003      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800480a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004814:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d058      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004826:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800482a:	d033      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800482c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004830:	d82c      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	d02f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d826      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800483e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004842:	d02b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004848:	d820      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800484a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484e:	d012      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	d81a      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d022      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	d115      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004864:	3308      	adds	r3, #8
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fe57 	bl	800551c <RCCEx_PLL2_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004874:	e015      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487a:	3328      	adds	r3, #40	; 0x28
 800487c:	2102      	movs	r1, #2
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fefe 	bl	8005680 <RCCEx_PLL3_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800488a:	e00a      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004892:	e006      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004894:	bf00      	nop
 8004896:	e004      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004898:	bf00      	nop
 800489a:	e002      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10e      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ba:	4a02      	ldr	r2, [pc, #8]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048bc:	430b      	orrs	r3, r1
 80048be:	6593      	str	r3, [r2, #88]	; 0x58
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048e0:	2300      	movs	r3, #0
 80048e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048ea:	460b      	mov	r3, r1
 80048ec:	4313      	orrs	r3, r2
 80048ee:	d055      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048fc:	d033      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80048fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004902:	d82c      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	d02f      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d826      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004910:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004914:	d02b      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004916:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800491a:	d820      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800491c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004920:	d012      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004926:	d81a      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d022      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	d115      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	3308      	adds	r3, #8
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fdee 	bl	800551c <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004946:	e015      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494c:	3328      	adds	r3, #40	; 0x28
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fe95 	bl	8005680 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800495c:	e00a      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004966:	bf00      	nop
 8004968:	e004      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800497c:	4ba1      	ldr	r3, [pc, #644]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004988:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800498c:	4a9d      	ldr	r2, [pc, #628]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498e:	430b      	orrs	r3, r1
 8004990:	6593      	str	r3, [r2, #88]	; 0x58
 8004992:	e003      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f002 0308 	and.w	r3, r2, #8
 80049a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80049b6:	460b      	mov	r3, r1
 80049b8:	4313      	orrs	r3, r2
 80049ba:	d01e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ce:	3328      	adds	r3, #40	; 0x28
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fe54 	bl	8005680 <RCCEx_PLL3_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049e4:	4b87      	ldr	r3, [pc, #540]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	4a83      	ldr	r2, [pc, #524]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f002 0310 	and.w	r3, r2, #16
 8004a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a10:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a14:	460b      	mov	r3, r1
 8004a16:	4313      	orrs	r3, r2
 8004a18:	d01e      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2c:	3328      	adds	r3, #40	; 0x28
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fe25 	bl	8005680 <RCCEx_PLL3_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a52:	4a6c      	ldr	r2, [pc, #432]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d03e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a84:	d022      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8a:	d81b      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a94:	d00b      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a96:	e015      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fd3b 	bl	800551c <RCCEx_PLL2_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aac:	e00f      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	3328      	adds	r3, #40	; 0x28
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fde2 	bl	8005680 <RCCEx_PLL3_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad6:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ae6:	4a47      	ldr	r2, [pc, #284]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6593      	str	r3, [r2, #88]	; 0x58
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004b02:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b04:	2300      	movs	r3, #0
 8004b06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d03b      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b1e:	d01f      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b24:	d818      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b2a:	d003      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b30:	d007      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b32:	e011      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a32      	ldr	r2, [pc, #200]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b40:	e00f      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b46:	3328      	adds	r3, #40	; 0x28
 8004b48:	2101      	movs	r1, #1
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fd98 	bl	8005680 <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b56:	e004      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6a:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b96:	673b      	str	r3, [r7, #112]	; 0x70
 8004b98:	2300      	movs	r3, #0
 8004b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d034      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d007      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004bb6:	e011      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4a11      	ldr	r2, [pc, #68]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bc4:	e00e      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bca:	3308      	adds	r3, #8
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fca4 	bl	800551c <RCCEx_PLL2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bda:	e003      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	4a02      	ldr	r2, [pc, #8]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	2300      	movs	r3, #0
 8004c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d00c      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c30:	3328      	adds	r3, #40	; 0x28
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fd23 	bl	8005680 <RCCEx_PLL3_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c52:	663b      	str	r3, [r7, #96]	; 0x60
 8004c54:	2300      	movs	r3, #0
 8004c56:	667b      	str	r3, [r7, #100]	; 0x64
 8004c58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	d038      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c6e:	d018      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c74:	d811      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d014      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d80b      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d011      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4bc3      	ldr	r3, [pc, #780]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4ac2      	ldr	r2, [pc, #776]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ca0:	e004      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb4:	4bb9      	ldr	r3, [pc, #740]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc4:	4ab5      	ldr	r2, [pc, #724]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	6553      	str	r3, [r2, #84]	; 0x54
 8004cca:	e003      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cf0:	4baa      	ldr	r3, [pc, #680]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	4aa7      	ldr	r2, [pc, #668]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
 8004d12:	2300      	movs	r3, #0
 8004d14:	657b      	str	r3, [r7, #84]	; 0x54
 8004d16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d20:	4b9e      	ldr	r3, [pc, #632]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d30:	4a9a      	ldr	r2, [pc, #616]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d44:	2300      	movs	r3, #0
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d52:	4b92      	ldr	r3, [pc, #584]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	4a8e      	ldr	r2, [pc, #568]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
 8004d74:	2300      	movs	r3, #0
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d82:	4b86      	ldr	r3, [pc, #536]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	4a85      	ldr	r2, [pc, #532]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d8c:	6113      	str	r3, [r2, #16]
 8004d8e:	4b83      	ldr	r3, [pc, #524]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d90:	6919      	ldr	r1, [r3, #16]
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d9a:	4a80      	ldr	r2, [pc, #512]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dae:	2300      	movs	r3, #0
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dbc:	4b77      	ldr	r3, [pc, #476]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	4a74      	ldr	r2, [pc, #464]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dec:	4b6b      	ldr	r3, [pc, #428]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfc:	4a67      	ldr	r2, [pc, #412]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d011      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	3308      	adds	r3, #8
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb78 	bl	800551c <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6239      	str	r1, [r7, #32]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
 8004e54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	d011      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e62:	3308      	adds	r3, #8
 8004e64:	2101      	movs	r1, #1
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb58 	bl	800551c <RCCEx_PLL2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	61b9      	str	r1, [r7, #24]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d011      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fb38 	bl	800551c <RCCEx_PLL2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	2100      	movs	r1, #0
 8004ecc:	6139      	str	r1, [r7, #16]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4313      	orrs	r3, r2
 8004edc:	d011      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	3328      	adds	r3, #40	; 0x28
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fbca 	bl	8005680 <RCCEx_PLL3_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	d011      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f22:	3328      	adds	r3, #40	; 0x28
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fbaa 	bl	8005680 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6039      	str	r1, [r7, #0]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	d011      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f62:	3328      	adds	r3, #40	; 0x28
 8004f64:	2102      	movs	r1, #2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fb8a 	bl	8005680 <RCCEx_PLL3_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004f82:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004f96:	46bd      	mov	sp, r7
 8004f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9c:	58024400 	.word	0x58024400

08004fa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fa4:	f7fe fd96 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4904      	ldr	r1, [pc, #16]	; (8004fc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	080081b0 	.word	0x080081b0

08004fcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fd4:	4ba1      	ldr	r3, [pc, #644]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fde:	4b9f      	ldr	r3, [pc, #636]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	0b1b      	lsrs	r3, r3, #12
 8004fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fea:	4b9c      	ldr	r3, [pc, #624]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ff6:	4b99      	ldr	r3, [pc, #612]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	08db      	lsrs	r3, r3, #3
 8004ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8111 	beq.w	800523c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b02      	cmp	r3, #2
 800501e:	f000 8083 	beq.w	8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b02      	cmp	r3, #2
 8005026:	f200 80a1 	bhi.w	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d056      	beq.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005036:	e099      	b.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005038:	4b88      	ldr	r3, [pc, #544]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02d      	beq.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005044:	4b85      	ldr	r3, [pc, #532]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	4a84      	ldr	r2, [pc, #528]	; (8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506e:	4b7b      	ldr	r3, [pc, #492]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005082:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800509e:	e087      	b.n	80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005268 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b2:	4b6a      	ldr	r3, [pc, #424]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050e2:	e065      	b.n	80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800526c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005106:	ed97 6a03 	vldr	s12, [r7, #12]
 800510a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005126:	e043      	b.n	80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b48      	ldr	r3, [pc, #288]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a03 	vldr	s12, [r7, #12]
 800514e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800516a:	e021      	b.n	80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800526c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005192:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	0a5b      	lsrs	r3, r3, #9
 80051b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d6:	ee17 2a90 	vmov	r2, s15
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005204:	ee17 2a90 	vmov	r2, s15
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	0e1b      	lsrs	r3, r3, #24
 8005212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005226:	edd7 6a07 	vldr	s13, [r7, #28]
 800522a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005232:	ee17 2a90 	vmov	r2, s15
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800523a:	e008      	b.n	800524e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	609a      	str	r2, [r3, #8]
}
 800524e:	bf00      	nop
 8005250:	3724      	adds	r7, #36	; 0x24
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400
 8005260:	03d09000 	.word	0x03d09000
 8005264:	46000000 	.word	0x46000000
 8005268:	4c742400 	.word	0x4c742400
 800526c:	4a742400 	.word	0x4a742400
 8005270:	4af42400 	.word	0x4af42400

08005274 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005274:	b480      	push	{r7}
 8005276:	b089      	sub	sp, #36	; 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800527c:	4ba1      	ldr	r3, [pc, #644]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005286:	4b9f      	ldr	r3, [pc, #636]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	0d1b      	lsrs	r3, r3, #20
 800528c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005290:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005292:	4b9c      	ldr	r3, [pc, #624]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800529e:	4b99      	ldr	r3, [pc, #612]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	08db      	lsrs	r3, r3, #3
 80052a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8111 	beq.w	80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	f000 8083 	beq.w	80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	f200 80a1 	bhi.w	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d056      	beq.n	800538c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052de:	e099      	b.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052e0:	4b88      	ldr	r3, [pc, #544]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d02d      	beq.n	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052ec:	4b85      	ldr	r3, [pc, #532]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	08db      	lsrs	r3, r3, #3
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	4a84      	ldr	r2, [pc, #528]	; (8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
 80052fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005316:	4b7b      	ldr	r3, [pc, #492]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005326:	ed97 6a03 	vldr	s12, [r7, #12]
 800532a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800532e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005346:	e087      	b.n	8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005510 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535a:	4b6a      	ldr	r3, [pc, #424]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536a:	ed97 6a03 	vldr	s12, [r7, #12]
 800536e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800538a:	e065      	b.n	8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800539a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539e:	4b59      	ldr	r3, [pc, #356]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80053b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ce:	e043      	b.n	8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e2:	4b48      	ldr	r3, [pc, #288]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005412:	e021      	b.n	8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005426:	4b37      	ldr	r3, [pc, #220]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005436:	ed97 6a03 	vldr	s12, [r7, #12]
 800543a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800550c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800543e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005456:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005458:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	0a5b      	lsrs	r3, r3, #9
 800545e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800546e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005472:	edd7 6a07 	vldr	s13, [r7, #28]
 8005476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800547a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800547e:	ee17 2a90 	vmov	r2, s15
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005486:	4b1f      	ldr	r3, [pc, #124]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800549c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ac:	ee17 2a90 	vmov	r2, s15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054b4:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	0e1b      	lsrs	r3, r3, #24
 80054ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	ee17 2a90 	vmov	r2, s15
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054e2:	e008      	b.n	80054f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
}
 80054f6:	bf00      	nop
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	58024400 	.word	0x58024400
 8005508:	03d09000 	.word	0x03d09000
 800550c:	46000000 	.word	0x46000000
 8005510:	4c742400 	.word	0x4c742400
 8005514:	4a742400 	.word	0x4a742400
 8005518:	4af42400 	.word	0x4af42400

0800551c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800552a:	4b53      	ldr	r3, [pc, #332]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d101      	bne.n	800553a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e099      	b.n	800566e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800553a:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a4e      	ldr	r2, [pc, #312]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005540:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fc f947 	bl	80017d8 <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800554e:	f7fc f943 	bl	80017d8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e086      	b.n	800566e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005560:	4b45      	ldr	r3, [pc, #276]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800556c:	4b42      	ldr	r3, [pc, #264]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	493f      	ldr	r1, [pc, #252]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	628b      	str	r3, [r1, #40]	; 0x28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	3b01      	subs	r3, #1
 8005586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	3b01      	subs	r3, #1
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	b29b      	uxth	r3, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	3b01      	subs	r3, #1
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055b0:	4931      	ldr	r1, [pc, #196]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	492d      	ldr	r1, [pc, #180]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055c8:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f023 0220 	bic.w	r2, r3, #32
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4928      	ldr	r1, [pc, #160]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055da:	4b27      	ldr	r3, [pc, #156]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4a26      	ldr	r2, [pc, #152]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	f023 0310 	bic.w	r3, r3, #16
 80055e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ea:	4b24      	ldr	r3, [pc, #144]	; (800567c <RCCEx_PLL2_Config+0x160>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	69d2      	ldr	r2, [r2, #28]
 80055f2:	00d2      	lsls	r2, r2, #3
 80055f4:	4920      	ldr	r1, [pc, #128]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055fa:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005600:	f043 0310 	orr.w	r3, r3, #16
 8005604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a19      	ldr	r2, [pc, #100]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005618:	e00f      	b.n	800563a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005620:	4b15      	ldr	r3, [pc, #84]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a14      	ldr	r2, [pc, #80]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800562a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800562c:	e005      	b.n	800563a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005638:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005646:	f7fc f8c7 	bl	80017d8 <HAL_GetTick>
 800564a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800564c:	e008      	b.n	8005660 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800564e:	f7fc f8c3 	bl	80017d8 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e006      	b.n	800566e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
 800567c:	ffff0007 	.word	0xffff0007

08005680 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800568e:	4b53      	ldr	r3, [pc, #332]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b03      	cmp	r3, #3
 8005698:	d101      	bne.n	800569e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e099      	b.n	80057d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800569e:	4b4f      	ldr	r3, [pc, #316]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056aa:	f7fc f895 	bl	80017d8 <HAL_GetTick>
 80056ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056b0:	e008      	b.n	80056c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056b2:	f7fc f891 	bl	80017d8 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e086      	b.n	80057d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056c4:	4b45      	ldr	r3, [pc, #276]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056d0:	4b42      	ldr	r3, [pc, #264]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	051b      	lsls	r3, r3, #20
 80056de:	493f      	ldr	r1, [pc, #252]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	628b      	str	r3, [r1, #40]	; 0x28
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	3b01      	subs	r3, #1
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005714:	4931      	ldr	r1, [pc, #196]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800571a:	4b30      	ldr	r3, [pc, #192]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	492d      	ldr	r1, [pc, #180]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005728:	4313      	orrs	r3, r2
 800572a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	4928      	ldr	r1, [pc, #160]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a26      	ldr	r2, [pc, #152]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800574c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <RCCEx_PLL3_Config+0x160>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	69d2      	ldr	r2, [r2, #28]
 8005756:	00d2      	lsls	r2, r2, #3
 8005758:	4920      	ldr	r1, [pc, #128]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800575a:	4313      	orrs	r3, r2
 800575c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800575e:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800577a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800577c:	e00f      	b.n	800579e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d106      	bne.n	8005792 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005784:	4b15      	ldr	r3, [pc, #84]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800578a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800578e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005790:	e005      	b.n	800579e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057aa:	f7fc f815 	bl	80017d8 <HAL_GetTick>
 80057ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057b2:	f7fc f811 	bl	80017d8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e006      	b.n	80057d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
 80057e0:	ffff0007 	.word	0xffff0007

080057e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e049      	b.n	800588a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fb fcd2 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f000 f9a6 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d001      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e054      	b.n	8005956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <HAL_TIM_Base_Start_IT+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d022      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d01d      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <HAL_TIM_Base_Start_IT+0xd4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a21      	ldr	r2, [pc, #132]	; (800596c <HAL_TIM_Base_Start_IT+0xd8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_Start_IT+0xdc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start_IT+0xe0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xe4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_Base_Start_IT+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d115      	bne.n	8005940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_TIM_Base_Start_IT+0xec>)
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d015      	beq.n	8005952 <HAL_TIM_Base_Start_IT+0xbe>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d011      	beq.n	8005952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	e008      	b.n	8005952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e000      	b.n	8005954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40001800 	.word	0x40001800
 800597c:	40014000 	.word	0x40014000
 8005980:	00010007 	.word	0x00010007

08005984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c>
 800599c:	2302      	movs	r3, #2
 800599e:	e0dc      	b.n	8005b5a <HAL_TIM_ConfigClockSource+0x1d6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	4b6a      	ldr	r3, [pc, #424]	; (8005b64 <HAL_TIM_ConfigClockSource+0x1e0>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a64      	ldr	r2, [pc, #400]	; (8005b68 <HAL_TIM_ConfigClockSource+0x1e4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f000 80a9 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 80059dc:	4a62      	ldr	r2, [pc, #392]	; (8005b68 <HAL_TIM_ConfigClockSource+0x1e4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f200 80ae 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 80059e4:	4a61      	ldr	r2, [pc, #388]	; (8005b6c <HAL_TIM_ConfigClockSource+0x1e8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f000 80a1 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 80059ec:	4a5f      	ldr	r2, [pc, #380]	; (8005b6c <HAL_TIM_ConfigClockSource+0x1e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f200 80a6 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 80059f4:	4a5e      	ldr	r2, [pc, #376]	; (8005b70 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f000 8099 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 80059fc:	4a5c      	ldr	r2, [pc, #368]	; (8005b70 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f200 809e 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a08:	f000 8091 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a10:	f200 8096 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a18:	f000 8089 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a20:	f200 808e 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a28:	d03e      	beq.n	8005aa8 <HAL_TIM_ConfigClockSource+0x124>
 8005a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2e:	f200 8087 	bhi.w	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a36:	f000 8086 	beq.w	8005b46 <HAL_TIM_ConfigClockSource+0x1c2>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	d87f      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a40:	2b70      	cmp	r3, #112	; 0x70
 8005a42:	d01a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0xf6>
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d87b      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a48:	2b60      	cmp	r3, #96	; 0x60
 8005a4a:	d050      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x16a>
 8005a4c:	2b60      	cmp	r3, #96	; 0x60
 8005a4e:	d877      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a50:	2b50      	cmp	r3, #80	; 0x50
 8005a52:	d03c      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x14a>
 8005a54:	2b50      	cmp	r3, #80	; 0x50
 8005a56:	d873      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d058      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0x18a>
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d86f      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	d064      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a64:	2b30      	cmp	r3, #48	; 0x30
 8005a66:	d86b      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d060      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d867      	bhi.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d05c      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d05a      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a78:	e062      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a8a:	f000 f98b 	bl	8005da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	609a      	str	r2, [r3, #8]
      break;
 8005aa6:	e04f      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab8:	f000 f974 	bl	8005da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aca:	609a      	str	r2, [r3, #8]
      break;
 8005acc:	e03c      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	461a      	mov	r2, r3
 8005adc:	f000 f8e4 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2150      	movs	r1, #80	; 0x50
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f93e 	bl	8005d68 <TIM_ITRx_SetConfig>
      break;
 8005aec:	e02c      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005afa:	461a      	mov	r2, r3
 8005afc:	f000 f903 	bl	8005d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2160      	movs	r1, #96	; 0x60
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f92e 	bl	8005d68 <TIM_ITRx_SetConfig>
      break;
 8005b0c:	e01c      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f000 f8c4 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f91e 	bl	8005d68 <TIM_ITRx_SetConfig>
      break;
 8005b2c:	e00c      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f000 f915 	bl	8005d68 <TIM_ITRx_SetConfig>
      break;
 8005b3e:	e003      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      break;
 8005b44:	e000      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	ffceff88 	.word	0xffceff88
 8005b68:	00100040 	.word	0x00100040
 8005b6c:	00100030 	.word	0x00100030
 8005b70:	00100020 	.word	0x00100020

08005b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a40      	ldr	r2, [pc, #256]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3d      	ldr	r2, [pc, #244]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3b      	ldr	r2, [pc, #236]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2f      	ldr	r2, [pc, #188]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01f      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd4:	d01b      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d017      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <TIM_Base_SetConfig+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0x9a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00f      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <TIM_Base_SetConfig+0x128>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a0f      	ldr	r2, [pc, #60]	; (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0210 	bic.w	r2, r3, #16
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <TIM_ITRx_SetConfig+0x38>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f043 0307 	orr.w	r3, r3, #7
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	ffcfff8f 	.word	0xffcfff8f

08005da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	021a      	lsls	r2, r3, #8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e06d      	b.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a30      	ldr	r2, [pc, #192]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d108      	bne.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d022      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d01d      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40000c00 	.word	0x40000c00
 8005ef8:	40001800 	.word	0x40001800
 8005efc:	40014000 	.word	0x40014000

08005f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e042      	b.n	8005f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fb f965 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2224      	movs	r2, #36	; 0x24
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f8ba 	bl	80060bc <UART_SetConfig>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e022      	b.n	8005f98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fe16 	bl	8006b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fe9d 	bl	8006cd0 <UART_CheckIdleState>
 8005f96:	4603      	mov	r3, r0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d17b      	bne.n	80060b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_Transmit+0x26>
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e074      	b.n	80060b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2221      	movs	r2, #33	; 0x21
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fda:	f7fb fbfd 	bl	80017d8 <HAL_GetTick>
 8005fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff8:	d108      	bne.n	800600c <HAL_UART_Transmit+0x6c>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	e003      	b.n	8006014 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006014:	e030      	b.n	8006078 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 feff 	bl	8006e24 <UART_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e03d      	b.n	80060b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	3302      	adds	r3, #2
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e007      	b.n	8006066 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1c8      	bne.n	8006016 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	2140      	movs	r1, #64	; 0x40
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fec8 	bl	8006e24 <UART_WaitOnFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e006      	b.n	80060b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c0:	b092      	sub	sp, #72	; 0x48
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	431a      	orrs	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4bbe      	ldr	r3, [pc, #760]	; (80063e4 <UART_SetConfig+0x328>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060f4:	430b      	orrs	r3, r1
 80060f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4ab3      	ldr	r2, [pc, #716]	; (80063e8 <UART_SetConfig+0x32c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006124:	4313      	orrs	r3, r2
 8006126:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	4baf      	ldr	r3, [pc, #700]	; (80063ec <UART_SetConfig+0x330>)
 8006130:	4013      	ands	r3, r2
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	6812      	ldr	r2, [r2, #0]
 8006136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006138:	430b      	orrs	r3, r1
 800613a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	f023 010f 	bic.w	r1, r3, #15
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4aa6      	ldr	r2, [pc, #664]	; (80063f0 <UART_SetConfig+0x334>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d177      	bne.n	800624c <UART_SetConfig+0x190>
 800615c:	4ba5      	ldr	r3, [pc, #660]	; (80063f4 <UART_SetConfig+0x338>)
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006164:	2b28      	cmp	r3, #40	; 0x28
 8006166:	d86d      	bhi.n	8006244 <UART_SetConfig+0x188>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0xb4>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	08006215 	.word	0x08006215
 8006174:	08006245 	.word	0x08006245
 8006178:	08006245 	.word	0x08006245
 800617c:	08006245 	.word	0x08006245
 8006180:	08006245 	.word	0x08006245
 8006184:	08006245 	.word	0x08006245
 8006188:	08006245 	.word	0x08006245
 800618c:	08006245 	.word	0x08006245
 8006190:	0800621d 	.word	0x0800621d
 8006194:	08006245 	.word	0x08006245
 8006198:	08006245 	.word	0x08006245
 800619c:	08006245 	.word	0x08006245
 80061a0:	08006245 	.word	0x08006245
 80061a4:	08006245 	.word	0x08006245
 80061a8:	08006245 	.word	0x08006245
 80061ac:	08006245 	.word	0x08006245
 80061b0:	08006225 	.word	0x08006225
 80061b4:	08006245 	.word	0x08006245
 80061b8:	08006245 	.word	0x08006245
 80061bc:	08006245 	.word	0x08006245
 80061c0:	08006245 	.word	0x08006245
 80061c4:	08006245 	.word	0x08006245
 80061c8:	08006245 	.word	0x08006245
 80061cc:	08006245 	.word	0x08006245
 80061d0:	0800622d 	.word	0x0800622d
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006235 	.word	0x08006235
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006245 	.word	0x08006245
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006245 	.word	0x08006245
 800620c:	08006245 	.word	0x08006245
 8006210:	0800623d 	.word	0x0800623d
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e222      	b.n	8006662 <UART_SetConfig+0x5a6>
 800621c:	2304      	movs	r3, #4
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e21e      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006224:	2308      	movs	r3, #8
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e21a      	b.n	8006662 <UART_SetConfig+0x5a6>
 800622c:	2310      	movs	r3, #16
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e216      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006234:	2320      	movs	r3, #32
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e212      	b.n	8006662 <UART_SetConfig+0x5a6>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e20e      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e20a      	b.n	8006662 <UART_SetConfig+0x5a6>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a69      	ldr	r2, [pc, #420]	; (80063f8 <UART_SetConfig+0x33c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d130      	bne.n	80062b8 <UART_SetConfig+0x1fc>
 8006256:	4b67      	ldr	r3, [pc, #412]	; (80063f4 <UART_SetConfig+0x338>)
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b05      	cmp	r3, #5
 8006260:	d826      	bhi.n	80062b0 <UART_SetConfig+0x1f4>
 8006262:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <UART_SetConfig+0x1ac>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	08006281 	.word	0x08006281
 800626c:	08006289 	.word	0x08006289
 8006270:	08006291 	.word	0x08006291
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e1ec      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e1e8      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e1e4      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e1e0      	b.n	8006662 <UART_SetConfig+0x5a6>
 80062a0:	2320      	movs	r3, #32
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e1dc      	b.n	8006662 <UART_SetConfig+0x5a6>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e1d8      	b.n	8006662 <UART_SetConfig+0x5a6>
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e1d4      	b.n	8006662 <UART_SetConfig+0x5a6>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a4f      	ldr	r2, [pc, #316]	; (80063fc <UART_SetConfig+0x340>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d130      	bne.n	8006324 <UART_SetConfig+0x268>
 80062c2:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <UART_SetConfig+0x338>)
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d826      	bhi.n	800631c <UART_SetConfig+0x260>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x218>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062ed 	.word	0x080062ed
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e1b6      	b.n	8006662 <UART_SetConfig+0x5a6>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e1b2      	b.n	8006662 <UART_SetConfig+0x5a6>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e1ae      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e1aa      	b.n	8006662 <UART_SetConfig+0x5a6>
 800630c:	2320      	movs	r3, #32
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e1a6      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e1a2      	b.n	8006662 <UART_SetConfig+0x5a6>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e19e      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a35      	ldr	r2, [pc, #212]	; (8006400 <UART_SetConfig+0x344>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d130      	bne.n	8006390 <UART_SetConfig+0x2d4>
 800632e:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <UART_SetConfig+0x338>)
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b05      	cmp	r3, #5
 8006338:	d826      	bhi.n	8006388 <UART_SetConfig+0x2cc>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x284>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006359 	.word	0x08006359
 8006344:	08006361 	.word	0x08006361
 8006348:	08006369 	.word	0x08006369
 800634c:	08006371 	.word	0x08006371
 8006350:	08006379 	.word	0x08006379
 8006354:	08006381 	.word	0x08006381
 8006358:	2300      	movs	r3, #0
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e180      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e17c      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e178      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006376:	e174      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006378:	2320      	movs	r3, #32
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e170      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e16c      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006388:	2380      	movs	r3, #128	; 0x80
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e168      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <UART_SetConfig+0x348>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d142      	bne.n	8006420 <UART_SetConfig+0x364>
 800639a:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <UART_SetConfig+0x338>)
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d838      	bhi.n	8006418 <UART_SetConfig+0x35c>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0x2f0>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063cd 	.word	0x080063cd
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	08006409 	.word	0x08006409
 80063c0:	08006411 	.word	0x08006411
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e14a      	b.n	8006662 <UART_SetConfig+0x5a6>
 80063cc:	2304      	movs	r3, #4
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e146      	b.n	8006662 <UART_SetConfig+0x5a6>
 80063d4:	2308      	movs	r3, #8
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e142      	b.n	8006662 <UART_SetConfig+0x5a6>
 80063dc:	2310      	movs	r3, #16
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e13e      	b.n	8006662 <UART_SetConfig+0x5a6>
 80063e4:	cfff69f3 	.word	0xcfff69f3
 80063e8:	58000c00 	.word	0x58000c00
 80063ec:	11fff4ff 	.word	0x11fff4ff
 80063f0:	40011000 	.word	0x40011000
 80063f4:	58024400 	.word	0x58024400
 80063f8:	40004400 	.word	0x40004400
 80063fc:	40004800 	.word	0x40004800
 8006400:	40004c00 	.word	0x40004c00
 8006404:	40005000 	.word	0x40005000
 8006408:	2320      	movs	r3, #32
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e128      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e124      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e120      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4acb      	ldr	r2, [pc, #812]	; (8006754 <UART_SetConfig+0x698>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d176      	bne.n	8006518 <UART_SetConfig+0x45c>
 800642a:	4bcb      	ldr	r3, [pc, #812]	; (8006758 <UART_SetConfig+0x69c>)
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006432:	2b28      	cmp	r3, #40	; 0x28
 8006434:	d86c      	bhi.n	8006510 <UART_SetConfig+0x454>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x380>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	080064e1 	.word	0x080064e1
 8006440:	08006511 	.word	0x08006511
 8006444:	08006511 	.word	0x08006511
 8006448:	08006511 	.word	0x08006511
 800644c:	08006511 	.word	0x08006511
 8006450:	08006511 	.word	0x08006511
 8006454:	08006511 	.word	0x08006511
 8006458:	08006511 	.word	0x08006511
 800645c:	080064e9 	.word	0x080064e9
 8006460:	08006511 	.word	0x08006511
 8006464:	08006511 	.word	0x08006511
 8006468:	08006511 	.word	0x08006511
 800646c:	08006511 	.word	0x08006511
 8006470:	08006511 	.word	0x08006511
 8006474:	08006511 	.word	0x08006511
 8006478:	08006511 	.word	0x08006511
 800647c:	080064f1 	.word	0x080064f1
 8006480:	08006511 	.word	0x08006511
 8006484:	08006511 	.word	0x08006511
 8006488:	08006511 	.word	0x08006511
 800648c:	08006511 	.word	0x08006511
 8006490:	08006511 	.word	0x08006511
 8006494:	08006511 	.word	0x08006511
 8006498:	08006511 	.word	0x08006511
 800649c:	080064f9 	.word	0x080064f9
 80064a0:	08006511 	.word	0x08006511
 80064a4:	08006511 	.word	0x08006511
 80064a8:	08006511 	.word	0x08006511
 80064ac:	08006511 	.word	0x08006511
 80064b0:	08006511 	.word	0x08006511
 80064b4:	08006511 	.word	0x08006511
 80064b8:	08006511 	.word	0x08006511
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006511 	.word	0x08006511
 80064c4:	08006511 	.word	0x08006511
 80064c8:	08006511 	.word	0x08006511
 80064cc:	08006511 	.word	0x08006511
 80064d0:	08006511 	.word	0x08006511
 80064d4:	08006511 	.word	0x08006511
 80064d8:	08006511 	.word	0x08006511
 80064dc:	08006509 	.word	0x08006509
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e0bc      	b.n	8006662 <UART_SetConfig+0x5a6>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e0b8      	b.n	8006662 <UART_SetConfig+0x5a6>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e0b4      	b.n	8006662 <UART_SetConfig+0x5a6>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e0b0      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006500:	2320      	movs	r3, #32
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e0ac      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650e:	e0a8      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e0a4      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a8f      	ldr	r2, [pc, #572]	; (800675c <UART_SetConfig+0x6a0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d130      	bne.n	8006584 <UART_SetConfig+0x4c8>
 8006522:	4b8d      	ldr	r3, [pc, #564]	; (8006758 <UART_SetConfig+0x69c>)
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	2b05      	cmp	r3, #5
 800652c:	d826      	bhi.n	800657c <UART_SetConfig+0x4c0>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0x478>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	0800654d 	.word	0x0800654d
 8006538:	08006555 	.word	0x08006555
 800653c:	0800655d 	.word	0x0800655d
 8006540:	08006565 	.word	0x08006565
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006575 	.word	0x08006575
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006552:	e086      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006554:	2304      	movs	r3, #4
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655a:	e082      	b.n	8006662 <UART_SetConfig+0x5a6>
 800655c:	2308      	movs	r3, #8
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e07e      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006564:	2310      	movs	r3, #16
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e07a      	b.n	8006662 <UART_SetConfig+0x5a6>
 800656c:	2320      	movs	r3, #32
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e076      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657a:	e072      	b.n	8006662 <UART_SetConfig+0x5a6>
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006582:	e06e      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a75      	ldr	r2, [pc, #468]	; (8006760 <UART_SetConfig+0x6a4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d130      	bne.n	80065f0 <UART_SetConfig+0x534>
 800658e:	4b72      	ldr	r3, [pc, #456]	; (8006758 <UART_SetConfig+0x69c>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b05      	cmp	r3, #5
 8006598:	d826      	bhi.n	80065e8 <UART_SetConfig+0x52c>
 800659a:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <UART_SetConfig+0x4e4>)
 800659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a0:	080065b9 	.word	0x080065b9
 80065a4:	080065c1 	.word	0x080065c1
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065e1 	.word	0x080065e1
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e050      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065c0:	2304      	movs	r3, #4
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e04c      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065c8:	2308      	movs	r3, #8
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e048      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065d0:	2310      	movs	r3, #16
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e044      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065d8:	2320      	movs	r3, #32
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e040      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e6:	e03c      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e038      	b.n	8006662 <UART_SetConfig+0x5a6>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a5b      	ldr	r2, [pc, #364]	; (8006764 <UART_SetConfig+0x6a8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d130      	bne.n	800665c <UART_SetConfig+0x5a0>
 80065fa:	4b57      	ldr	r3, [pc, #348]	; (8006758 <UART_SetConfig+0x69c>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	2b05      	cmp	r3, #5
 8006604:	d826      	bhi.n	8006654 <UART_SetConfig+0x598>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x550>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006625 	.word	0x08006625
 8006610:	0800662d 	.word	0x0800662d
 8006614:	08006635 	.word	0x08006635
 8006618:	0800663d 	.word	0x0800663d
 800661c:	08006645 	.word	0x08006645
 8006620:	0800664d 	.word	0x0800664d
 8006624:	2302      	movs	r3, #2
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e01a      	b.n	8006662 <UART_SetConfig+0x5a6>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e016      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e012      	b.n	8006662 <UART_SetConfig+0x5a6>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e00e      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006644:	2320      	movs	r3, #32
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e00a      	b.n	8006662 <UART_SetConfig+0x5a6>
 800664c:	2340      	movs	r3, #64	; 0x40
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e006      	b.n	8006662 <UART_SetConfig+0x5a6>
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e002      	b.n	8006662 <UART_SetConfig+0x5a6>
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a3f      	ldr	r2, [pc, #252]	; (8006764 <UART_SetConfig+0x6a8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	f040 80f8 	bne.w	800685e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800666e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006672:	2b20      	cmp	r3, #32
 8006674:	dc46      	bgt.n	8006704 <UART_SetConfig+0x648>
 8006676:	2b02      	cmp	r3, #2
 8006678:	f2c0 8082 	blt.w	8006780 <UART_SetConfig+0x6c4>
 800667c:	3b02      	subs	r3, #2
 800667e:	2b1e      	cmp	r3, #30
 8006680:	d87e      	bhi.n	8006780 <UART_SetConfig+0x6c4>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0x5cc>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	0800670b 	.word	0x0800670b
 800668c:	08006781 	.word	0x08006781
 8006690:	08006713 	.word	0x08006713
 8006694:	08006781 	.word	0x08006781
 8006698:	08006781 	.word	0x08006781
 800669c:	08006781 	.word	0x08006781
 80066a0:	08006723 	.word	0x08006723
 80066a4:	08006781 	.word	0x08006781
 80066a8:	08006781 	.word	0x08006781
 80066ac:	08006781 	.word	0x08006781
 80066b0:	08006781 	.word	0x08006781
 80066b4:	08006781 	.word	0x08006781
 80066b8:	08006781 	.word	0x08006781
 80066bc:	08006781 	.word	0x08006781
 80066c0:	08006733 	.word	0x08006733
 80066c4:	08006781 	.word	0x08006781
 80066c8:	08006781 	.word	0x08006781
 80066cc:	08006781 	.word	0x08006781
 80066d0:	08006781 	.word	0x08006781
 80066d4:	08006781 	.word	0x08006781
 80066d8:	08006781 	.word	0x08006781
 80066dc:	08006781 	.word	0x08006781
 80066e0:	08006781 	.word	0x08006781
 80066e4:	08006781 	.word	0x08006781
 80066e8:	08006781 	.word	0x08006781
 80066ec:	08006781 	.word	0x08006781
 80066f0:	08006781 	.word	0x08006781
 80066f4:	08006781 	.word	0x08006781
 80066f8:	08006781 	.word	0x08006781
 80066fc:	08006781 	.word	0x08006781
 8006700:	08006773 	.word	0x08006773
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d037      	beq.n	8006778 <UART_SetConfig+0x6bc>
 8006708:	e03a      	b.n	8006780 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800670a:	f7fe fc49 	bl	8004fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 800670e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006710:	e03c      	b.n	800678c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fc58 	bl	8004fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006720:	e034      	b.n	800678c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006722:	f107 0318 	add.w	r3, r7, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fda4 	bl	8005274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006730:	e02c      	b.n	800678c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <UART_SetConfig+0x69c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <UART_SetConfig+0x69c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	08db      	lsrs	r3, r3, #3
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	4a07      	ldr	r2, [pc, #28]	; (8006768 <UART_SetConfig+0x6ac>)
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006750:	e01c      	b.n	800678c <UART_SetConfig+0x6d0>
 8006752:	bf00      	nop
 8006754:	40011400 	.word	0x40011400
 8006758:	58024400 	.word	0x58024400
 800675c:	40007800 	.word	0x40007800
 8006760:	40007c00 	.word	0x40007c00
 8006764:	58000c00 	.word	0x58000c00
 8006768:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800676c:	4b9d      	ldr	r3, [pc, #628]	; (80069e4 <UART_SetConfig+0x928>)
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006770:	e00c      	b.n	800678c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006772:	4b9d      	ldr	r3, [pc, #628]	; (80069e8 <UART_SetConfig+0x92c>)
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006776:	e009      	b.n	800678c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677e:	e005      	b.n	800678c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800678a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 81de 	beq.w	8006b50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	4a94      	ldr	r2, [pc, #592]	; (80069ec <UART_SetConfig+0x930>)
 800679a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800679e:	461a      	mov	r2, r3
 80067a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	4413      	add	r3, r2
 80067b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d305      	bcc.n	80067c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d903      	bls.n	80067cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067ca:	e1c1      	b.n	8006b50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	2200      	movs	r2, #0
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	60fa      	str	r2, [r7, #12]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	4a84      	ldr	r2, [pc, #528]	; (80069ec <UART_SetConfig+0x930>)
 80067da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2200      	movs	r2, #0
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067ee:	f7f9 fdcf 	bl	8000390 <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4610      	mov	r0, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	f04f 0300 	mov.w	r3, #0
 8006802:	020b      	lsls	r3, r1, #8
 8006804:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006808:	0202      	lsls	r2, r0, #8
 800680a:	6979      	ldr	r1, [r7, #20]
 800680c:	6849      	ldr	r1, [r1, #4]
 800680e:	0849      	lsrs	r1, r1, #1
 8006810:	2000      	movs	r0, #0
 8006812:	460c      	mov	r4, r1
 8006814:	4605      	mov	r5, r0
 8006816:	eb12 0804 	adds.w	r8, r2, r4
 800681a:	eb43 0905 	adc.w	r9, r3, r5
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	469a      	mov	sl, r3
 8006826:	4693      	mov	fp, r2
 8006828:	4652      	mov	r2, sl
 800682a:	465b      	mov	r3, fp
 800682c:	4640      	mov	r0, r8
 800682e:	4649      	mov	r1, r9
 8006830:	f7f9 fdae 	bl	8000390 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4613      	mov	r3, r2
 800683a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006842:	d308      	bcc.n	8006856 <UART_SetConfig+0x79a>
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684a:	d204      	bcs.n	8006856 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006852:	60da      	str	r2, [r3, #12]
 8006854:	e17c      	b.n	8006b50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800685c:	e178      	b.n	8006b50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006866:	f040 80c5 	bne.w	80069f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800686a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800686e:	2b20      	cmp	r3, #32
 8006870:	dc48      	bgt.n	8006904 <UART_SetConfig+0x848>
 8006872:	2b00      	cmp	r3, #0
 8006874:	db7b      	blt.n	800696e <UART_SetConfig+0x8b2>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d879      	bhi.n	800696e <UART_SetConfig+0x8b2>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x7c4>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	0800690b 	.word	0x0800690b
 8006884:	08006913 	.word	0x08006913
 8006888:	0800696f 	.word	0x0800696f
 800688c:	0800696f 	.word	0x0800696f
 8006890:	0800691b 	.word	0x0800691b
 8006894:	0800696f 	.word	0x0800696f
 8006898:	0800696f 	.word	0x0800696f
 800689c:	0800696f 	.word	0x0800696f
 80068a0:	0800692b 	.word	0x0800692b
 80068a4:	0800696f 	.word	0x0800696f
 80068a8:	0800696f 	.word	0x0800696f
 80068ac:	0800696f 	.word	0x0800696f
 80068b0:	0800696f 	.word	0x0800696f
 80068b4:	0800696f 	.word	0x0800696f
 80068b8:	0800696f 	.word	0x0800696f
 80068bc:	0800696f 	.word	0x0800696f
 80068c0:	0800693b 	.word	0x0800693b
 80068c4:	0800696f 	.word	0x0800696f
 80068c8:	0800696f 	.word	0x0800696f
 80068cc:	0800696f 	.word	0x0800696f
 80068d0:	0800696f 	.word	0x0800696f
 80068d4:	0800696f 	.word	0x0800696f
 80068d8:	0800696f 	.word	0x0800696f
 80068dc:	0800696f 	.word	0x0800696f
 80068e0:	0800696f 	.word	0x0800696f
 80068e4:	0800696f 	.word	0x0800696f
 80068e8:	0800696f 	.word	0x0800696f
 80068ec:	0800696f 	.word	0x0800696f
 80068f0:	0800696f 	.word	0x0800696f
 80068f4:	0800696f 	.word	0x0800696f
 80068f8:	0800696f 	.word	0x0800696f
 80068fc:	0800696f 	.word	0x0800696f
 8006900:	08006961 	.word	0x08006961
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d02e      	beq.n	8006966 <UART_SetConfig+0x8aa>
 8006908:	e031      	b.n	800696e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690a:	f7fd f913 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800690e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006910:	e033      	b.n	800697a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006912:	f7fd f925 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 8006916:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006918:	e02f      	b.n	800697a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fb54 	bl	8004fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006928:	e027      	b.n	800697a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692a:	f107 0318 	add.w	r3, r7, #24
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fca0 	bl	8005274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006938:	e01f      	b.n	800697a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800693a:	4b2d      	ldr	r3, [pc, #180]	; (80069f0 <UART_SetConfig+0x934>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006946:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <UART_SetConfig+0x934>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	08db      	lsrs	r3, r3, #3
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <UART_SetConfig+0x928>)
 8006952:	fa22 f303 	lsr.w	r3, r2, r3
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006958:	e00f      	b.n	800697a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800695a:	4b22      	ldr	r3, [pc, #136]	; (80069e4 <UART_SetConfig+0x928>)
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695e:	e00c      	b.n	800697a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006960:	4b21      	ldr	r3, [pc, #132]	; (80069e8 <UART_SetConfig+0x92c>)
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006964:	e009      	b.n	800697a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800696c:	e005      	b.n	800697a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006978:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80e7 	beq.w	8006b50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	4a19      	ldr	r2, [pc, #100]	; (80069ec <UART_SetConfig+0x930>)
 8006988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800698c:	461a      	mov	r2, r3
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	fbb3 f3f2 	udiv	r3, r3, r2
 8006994:	005a      	lsls	r2, r3, #1
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	441a      	add	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	d916      	bls.n	80069dc <UART_SetConfig+0x920>
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d212      	bcs.n	80069dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f023 030f 	bic.w	r3, r3, #15
 80069be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069ce:	4313      	orrs	r3, r2
 80069d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80069d8:	60da      	str	r2, [r3, #12]
 80069da:	e0b9      	b.n	8006b50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069e2:	e0b5      	b.n	8006b50 <UART_SetConfig+0xa94>
 80069e4:	03d09000 	.word	0x03d09000
 80069e8:	003d0900 	.word	0x003d0900
 80069ec:	080081c0 	.word	0x080081c0
 80069f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80069f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	dc49      	bgt.n	8006a90 <UART_SetConfig+0x9d4>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	db7c      	blt.n	8006afa <UART_SetConfig+0xa3e>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d87a      	bhi.n	8006afa <UART_SetConfig+0xa3e>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x950>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a97 	.word	0x08006a97
 8006a10:	08006a9f 	.word	0x08006a9f
 8006a14:	08006afb 	.word	0x08006afb
 8006a18:	08006afb 	.word	0x08006afb
 8006a1c:	08006aa7 	.word	0x08006aa7
 8006a20:	08006afb 	.word	0x08006afb
 8006a24:	08006afb 	.word	0x08006afb
 8006a28:	08006afb 	.word	0x08006afb
 8006a2c:	08006ab7 	.word	0x08006ab7
 8006a30:	08006afb 	.word	0x08006afb
 8006a34:	08006afb 	.word	0x08006afb
 8006a38:	08006afb 	.word	0x08006afb
 8006a3c:	08006afb 	.word	0x08006afb
 8006a40:	08006afb 	.word	0x08006afb
 8006a44:	08006afb 	.word	0x08006afb
 8006a48:	08006afb 	.word	0x08006afb
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006afb 	.word	0x08006afb
 8006a54:	08006afb 	.word	0x08006afb
 8006a58:	08006afb 	.word	0x08006afb
 8006a5c:	08006afb 	.word	0x08006afb
 8006a60:	08006afb 	.word	0x08006afb
 8006a64:	08006afb 	.word	0x08006afb
 8006a68:	08006afb 	.word	0x08006afb
 8006a6c:	08006afb 	.word	0x08006afb
 8006a70:	08006afb 	.word	0x08006afb
 8006a74:	08006afb 	.word	0x08006afb
 8006a78:	08006afb 	.word	0x08006afb
 8006a7c:	08006afb 	.word	0x08006afb
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006afb 	.word	0x08006afb
 8006a88:	08006afb 	.word	0x08006afb
 8006a8c:	08006aed 	.word	0x08006aed
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d02e      	beq.n	8006af2 <UART_SetConfig+0xa36>
 8006a94:	e031      	b.n	8006afa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a96:	f7fd f84d 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 8006a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a9c:	e033      	b.n	8006b06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a9e:	f7fd f85f 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 8006aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006aa4:	e02f      	b.n	8006b06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fa8e 	bl	8004fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab4:	e027      	b.n	8006b06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ab6:	f107 0318 	add.w	r3, r7, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fbda 	bl	8005274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac4:	e01f      	b.n	8006b06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac6:	4b2d      	ldr	r3, [pc, #180]	; (8006b7c <UART_SetConfig+0xac0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <UART_SetConfig+0xac0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	4a28      	ldr	r2, [pc, #160]	; (8006b80 <UART_SetConfig+0xac4>)
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ae4:	e00f      	b.n	8006b06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006ae6:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <UART_SetConfig+0xac4>)
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aea:	e00c      	b.n	8006b06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006aec:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <UART_SetConfig+0xac8>)
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af0:	e009      	b.n	8006b06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af8:	e005      	b.n	8006b06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b04:	bf00      	nop
    }

    if (pclk != 0U)
 8006b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d021      	beq.n	8006b50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	4a1d      	ldr	r2, [pc, #116]	; (8006b88 <UART_SetConfig+0xacc>)
 8006b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	441a      	add	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2b0f      	cmp	r3, #15
 8006b34:	d909      	bls.n	8006b4a <UART_SetConfig+0xa8e>
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3c:	d205      	bcs.n	8006b4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
 8006b48:	e002      	b.n	8006b50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2200      	movs	r2, #0
 8006b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006b6c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3748      	adds	r7, #72	; 0x48
 8006b74:	46bd      	mov	sp, r7
 8006b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	03d09000 	.word	0x03d09000
 8006b84:	003d0900 	.word	0x003d0900
 8006b88:	080081c0 	.word	0x080081c0

08006b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01a      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8a:	d10a      	bne.n	8006ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b098      	sub	sp, #96	; 0x60
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ce0:	f7fa fd7a 	bl	80017d8 <HAL_GetTick>
 8006ce4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d12f      	bne.n	8006d54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f88e 	bl	8006e24 <UART_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d022      	beq.n	8006d54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e6      	bne.n	8006d0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e063      	b.n	8006e1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d149      	bne.n	8006df6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f857 	bl	8006e24 <UART_WaitOnFlagUntilTimeout>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d03c      	beq.n	8006df6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	623b      	str	r3, [r7, #32]
   return(result);
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e6      	bne.n	8006d7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dce:	61fa      	str	r2, [r7, #28]
 8006dd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	69b9      	ldr	r1, [r7, #24]
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	617b      	str	r3, [r7, #20]
   return(result);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e5      	bne.n	8006dae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e012      	b.n	8006e1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3758      	adds	r7, #88	; 0x58
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	4613      	mov	r3, r2
 8006e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e34:	e049      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d045      	beq.n	8006eca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fa fccb 	bl	80017d8 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e048      	b.n	8006eea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d031      	beq.n	8006eca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d110      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2208      	movs	r2, #8
 8006e7a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f839 	bl	8006ef4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2208      	movs	r2, #8
 8006e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e029      	b.n	8006eea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea4:	d111      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f81f 	bl	8006ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e00f      	b.n	8006eea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d0a6      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b095      	sub	sp, #84	; 0x54
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <UART_EndRxTransfer+0xc8>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d118      	bne.n	8006f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	613b      	str	r3, [r7, #16]
   return(result);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fb0:	bf00      	nop
 8006fb2:	3754      	adds	r7, #84	; 0x54
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	effffffe 	.word	0xeffffffe

08006fc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e027      	b.n	8007026 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2224      	movs	r2, #36	; 0x24
 8006fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007004:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007046:	2302      	movs	r3, #2
 8007048:	e02d      	b.n	80070a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2224      	movs	r2, #36	; 0x24
 8007056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f850 	bl	800712c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e02d      	b.n	8007122 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2224      	movs	r2, #36	; 0x24
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f812 	bl	800712c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007138:	2b00      	cmp	r3, #0
 800713a:	d108      	bne.n	800714e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800714c:	e031      	b.n	80071b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800714e:	2310      	movs	r3, #16
 8007150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007152:	2310      	movs	r3, #16
 8007154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	0e5b      	lsrs	r3, r3, #25
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	0f5b      	lsrs	r3, r3, #29
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	7b3a      	ldrb	r2, [r7, #12]
 800717a:	4911      	ldr	r1, [pc, #68]	; (80071c0 <UARTEx_SetNbDataToProcess+0x94>)
 800717c:	5c8a      	ldrb	r2, [r1, r2]
 800717e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007182:	7b3a      	ldrb	r2, [r7, #12]
 8007184:	490f      	ldr	r1, [pc, #60]	; (80071c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007188:	fb93 f3f2 	sdiv	r3, r3, r2
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	7b7a      	ldrb	r2, [r7, #13]
 8007198:	4909      	ldr	r1, [pc, #36]	; (80071c0 <UARTEx_SetNbDataToProcess+0x94>)
 800719a:	5c8a      	ldrb	r2, [r1, r2]
 800719c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071a0:	7b7a      	ldrb	r2, [r7, #13]
 80071a2:	4908      	ldr	r1, [pc, #32]	; (80071c4 <UARTEx_SetNbDataToProcess+0x98>)
 80071a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	080081d8 	.word	0x080081d8
 80071c4:	080081e0 	.word	0x080081e0

080071c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071c8:	b084      	sub	sp, #16
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	f107 001c 	add.w	r0, r7, #28
 80071d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d120      	bne.n	8007222 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	4b2a      	ldr	r3, [pc, #168]	; (800729c <USB_CoreInit+0xd4>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 faac 	bl	8007774 <USB_CoreReset>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
 8007220:	e01a      	b.n	8007258 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 faa0 	bl	8007774 <USB_CoreReset>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
 800724a:	e005      	b.n	8007258 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	2b01      	cmp	r3, #1
 800725c:	d116      	bne.n	800728c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <USB_CoreInit+0xd8>)
 800726e:	4313      	orrs	r3, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f043 0206 	orr.w	r2, r3, #6
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f043 0220 	orr.w	r2, r3, #32
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007298:	b004      	add	sp, #16
 800729a:	4770      	bx	lr
 800729c:	ffbdffbf 	.word	0xffbdffbf
 80072a0:	03ee0000 	.word	0x03ee0000

080072a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f023 0201 	bic.w	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d115      	bne.n	8007314 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072f4:	2001      	movs	r0, #1
 80072f6:	f7fa fa7b 	bl	80017f0 <HAL_Delay>
      ms++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fa29 	bl	8007758 <USB_GetMode>
 8007306:	4603      	mov	r3, r0
 8007308:	2b01      	cmp	r3, #1
 800730a:	d01e      	beq.n	800734a <USB_SetCurrentMode+0x84>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b31      	cmp	r3, #49	; 0x31
 8007310:	d9f0      	bls.n	80072f4 <USB_SetCurrentMode+0x2e>
 8007312:	e01a      	b.n	800734a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d115      	bne.n	8007346 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007326:	2001      	movs	r0, #1
 8007328:	f7fa fa62 	bl	80017f0 <HAL_Delay>
      ms++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa10 	bl	8007758 <USB_GetMode>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <USB_SetCurrentMode+0x84>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b31      	cmp	r3, #49	; 0x31
 8007342:	d9f0      	bls.n	8007326 <USB_SetCurrentMode+0x60>
 8007344:	e001      	b.n	800734a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e005      	b.n	8007356 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b32      	cmp	r3, #50	; 0x32
 800734e:	d101      	bne.n	8007354 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007360:	b084      	sub	sp, #16
 8007362:	b580      	push	{r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800736e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e009      	b.n	8007394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	3340      	adds	r3, #64	; 0x40
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	2200      	movs	r2, #0
 800738c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b0e      	cmp	r3, #14
 8007398:	d9f2      	bls.n	8007380 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800739a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11c      	bne.n	80073da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ae:	f043 0302 	orr.w	r3, r3, #2
 80073b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e005      	b.n	80073e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ec:	461a      	mov	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	4619      	mov	r1, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007400:	461a      	mov	r2, r3
 8007402:	680b      	ldr	r3, [r1, #0]
 8007404:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	2b01      	cmp	r3, #1
 800740a:	d10c      	bne.n	8007426 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007412:	2100      	movs	r1, #0
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f965 	bl	80076e4 <USB_SetDevSpeed>
 800741a:	e008      	b.n	800742e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800741c:	2101      	movs	r1, #1
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f960 	bl	80076e4 <USB_SetDevSpeed>
 8007424:	e003      	b.n	800742e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007426:	2103      	movs	r1, #3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f95b 	bl	80076e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800742e:	2110      	movs	r1, #16
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8f3 	bl	800761c <USB_FlushTxFifo>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f91f 	bl	8007684 <USB_FlushRxFifo>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007456:	461a      	mov	r2, r3
 8007458:	2300      	movs	r3, #0
 800745a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007462:	461a      	mov	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	461a      	mov	r2, r3
 8007470:	2300      	movs	r3, #0
 8007472:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e043      	b.n	8007502 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800748c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007490:	d118      	bne.n	80074c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	461a      	mov	r2, r3
 80074a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	e013      	b.n	80074d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ba:	461a      	mov	r2, r3
 80074bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e008      	b.n	80074d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	461a      	mov	r2, r3
 80074d2:	2300      	movs	r3, #0
 80074d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	461a      	mov	r2, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	461a      	mov	r2, r3
 80074f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	3301      	adds	r3, #1
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	d3b7      	bcc.n	800747a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	e043      	b.n	8007598 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007526:	d118      	bne.n	800755a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	461a      	mov	r2, r3
 800753c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e013      	b.n	800756c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007550:	461a      	mov	r2, r3
 8007552:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	e008      	b.n	800756c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	461a      	mov	r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	461a      	mov	r2, r3
 800757a:	2300      	movs	r3, #0
 800757c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758a:	461a      	mov	r2, r3
 800758c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007590:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	3301      	adds	r3, #1
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	429a      	cmp	r2, r3
 800759e:	d3b7      	bcc.n	8007510 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f043 0210 	orr.w	r2, r3, #16
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699a      	ldr	r2, [r3, #24]
 80075d8:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <USB_DevInit+0x2b4>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	f043 0208 	orr.w	r2, r3, #8
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d105      	bne.n	8007604 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <USB_DevInit+0x2b8>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007610:	b004      	add	sp, #16
 8007612:	4770      	bx	lr
 8007614:	803c3800 	.word	0x803c3800
 8007618:	40000004 	.word	0x40000004

0800761c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a13      	ldr	r2, [pc, #76]	; (8007680 <USB_FlushTxFifo+0x64>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d901      	bls.n	800763c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e01b      	b.n	8007674 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	daf2      	bge.n	800762a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	019b      	lsls	r3, r3, #6
 800764c:	f043 0220 	orr.w	r2, r3, #32
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4a08      	ldr	r2, [pc, #32]	; (8007680 <USB_FlushTxFifo+0x64>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e006      	b.n	8007674 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b20      	cmp	r3, #32
 8007670:	d0f0      	beq.n	8007654 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	00030d40 	.word	0x00030d40

08007684 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4a11      	ldr	r2, [pc, #68]	; (80076e0 <USB_FlushRxFifo+0x5c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e018      	b.n	80076d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	daf2      	bge.n	8007690 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2210      	movs	r2, #16
 80076b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <USB_FlushRxFifo+0x5c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d901      	bls.n	80076c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e006      	b.n	80076d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d0f0      	beq.n	80076b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	00030d40 	.word	0x00030d40

080076e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007704:	4313      	orrs	r3, r2
 8007706:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007730:	f023 0303 	bic.w	r3, r3, #3
 8007734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007744:	f043 0302 	orr.w	r3, r3, #2
 8007748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f003 0301 	and.w	r3, r3, #1
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <USB_CoreReset+0x64>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e01b      	b.n	80077ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	daf2      	bge.n	8007780 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f043 0201 	orr.w	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <USB_CoreReset+0x64>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d901      	bls.n	80077bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e006      	b.n	80077ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d0f0      	beq.n	80077aa <USB_CoreReset+0x36>

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	00030d40 	.word	0x00030d40

080077dc <siprintf>:
 80077dc:	b40e      	push	{r1, r2, r3}
 80077de:	b500      	push	{lr}
 80077e0:	b09c      	sub	sp, #112	; 0x70
 80077e2:	ab1d      	add	r3, sp, #116	; 0x74
 80077e4:	9002      	str	r0, [sp, #8]
 80077e6:	9006      	str	r0, [sp, #24]
 80077e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ec:	4809      	ldr	r0, [pc, #36]	; (8007814 <siprintf+0x38>)
 80077ee:	9107      	str	r1, [sp, #28]
 80077f0:	9104      	str	r1, [sp, #16]
 80077f2:	4909      	ldr	r1, [pc, #36]	; (8007818 <siprintf+0x3c>)
 80077f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f8:	9105      	str	r1, [sp, #20]
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	a902      	add	r1, sp, #8
 8007800:	f000 f992 	bl	8007b28 <_svfiprintf_r>
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	b01c      	add	sp, #112	; 0x70
 800780c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007810:	b003      	add	sp, #12
 8007812:	4770      	bx	lr
 8007814:	2400005c 	.word	0x2400005c
 8007818:	ffff0208 	.word	0xffff0208

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <__errno>:
 800782c:	4b01      	ldr	r3, [pc, #4]	; (8007834 <__errno+0x8>)
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	2400005c 	.word	0x2400005c

08007838 <__libc_init_array>:
 8007838:	b570      	push	{r4, r5, r6, lr}
 800783a:	4d0d      	ldr	r5, [pc, #52]	; (8007870 <__libc_init_array+0x38>)
 800783c:	4c0d      	ldr	r4, [pc, #52]	; (8007874 <__libc_init_array+0x3c>)
 800783e:	1b64      	subs	r4, r4, r5
 8007840:	10a4      	asrs	r4, r4, #2
 8007842:	2600      	movs	r6, #0
 8007844:	42a6      	cmp	r6, r4
 8007846:	d109      	bne.n	800785c <__libc_init_array+0x24>
 8007848:	4d0b      	ldr	r5, [pc, #44]	; (8007878 <__libc_init_array+0x40>)
 800784a:	4c0c      	ldr	r4, [pc, #48]	; (800787c <__libc_init_array+0x44>)
 800784c:	f000 fc6a 	bl	8008124 <_init>
 8007850:	1b64      	subs	r4, r4, r5
 8007852:	10a4      	asrs	r4, r4, #2
 8007854:	2600      	movs	r6, #0
 8007856:	42a6      	cmp	r6, r4
 8007858:	d105      	bne.n	8007866 <__libc_init_array+0x2e>
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007860:	4798      	blx	r3
 8007862:	3601      	adds	r6, #1
 8007864:	e7ee      	b.n	8007844 <__libc_init_array+0xc>
 8007866:	f855 3b04 	ldr.w	r3, [r5], #4
 800786a:	4798      	blx	r3
 800786c:	3601      	adds	r6, #1
 800786e:	e7f2      	b.n	8007856 <__libc_init_array+0x1e>
 8007870:	08008224 	.word	0x08008224
 8007874:	08008224 	.word	0x08008224
 8007878:	08008224 	.word	0x08008224
 800787c:	08008228 	.word	0x08008228

08007880 <__retarget_lock_acquire_recursive>:
 8007880:	4770      	bx	lr

08007882 <__retarget_lock_release_recursive>:
 8007882:	4770      	bx	lr

08007884 <_free_r>:
 8007884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007886:	2900      	cmp	r1, #0
 8007888:	d044      	beq.n	8007914 <_free_r+0x90>
 800788a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788e:	9001      	str	r0, [sp, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f1a1 0404 	sub.w	r4, r1, #4
 8007896:	bfb8      	it	lt
 8007898:	18e4      	addlt	r4, r4, r3
 800789a:	f000 f8df 	bl	8007a5c <__malloc_lock>
 800789e:	4a1e      	ldr	r2, [pc, #120]	; (8007918 <_free_r+0x94>)
 80078a0:	9801      	ldr	r0, [sp, #4]
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	b933      	cbnz	r3, 80078b4 <_free_r+0x30>
 80078a6:	6063      	str	r3, [r4, #4]
 80078a8:	6014      	str	r4, [r2, #0]
 80078aa:	b003      	add	sp, #12
 80078ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078b0:	f000 b8da 	b.w	8007a68 <__malloc_unlock>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d908      	bls.n	80078ca <_free_r+0x46>
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	1961      	adds	r1, r4, r5
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf01      	itttt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	1949      	addeq	r1, r1, r5
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	e7ed      	b.n	80078a6 <_free_r+0x22>
 80078ca:	461a      	mov	r2, r3
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b10b      	cbz	r3, 80078d4 <_free_r+0x50>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d9fa      	bls.n	80078ca <_free_r+0x46>
 80078d4:	6811      	ldr	r1, [r2, #0]
 80078d6:	1855      	adds	r5, r2, r1
 80078d8:	42a5      	cmp	r5, r4
 80078da:	d10b      	bne.n	80078f4 <_free_r+0x70>
 80078dc:	6824      	ldr	r4, [r4, #0]
 80078de:	4421      	add	r1, r4
 80078e0:	1854      	adds	r4, r2, r1
 80078e2:	42a3      	cmp	r3, r4
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	d1e0      	bne.n	80078aa <_free_r+0x26>
 80078e8:	681c      	ldr	r4, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	6053      	str	r3, [r2, #4]
 80078ee:	440c      	add	r4, r1
 80078f0:	6014      	str	r4, [r2, #0]
 80078f2:	e7da      	b.n	80078aa <_free_r+0x26>
 80078f4:	d902      	bls.n	80078fc <_free_r+0x78>
 80078f6:	230c      	movs	r3, #12
 80078f8:	6003      	str	r3, [r0, #0]
 80078fa:	e7d6      	b.n	80078aa <_free_r+0x26>
 80078fc:	6825      	ldr	r5, [r4, #0]
 80078fe:	1961      	adds	r1, r4, r5
 8007900:	428b      	cmp	r3, r1
 8007902:	bf04      	itt	eq
 8007904:	6819      	ldreq	r1, [r3, #0]
 8007906:	685b      	ldreq	r3, [r3, #4]
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	bf04      	itt	eq
 800790c:	1949      	addeq	r1, r1, r5
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	6054      	str	r4, [r2, #4]
 8007912:	e7ca      	b.n	80078aa <_free_r+0x26>
 8007914:	b003      	add	sp, #12
 8007916:	bd30      	pop	{r4, r5, pc}
 8007918:	24000b48 	.word	0x24000b48

0800791c <sbrk_aligned>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4e0e      	ldr	r6, [pc, #56]	; (8007958 <sbrk_aligned+0x3c>)
 8007920:	460c      	mov	r4, r1
 8007922:	6831      	ldr	r1, [r6, #0]
 8007924:	4605      	mov	r5, r0
 8007926:	b911      	cbnz	r1, 800792e <sbrk_aligned+0x12>
 8007928:	f000 fba6 	bl	8008078 <_sbrk_r>
 800792c:	6030      	str	r0, [r6, #0]
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 fba1 	bl	8008078 <_sbrk_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	d00a      	beq.n	8007950 <sbrk_aligned+0x34>
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d007      	beq.n	8007954 <sbrk_aligned+0x38>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4628      	mov	r0, r5
 8007948:	f000 fb96 	bl	8008078 <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d101      	bne.n	8007954 <sbrk_aligned+0x38>
 8007950:	f04f 34ff 	mov.w	r4, #4294967295
 8007954:	4620      	mov	r0, r4
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	24000b4c 	.word	0x24000b4c

0800795c <_malloc_r>:
 800795c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007960:	1ccd      	adds	r5, r1, #3
 8007962:	f025 0503 	bic.w	r5, r5, #3
 8007966:	3508      	adds	r5, #8
 8007968:	2d0c      	cmp	r5, #12
 800796a:	bf38      	it	cc
 800796c:	250c      	movcc	r5, #12
 800796e:	2d00      	cmp	r5, #0
 8007970:	4607      	mov	r7, r0
 8007972:	db01      	blt.n	8007978 <_malloc_r+0x1c>
 8007974:	42a9      	cmp	r1, r5
 8007976:	d905      	bls.n	8007984 <_malloc_r+0x28>
 8007978:	230c      	movs	r3, #12
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	2600      	movs	r6, #0
 800797e:	4630      	mov	r0, r6
 8007980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007984:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a58 <_malloc_r+0xfc>
 8007988:	f000 f868 	bl	8007a5c <__malloc_lock>
 800798c:	f8d8 3000 	ldr.w	r3, [r8]
 8007990:	461c      	mov	r4, r3
 8007992:	bb5c      	cbnz	r4, 80079ec <_malloc_r+0x90>
 8007994:	4629      	mov	r1, r5
 8007996:	4638      	mov	r0, r7
 8007998:	f7ff ffc0 	bl	800791c <sbrk_aligned>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	4604      	mov	r4, r0
 80079a0:	d155      	bne.n	8007a4e <_malloc_r+0xf2>
 80079a2:	f8d8 4000 	ldr.w	r4, [r8]
 80079a6:	4626      	mov	r6, r4
 80079a8:	2e00      	cmp	r6, #0
 80079aa:	d145      	bne.n	8007a38 <_malloc_r+0xdc>
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d048      	beq.n	8007a42 <_malloc_r+0xe6>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	4631      	mov	r1, r6
 80079b4:	4638      	mov	r0, r7
 80079b6:	eb04 0903 	add.w	r9, r4, r3
 80079ba:	f000 fb5d 	bl	8008078 <_sbrk_r>
 80079be:	4581      	cmp	r9, r0
 80079c0:	d13f      	bne.n	8007a42 <_malloc_r+0xe6>
 80079c2:	6821      	ldr	r1, [r4, #0]
 80079c4:	1a6d      	subs	r5, r5, r1
 80079c6:	4629      	mov	r1, r5
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ffa7 	bl	800791c <sbrk_aligned>
 80079ce:	3001      	adds	r0, #1
 80079d0:	d037      	beq.n	8007a42 <_malloc_r+0xe6>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	442b      	add	r3, r5
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	f8d8 3000 	ldr.w	r3, [r8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d038      	beq.n	8007a52 <_malloc_r+0xf6>
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	42a2      	cmp	r2, r4
 80079e4:	d12b      	bne.n	8007a3e <_malloc_r+0xe2>
 80079e6:	2200      	movs	r2, #0
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	e00f      	b.n	8007a0c <_malloc_r+0xb0>
 80079ec:	6822      	ldr	r2, [r4, #0]
 80079ee:	1b52      	subs	r2, r2, r5
 80079f0:	d41f      	bmi.n	8007a32 <_malloc_r+0xd6>
 80079f2:	2a0b      	cmp	r2, #11
 80079f4:	d917      	bls.n	8007a26 <_malloc_r+0xca>
 80079f6:	1961      	adds	r1, r4, r5
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	6025      	str	r5, [r4, #0]
 80079fc:	bf18      	it	ne
 80079fe:	6059      	strne	r1, [r3, #4]
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	bf08      	it	eq
 8007a04:	f8c8 1000 	streq.w	r1, [r8]
 8007a08:	5162      	str	r2, [r4, r5]
 8007a0a:	604b      	str	r3, [r1, #4]
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f104 060b 	add.w	r6, r4, #11
 8007a12:	f000 f829 	bl	8007a68 <__malloc_unlock>
 8007a16:	f026 0607 	bic.w	r6, r6, #7
 8007a1a:	1d23      	adds	r3, r4, #4
 8007a1c:	1af2      	subs	r2, r6, r3
 8007a1e:	d0ae      	beq.n	800797e <_malloc_r+0x22>
 8007a20:	1b9b      	subs	r3, r3, r6
 8007a22:	50a3      	str	r3, [r4, r2]
 8007a24:	e7ab      	b.n	800797e <_malloc_r+0x22>
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	6862      	ldr	r2, [r4, #4]
 8007a2a:	d1dd      	bne.n	80079e8 <_malloc_r+0x8c>
 8007a2c:	f8c8 2000 	str.w	r2, [r8]
 8007a30:	e7ec      	b.n	8007a0c <_malloc_r+0xb0>
 8007a32:	4623      	mov	r3, r4
 8007a34:	6864      	ldr	r4, [r4, #4]
 8007a36:	e7ac      	b.n	8007992 <_malloc_r+0x36>
 8007a38:	4634      	mov	r4, r6
 8007a3a:	6876      	ldr	r6, [r6, #4]
 8007a3c:	e7b4      	b.n	80079a8 <_malloc_r+0x4c>
 8007a3e:	4613      	mov	r3, r2
 8007a40:	e7cc      	b.n	80079dc <_malloc_r+0x80>
 8007a42:	230c      	movs	r3, #12
 8007a44:	603b      	str	r3, [r7, #0]
 8007a46:	4638      	mov	r0, r7
 8007a48:	f000 f80e 	bl	8007a68 <__malloc_unlock>
 8007a4c:	e797      	b.n	800797e <_malloc_r+0x22>
 8007a4e:	6025      	str	r5, [r4, #0]
 8007a50:	e7dc      	b.n	8007a0c <_malloc_r+0xb0>
 8007a52:	605b      	str	r3, [r3, #4]
 8007a54:	deff      	udf	#255	; 0xff
 8007a56:	bf00      	nop
 8007a58:	24000b48 	.word	0x24000b48

08007a5c <__malloc_lock>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <__malloc_lock+0x8>)
 8007a5e:	f7ff bf0f 	b.w	8007880 <__retarget_lock_acquire_recursive>
 8007a62:	bf00      	nop
 8007a64:	24000b44 	.word	0x24000b44

08007a68 <__malloc_unlock>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__malloc_unlock+0x8>)
 8007a6a:	f7ff bf0a 	b.w	8007882 <__retarget_lock_release_recursive>
 8007a6e:	bf00      	nop
 8007a70:	24000b44 	.word	0x24000b44

08007a74 <__ssputs_r>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	688e      	ldr	r6, [r1, #8]
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	42be      	cmp	r6, r7
 8007a7e:	680b      	ldr	r3, [r1, #0]
 8007a80:	4682      	mov	sl, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	4690      	mov	r8, r2
 8007a86:	d82c      	bhi.n	8007ae2 <__ssputs_r+0x6e>
 8007a88:	898a      	ldrh	r2, [r1, #12]
 8007a8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a8e:	d026      	beq.n	8007ade <__ssputs_r+0x6a>
 8007a90:	6965      	ldr	r5, [r4, #20]
 8007a92:	6909      	ldr	r1, [r1, #16]
 8007a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a98:	eba3 0901 	sub.w	r9, r3, r1
 8007a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa0:	1c7b      	adds	r3, r7, #1
 8007aa2:	444b      	add	r3, r9
 8007aa4:	106d      	asrs	r5, r5, #1
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	bf38      	it	cc
 8007aaa:	461d      	movcc	r5, r3
 8007aac:	0553      	lsls	r3, r2, #21
 8007aae:	d527      	bpl.n	8007b00 <__ssputs_r+0x8c>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f7ff ff53 	bl	800795c <_malloc_r>
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	b360      	cbz	r0, 8007b14 <__ssputs_r+0xa0>
 8007aba:	6921      	ldr	r1, [r4, #16]
 8007abc:	464a      	mov	r2, r9
 8007abe:	f000 faeb 	bl	8008098 <memcpy>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	6126      	str	r6, [r4, #16]
 8007ad0:	6165      	str	r5, [r4, #20]
 8007ad2:	444e      	add	r6, r9
 8007ad4:	eba5 0509 	sub.w	r5, r5, r9
 8007ad8:	6026      	str	r6, [r4, #0]
 8007ada:	60a5      	str	r5, [r4, #8]
 8007adc:	463e      	mov	r6, r7
 8007ade:	42be      	cmp	r6, r7
 8007ae0:	d900      	bls.n	8007ae4 <__ssputs_r+0x70>
 8007ae2:	463e      	mov	r6, r7
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	4641      	mov	r1, r8
 8007aea:	f000 faab 	bl	8008044 <memmove>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	1b9b      	subs	r3, r3, r6
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	4433      	add	r3, r6
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	2000      	movs	r0, #0
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	462a      	mov	r2, r5
 8007b02:	f000 fad7 	bl	80080b4 <_realloc_r>
 8007b06:	4606      	mov	r6, r0
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d1e0      	bne.n	8007ace <__ssputs_r+0x5a>
 8007b0c:	6921      	ldr	r1, [r4, #16]
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f7ff feb8 	bl	8007884 <_free_r>
 8007b14:	230c      	movs	r3, #12
 8007b16:	f8ca 3000 	str.w	r3, [sl]
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295
 8007b26:	e7e9      	b.n	8007afc <__ssputs_r+0x88>

08007b28 <_svfiprintf_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4698      	mov	r8, r3
 8007b2e:	898b      	ldrh	r3, [r1, #12]
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	b09d      	sub	sp, #116	; 0x74
 8007b34:	4607      	mov	r7, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	4614      	mov	r4, r2
 8007b3a:	d50e      	bpl.n	8007b5a <_svfiprintf_r+0x32>
 8007b3c:	690b      	ldr	r3, [r1, #16]
 8007b3e:	b963      	cbnz	r3, 8007b5a <_svfiprintf_r+0x32>
 8007b40:	2140      	movs	r1, #64	; 0x40
 8007b42:	f7ff ff0b 	bl	800795c <_malloc_r>
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	6128      	str	r0, [r5, #16]
 8007b4a:	b920      	cbnz	r0, 8007b56 <_svfiprintf_r+0x2e>
 8007b4c:	230c      	movs	r3, #12
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	e0d0      	b.n	8007cf8 <_svfiprintf_r+0x1d0>
 8007b56:	2340      	movs	r3, #64	; 0x40
 8007b58:	616b      	str	r3, [r5, #20]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	2320      	movs	r3, #32
 8007b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b68:	2330      	movs	r3, #48	; 0x30
 8007b6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d10 <_svfiprintf_r+0x1e8>
 8007b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b72:	f04f 0901 	mov.w	r9, #1
 8007b76:	4623      	mov	r3, r4
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b7e:	b10a      	cbz	r2, 8007b84 <_svfiprintf_r+0x5c>
 8007b80:	2a25      	cmp	r2, #37	; 0x25
 8007b82:	d1f9      	bne.n	8007b78 <_svfiprintf_r+0x50>
 8007b84:	ebba 0b04 	subs.w	fp, sl, r4
 8007b88:	d00b      	beq.n	8007ba2 <_svfiprintf_r+0x7a>
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4629      	mov	r1, r5
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ff6f 	bl	8007a74 <__ssputs_r>
 8007b96:	3001      	adds	r0, #1
 8007b98:	f000 80a9 	beq.w	8007cee <_svfiprintf_r+0x1c6>
 8007b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9e:	445a      	add	r2, fp
 8007ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80a1 	beq.w	8007cee <_svfiprintf_r+0x1c6>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb6:	f10a 0a01 	add.w	sl, sl, #1
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	9307      	str	r3, [sp, #28]
 8007bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc4:	4654      	mov	r4, sl
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bcc:	4850      	ldr	r0, [pc, #320]	; (8007d10 <_svfiprintf_r+0x1e8>)
 8007bce:	f7f8 fb8f 	bl	80002f0 <memchr>
 8007bd2:	9a04      	ldr	r2, [sp, #16]
 8007bd4:	b9d8      	cbnz	r0, 8007c0e <_svfiprintf_r+0xe6>
 8007bd6:	06d0      	lsls	r0, r2, #27
 8007bd8:	bf44      	itt	mi
 8007bda:	2320      	movmi	r3, #32
 8007bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be0:	0711      	lsls	r1, r2, #28
 8007be2:	bf44      	itt	mi
 8007be4:	232b      	movmi	r3, #43	; 0x2b
 8007be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bea:	f89a 3000 	ldrb.w	r3, [sl]
 8007bee:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf0:	d015      	beq.n	8007c1e <_svfiprintf_r+0xf6>
 8007bf2:	9a07      	ldr	r2, [sp, #28]
 8007bf4:	4654      	mov	r4, sl
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f04f 0c0a 	mov.w	ip, #10
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c02:	3b30      	subs	r3, #48	; 0x30
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	d94d      	bls.n	8007ca4 <_svfiprintf_r+0x17c>
 8007c08:	b1b0      	cbz	r0, 8007c38 <_svfiprintf_r+0x110>
 8007c0a:	9207      	str	r2, [sp, #28]
 8007c0c:	e014      	b.n	8007c38 <_svfiprintf_r+0x110>
 8007c0e:	eba0 0308 	sub.w	r3, r0, r8
 8007c12:	fa09 f303 	lsl.w	r3, r9, r3
 8007c16:	4313      	orrs	r3, r2
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	46a2      	mov	sl, r4
 8007c1c:	e7d2      	b.n	8007bc4 <_svfiprintf_r+0x9c>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	1d19      	adds	r1, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	9103      	str	r1, [sp, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfbb      	ittet	lt
 8007c2a:	425b      	neglt	r3, r3
 8007c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c30:	9307      	strge	r3, [sp, #28]
 8007c32:	9307      	strlt	r3, [sp, #28]
 8007c34:	bfb8      	it	lt
 8007c36:	9204      	strlt	r2, [sp, #16]
 8007c38:	7823      	ldrb	r3, [r4, #0]
 8007c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c3c:	d10c      	bne.n	8007c58 <_svfiprintf_r+0x130>
 8007c3e:	7863      	ldrb	r3, [r4, #1]
 8007c40:	2b2a      	cmp	r3, #42	; 0x2a
 8007c42:	d134      	bne.n	8007cae <_svfiprintf_r+0x186>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	1d1a      	adds	r2, r3, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	9203      	str	r2, [sp, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bfb8      	it	lt
 8007c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c54:	3402      	adds	r4, #2
 8007c56:	9305      	str	r3, [sp, #20]
 8007c58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d20 <_svfiprintf_r+0x1f8>
 8007c5c:	7821      	ldrb	r1, [r4, #0]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	4650      	mov	r0, sl
 8007c62:	f7f8 fb45 	bl	80002f0 <memchr>
 8007c66:	b138      	cbz	r0, 8007c78 <_svfiprintf_r+0x150>
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	eba0 000a 	sub.w	r0, r0, sl
 8007c6e:	2240      	movs	r2, #64	; 0x40
 8007c70:	4082      	lsls	r2, r0
 8007c72:	4313      	orrs	r3, r2
 8007c74:	3401      	adds	r4, #1
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	4825      	ldr	r0, [pc, #148]	; (8007d14 <_svfiprintf_r+0x1ec>)
 8007c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c82:	2206      	movs	r2, #6
 8007c84:	f7f8 fb34 	bl	80002f0 <memchr>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d038      	beq.n	8007cfe <_svfiprintf_r+0x1d6>
 8007c8c:	4b22      	ldr	r3, [pc, #136]	; (8007d18 <_svfiprintf_r+0x1f0>)
 8007c8e:	bb1b      	cbnz	r3, 8007cd8 <_svfiprintf_r+0x1b0>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	3307      	adds	r3, #7
 8007c94:	f023 0307 	bic.w	r3, r3, #7
 8007c98:	3308      	adds	r3, #8
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	4433      	add	r3, r6
 8007ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca2:	e768      	b.n	8007b76 <_svfiprintf_r+0x4e>
 8007ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2001      	movs	r0, #1
 8007cac:	e7a6      	b.n	8007bfc <_svfiprintf_r+0xd4>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc0:	3a30      	subs	r2, #48	; 0x30
 8007cc2:	2a09      	cmp	r2, #9
 8007cc4:	d903      	bls.n	8007cce <_svfiprintf_r+0x1a6>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0c6      	beq.n	8007c58 <_svfiprintf_r+0x130>
 8007cca:	9105      	str	r1, [sp, #20]
 8007ccc:	e7c4      	b.n	8007c58 <_svfiprintf_r+0x130>
 8007cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e7f0      	b.n	8007cba <_svfiprintf_r+0x192>
 8007cd8:	ab03      	add	r3, sp, #12
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <_svfiprintf_r+0x1f4>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	1c42      	adds	r2, r0, #1
 8007cea:	4606      	mov	r6, r0
 8007cec:	d1d6      	bne.n	8007c9c <_svfiprintf_r+0x174>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	065b      	lsls	r3, r3, #25
 8007cf2:	f53f af2d 	bmi.w	8007b50 <_svfiprintf_r+0x28>
 8007cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf8:	b01d      	add	sp, #116	; 0x74
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <_svfiprintf_r+0x1f4>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f000 f879 	bl	8007e00 <_printf_i>
 8007d0e:	e7eb      	b.n	8007ce8 <_svfiprintf_r+0x1c0>
 8007d10:	080081e8 	.word	0x080081e8
 8007d14:	080081f2 	.word	0x080081f2
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	08007a75 	.word	0x08007a75
 8007d20:	080081ee 	.word	0x080081ee

08007d24 <_printf_common>:
 8007d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	4616      	mov	r6, r2
 8007d2a:	4699      	mov	r9, r3
 8007d2c:	688a      	ldr	r2, [r1, #8]
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	bfb8      	it	lt
 8007d38:	4613      	movlt	r3, r2
 8007d3a:	6033      	str	r3, [r6, #0]
 8007d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d40:	4607      	mov	r7, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	b10a      	cbz	r2, 8007d4a <_printf_common+0x26>
 8007d46:	3301      	adds	r3, #1
 8007d48:	6033      	str	r3, [r6, #0]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	0699      	lsls	r1, r3, #26
 8007d4e:	bf42      	ittt	mi
 8007d50:	6833      	ldrmi	r3, [r6, #0]
 8007d52:	3302      	addmi	r3, #2
 8007d54:	6033      	strmi	r3, [r6, #0]
 8007d56:	6825      	ldr	r5, [r4, #0]
 8007d58:	f015 0506 	ands.w	r5, r5, #6
 8007d5c:	d106      	bne.n	8007d6c <_printf_common+0x48>
 8007d5e:	f104 0a19 	add.w	sl, r4, #25
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	6832      	ldr	r2, [r6, #0]
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dc26      	bgt.n	8007dba <_printf_common+0x96>
 8007d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d70:	1e13      	subs	r3, r2, #0
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	bf18      	it	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	0692      	lsls	r2, r2, #26
 8007d7a:	d42b      	bmi.n	8007dd4 <_printf_common+0xb0>
 8007d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d80:	4649      	mov	r1, r9
 8007d82:	4638      	mov	r0, r7
 8007d84:	47c0      	blx	r8
 8007d86:	3001      	adds	r0, #1
 8007d88:	d01e      	beq.n	8007dc8 <_printf_common+0xa4>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	6922      	ldr	r2, [r4, #16]
 8007d8e:	f003 0306 	and.w	r3, r3, #6
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	bf02      	ittt	eq
 8007d96:	68e5      	ldreq	r5, [r4, #12]
 8007d98:	6833      	ldreq	r3, [r6, #0]
 8007d9a:	1aed      	subeq	r5, r5, r3
 8007d9c:	68a3      	ldr	r3, [r4, #8]
 8007d9e:	bf0c      	ite	eq
 8007da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da4:	2500      	movne	r5, #0
 8007da6:	4293      	cmp	r3, r2
 8007da8:	bfc4      	itt	gt
 8007daa:	1a9b      	subgt	r3, r3, r2
 8007dac:	18ed      	addgt	r5, r5, r3
 8007dae:	2600      	movs	r6, #0
 8007db0:	341a      	adds	r4, #26
 8007db2:	42b5      	cmp	r5, r6
 8007db4:	d11a      	bne.n	8007dec <_printf_common+0xc8>
 8007db6:	2000      	movs	r0, #0
 8007db8:	e008      	b.n	8007dcc <_printf_common+0xa8>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	47c0      	blx	r8
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d103      	bne.n	8007dd0 <_printf_common+0xac>
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	e7c6      	b.n	8007d62 <_printf_common+0x3e>
 8007dd4:	18e1      	adds	r1, r4, r3
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	2030      	movs	r0, #48	; 0x30
 8007dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dde:	4422      	add	r2, r4
 8007de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de8:	3302      	adds	r3, #2
 8007dea:	e7c7      	b.n	8007d7c <_printf_common+0x58>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4622      	mov	r2, r4
 8007df0:	4649      	mov	r1, r9
 8007df2:	4638      	mov	r0, r7
 8007df4:	47c0      	blx	r8
 8007df6:	3001      	adds	r0, #1
 8007df8:	d0e6      	beq.n	8007dc8 <_printf_common+0xa4>
 8007dfa:	3601      	adds	r6, #1
 8007dfc:	e7d9      	b.n	8007db2 <_printf_common+0x8e>
	...

08007e00 <_printf_i>:
 8007e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	7e0f      	ldrb	r7, [r1, #24]
 8007e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e08:	2f78      	cmp	r7, #120	; 0x78
 8007e0a:	4691      	mov	r9, r2
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	469a      	mov	sl, r3
 8007e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e16:	d807      	bhi.n	8007e28 <_printf_i+0x28>
 8007e18:	2f62      	cmp	r7, #98	; 0x62
 8007e1a:	d80a      	bhi.n	8007e32 <_printf_i+0x32>
 8007e1c:	2f00      	cmp	r7, #0
 8007e1e:	f000 80d4 	beq.w	8007fca <_printf_i+0x1ca>
 8007e22:	2f58      	cmp	r7, #88	; 0x58
 8007e24:	f000 80c0 	beq.w	8007fa8 <_printf_i+0x1a8>
 8007e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e30:	e03a      	b.n	8007ea8 <_printf_i+0xa8>
 8007e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e36:	2b15      	cmp	r3, #21
 8007e38:	d8f6      	bhi.n	8007e28 <_printf_i+0x28>
 8007e3a:	a101      	add	r1, pc, #4	; (adr r1, 8007e40 <_printf_i+0x40>)
 8007e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e40:	08007e99 	.word	0x08007e99
 8007e44:	08007ead 	.word	0x08007ead
 8007e48:	08007e29 	.word	0x08007e29
 8007e4c:	08007e29 	.word	0x08007e29
 8007e50:	08007e29 	.word	0x08007e29
 8007e54:	08007e29 	.word	0x08007e29
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08007e29 	.word	0x08007e29
 8007e60:	08007e29 	.word	0x08007e29
 8007e64:	08007e29 	.word	0x08007e29
 8007e68:	08007e29 	.word	0x08007e29
 8007e6c:	08007fb1 	.word	0x08007fb1
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007f6b 	.word	0x08007f6b
 8007e78:	08007e29 	.word	0x08007e29
 8007e7c:	08007e29 	.word	0x08007e29
 8007e80:	08007fd3 	.word	0x08007fd3
 8007e84:	08007e29 	.word	0x08007e29
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007e29 	.word	0x08007e29
 8007e90:	08007e29 	.word	0x08007e29
 8007e94:	08007f73 	.word	0x08007f73
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	1d1a      	adds	r2, r3, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	602a      	str	r2, [r5, #0]
 8007ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e09f      	b.n	8007fec <_printf_i+0x1ec>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	0607      	lsls	r7, r0, #24
 8007eb2:	f103 0104 	add.w	r1, r3, #4
 8007eb6:	6029      	str	r1, [r5, #0]
 8007eb8:	d501      	bpl.n	8007ebe <_printf_i+0xbe>
 8007eba:	681e      	ldr	r6, [r3, #0]
 8007ebc:	e003      	b.n	8007ec6 <_printf_i+0xc6>
 8007ebe:	0646      	lsls	r6, r0, #25
 8007ec0:	d5fb      	bpl.n	8007eba <_printf_i+0xba>
 8007ec2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	da03      	bge.n	8007ed2 <_printf_i+0xd2>
 8007eca:	232d      	movs	r3, #45	; 0x2d
 8007ecc:	4276      	negs	r6, r6
 8007ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed2:	485a      	ldr	r0, [pc, #360]	; (800803c <_printf_i+0x23c>)
 8007ed4:	230a      	movs	r3, #10
 8007ed6:	e012      	b.n	8007efe <_printf_i+0xfe>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	1d19      	adds	r1, r3, #4
 8007ede:	6029      	str	r1, [r5, #0]
 8007ee0:	0605      	lsls	r5, r0, #24
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_i+0xe8>
 8007ee4:	681e      	ldr	r6, [r3, #0]
 8007ee6:	e002      	b.n	8007eee <_printf_i+0xee>
 8007ee8:	0641      	lsls	r1, r0, #25
 8007eea:	d5fb      	bpl.n	8007ee4 <_printf_i+0xe4>
 8007eec:	881e      	ldrh	r6, [r3, #0]
 8007eee:	4853      	ldr	r0, [pc, #332]	; (800803c <_printf_i+0x23c>)
 8007ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2308      	moveq	r3, #8
 8007ef6:	230a      	movne	r3, #10
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007efe:	6865      	ldr	r5, [r4, #4]
 8007f00:	60a5      	str	r5, [r4, #8]
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	bfa2      	ittt	ge
 8007f06:	6821      	ldrge	r1, [r4, #0]
 8007f08:	f021 0104 	bicge.w	r1, r1, #4
 8007f0c:	6021      	strge	r1, [r4, #0]
 8007f0e:	b90e      	cbnz	r6, 8007f14 <_printf_i+0x114>
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	d04b      	beq.n	8007fac <_printf_i+0x1ac>
 8007f14:	4615      	mov	r5, r2
 8007f16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f1e:	5dc7      	ldrb	r7, [r0, r7]
 8007f20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f24:	4637      	mov	r7, r6
 8007f26:	42bb      	cmp	r3, r7
 8007f28:	460e      	mov	r6, r1
 8007f2a:	d9f4      	bls.n	8007f16 <_printf_i+0x116>
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d10b      	bne.n	8007f48 <_printf_i+0x148>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	07de      	lsls	r6, r3, #31
 8007f34:	d508      	bpl.n	8007f48 <_printf_i+0x148>
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6861      	ldr	r1, [r4, #4]
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	bfde      	ittt	le
 8007f3e:	2330      	movle	r3, #48	; 0x30
 8007f40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f48:	1b52      	subs	r2, r2, r5
 8007f4a:	6122      	str	r2, [r4, #16]
 8007f4c:	f8cd a000 	str.w	sl, [sp]
 8007f50:	464b      	mov	r3, r9
 8007f52:	aa03      	add	r2, sp, #12
 8007f54:	4621      	mov	r1, r4
 8007f56:	4640      	mov	r0, r8
 8007f58:	f7ff fee4 	bl	8007d24 <_printf_common>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d14a      	bne.n	8007ff6 <_printf_i+0x1f6>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	b004      	add	sp, #16
 8007f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f043 0320 	orr.w	r3, r3, #32
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	4833      	ldr	r0, [pc, #204]	; (8008040 <_printf_i+0x240>)
 8007f74:	2778      	movs	r7, #120	; 0x78
 8007f76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	6829      	ldr	r1, [r5, #0]
 8007f7e:	061f      	lsls	r7, r3, #24
 8007f80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f84:	d402      	bmi.n	8007f8c <_printf_i+0x18c>
 8007f86:	065f      	lsls	r7, r3, #25
 8007f88:	bf48      	it	mi
 8007f8a:	b2b6      	uxthmi	r6, r6
 8007f8c:	07df      	lsls	r7, r3, #31
 8007f8e:	bf48      	it	mi
 8007f90:	f043 0320 	orrmi.w	r3, r3, #32
 8007f94:	6029      	str	r1, [r5, #0]
 8007f96:	bf48      	it	mi
 8007f98:	6023      	strmi	r3, [r4, #0]
 8007f9a:	b91e      	cbnz	r6, 8007fa4 <_printf_i+0x1a4>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	f023 0320 	bic.w	r3, r3, #32
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	e7a7      	b.n	8007ef8 <_printf_i+0xf8>
 8007fa8:	4824      	ldr	r0, [pc, #144]	; (800803c <_printf_i+0x23c>)
 8007faa:	e7e4      	b.n	8007f76 <_printf_i+0x176>
 8007fac:	4615      	mov	r5, r2
 8007fae:	e7bd      	b.n	8007f2c <_printf_i+0x12c>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	6826      	ldr	r6, [r4, #0]
 8007fb4:	6961      	ldr	r1, [r4, #20]
 8007fb6:	1d18      	adds	r0, r3, #4
 8007fb8:	6028      	str	r0, [r5, #0]
 8007fba:	0635      	lsls	r5, r6, #24
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	d501      	bpl.n	8007fc4 <_printf_i+0x1c4>
 8007fc0:	6019      	str	r1, [r3, #0]
 8007fc2:	e002      	b.n	8007fca <_printf_i+0x1ca>
 8007fc4:	0670      	lsls	r0, r6, #25
 8007fc6:	d5fb      	bpl.n	8007fc0 <_printf_i+0x1c0>
 8007fc8:	8019      	strh	r1, [r3, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	4615      	mov	r5, r2
 8007fd0:	e7bc      	b.n	8007f4c <_printf_i+0x14c>
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	1d1a      	adds	r2, r3, #4
 8007fd6:	602a      	str	r2, [r5, #0]
 8007fd8:	681d      	ldr	r5, [r3, #0]
 8007fda:	6862      	ldr	r2, [r4, #4]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f7f8 f986 	bl	80002f0 <memchr>
 8007fe4:	b108      	cbz	r0, 8007fea <_printf_i+0x1ea>
 8007fe6:	1b40      	subs	r0, r0, r5
 8007fe8:	6060      	str	r0, [r4, #4]
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff4:	e7aa      	b.n	8007f4c <_printf_i+0x14c>
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	47d0      	blx	sl
 8008000:	3001      	adds	r0, #1
 8008002:	d0ad      	beq.n	8007f60 <_printf_i+0x160>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	079b      	lsls	r3, r3, #30
 8008008:	d413      	bmi.n	8008032 <_printf_i+0x232>
 800800a:	68e0      	ldr	r0, [r4, #12]
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	4298      	cmp	r0, r3
 8008010:	bfb8      	it	lt
 8008012:	4618      	movlt	r0, r3
 8008014:	e7a6      	b.n	8007f64 <_printf_i+0x164>
 8008016:	2301      	movs	r3, #1
 8008018:	4632      	mov	r2, r6
 800801a:	4649      	mov	r1, r9
 800801c:	4640      	mov	r0, r8
 800801e:	47d0      	blx	sl
 8008020:	3001      	adds	r0, #1
 8008022:	d09d      	beq.n	8007f60 <_printf_i+0x160>
 8008024:	3501      	adds	r5, #1
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	9903      	ldr	r1, [sp, #12]
 800802a:	1a5b      	subs	r3, r3, r1
 800802c:	42ab      	cmp	r3, r5
 800802e:	dcf2      	bgt.n	8008016 <_printf_i+0x216>
 8008030:	e7eb      	b.n	800800a <_printf_i+0x20a>
 8008032:	2500      	movs	r5, #0
 8008034:	f104 0619 	add.w	r6, r4, #25
 8008038:	e7f5      	b.n	8008026 <_printf_i+0x226>
 800803a:	bf00      	nop
 800803c:	080081f9 	.word	0x080081f9
 8008040:	0800820a 	.word	0x0800820a

08008044 <memmove>:
 8008044:	4288      	cmp	r0, r1
 8008046:	b510      	push	{r4, lr}
 8008048:	eb01 0402 	add.w	r4, r1, r2
 800804c:	d902      	bls.n	8008054 <memmove+0x10>
 800804e:	4284      	cmp	r4, r0
 8008050:	4623      	mov	r3, r4
 8008052:	d807      	bhi.n	8008064 <memmove+0x20>
 8008054:	1e43      	subs	r3, r0, #1
 8008056:	42a1      	cmp	r1, r4
 8008058:	d008      	beq.n	800806c <memmove+0x28>
 800805a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008062:	e7f8      	b.n	8008056 <memmove+0x12>
 8008064:	4402      	add	r2, r0
 8008066:	4601      	mov	r1, r0
 8008068:	428a      	cmp	r2, r1
 800806a:	d100      	bne.n	800806e <memmove+0x2a>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008076:	e7f7      	b.n	8008068 <memmove+0x24>

08008078 <_sbrk_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d06      	ldr	r5, [pc, #24]	; (8008094 <_sbrk_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 fa3a 	bl	80014fc <_sbrk>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_sbrk_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_sbrk_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	24000b40 	.word	0x24000b40

08008098 <memcpy>:
 8008098:	440a      	add	r2, r1
 800809a:	4291      	cmp	r1, r2
 800809c:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a0:	d100      	bne.n	80080a4 <memcpy+0xc>
 80080a2:	4770      	bx	lr
 80080a4:	b510      	push	{r4, lr}
 80080a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ae:	4291      	cmp	r1, r2
 80080b0:	d1f9      	bne.n	80080a6 <memcpy+0xe>
 80080b2:	bd10      	pop	{r4, pc}

080080b4 <_realloc_r>:
 80080b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b8:	4680      	mov	r8, r0
 80080ba:	4614      	mov	r4, r2
 80080bc:	460e      	mov	r6, r1
 80080be:	b921      	cbnz	r1, 80080ca <_realloc_r+0x16>
 80080c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	4611      	mov	r1, r2
 80080c6:	f7ff bc49 	b.w	800795c <_malloc_r>
 80080ca:	b92a      	cbnz	r2, 80080d8 <_realloc_r+0x24>
 80080cc:	f7ff fbda 	bl	8007884 <_free_r>
 80080d0:	4625      	mov	r5, r4
 80080d2:	4628      	mov	r0, r5
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	f000 f81b 	bl	8008112 <_malloc_usable_size_r>
 80080dc:	4284      	cmp	r4, r0
 80080de:	4607      	mov	r7, r0
 80080e0:	d802      	bhi.n	80080e8 <_realloc_r+0x34>
 80080e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080e6:	d812      	bhi.n	800810e <_realloc_r+0x5a>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fc36 	bl	800795c <_malloc_r>
 80080f0:	4605      	mov	r5, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0ed      	beq.n	80080d2 <_realloc_r+0x1e>
 80080f6:	42bc      	cmp	r4, r7
 80080f8:	4622      	mov	r2, r4
 80080fa:	4631      	mov	r1, r6
 80080fc:	bf28      	it	cs
 80080fe:	463a      	movcs	r2, r7
 8008100:	f7ff ffca 	bl	8008098 <memcpy>
 8008104:	4631      	mov	r1, r6
 8008106:	4640      	mov	r0, r8
 8008108:	f7ff fbbc 	bl	8007884 <_free_r>
 800810c:	e7e1      	b.n	80080d2 <_realloc_r+0x1e>
 800810e:	4635      	mov	r5, r6
 8008110:	e7df      	b.n	80080d2 <_realloc_r+0x1e>

08008112 <_malloc_usable_size_r>:
 8008112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008116:	1f18      	subs	r0, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	bfbc      	itt	lt
 800811c:	580b      	ldrlt	r3, [r1, r0]
 800811e:	18c0      	addlt	r0, r0, r3
 8008120:	4770      	bx	lr
	...

08008124 <_init>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr

08008130 <_fini>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr
