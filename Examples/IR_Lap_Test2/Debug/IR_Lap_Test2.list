
IR_Lap_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  080081b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000068  08008218  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c8  08008278  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  24000128  080082d8  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000b58  080082d8  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020156  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200bf  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003285  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ea  00000000  00000000  00044ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000391c3  00000000  00000000  00045fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f380  00000000  00000000  0007f195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016b8da  00000000  00000000  0009e515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006df4  00000000  00000000  00209df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00210be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000128 	.word	0x24000128
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080080d4 	.word	0x080080d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400012c 	.word	0x2400012c
 80002dc:	080080d4 	.word	0x080080d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fff2 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f814 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 fa36 	bl	8000b08 <MX_GPIO_Init>
  MX_ETH_Init();
 800069c:	f000 f890 	bl	80007c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 f9b4 	bl	8000a0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a4:	f000 f9fe 	bl	8000aa4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80006a8:	f000 f916 	bl	80008d8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80006ac:	f000 f8d4 	bl	8000858 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f960 	bl	8000974 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


HAL_TIM_Base_Start_IT(&htim2);
 80006b4:	4801      	ldr	r0, [pc, #4]	; (80006bc <main+0x30>)
 80006b6:	f005 f8c5 	bl	8005844 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0x2e>
 80006bc:	24000280 	.word	0x24000280

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09c      	sub	sp, #112	; 0x70
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	224c      	movs	r2, #76	; 0x4c
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 f87c 	bl	80077cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 f876 	bl	80077cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f002 f9fb 	bl	8002adc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <SystemClock_Config+0xf8>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	4a32      	ldr	r2, [pc, #200]	; (80007b8 <SystemClock_Config+0xf8>)
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006f6:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <SystemClock_Config+0xf8>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <SystemClock_Config+0xfc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <SystemClock_Config+0xfc>)
 800070a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <SystemClock_Config+0xfc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071c:	bf00      	nop
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SystemClock_Config+0xfc>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072a:	d1f8      	bne.n	800071e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800072c:	2303      	movs	r3, #3
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000730:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000736:	2301      	movs	r3, #1
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	2302      	movs	r3, #2
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800074a:	2318      	movs	r3, #24
 800074c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075a:	230c      	movs	r3, #12
 800075c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2300      	movs	r3, #0
 8000760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fa00 	bl	8002b70 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000776:	f000 fb95 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	233f      	movs	r3, #63	; 0x3f
 800077c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fe40 	bl	8003424 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007aa:	f000 fb7b 	bl	8000ea4 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3770      	adds	r7, #112	; 0x70
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	58000400 	.word	0x58000400
 80007bc:	58024800 	.word	0x58024800

080007c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ETH_Init+0x80>)
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <MX_ETH_Init+0x84>)
 80007c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ETH_Init+0x88>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ETH_Init+0x88>)
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ETH_Init+0x88>)
 80007d8:	22e1      	movs	r2, #225	; 0xe1
 80007da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ETH_Init+0x88>)
 80007de:	2200      	movs	r2, #0
 80007e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ETH_Init+0x88>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ETH_Init+0x88>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ETH_Init+0x80>)
 80007f0:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_ETH_Init+0x88>)
 80007f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ETH_Init+0x80>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ETH_Init+0x80>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_ETH_Init+0x8c>)
 80007fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ETH_Init+0x80>)
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_ETH_Init+0x90>)
 8000804:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_ETH_Init+0x80>)
 8000808:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800080c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_ETH_Init+0x80>)
 8000810:	f001 f8ec 	bl	80019ec <HAL_ETH_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 fb43 	bl	8000ea4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800081e:	2238      	movs	r2, #56	; 0x38
 8000820:	2100      	movs	r1, #0
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_ETH_Init+0x94>)
 8000824:	f006 ffd2 	bl	80077cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_ETH_Init+0x94>)
 800082a:	2221      	movs	r2, #33	; 0x21
 800082c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_ETH_Init+0x94>)
 8000830:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000834:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_ETH_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2400017c 	.word	0x2400017c
 8000844:	40028000 	.word	0x40028000
 8000848:	24000a00 	.word	0x24000a00
 800084c:	240000c8 	.word	0x240000c8
 8000850:	24000068 	.word	0x24000068
 8000854:	24000144 	.word	0x24000144

08000858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_I2C1_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_I2C1_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_I2C1_Init+0x74>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x7c>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_I2C1_Init+0x74>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_I2C1_Init+0x74>)
 8000894:	f001 feb2 	bl	80025fc <HAL_I2C_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089e:	f000 fb01 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_I2C1_Init+0x74>)
 80008a6:	f001 ff39 	bl	800271c <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 faf8 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2C1_Init+0x74>)
 80008b8:	f001 ff7b 	bl	80027b2 <HAL_I2CEx_ConfigDigitalFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 faef 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2400022c 	.word	0x2400022c
 80008d0:	40005400 	.word	0x40005400
 80008d4:	10707dbc 	.word	0x10707dbc

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_TIM2_Init+0x98>)
 80008f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_TIM2_Init+0x98>)
 8000900:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_TIM2_Init+0x98>)
 800090e:	f04f 32ff 	mov.w	r2, #4294967295
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_TIM2_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM2_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_TIM2_Init+0x98>)
 8000922:	f004 ff37 	bl	8005794 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 faba 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_TIM2_Init+0x98>)
 800093e:	f004 fff9 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000948:	f000 faac 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_TIM2_Init+0x98>)
 800095a:	f005 fa1b 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000964:	f000 fa9e 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	24000280 	.word	0x24000280

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 800097a:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009be:	f005 fa77 	bl	8005eb0 <HAL_UART_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 fa6c 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009d0:	f006 fb07 	bl	8006fe2 <HAL_UARTEx_SetTxFifoThreshold>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 fa63 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009e2:	f006 fb3c 	bl	800705e <HAL_UARTEx_SetRxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 fa5a 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USART2_UART_Init+0x90>)
 80009f2:	f006 fabd 	bl	8006f70 <HAL_UARTEx_DisableFifoMode>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 fa52 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	240002cc 	.word	0x240002cc
 8000a08:	40004400 	.word	0x40004400

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_USART3_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a56:	f005 fa2b 	bl	8005eb0 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 fa20 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a68:	f006 fabb 	bl	8006fe2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 fa17 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a7a:	f006 faf0 	bl	800705e <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 fa0e 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART3_UART_Init+0x90>)
 8000a8a:	f006 fa71 	bl	8006f70 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 fa06 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000360 	.word	0x24000360
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2209      	movs	r2, #9
 8000ab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	f001 fead 	bl	800284a <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000af6:	f000 f9d5 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	240003f4 	.word	0x240003f4
 8000b04:	40080000 	.word	0x40080000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b6f      	ldr	r3, [pc, #444]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a6d      	ldr	r2, [pc, #436]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b6b      	ldr	r3, [pc, #428]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3c:	4b67      	ldr	r3, [pc, #412]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	4a66      	ldr	r2, [pc, #408]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4c:	4b63      	ldr	r3, [pc, #396]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	4b60      	ldr	r3, [pc, #384]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	4a5e      	ldr	r2, [pc, #376]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a57      	ldr	r2, [pc, #348]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	4a4f      	ldr	r2, [pc, #316]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b49      	ldr	r3, [pc, #292]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc4:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a40      	ldr	r2, [pc, #256]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <MX_GPIO_Init+0x1d4>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c14:	4832      	ldr	r0, [pc, #200]	; (8000ce0 <MX_GPIO_Init+0x1d8>)
 8000c16:	f001 fcbd 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c20:	4830      	ldr	r0, [pc, #192]	; (8000ce4 <MX_GPIO_Init+0x1dc>)
 8000c22:	f001 fcb7 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	482f      	ldr	r0, [pc, #188]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000c2c:	f001 fcb2 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4829      	ldr	r0, [pc, #164]	; (8000cec <MX_GPIO_Init+0x1e4>)
 8000c46:	f001 faf5 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4824      	ldr	r0, [pc, #144]	; (8000cf0 <MX_GPIO_Init+0x1e8>)
 8000c5e:	f001 fae9 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c62:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_GPIO_Init+0x1d8>)
 8000c7c:	f001 fada 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_GPIO_Init+0x1dc>)
 8000c9a:	f001 facb 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <MX_GPIO_Init+0x1ec>)
 8000cb4:	f001 fabe 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_GPIO_Init+0x1e0>)
 8000cd0:	f001 fab0 	bl	8002234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020400 	.word	0x58020400
 8000ce4:	58020c00 	.word	0x58020c00
 8000ce8:	58021000 	.word	0x58021000
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58021800 	.word	0x58021800

08000cf8 <printer>:

/* USER CODE BEGIN 4 */
void printer(uint32_t runTime, uint8_t lapNumber){
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b0c7      	sub	sp, #284	; 0x11c
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d06:	6018      	str	r0, [r3, #0]
 8000d08:	460a      	mov	r2, r1
 8000d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d0e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000d12:	701a      	strb	r2, [r3, #0]
	uint8_t minutes = runTime/60000;
 8000d14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <printer+0xc8>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	0b9b      	lsrs	r3, r3, #14
 8000d26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t seconds = (runTime%60000)/1000;
 8000d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <printer+0xc8>)
 8000d36:	fba3 1302 	umull	r1, r3, r3, r2
 8000d3a:	0b9b      	lsrs	r3, r3, #14
 8000d3c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000d40:	fb01 f303 	mul.w	r3, r1, r3
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <printer+0xcc>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	099b      	lsrs	r3, r3, #6
 8000d4e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t milliseconds = runTime%1000;
 8000d52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <printer+0xcc>)
 8000d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d62:	099b      	lsrs	r3, r3, #6
 8000d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	char buf[255];
	sprintf(buf, "Lap #%u:	%u minutes, %u seconds, %u milliseconds\r\n", lapNumber, minutes, seconds, milliseconds);
 8000d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d76:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	f897 410f 	ldrb.w	r4, [r7, #271]	; 0x10f
 8000d80:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8000d84:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8000d88:	f107 000c 	add.w	r0, r7, #12
 8000d8c:	9201      	str	r2, [sp, #4]
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	4623      	mov	r3, r4
 8000d92:	460a      	mov	r2, r1
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <printer+0xd0>)
 8000d96:	f006 fcf9 	bl	800778c <siprintf>
	HAL_UART_Transmit(&huart3, buf, strlen(buf), HAL_MAX_DELAY);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fa9e 	bl	80002e0 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f107 010c 	add.w	r1, r7, #12
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <printer+0xd4>)
 8000db2:	f005 f8cd 	bl	8005f50 <HAL_UART_Transmit>
}
 8000db6:	bf00      	nop
 8000db8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	45e7b273 	.word	0x45e7b273
 8000dc4:	10624dd3 	.word	0x10624dd3
 8000dc8:	080080ec 	.word	0x080080ec
 8000dcc:	24000360 	.word	0x24000360

08000dd0 <messanger>:
void messanger(char* message){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0c2      	sub	sp, #264	; 0x108
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000dde:	6018      	str	r0, [r3, #0]
	char buf[255];
	sprintf(buf, "%s\r\n", message);
 8000de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000de8:	f107 0008 	add.w	r0, r7, #8
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <messanger+0x50>)
 8000df0:	f006 fccc 	bl	800778c <siprintf>
	HAL_UART_Transmit(&huart3, buf, strlen(buf), HAL_MAX_DELAY);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fa71 	bl	80002e0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f107 0108 	add.w	r1, r7, #8
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <messanger+0x54>)
 8000e0c:	f005 f8a0 	bl	8005f50 <HAL_UART_Transmit>
	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fcc3 	bl	800179c <HAL_Delay>
}
 8000e16:	bf00      	nop
 8000e18:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	08008120 	.word	0x08008120
 8000e24:	24000360 	.word	0x24000360

08000e28 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin ){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	uint32_t runTime = (__HAL_TIM_GET_COUNTER(&htim2));
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x64>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	60fb      	str	r3, [r7, #12]
	runTimeDatabase[lapNumber - 1] = runTime;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	b2d1      	uxtb	r1, r2
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e46:	54d1      	strb	r1, [r2, r3]
	printer(runTime, lapNumber);
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff ff52 	bl	8000cf8 <printer>
	if(runTime < bestTime){
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d206      	bcs.n	8000e6c <HAL_GPIO_EXTI_Callback+0x44>
		bestTime = runTime;
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6013      	str	r3, [r2, #0]
		bestLap = lapNumber;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_GPIO_EXTI_Callback+0x74>)
 8000e6a:	701a      	strb	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim2);
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x64>)
 8000e6e:	f004 fce9 	bl	8005844 <HAL_TIM_Base_Start_IT>
	lapNumber++;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e7c:	701a      	strb	r2, [r3, #0]
	messanger("Starting\n");
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e80:	f7ff ffa6 	bl	8000dd0 <messanger>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24000280 	.word	0x24000280
 8000e90:	24000000 	.word	0x24000000
 8000e94:	24000900 	.word	0x24000900
 8000e98:	24000004 	.word	0x24000004
 8000e9c:	24000001 	.word	0x24000001
 8000ea0:	08008128 	.word	0x08008128

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MspInit+0x30>)
 8000eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x30>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x30>)
 8000ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	58024400 	.word	0x58024400

08000ee4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a59      	ldr	r2, [pc, #356]	; (8001068 <HAL_ETH_MspInit+0x184>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 80ab 	bne.w	800105e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f08:	4b58      	ldr	r3, [pc, #352]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0e:	4a57      	ldr	r2, [pc, #348]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f18:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f22:	623b      	str	r3, [r7, #32]
 8000f24:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f26:	4b51      	ldr	r3, [pc, #324]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f36:	4b4d      	ldr	r3, [pc, #308]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f4a:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a39      	ldr	r2, [pc, #228]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a31      	ldr	r2, [pc, #196]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fda:	2332      	movs	r3, #50	; 0x32
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fea:	230b      	movs	r3, #11
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_ETH_MspInit+0x18c>)
 8000ff6:	f001 f91d 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ffa:	2386      	movs	r3, #134	; 0x86
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4817      	ldr	r0, [pc, #92]	; (8001074 <HAL_ETH_MspInit+0x190>)
 8001016:	f001 f90d 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102c:	230b      	movs	r3, #11
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <HAL_ETH_MspInit+0x194>)
 8001038:	f001 f8fc 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800103c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104e:	230b      	movs	r3, #11
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <HAL_ETH_MspInit+0x198>)
 800105a:	f001 f8eb 	bl	8002234 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3738      	adds	r7, #56	; 0x38
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40028000 	.word	0x40028000
 800106c:	58024400 	.word	0x58024400
 8001070:	58020800 	.word	0x58020800
 8001074:	58020000 	.word	0x58020000
 8001078:	58020400 	.word	0x58020400
 800107c:	58021800 	.word	0x58021800

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0ba      	sub	sp, #232	; 0xe8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	22c0      	movs	r2, #192	; 0xc0
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 fb93 	bl	80077cc <memset>
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_I2C_MspInit+0xc4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d145      	bne.n	800113c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b0:	f04f 0208 	mov.w	r2, #8
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fd38 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010d2:	f7ff fee7 	bl	8000ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_I2C_MspInit+0xc8>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <HAL_I2C_MspInit+0xc8>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_I2C_MspInit+0xc8>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_I2C_MspInit+0xcc>)
 800111a:	f001 f88b 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_I2C_MspInit+0xc8>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_I2C_MspInit+0xc8>)
 8001126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_I2C_MspInit+0xc8>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	37e8      	adds	r7, #232	; 0xe8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40005400 	.word	0x40005400
 8001148:	58024400 	.word	0x58024400
 800114c:	58020400 	.word	0x58020400

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d10e      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_TIM_Base_MspInit+0x3c>)
 8001164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_TIM_Base_MspInit+0x3c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_TIM_Base_MspInit+0x3c>)
 8001174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	58024400 	.word	0x58024400

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0be      	sub	sp, #248	; 0xf8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	22c0      	movs	r2, #192	; 0xc0
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fb0b 	bl	80077cc <memset>
  if(huart->Instance==USART2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <HAL_UART_MspInit+0x1a8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d16a      	bne.n	8001296 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011c0:	f04f 0202 	mov.w	r2, #2
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fcb0 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011e2:	f7ff fe5f 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e6:	4b55      	ldr	r3, [pc, #340]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80011e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ec:	4a53      	ldr	r2, [pc, #332]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80011f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_UART_MspInit+0x1ac>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_UART_MspInit+0x1ac>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_UART_MspInit+0x1ac>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_UART_MspInit+0x1ac>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a44      	ldr	r2, [pc, #272]	; (800133c <HAL_UART_MspInit+0x1ac>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <HAL_UART_MspInit+0x1ac>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001240:	2308      	movs	r3, #8
 8001242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001258:	2307      	movs	r3, #7
 800125a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001262:	4619      	mov	r1, r3
 8001264:	4836      	ldr	r0, [pc, #216]	; (8001340 <HAL_UART_MspInit+0x1b0>)
 8001266:	f000 ffe5 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800126a:	2320      	movs	r3, #32
 800126c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001282:	2307      	movs	r3, #7
 8001284:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800128c:	4619      	mov	r1, r3
 800128e:	482d      	ldr	r0, [pc, #180]	; (8001344 <HAL_UART_MspInit+0x1b4>)
 8001290:	f000 ffd0 	bl	8002234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001294:	e04b      	b.n	800132e <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <HAL_UART_MspInit+0x1b8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d146      	bne.n	800132e <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a0:	f04f 0202 	mov.w	r2, #2
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fc40 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0x136>
      Error_Handler();
 80012c2:	f7ff fdef 	bl	8000ea4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80012c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80012ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80012d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0x1ac>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800131c:	2307      	movs	r3, #7
 800131e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001326:	4619      	mov	r1, r3
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <HAL_UART_MspInit+0x1b4>)
 800132a:	f000 ff83 	bl	8002234 <HAL_GPIO_Init>
}
 800132e:	bf00      	nop
 8001330:	37f8      	adds	r7, #248	; 0xf8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40004400 	.word	0x40004400
 800133c:	58024400 	.word	0x58024400
 8001340:	58020000 	.word	0x58020000
 8001344:	58020c00 	.word	0x58020c00
 8001348:	40004800 	.word	0x40004800

0800134c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0ba      	sub	sp, #232	; 0xe8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	22c0      	movs	r2, #192	; 0xc0
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f006 fa2d 	bl	80077cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <HAL_PCD_MspInit+0xec>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d159      	bne.n	8001430 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800137c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fbd1 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013a0:	f7ff fd80 	bl	8000ea4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013a4:	f001 fbd4 	bl	8002b50 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_PCD_MspInit+0xf0>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_PCD_MspInit+0xf0>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_PCD_MspInit+0xf0>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013c6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013e0:	230a      	movs	r3, #10
 80013e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4814      	ldr	r0, [pc, #80]	; (8001440 <HAL_PCD_MspInit+0xf4>)
 80013ee:	f000 ff21 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <HAL_PCD_MspInit+0xf4>)
 800140e:	f000 ff11 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_PCD_MspInit+0xf0>)
 8001414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_PCD_MspInit+0xf0>)
 800141a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800141e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_PCD_MspInit+0xf0>)
 8001424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	37e8      	adds	r7, #232	; 0xe8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40080000 	.word	0x40080000
 800143c:	58024400 	.word	0x58024400
 8001440:	58020000 	.word	0x58020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f964 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800149c:	2001      	movs	r0, #1
 800149e:	f001 f892 	bl	80025c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f006 f980 	bl	80077dc <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	24080000 	.word	0x24080000
 8001508:	00000400 	.word	0x00000400
 800150c:	24000a08 	.word	0x24000a08
 8001510:	24000b58 	.word	0x24000b58

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <SystemInit+0xe4>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a36      	ldr	r2, [pc, #216]	; (80015f8 <SystemInit+0xe4>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <SystemInit+0xe8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	2b06      	cmp	r3, #6
 8001532:	d807      	bhi.n	8001544 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <SystemInit+0xe8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 030f 	bic.w	r3, r3, #15
 800153c:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <SystemInit+0xe8>)
 800153e:	f043 0307 	orr.w	r3, r3, #7
 8001542:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <SystemInit+0xec>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <SystemInit+0xec>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001550:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <SystemInit+0xec>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <SystemInit+0xec>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4929      	ldr	r1, [pc, #164]	; (8001600 <SystemInit+0xec>)
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <SystemInit+0xf0>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <SystemInit+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <SystemInit+0xe8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 030f 	bic.w	r3, r3, #15
 8001576:	4a21      	ldr	r2, [pc, #132]	; (80015fc <SystemInit+0xe8>)
 8001578:	f043 0307 	orr.w	r3, r3, #7
 800157c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <SystemInit+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <SystemInit+0xec>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <SystemInit+0xec>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <SystemInit+0xec>)
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <SystemInit+0xf4>)
 8001594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <SystemInit+0xec>)
 8001598:	4a1c      	ldr	r2, [pc, #112]	; (800160c <SystemInit+0xf8>)
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <SystemInit+0xec>)
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <SystemInit+0xfc>)
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <SystemInit+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <SystemInit+0xec>)
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <SystemInit+0xfc>)
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <SystemInit+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <SystemInit+0xec>)
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <SystemInit+0xfc>)
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <SystemInit+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <SystemInit+0xec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <SystemInit+0xec>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <SystemInit+0xec>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <SystemInit+0x100>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <SystemInit+0x104>)
 80015d8:	4013      	ands	r3, r2
 80015da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015de:	d202      	bcs.n	80015e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <SystemInit+0x108>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <SystemInit+0x10c>)
 80015e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	52002000 	.word	0x52002000
 8001600:	58024400 	.word	0x58024400
 8001604:	eaf6ed7f 	.word	0xeaf6ed7f
 8001608:	02020200 	.word	0x02020200
 800160c:	01ff0000 	.word	0x01ff0000
 8001610:	01010280 	.word	0x01010280
 8001614:	5c001000 	.word	0x5c001000
 8001618:	ffff0000 	.word	0xffff0000
 800161c:	51008108 	.word	0x51008108
 8001620:	52004000 	.word	0x52004000

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001628:	f7ff ff74 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	; (8001664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	; (8001670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f006 f8c9 	bl	80077e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001656:	f7ff f819 	bl	800068c <main>
  bx  lr
 800165a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001660:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001664:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001668:	080081b0 	.word	0x080081b0
  ldr r2, =_sbss
 800166c:	24000128 	.word	0x24000128
  ldr r4, =_ebss
 8001670:	24000b58 	.word	0x24000b58

08001674 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC3_IRQHandler>
	...

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167e:	2003      	movs	r0, #3
 8001680:	f000 f982 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001684:	f002 f884 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_Init+0x68>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	4913      	ldr	r1, [pc, #76]	; (80016e4 <HAL_Init+0x6c>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_Init+0x68>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_Init+0x6c>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_Init+0x70>)
 80016ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_Init+0x74>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f814 	bl	80016f0 <HAL_InitTick>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e002      	b.n	80016d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016d2:	f7ff fbed 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	58024400 	.word	0x58024400
 80016e4:	08008134 	.word	0x08008134
 80016e8:	2400000c 	.word	0x2400000c
 80016ec:	24000008 	.word	0x24000008

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_InitTick+0x60>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e021      	b.n	8001748 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_InitTick+0x64>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_InitTick+0x60>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f959 	bl	80019d2 <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00e      	b.n	8001748 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d80a      	bhi.n	8001746 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 f931 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <HAL_InitTick+0x68>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24000014 	.word	0x24000014
 8001754:	24000008 	.word	0x24000008
 8001758:	24000010 	.word	0x24000010

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	24000014 	.word	0x24000014
 8001780:	24000a0c 	.word	0x24000a0c

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	24000a0c 	.word	0x24000a0c

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_Delay+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000014 	.word	0x24000014

080017e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetREVID+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0c1b      	lsrs	r3, r3, #16
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	5c001000 	.word	0x5c001000

080017fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800180c:	4904      	ldr	r1, [pc, #16]	; (8001820 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	58000400 	.word	0x58000400

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <__NVIC_SetPriorityGrouping+0x40>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	4313      	orrs	r3, r2
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x40>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00
 8001868:	05fa0000 	.word	0x05fa0000

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff47 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff5e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff90 	bl	80018dc <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5f 	bl	8001888 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffb2 	bl	8001944 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0cf      	b.n	8001b9e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d106      	bne.n	8001a16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2223      	movs	r2, #35	; 0x23
 8001a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fa67 	bl	8000ee4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b64      	ldr	r3, [pc, #400]	; (8001ba8 <HAL_ETH_Init+0x1bc>)
 8001a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a1c:	4a62      	ldr	r2, [pc, #392]	; (8001ba8 <HAL_ETH_Init+0x1bc>)
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a26:	4b60      	ldr	r3, [pc, #384]	; (8001ba8 <HAL_ETH_Init+0x1bc>)
 8001a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7a1b      	ldrb	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fedd 	bl	80017fc <HAL_SYSCFG_ETHInterfaceSelect>
 8001a42:	e003      	b.n	8001a4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a44:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a48:	f7ff fed8 	bl	80017fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_ETH_Init+0x1c0>)
 8001a4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a68:	f7ff fe8c 	bl	8001784 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a6e:	e011      	b.n	8001a94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a70:	f7ff fe88 	bl	8001784 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a7e:	d909      	bls.n	8001a94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2204      	movs	r2, #4
 8001a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	22e0      	movs	r2, #224	; 0xe0
 8001a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e084      	b.n	8001b9e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1e4      	bne.n	8001a70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f886 	bl	8001bb8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001aac:	f001 ffea 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a3f      	ldr	r2, [pc, #252]	; (8001bb0 <HAL_ETH_Init+0x1c4>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9a      	lsrs	r2, r3, #18
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3a01      	subs	r2, #1
 8001ac0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fa71 	bl	8001fac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001ad6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	22e0      	movs	r2, #224	; 0xe0
 8001b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e049      	b.n	8001b9e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_ETH_Init+0x1c8>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6952      	ldr	r2, [r2, #20]
 8001b1e:	0051      	lsls	r1, r2, #1
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fad9 	bl	80020e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb1f 	bl	8002178 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	3305      	adds	r3, #5
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	3303      	adds	r3, #3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	3302      	adds	r3, #2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2210      	movs	r2, #16
 8001b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58000400 	.word	0x58000400
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	ffff8001 	.word	0xffff8001

08001bb8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bd2:	f001 ff57 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8001bd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d908      	bls.n	8001bf2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d804      	bhi.n	8001bf2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e027      	b.n	8001c42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d908      	bls.n	8001c0c <HAL_ETH_SetMDIOClockRange+0x54>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d204      	bcs.n	8001c0c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e01a      	b.n	8001c42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d303      	bcc.n	8001c1c <HAL_ETH_SetMDIOClockRange+0x64>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d911      	bls.n	8001c40 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d908      	bls.n	8001c36 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d804      	bhi.n	8001c36 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e005      	b.n	8001c42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e000      	b.n	8001c42 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	01312cff 	.word	0x01312cff
 8001c58:	02160ebf 	.word	0x02160ebf
 8001c5c:	03938700 	.word	0x03938700
 8001c60:	05f5e0ff 	.word	0x05f5e0ff
 8001c64:	08f0d17f 	.word	0x08f0d17f

08001c68 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	7b1b      	ldrb	r3, [r3, #12]
 8001c88:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001c8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7b5b      	ldrb	r3, [r3, #13]
 8001c90:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7b9b      	ldrb	r3, [r3, #14]
 8001c98:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	7bdb      	ldrb	r3, [r3, #15]
 8001ca0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ca2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	7c12      	ldrb	r2, [r2, #16]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d102      	bne.n	8001cb2 <ETH_SetMACConfig+0x4a>
 8001cac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cb0:	e000      	b.n	8001cb4 <ETH_SetMACConfig+0x4c>
 8001cb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cb4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	7c52      	ldrb	r2, [r2, #17]
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d102      	bne.n	8001cc4 <ETH_SetMACConfig+0x5c>
 8001cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cc2:	e000      	b.n	8001cc6 <ETH_SetMACConfig+0x5e>
 8001cc4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	7c9b      	ldrb	r3, [r3, #18]
 8001ccc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cce:	431a      	orrs	r2, r3
               macconf->Speed |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001cd4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7f1b      	ldrb	r3, [r3, #28]
 8001ce0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001ce2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	7f5b      	ldrb	r3, [r3, #29]
 8001ce8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001cea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	7f92      	ldrb	r2, [r2, #30]
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	d102      	bne.n	8001cfa <ETH_SetMACConfig+0x92>
 8001cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf8:	e000      	b.n	8001cfc <ETH_SetMACConfig+0x94>
 8001cfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001cfc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	7fdb      	ldrb	r3, [r3, #31]
 8001d02:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d0c:	2a00      	cmp	r2, #0
 8001d0e:	d102      	bne.n	8001d16 <ETH_SetMACConfig+0xae>
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	e000      	b.n	8001d18 <ETH_SetMACConfig+0xb0>
 8001d16:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d18:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d26:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d28:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <ETH_SetMACConfig+0x22c>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	430b      	orrs	r3, r1
 8001d44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d66:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d102      	bne.n	8001d7a <ETH_SetMACConfig+0x112>
 8001d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0x114>
 8001d7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001d7c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <ETH_SetMACConfig+0x230>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <ETH_SetMACConfig+0x234>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001dca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d101      	bne.n	8001dda <ETH_SetMACConfig+0x172>
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	e000      	b.n	8001ddc <ETH_SetMACConfig+0x174>
 8001dda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ddc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001df2:	4013      	ands	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e04:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e0c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f023 0103 	bic.w	r1, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e32:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	d101      	bne.n	8001e56 <ETH_SetMACConfig+0x1ee>
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	e000      	b.n	8001e58 <ETH_SetMACConfig+0x1f0>
 8001e56:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e60:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e6a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e78:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	00048083 	.word	0x00048083
 8001e98:	c0f88000 	.word	0xc0f88000
 8001e9c:	fffffef0 	.word	0xfffffef0

08001ea0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <ETH_SetDMAConfig+0xf8>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	6811      	ldr	r1, [r2, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ec6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	791b      	ldrb	r3, [r3, #4]
 8001ecc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ed2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7b1b      	ldrb	r3, [r3, #12]
 8001ed8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <ETH_SetDMAConfig+0xfc>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	68f9      	ldr	r1, [r7, #12]
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7b5b      	ldrb	r3, [r3, #13]
 8001efe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f10:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <ETH_SetDMAConfig+0x100>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f24:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7d1b      	ldrb	r3, [r3, #20]
 8001f30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f32:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	7f5b      	ldrb	r3, [r3, #29]
 8001f38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <ETH_SetDMAConfig+0x104>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f5a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	7f1b      	ldrb	r3, [r3, #28]
 8001f62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <ETH_SetDMAConfig+0x108>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	430b      	orrs	r3, r1
 8001f84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f88:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	ffff87fd 	.word	0xffff87fd
 8001f9c:	ffff2ffe 	.word	0xffff2ffe
 8001fa0:	fffec000 	.word	0xfffec000
 8001fa4:	ffc0efef 	.word	0xffc0efef
 8001fa8:	7fc0ffff 	.word	0x7fc0ffff

08001fac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0a4      	sub	sp, #144	; 0x90
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002004:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002008:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002010:	2300      	movs	r3, #0
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002026:	2300      	movs	r3, #0
 8002028:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800202a:	2300      	movs	r3, #0
 800202c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800202e:	2300      	movs	r3, #0
 8002030:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800203e:	2301      	movs	r3, #1
 8002040:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002044:	2320      	movs	r3, #32
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002056:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800205c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002060:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002086:	2300      	movs	r3, #0
 8002088:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002094:	4619      	mov	r1, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fde6 	bl	8001c68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800209c:	2301      	movs	r3, #1
 800209e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020a0:	2301      	movs	r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80020cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fee1 	bl	8001ea0 <ETH_SetDMAConfig>
}
 80020de:	bf00      	nop
 80020e0:	3790      	adds	r7, #144	; 0x90
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e01d      	b.n	8002130 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68d9      	ldr	r1, [r3, #12]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	3206      	adds	r2, #6
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d9de      	bls.n	80020f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	461a      	mov	r2, r3
 8002146:	2303      	movs	r3, #3
 8002148:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002158:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002168:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e023      	b.n	80021ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	3212      	adds	r2, #18
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d9d8      	bls.n	8002186 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fa:	461a      	mov	r2, r3
 80021fc:	2303      	movs	r3, #3
 80021fe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002222:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <HAL_GPIO_Init+0x234>)
 8002244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002246:	e194      	b.n	8002572 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2101      	movs	r1, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8186 	beq.w	800256c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d005      	beq.n	8002278 <HAL_GPIO_Init+0x44>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d130      	bne.n	80022da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ae:	2201      	movs	r2, #1
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 0201 	and.w	r2, r3, #1
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d017      	beq.n	8002316 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d123      	bne.n	800236a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0203 	and.w	r2, r3, #3
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80e0 	beq.w	800256c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ac:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_GPIO_Init+0x238>)
 80023ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023b2:	4a2e      	ldr	r2, [pc, #184]	; (800246c <HAL_GPIO_Init+0x238>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_GPIO_Init+0x238>)
 80023be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_GPIO_Init+0x23c>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a20      	ldr	r2, [pc, #128]	; (8002474 <HAL_GPIO_Init+0x240>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d052      	beq.n	800249c <HAL_GPIO_Init+0x268>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_GPIO_Init+0x244>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_GPIO_Init+0x22e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_GPIO_Init+0x248>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <HAL_GPIO_Init+0x22a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_GPIO_Init+0x24c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d025      	beq.n	800245a <HAL_GPIO_Init+0x226>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_GPIO_Init+0x250>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_GPIO_Init+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <HAL_GPIO_Init+0x254>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x21e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_GPIO_Init+0x258>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x21a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_GPIO_Init+0x25c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x216>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a18      	ldr	r2, [pc, #96]	; (8002494 <HAL_GPIO_Init+0x260>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x212>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a17      	ldr	r2, [pc, #92]	; (8002498 <HAL_GPIO_Init+0x264>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x20e>
 800243e:	2309      	movs	r3, #9
 8002440:	e02d      	b.n	800249e <HAL_GPIO_Init+0x26a>
 8002442:	230a      	movs	r3, #10
 8002444:	e02b      	b.n	800249e <HAL_GPIO_Init+0x26a>
 8002446:	2308      	movs	r3, #8
 8002448:	e029      	b.n	800249e <HAL_GPIO_Init+0x26a>
 800244a:	2307      	movs	r3, #7
 800244c:	e027      	b.n	800249e <HAL_GPIO_Init+0x26a>
 800244e:	2306      	movs	r3, #6
 8002450:	e025      	b.n	800249e <HAL_GPIO_Init+0x26a>
 8002452:	2305      	movs	r3, #5
 8002454:	e023      	b.n	800249e <HAL_GPIO_Init+0x26a>
 8002456:	2304      	movs	r3, #4
 8002458:	e021      	b.n	800249e <HAL_GPIO_Init+0x26a>
 800245a:	2303      	movs	r3, #3
 800245c:	e01f      	b.n	800249e <HAL_GPIO_Init+0x26a>
 800245e:	2302      	movs	r3, #2
 8002460:	e01d      	b.n	800249e <HAL_GPIO_Init+0x26a>
 8002462:	2301      	movs	r3, #1
 8002464:	e01b      	b.n	800249e <HAL_GPIO_Init+0x26a>
 8002466:	bf00      	nop
 8002468:	58000080 	.word	0x58000080
 800246c:	58024400 	.word	0x58024400
 8002470:	58000400 	.word	0x58000400
 8002474:	58020000 	.word	0x58020000
 8002478:	58020400 	.word	0x58020400
 800247c:	58020800 	.word	0x58020800
 8002480:	58020c00 	.word	0x58020c00
 8002484:	58021000 	.word	0x58021000
 8002488:	58021400 	.word	0x58021400
 800248c:	58021800 	.word	0x58021800
 8002490:	58021c00 	.word	0x58021c00
 8002494:	58022000 	.word	0x58022000
 8002498:	58022400 	.word	0x58022400
 800249c:	2300      	movs	r3, #0
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ae:	4938      	ldr	r1, [pc, #224]	; (8002590 <HAL_GPIO_Init+0x35c>)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3301      	adds	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	f47f ae63 	bne.w	8002248 <HAL_GPIO_Init+0x14>
  }
}
 8002582:	bf00      	nop
 8002584:	bf00      	nop
 8002586:	3724      	adds	r7, #36	; 0x24
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	58000400 	.word	0x58000400

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025b0:	e003      	b.n	80025ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fc1b 	bl	8000e28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fd2c 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800264c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	e006      	b.n	8002684 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002682:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d104      	bne.n	8002696 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002694:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_I2C_Init+0x11c>)
 80026a2:	430b      	orrs	r3, r1
 80026a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69d9      	ldr	r1, [r3, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	02008000 	.word	0x02008000

0800271c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	d138      	bne.n	80027a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800273c:	2302      	movs	r3, #2
 800273e:	e032      	b.n	80027a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800276e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d139      	bne.n	800283c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e033      	b.n	800283e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2224      	movs	r2, #36	; 0x24
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284c:	b08f      	sub	sp, #60	; 0x3c
 800284e:	af0a      	add	r7, sp, #40	; 0x28
 8002850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e116      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fd68 	bl	800134c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2203      	movs	r2, #3
 8002880:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fcda 	bl	8007254 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	687e      	ldr	r6, [r7, #4]
 80028a8:	466d      	mov	r5, sp
 80028aa:	f106 0410 	add.w	r4, r6, #16
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80028be:	1d33      	adds	r3, r6, #4
 80028c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f004 fc58 	bl	8007178 <USB_CoreInit>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0d7      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fcc8 	bl	8007276 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e04a      	b.n	8002982 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	b298      	uxth	r0, r3
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3356      	adds	r3, #86	; 0x56
 8002928:	4602      	mov	r2, r0
 800292a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3340      	adds	r3, #64	; 0x40
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3344      	adds	r3, #68	; 0x44
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334c      	adds	r3, #76	; 0x4c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3af      	bcc.n	80028ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e044      	b.n	8002a1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3b5      	bcc.n	8002992 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	687e      	ldr	r6, [r7, #4]
 8002a2e:	466d      	mov	r5, sp
 8002a30:	f106 0410 	add.w	r4, r6, #16
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a44:	1d33      	adds	r3, r6, #4
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f004 fc61 	bl	8007310 <USB_DevInit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e014      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f80b 	bl	8002a94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 fe1f 	bl	80076c6 <USB_DevDisconnect>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	10000003 	.word	0x10000003

08002adc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00a      	beq.n	8002b06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01f      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e01d      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	490f      	ldr	r1, [pc, #60]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b16:	f7fe fe35 	bl	8001784 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b1e:	f7fe fe31 	bl	8001784 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2c:	d901      	bls.n	8002b32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_PWREx_ConfigSupply+0x70>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	58024800 	.word	0x58024800

08002b50 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	60d3      	str	r3, [r2, #12]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	58024800 	.word	0x58024800

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f000 bc48 	b.w	8003414 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8088 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b92:	4b99      	ldr	r3, [pc, #612]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b9c:	4b96      	ldr	r3, [pc, #600]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d007      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x48>
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	2b18      	cmp	r3, #24
 8002bac:	d111      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06d      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x130>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d169      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f000 bc21 	b.w	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x7a>
 8002bdc:	4b86      	ldr	r3, [pc, #536]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a85      	ldr	r2, [pc, #532]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x9c>
 8002bf2:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a80      	ldr	r2, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a74      	ldr	r2, [pc, #464]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002c30:	4b71      	ldr	r3, [pc, #452]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a70      	ldr	r2, [pc, #448]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b6e      	ldr	r3, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6d      	ldr	r2, [pc, #436]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fd98 	bl	8001784 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fd94 	bl	8001784 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e3d4      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd84 	bl	8001784 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fd80 	bl	8001784 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e3c0      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x110>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80ca 	beq.w	8002e44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cba:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x166>
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2b18      	cmp	r3, #24
 8002cca:	d156      	bne.n	8002d7a <HAL_RCC_OscConfig+0x20a>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d151      	bne.n	8002d7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x17e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e392      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cee:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0219 	bic.w	r2, r3, #25
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	493f      	ldr	r1, [pc, #252]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fd40 	bl	8001784 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe fd3c 	bl	8001784 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e37c      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	f7fe fd5d 	bl	80017e4 <HAL_GetREVID>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d817      	bhi.n	8002d64 <HAL_RCC_OscConfig+0x1f4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d108      	bne.n	8002d4e <HAL_RCC_OscConfig+0x1de>
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d44:	4a2c      	ldr	r2, [pc, #176]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	e07a      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	4926      	ldr	r1, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d62:	e06f      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4921      	ldr	r1, [pc, #132]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	e064      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d047      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0219 	bic.w	r2, r3, #25
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	491a      	ldr	r1, [pc, #104]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fcf6 	bl	8001784 <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fcf2 	bl	8001784 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e332      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	f7fe fd13 	bl	80017e4 <HAL_GetREVID>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d819      	bhi.n	8002dfc <HAL_RCC_OscConfig+0x28c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d108      	bne.n	8002de2 <HAL_RCC_OscConfig+0x272>
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dd8:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dde:	6053      	str	r3, [r2, #4]
 8002de0:	e030      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	031b      	lsls	r3, r3, #12
 8002df0:	4901      	ldr	r1, [pc, #4]	; (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
 8002df6:	e025      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	4b9a      	ldr	r3, [pc, #616]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	4997      	ldr	r1, [pc, #604]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
 8002e10:	e018      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b95      	ldr	r3, [pc, #596]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a94      	ldr	r2, [pc, #592]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fcb1 	bl	8001784 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fcad 	bl	8001784 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e2ed      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e38:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a9 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e5c:	4b82      	ldr	r3, [pc, #520]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d007      	beq.n	8002e78 <HAL_RCC_OscConfig+0x308>
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b18      	cmp	r3, #24
 8002e6c:	d13a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x374>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d135      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e78:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x320>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e2c1      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e90:	f7fe fca8 	bl	80017e4 <HAL_GetREVID>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d817      	bhi.n	8002ece <HAL_RCC_OscConfig+0x35e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x348>
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002eae:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eb6:	e075      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	4968      	ldr	r1, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ecc:	e06a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4962      	ldr	r1, [pc, #392]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee2:	e05f      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d042      	beq.n	8002f72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002eec:	4b5e      	ldr	r3, [pc, #376]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fc44 	bl	8001784 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f00:	f7fe fc40 	bl	8001784 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e280      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f12:	4b55      	ldr	r3, [pc, #340]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1e:	f7fe fc61 	bl	80017e4 <HAL_GetREVID>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d817      	bhi.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d108      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3d6>
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f3c:	4a4a      	ldr	r2, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f42:	6053      	str	r3, [r2, #4]
 8002f44:	e02e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
 8002f46:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	069b      	lsls	r3, r3, #26
 8002f54:	4944      	ldr	r1, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
 8002f5a:	e023      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	493f      	ldr	r1, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e018      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fc01 	bl	8001784 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f86:	f7fe fbfd 	bl	8001784 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e23d      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d036      	beq.n	800301e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fbde 	bl	8001784 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fbda 	bl	8001784 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e21a      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x45c>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fbc4 	bl	8001784 <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003000:	f7fe fbc0 	bl	8001784 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e200      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8003014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d039      	beq.n	800309e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01c      	beq.n	800306c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800303c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800303e:	f7fe fba1 	bl	8001784 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003046:	f7fe fb9d 	bl	8001784 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1dd      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x4d6>
 8003064:	e01b      	b.n	800309e <HAL_RCC_OscConfig+0x52e>
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800306c:	4b9b      	ldr	r3, [pc, #620]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a9a      	ldr	r2, [pc, #616]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003078:	f7fe fb84 	bl	8001784 <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003080:	f7fe fb80 	bl	8001784 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1c0      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003092:	4b92      	ldr	r3, [pc, #584]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8081 	beq.w	80031ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030ac:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x770>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a8b      	ldr	r2, [pc, #556]	; (80032e0 <HAL_RCC_OscConfig+0x770>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fb64 	bl	8001784 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7fe fb60 	bl	8001784 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e1a0      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d2:	4b83      	ldr	r3, [pc, #524]	; (80032e0 <HAL_RCC_OscConfig+0x770>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x584>
 80030e6:	4b7d      	ldr	r3, [pc, #500]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	e02d      	b.n	8003150 <HAL_RCC_OscConfig+0x5e0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x5a6>
 80030fc:	4b77      	ldr	r3, [pc, #476]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a76      	ldr	r2, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	4b74      	ldr	r3, [pc, #464]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a73      	ldr	r2, [pc, #460]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800310e:	f023 0304 	bic.w	r3, r3, #4
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x5e0>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c8>
 800311e:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a6b      	ldr	r2, [pc, #428]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0x5e0>
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a67      	ldr	r2, [pc, #412]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a64      	ldr	r2, [pc, #400]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fb14 	bl	8001784 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fe fb10 	bl	8001784 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e14e      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003176:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <HAL_RCC_OscConfig+0x5f0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fafe 	bl	8001784 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fafa 	bl	8001784 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e138      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ee      	bne.n	800318c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 812d 	beq.w	8003412 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031b8:	4b48      	ldr	r3, [pc, #288]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c0:	2b18      	cmp	r3, #24
 80031c2:	f000 80bd 	beq.w	8003340 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	f040 809e 	bne.w	800330c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b42      	ldr	r3, [pc, #264]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a41      	ldr	r2, [pc, #260]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fad2 	bl	8001784 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe face 	bl	8001784 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e10e      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x774>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	430a      	orrs	r2, r1
 8003216:	4931      	ldr	r1, [pc, #196]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	628b      	str	r3, [r1, #40]	; 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	3b01      	subs	r3, #1
 8003222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	3b01      	subs	r3, #1
 800322c:	025b      	lsls	r3, r3, #9
 800322e:	b29b      	uxth	r3, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	3b01      	subs	r3, #1
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800324c:	4923      	ldr	r1, [pc, #140]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800325e:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCC_OscConfig+0x778>)
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800326a:	00d2      	lsls	r2, r2, #3
 800326c:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	f023 020c 	bic.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4917      	ldr	r1, [pc, #92]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003280:	4313      	orrs	r3, r2
 8003282:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f023 0202 	bic.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	4912      	ldr	r1, [pc, #72]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe fa57 	bl	8001784 <HAL_GetTick>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d8:	e011      	b.n	80032fe <HAL_RCC_OscConfig+0x78e>
 80032da:	bf00      	nop
 80032dc:	58024400 	.word	0x58024400
 80032e0:	58024800 	.word	0x58024800
 80032e4:	fffffc0c 	.word	0xfffffc0c
 80032e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fa4a 	bl	8001784 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e08a      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x77c>
 800330a:	e082      	b.n	8003412 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a42      	ldr	r2, [pc, #264]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fa34 	bl	8001784 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fa30 	bl	8001784 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e070      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003332:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x7b0>
 800333e:	e068      	b.n	8003412 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003346:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b01      	cmp	r3, #1
 8003352:	d031      	beq.n	80033b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d12a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d122      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d11a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0a5b      	lsrs	r3, r3, #9
 8003386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d108      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e02b      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d01f      	beq.n	8003412 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033de:	f7fe f9d1 	bl	8001784 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033e4:	bf00      	nop
 80033e6:	f7fe f9cd 	bl	8001784 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d0f9      	beq.n	80033e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_OscConfig+0x8b0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033fe:	00d2      	lsls	r2, r2, #3
 8003400:	4906      	ldr	r1, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003402:	4313      	orrs	r3, r2
 8003404:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x8ac>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3730      	adds	r7, #48	; 0x30
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	58024400 	.word	0x58024400
 8003420:	ffff0007 	.word	0xffff0007

08003424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e19c      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b8a      	ldr	r3, [pc, #552]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b87      	ldr	r3, [pc, #540]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	4985      	ldr	r1, [pc, #532]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b83      	ldr	r3, [pc, #524]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e184      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	4b7b      	ldr	r3, [pc, #492]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003480:	429a      	cmp	r2, r3
 8003482:	d908      	bls.n	8003496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003484:	4b78      	ldr	r3, [pc, #480]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4975      	ldr	r1, [pc, #468]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003492:	4313      	orrs	r3, r2
 8003494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d908      	bls.n	80034c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034b2:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	496a      	ldr	r1, [pc, #424]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034dc:	429a      	cmp	r2, r3
 80034de:	d908      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	495e      	ldr	r1, [pc, #376]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350a:	429a      	cmp	r2, r3
 800350c:	d908      	bls.n	8003520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800350e:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4953      	ldr	r1, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800351c:	4313      	orrs	r3, r2
 800351e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	429a      	cmp	r2, r3
 800353a:	d908      	bls.n	800354e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f023 020f 	bic.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4947      	ldr	r1, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800354a:	4313      	orrs	r3, r2
 800354c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d055      	beq.n	8003606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4940      	ldr	r1, [pc, #256]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003568:	4313      	orrs	r3, r2
 800356a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003574:	4b3c      	ldr	r3, [pc, #240]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d121      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0f6      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d107      	bne.n	800359c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358c:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d115      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0ea      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0de      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d6      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f023 0207 	bic.w	r2, r3, #7
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4925      	ldr	r1, [pc, #148]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fe f8d5 	bl	8001784 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fe f8d1 	bl	8001784 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0be      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f4:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	429a      	cmp	r2, r3
 8003604:	d1eb      	bne.n	80035de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	429a      	cmp	r2, r3
 8003620:	d208      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f023 020f 	bic.w	r2, r3, #15
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d214      	bcs.n	800366c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 020f 	bic.w	r2, r3, #15
 800364a:	4906      	ldr	r1, [pc, #24]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e086      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
 8003664:	52002000 	.word	0x52002000
 8003668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003684:	429a      	cmp	r2, r3
 8003686:	d208      	bcs.n	800369a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003688:	4b3c      	ldr	r3, [pc, #240]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4939      	ldr	r1, [pc, #228]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003696:	4313      	orrs	r3, r2
 8003698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d208      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	492e      	ldr	r1, [pc, #184]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	4b28      	ldr	r3, [pc, #160]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d208      	bcs.n	80036f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4922      	ldr	r1, [pc, #136]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d010      	beq.n	8003724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370e:	429a      	cmp	r2, r3
 8003710:	d208      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4917      	ldr	r1, [pc, #92]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003720:	4313      	orrs	r3, r2
 8003722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003724:	f000 f834 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4912      	ldr	r1, [pc, #72]	; (8003780 <HAL_RCC_ClockConfig+0x35c>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x358>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <HAL_RCC_ClockConfig+0x35c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x360>)
 800375a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x364>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x368>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd ffc2 	bl	80016f0 <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	08008134 	.word	0x08008134
 8003784:	2400000c 	.word	0x2400000c
 8003788:	24000008 	.word	0x24000008
 800378c:	24000010 	.word	0x24000010

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003796:	4bb3      	ldr	r3, [pc, #716]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379e:	2b18      	cmp	r3, #24
 80037a0:	f200 8155 	bhi.w	8003a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	08003811 	.word	0x08003811
 80037b0:	08003a4f 	.word	0x08003a4f
 80037b4:	08003a4f 	.word	0x08003a4f
 80037b8:	08003a4f 	.word	0x08003a4f
 80037bc:	08003a4f 	.word	0x08003a4f
 80037c0:	08003a4f 	.word	0x08003a4f
 80037c4:	08003a4f 	.word	0x08003a4f
 80037c8:	08003a4f 	.word	0x08003a4f
 80037cc:	08003837 	.word	0x08003837
 80037d0:	08003a4f 	.word	0x08003a4f
 80037d4:	08003a4f 	.word	0x08003a4f
 80037d8:	08003a4f 	.word	0x08003a4f
 80037dc:	08003a4f 	.word	0x08003a4f
 80037e0:	08003a4f 	.word	0x08003a4f
 80037e4:	08003a4f 	.word	0x08003a4f
 80037e8:	08003a4f 	.word	0x08003a4f
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	08003a4f 	.word	0x08003a4f
 80037f4:	08003a4f 	.word	0x08003a4f
 80037f8:	08003a4f 	.word	0x08003a4f
 80037fc:	08003a4f 	.word	0x08003a4f
 8003800:	08003a4f 	.word	0x08003a4f
 8003804:	08003a4f 	.word	0x08003a4f
 8003808:	08003a4f 	.word	0x08003a4f
 800380c:	08003843 	.word	0x08003843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003810:	4b94      	ldr	r3, [pc, #592]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800381c:	4b91      	ldr	r3, [pc, #580]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	4a90      	ldr	r2, [pc, #576]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800382e:	e111      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003830:	4b8d      	ldr	r3, [pc, #564]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003832:	61bb      	str	r3, [r7, #24]
      break;
 8003834:	e10e      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003836:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003838:	61bb      	str	r3, [r7, #24]
      break;
 800383a:	e10b      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800383c:	4b8c      	ldr	r3, [pc, #560]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800383e:	61bb      	str	r3, [r7, #24]
      break;
 8003840:	e108      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800384c:	4b85      	ldr	r3, [pc, #532]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003858:	4b82      	ldr	r3, [pc, #520]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003862:	4b80      	ldr	r3, [pc, #512]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	08db      	lsrs	r3, r3, #3
 8003868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80e1 	beq.w	8003a48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b02      	cmp	r3, #2
 800388a:	f000 8083 	beq.w	8003994 <HAL_RCC_GetSysClockFreq+0x204>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f200 80a1 	bhi.w	80039d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x114>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d056      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038a2:	e099      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02d      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b0:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	4a6b      	ldr	r2, [pc, #428]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038da:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800390a:	e087      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003932:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800394e:	e065      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003962:	4b40      	ldr	r3, [pc, #256]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003972:	ed97 6a02 	vldr	s12, [r7, #8]
 8003976:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003992:	e043      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039d6:	e021      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	0a5b      	lsrs	r3, r3, #9
 8003a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a26:	3301      	adds	r3, #1
 8003a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a40:	ee17 3a90 	vmov	r3, s15
 8003a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a50:	61bb      	str	r3, [r7, #24]
      break;
 8003a52:	bf00      	nop
  }

  return sysclockfreq;
 8003a54:	69bb      	ldr	r3, [r7, #24]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
 8003a68:	03d09000 	.word	0x03d09000
 8003a6c:	003d0900 	.word	0x003d0900
 8003a70:	007a1200 	.word	0x007a1200
 8003a74:	46000000 	.word	0x46000000
 8003a78:	4c742400 	.word	0x4c742400
 8003a7c:	4a742400 	.word	0x4a742400
 8003a80:	4af42400 	.word	0x4af42400

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a8a:	f7ff fe81 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	490f      	ldr	r1, [pc, #60]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <HAL_RCC_GetHCLKFreq+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	08008134 	.word	0x08008134
 8003adc:	2400000c 	.word	0x2400000c
 8003ae0:	24000008 	.word	0x24000008

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ae8:	f7ff ffcc 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	08008134 	.word	0x08008134

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b14:	f7ff ffb6 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4904      	ldr	r1, [pc, #16]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	58024400 	.word	0x58024400
 8003b38:	08008134 	.word	0x08008134

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b0ca      	sub	sp, #296	; 0x128
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003b60:	2500      	movs	r5, #0
 8003b62:	ea54 0305 	orrs.w	r3, r4, r5
 8003b66:	d049      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b72:	d02f      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b78:	d828      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b7e:	d01a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b84:	d822      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8e:	d007      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b90:	e01c      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b92:	4bb8      	ldr	r3, [pc, #736]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	4ab7      	ldr	r2, [pc, #732]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b9e:	e01a      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fc8f 	bl	80054cc <RCCEx_PLL2_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	3328      	adds	r3, #40	; 0x28
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fd36 	bl	8005630 <RCCEx_PLL3_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bde:	4ba5      	ldr	r3, [pc, #660]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bec:	4aa1      	ldr	r2, [pc, #644]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6513      	str	r3, [r2, #80]	; 0x50
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003c08:	f04f 0900 	mov.w	r9, #0
 8003c0c:	ea58 0309 	orrs.w	r3, r8, r9
 8003c10:	d047      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d82a      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c39 	.word	0x08003c39
 8003c28:	08003c47 	.word	0x08003c47
 8003c2c:	08003c5d 	.word	0x08003c5d
 8003c30:	08003c7b 	.word	0x08003c7b
 8003c34:	08003c7b 	.word	0x08003c7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4b8e      	ldr	r3, [pc, #568]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a8d      	ldr	r2, [pc, #564]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c44:	e01a      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fc3c 	bl	80054cc <RCCEx_PLL2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e00f      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c60:	3328      	adds	r3, #40	; 0x28
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fce3 	bl	8005630 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c70:	e004      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c84:	4b7b      	ldr	r3, [pc, #492]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	f023 0107 	bic.w	r1, r3, #7
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	4a78      	ldr	r2, [pc, #480]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6513      	str	r3, [r2, #80]	; 0x50
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003cae:	f04f 0b00 	mov.w	fp, #0
 8003cb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003cb6:	d04c      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc2:	d030      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc8:	d829      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cca:	2bc0      	cmp	r3, #192	; 0xc0
 8003ccc:	d02d      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cce:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd0:	d825      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d018      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003cd6:	2b80      	cmp	r3, #128	; 0x80
 8003cd8:	d821      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003ce2:	e01c      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce4:	4b63      	ldr	r3, [pc, #396]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4a62      	ldr	r2, [pc, #392]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 fbe6 	bl	80054cc <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d06:	e011      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0c:	3328      	adds	r3, #40	; 0x28
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 fc8d 	bl	8005630 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e006      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d34:	4b4f      	ldr	r3, [pc, #316]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	4a4c      	ldr	r2, [pc, #304]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6513      	str	r3, [r2, #80]	; 0x50
 8003d48:	e003      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003d5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003d68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	d053      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d7e:	d035      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d84:	d82e      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d8a:	d031      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d90:	d828      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d96:	d01a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d9c:	d822      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da6:	d007      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003da8:	e01c      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003daa:	4b32      	ldr	r3, [pc, #200]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4a31      	ldr	r2, [pc, #196]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db6:	e01c      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fb83 	bl	80054cc <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dcc:	e011      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	3328      	adds	r3, #40	; 0x28
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fc2a 	bl	8005630 <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de2:	e006      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d056      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e46:	d038      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e4c:	d831      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e52:	d034      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e58:	d82b      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e5e:	d01d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e64:	d825      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e70:	e01f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e78:	4ba2      	ldr	r3, [pc, #648]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4aa1      	ldr	r2, [pc, #644]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fb1c 	bl	80054cc <RCCEx_PLL2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e011      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea0:	3328      	adds	r3, #40	; 0x28
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 fbc3 	bl	8005630 <RCCEx_PLL3_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ec8:	4b8e      	ldr	r3, [pc, #568]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ed8:	4a8a      	ldr	r2, [pc, #552]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003efe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d03a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d01f      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f12:	2b30      	cmp	r3, #48	; 0x30
 8003f14:	d819      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d815      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d111      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f26:	4b77      	ldr	r3, [pc, #476]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a76      	ldr	r2, [pc, #472]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f32:	e011      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	3308      	adds	r3, #8
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fac5 	bl	80054cc <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f60:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d051      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d035      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fae:	d82e      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb4:	d031      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003fb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fba:	d828      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	d822      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003fd2:	e01c      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	4a4a      	ldr	r2, [pc, #296]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e01c      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fa6e 	bl	80054cc <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffc:	3328      	adds	r3, #40	; 0x28
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f001 fb15 	bl	8005630 <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800401a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004024:	4b37      	ldr	r3, [pc, #220]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	4a34      	ldr	r2, [pc, #208]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6513      	str	r3, [r2, #80]	; 0x50
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800404e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004058:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800405c:	460b      	mov	r3, r1
 800405e:	4313      	orrs	r3, r2
 8004060:	d056      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d033      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800406e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004072:	d82c      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004078:	d02f      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800407a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407e:	d826      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004080:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004084:	d02b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800408a:	d820      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004090:	d012      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004096:	d81a      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d022      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d115      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a6:	3308      	adds	r3, #8
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fa0e 	bl	80054cc <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040b6:	e015      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	3328      	adds	r3, #40	; 0x28
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fab5 	bl	8005630 <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040cc:	e00a      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e004      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10d      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fa:	4a02      	ldr	r2, [pc, #8]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6513      	str	r3, [r2, #80]	; 0x50
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800410c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800411c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004126:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	d055      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413c:	d033      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800413e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004142:	d82c      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d02f      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d826      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004154:	d02b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415a:	d820      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004160:	d012      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004166:	d81a      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d022      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800416c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004170:	d115      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	3308      	adds	r3, #8
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f9a6 	bl	80054cc <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004186:	e015      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418c:	3328      	adds	r3, #40	; 0x28
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fa4d 	bl	8005630 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800419c:	e00a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041bc:	4ba3      	ldr	r3, [pc, #652]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041cc:	4a9f      	ldr	r2, [pc, #636]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ce:	430b      	orrs	r3, r1
 80041d0:	6593      	str	r3, [r2, #88]	; 0x58
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80041e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d037      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004206:	d00e      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420c:	d816      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004216:	d111      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004218:	4b8c      	ldr	r3, [pc, #560]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	4a8b      	ldr	r2, [pc, #556]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004224:	e00f      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	3308      	adds	r3, #8
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f001 f94c 	bl	80054cc <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800423a:	e004      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425e:	430b      	orrs	r3, r1
 8004260:	6513      	str	r3, [r2, #80]	; 0x50
 8004262:	e003      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004268:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004282:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004286:	460b      	mov	r3, r1
 8004288:	4313      	orrs	r3, r2
 800428a:	d039      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004292:	2b03      	cmp	r3, #3
 8004294:	d81c      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d9 	.word	0x080042d9
 80042a0:	080042ad 	.word	0x080042ad
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	080042d9 	.word	0x080042d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ac:	4b67      	ldr	r3, [pc, #412]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a66      	ldr	r2, [pc, #408]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042b8:	e00f      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	3308      	adds	r3, #8
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f902 	bl	80054cc <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042ce:	e004      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80042d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042e2:	4b5a      	ldr	r3, [pc, #360]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	f023 0103 	bic.w	r1, r3, #3
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f2:	430b      	orrs	r3, r1
 80042f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042f6:	e003      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800430c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004316:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	f000 809f 	beq.w	8004460 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004322:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4a      	ldr	r2, [pc, #296]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800432e:	f7fd fa29 	bl	8001784 <HAL_GetTick>
 8004332:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fd fa24 	bl	8001784 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d903      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800434e:	e005      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004350:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ed      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800435c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004360:	2b00      	cmp	r3, #0
 8004362:	d179      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004364:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004370:	4053      	eors	r3, r2
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d015      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437a:	4b34      	ldr	r3, [pc, #208]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b31      	ldr	r3, [pc, #196]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a30      	ldr	r2, [pc, #192]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a2d      	ldr	r2, [pc, #180]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800439e:	4a2b      	ldr	r2, [pc, #172]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b2:	d118      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd f9e6 	bl	8001784 <HAL_GetTick>
 80043b8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043bc:	e00d      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fd f9e1 	bl	8001784 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043c8:	1ad2      	subs	r2, r2, r3
 80043ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d903      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80043d8:	e005      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0eb      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80043e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d129      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fe:	d10e      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004410:	091a      	lsrs	r2, r3, #4
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004414:	4013      	ands	r3, r2
 8004416:	4a0d      	ldr	r2, [pc, #52]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6113      	str	r3, [r2, #16]
 800441c:	e005      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004424:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004428:	6113      	str	r3, [r2, #16]
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443a:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	e00e      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800444a:	e009      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800444c:	58024400 	.word	0x58024400
 8004450:	58024800 	.word	0x58024800
 8004454:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 0301 	and.w	r3, r2, #1
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004476:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	f000 8089 	beq.w	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004488:	2b28      	cmp	r3, #40	; 0x28
 800448a:	d86b      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	0800456d 	.word	0x0800456d
 8004498:	08004565 	.word	0x08004565
 800449c:	08004565 	.word	0x08004565
 80044a0:	08004565 	.word	0x08004565
 80044a4:	08004565 	.word	0x08004565
 80044a8:	08004565 	.word	0x08004565
 80044ac:	08004565 	.word	0x08004565
 80044b0:	08004565 	.word	0x08004565
 80044b4:	08004539 	.word	0x08004539
 80044b8:	08004565 	.word	0x08004565
 80044bc:	08004565 	.word	0x08004565
 80044c0:	08004565 	.word	0x08004565
 80044c4:	08004565 	.word	0x08004565
 80044c8:	08004565 	.word	0x08004565
 80044cc:	08004565 	.word	0x08004565
 80044d0:	08004565 	.word	0x08004565
 80044d4:	0800454f 	.word	0x0800454f
 80044d8:	08004565 	.word	0x08004565
 80044dc:	08004565 	.word	0x08004565
 80044e0:	08004565 	.word	0x08004565
 80044e4:	08004565 	.word	0x08004565
 80044e8:	08004565 	.word	0x08004565
 80044ec:	08004565 	.word	0x08004565
 80044f0:	08004565 	.word	0x08004565
 80044f4:	0800456d 	.word	0x0800456d
 80044f8:	08004565 	.word	0x08004565
 80044fc:	08004565 	.word	0x08004565
 8004500:	08004565 	.word	0x08004565
 8004504:	08004565 	.word	0x08004565
 8004508:	08004565 	.word	0x08004565
 800450c:	08004565 	.word	0x08004565
 8004510:	08004565 	.word	0x08004565
 8004514:	0800456d 	.word	0x0800456d
 8004518:	08004565 	.word	0x08004565
 800451c:	08004565 	.word	0x08004565
 8004520:	08004565 	.word	0x08004565
 8004524:	08004565 	.word	0x08004565
 8004528:	08004565 	.word	0x08004565
 800452c:	08004565 	.word	0x08004565
 8004530:	08004565 	.word	0x08004565
 8004534:	0800456d 	.word	0x0800456d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453c:	3308      	adds	r3, #8
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f000 ffc3 	bl	80054cc <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800454c:	e00f      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	3328      	adds	r3, #40	; 0x28
 8004554:	2101      	movs	r1, #1
 8004556:	4618      	mov	r0, r3
 8004558:	f001 f86a 	bl	8005630 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004562:	e004      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800456c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004576:	4bbf      	ldr	r3, [pc, #764]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	4abb      	ldr	r2, [pc, #748]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004586:	430b      	orrs	r3, r1
 8004588:	6553      	str	r3, [r2, #84]	; 0x54
 800458a:	e003      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004590:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f002 0302 	and.w	r3, r2, #2
 80045a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d041      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d824      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	08004611 	.word	0x08004611
 80045c8:	080045dd 	.word	0x080045dd
 80045cc:	080045f3 	.word	0x080045f3
 80045d0:	08004611 	.word	0x08004611
 80045d4:	08004611 	.word	0x08004611
 80045d8:	08004611 	.word	0x08004611
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	3308      	adds	r3, #8
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 ff71 	bl	80054cc <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00f      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	3328      	adds	r3, #40	; 0x28
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f818 	bl	8005630 <RCCEx_PLL3_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800461a:	4b96      	ldr	r3, [pc, #600]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	f023 0107 	bic.w	r1, r3, #7
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004628:	4a92      	ldr	r2, [pc, #584]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800462a:	430b      	orrs	r3, r1
 800462c:	6553      	str	r3, [r2, #84]	; 0x54
 800462e:	e003      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 0304 	and.w	r3, r2, #4
 8004644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800464e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d044      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004660:	2b05      	cmp	r3, #5
 8004662:	d825      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	080046b9 	.word	0x080046b9
 8004670:	08004685 	.word	0x08004685
 8004674:	0800469b 	.word	0x0800469b
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046b9 	.word	0x080046b9
 8004680:	080046b9 	.word	0x080046b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004688:	3308      	adds	r3, #8
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f000 ff1d 	bl	80054cc <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004698:	e00f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	3328      	adds	r3, #40	; 0x28
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 ffc4 	bl	8005630 <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046c2:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f023 0107 	bic.w	r1, r3, #7
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	4a68      	ldr	r2, [pc, #416]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6593      	str	r3, [r2, #88]	; 0x58
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f002 0320 	and.w	r3, r2, #32
 80046ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d055      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800470e:	d033      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004714:	d82c      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471a:	d02f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d826      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004722:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004726:	d02b      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800472c:	d820      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800472e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004732:	d012      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004738:	d81a      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d022      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800473e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004742:	d115      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	3308      	adds	r3, #8
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f000 febd 	bl	80054cc <RCCEx_PLL2_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004758:	e015      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	3328      	adds	r3, #40	; 0x28
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ff64 	bl	8005630 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800476e:	e00a      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004776:	e006      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004778:	bf00      	nop
 800477a:	e004      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800477c:	bf00      	nop
 800477e:	e002      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	4a35      	ldr	r2, [pc, #212]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6553      	str	r3, [r2, #84]	; 0x54
 80047a4:	e003      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	d058      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047da:	d033      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80047dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047e0:	d82c      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d02f      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d826      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f2:	d02b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80047f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047f8:	d820      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80047fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fe:	d012      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004804:	d81a      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d022      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d115      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004814:	3308      	adds	r3, #8
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fe57 	bl	80054cc <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004824:	e015      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482a:	3328      	adds	r3, #40	; 0x28
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fefe 	bl	8005630 <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800483a:	e00a      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004842:	e006      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004844:	bf00      	nop
 8004846:	e004      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004848:	bf00      	nop
 800484a:	e002      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800484c:	bf00      	nop
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486a:	4a02      	ldr	r2, [pc, #8]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800486c:	430b      	orrs	r3, r1
 800486e:	6593      	str	r3, [r2, #88]	; 0x58
 8004870:	e006      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800487c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800488c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004896:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d055      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048ac:	d033      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80048ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048b2:	d82c      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d02f      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	d826      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048c4:	d02b      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80048c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048ca:	d820      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d0:	d012      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80048d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d6:	d81a      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d022      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d115      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e6:	3308      	adds	r3, #8
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fdee 	bl	80054cc <RCCEx_PLL2_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048f6:	e015      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fc:	3328      	adds	r3, #40	; 0x28
 80048fe:	2102      	movs	r1, #2
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fe95 	bl	8005630 <RCCEx_PLL3_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800490c:	e00a      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004916:	bf00      	nop
 8004918:	e004      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800492c:	4ba1      	ldr	r3, [pc, #644]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800493c:	4a9d      	ldr	r2, [pc, #628]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800493e:	430b      	orrs	r3, r1
 8004940:	6593      	str	r3, [r2, #88]	; 0x58
 8004942:	e003      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f002 0308 	and.w	r3, r2, #8
 8004958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800495c:	2300      	movs	r3, #0
 800495e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004962:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d01e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d10c      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497e:	3328      	adds	r3, #40	; 0x28
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fe54 	bl	8005630 <RCCEx_PLL3_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004994:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a4:	4a83      	ldr	r2, [pc, #524]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f002 0310 	and.w	r3, r2, #16
 80049b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80049c4:	460b      	mov	r3, r1
 80049c6:	4313      	orrs	r3, r2
 80049c8:	d01e      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d10c      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	3328      	adds	r3, #40	; 0x28
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fe25 	bl	8005630 <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049f2:	4b70      	ldr	r3, [pc, #448]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a02:	4a6c      	ldr	r2, [pc, #432]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d03e      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a34:	d022      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3a:	d81b      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a46:	e015      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fd3b 	bl	80054cc <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a5c:	e00f      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a62:	3328      	adds	r3, #40	; 0x28
 8004a64:	2102      	movs	r1, #2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fde2 	bl	8005630 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a86:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a96:	4a47      	ldr	r2, [pc, #284]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9c:	e003      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004ab2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ab8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004abc:	460b      	mov	r3, r1
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d03b      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ace:	d01f      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ad0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ad4:	d818      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004ae2:	e011      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a32      	ldr	r2, [pc, #200]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004af0:	e00f      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af6:	3328      	adds	r3, #40	; 0x28
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fd98 	bl	8005630 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b06:	e004      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	4a22      	ldr	r2, [pc, #136]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b46:	673b      	str	r3, [r7, #112]	; 0x70
 8004b48:	2300      	movs	r3, #0
 8004b4a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b50:	460b      	mov	r3, r1
 8004b52:	4313      	orrs	r3, r2
 8004b54:	d034      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d007      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b74:	e00e      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fca4 	bl	80054cc <RCCEx_PLL2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b8a:	e003      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004baa:	4a02      	ldr	r2, [pc, #8]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bac:	430b      	orrs	r3, r1
 8004bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bce:	2300      	movs	r3, #0
 8004bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d00c      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be0:	3328      	adds	r3, #40	; 0x28
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fd23 	bl	8005630 <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c02:	663b      	str	r3, [r7, #96]	; 0x60
 8004c04:	2300      	movs	r3, #0
 8004c06:	667b      	str	r3, [r7, #100]	; 0x64
 8004c08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	d038      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1e:	d018      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c24:	d811      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2a:	d014      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c30:	d80b      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3c:	4bc3      	ldr	r3, [pc, #780]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4ac2      	ldr	r2, [pc, #776]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c64:	4bb9      	ldr	r3, [pc, #740]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c74:	4ab5      	ldr	r2, [pc, #724]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6553      	str	r3, [r2, #84]	; 0x54
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004c90:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c92:	2300      	movs	r3, #0
 8004c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ca0:	4baa      	ldr	r3, [pc, #680]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cae:	4aa7      	ldr	r2, [pc, #668]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004cd0:	4b9e      	ldr	r3, [pc, #632]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ce0:	4a9a      	ldr	r2, [pc, #616]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d02:	4b92      	ldr	r3, [pc, #584]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d10:	4a8e      	ldr	r2, [pc, #568]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d12:	430b      	orrs	r3, r1
 8004d14:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d22:	643b      	str	r3, [r7, #64]	; 0x40
 8004d24:	2300      	movs	r3, #0
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44
 8004d28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d32:	4b86      	ldr	r3, [pc, #536]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	4a85      	ldr	r2, [pc, #532]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d3c:	6113      	str	r3, [r2, #16]
 8004d3e:	4b83      	ldr	r3, [pc, #524]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d40:	6919      	ldr	r1, [r3, #16]
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d4a:	4a80      	ldr	r2, [pc, #512]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5e:	2300      	movs	r3, #0
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d66:	460b      	mov	r3, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d6c:	4b77      	ldr	r3, [pc, #476]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d70:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	4a74      	ldr	r2, [pc, #464]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8e:	2300      	movs	r3, #0
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
 8004d92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d9c:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dac:	4a67      	ldr	r2, [pc, #412]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	d011      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fb78 	bl	80054cc <RCCEx_PLL2_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6239      	str	r1, [r7, #32]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	d011      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e12:	3308      	adds	r3, #8
 8004e14:	2101      	movs	r1, #1
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fb58 	bl	80054cc <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	61b9      	str	r1, [r7, #24]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d011      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e52:	3308      	adds	r3, #8
 8004e54:	2102      	movs	r1, #2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb38 	bl	80054cc <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6139      	str	r1, [r7, #16]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d011      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e92:	3328      	adds	r3, #40	; 0x28
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fbca 	bl	8005630 <RCCEx_PLL3_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d011      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed2:	3328      	adds	r3, #40	; 0x28
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fbaa 	bl	8005630 <RCCEx_PLL3_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	2100      	movs	r1, #0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d011      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f12:	3328      	adds	r3, #40	; 0x28
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fb8a 	bl	8005630 <RCCEx_PLL3_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004f32:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004f46:	46bd      	mov	sp, r7
 8004f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4c:	58024400 	.word	0x58024400

08004f50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f54:	f7fe fd96 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4904      	ldr	r1, [pc, #16]	; (8004f78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	58024400 	.word	0x58024400
 8004f78:	08008134 	.word	0x08008134

08004f7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f84:	4ba1      	ldr	r3, [pc, #644]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004f8e:	4b9f      	ldr	r3, [pc, #636]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	0b1b      	lsrs	r3, r3, #12
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f9a:	4b9c      	ldr	r3, [pc, #624]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fa6:	4b99      	ldr	r3, [pc, #612]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	08db      	lsrs	r3, r3, #3
 8004fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8111 	beq.w	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	f000 8083 	beq.w	80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	f200 80a1 	bhi.w	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d056      	beq.n	8005094 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004fe6:	e099      	b.n	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe8:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02d      	beq.n	8005050 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ff4:	4b85      	ldr	r3, [pc, #532]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	4a84      	ldr	r2, [pc, #528]	; (8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
 8005004:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	ee07 3a90 	vmov	s15, r3
 800500c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501e:	4b7b      	ldr	r3, [pc, #492]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005032:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800504e:	e087      	b.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a03 	vldr	s12, [r7, #12]
 8005076:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005092:	e065      	b.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800521c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b59      	ldr	r3, [pc, #356]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d6:	e043      	b.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80050e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ea:	4b48      	ldr	r3, [pc, #288]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511a:	e021      	b.n	8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800521c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800512a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512e:	4b37      	ldr	r3, [pc, #220]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005142:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005160:	4b2a      	ldr	r3, [pc, #168]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	0a5b      	lsrs	r3, r3, #9
 8005166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800517a:	edd7 6a07 	vldr	s13, [r7, #28]
 800517e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005186:	ee17 2a90 	vmov	r2, s15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800518e:	4b1f      	ldr	r3, [pc, #124]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b4:	ee17 2a90 	vmov	r2, s15
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e2:	ee17 2a90 	vmov	r2, s15
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051ea:	e008      	b.n	80051fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	609a      	str	r2, [r3, #8]
}
 80051fe:	bf00      	nop
 8005200:	3724      	adds	r7, #36	; 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	58024400 	.word	0x58024400
 8005210:	03d09000 	.word	0x03d09000
 8005214:	46000000 	.word	0x46000000
 8005218:	4c742400 	.word	0x4c742400
 800521c:	4a742400 	.word	0x4a742400
 8005220:	4af42400 	.word	0x4af42400

08005224 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800522c:	4ba1      	ldr	r3, [pc, #644]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005236:	4b9f      	ldr	r3, [pc, #636]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	0d1b      	lsrs	r3, r3, #20
 800523c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005240:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005242:	4b9c      	ldr	r3, [pc, #624]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800524e:	4b99      	ldr	r3, [pc, #612]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8111 	beq.w	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b02      	cmp	r3, #2
 8005276:	f000 8083 	beq.w	8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b02      	cmp	r3, #2
 800527e:	f200 80a1 	bhi.w	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d056      	beq.n	800533c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800528e:	e099      	b.n	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005290:	4b88      	ldr	r3, [pc, #544]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02d      	beq.n	80052f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800529c:	4b85      	ldr	r3, [pc, #532]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	4a84      	ldr	r2, [pc, #528]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b7b      	ldr	r3, [pc, #492]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052f6:	e087      	b.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b6a      	ldr	r3, [pc, #424]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a03 	vldr	s12, [r7, #12]
 800531e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533a:	e065      	b.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537e:	e043      	b.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c2:	e021      	b.n	8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005406:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005408:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	0a5b      	lsrs	r3, r3, #9
 800540e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800541e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005422:	edd7 6a07 	vldr	s13, [r7, #28]
 8005426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542e:	ee17 2a90 	vmov	r2, s15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005436:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800544c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005450:	edd7 6a07 	vldr	s13, [r7, #28]
 8005454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545c:	ee17 2a90 	vmov	r2, s15
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800547a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800547e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548a:	ee17 2a90 	vmov	r2, s15
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005492:	e008      	b.n	80054a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]
}
 80054a6:	bf00      	nop
 80054a8:	3724      	adds	r7, #36	; 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	58024400 	.word	0x58024400
 80054b8:	03d09000 	.word	0x03d09000
 80054bc:	46000000 	.word	0x46000000
 80054c0:	4c742400 	.word	0x4c742400
 80054c4:	4a742400 	.word	0x4a742400
 80054c8:	4af42400 	.word	0x4af42400

080054cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054da:	4b53      	ldr	r3, [pc, #332]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d101      	bne.n	80054ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e099      	b.n	800561e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80054ea:	4b4f      	ldr	r3, [pc, #316]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a4e      	ldr	r2, [pc, #312]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80054f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f6:	f7fc f945 	bl	8001784 <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054fc:	e008      	b.n	8005510 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054fe:	f7fc f941 	bl	8001784 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e086      	b.n	800561e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005510:	4b45      	ldr	r3, [pc, #276]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800551c:	4b42      	ldr	r3, [pc, #264]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	493f      	ldr	r1, [pc, #252]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	628b      	str	r3, [r1, #40]	; 0x28
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	3b01      	subs	r3, #1
 8005536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	3b01      	subs	r3, #1
 8005540:	025b      	lsls	r3, r3, #9
 8005542:	b29b      	uxth	r3, r3
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	3b01      	subs	r3, #1
 800555a:	061b      	lsls	r3, r3, #24
 800555c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005560:	4931      	ldr	r1, [pc, #196]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005566:	4b30      	ldr	r3, [pc, #192]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	492d      	ldr	r1, [pc, #180]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f023 0220 	bic.w	r2, r3, #32
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	4928      	ldr	r1, [pc, #160]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005590:	f023 0310 	bic.w	r3, r3, #16
 8005594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <RCCEx_PLL2_Config+0x160>)
 800559c:	4013      	ands	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	69d2      	ldr	r2, [r2, #28]
 80055a2:	00d2      	lsls	r2, r2, #3
 80055a4:	4920      	ldr	r1, [pc, #128]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055aa:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055b0:	f043 0310 	orr.w	r3, r3, #16
 80055b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055bc:	4b1a      	ldr	r3, [pc, #104]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	4a19      	ldr	r2, [pc, #100]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055c8:	e00f      	b.n	80055ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d106      	bne.n	80055de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055d0:	4b15      	ldr	r3, [pc, #84]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4a14      	ldr	r2, [pc, #80]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055dc:	e005      	b.n	80055ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 80055f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f6:	f7fc f8c5 	bl	8001784 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055fc:	e008      	b.n	8005610 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055fe:	f7fc f8c1 	bl	8001784 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <RCCEx_PLL2_Config+0x15c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	58024400 	.word	0x58024400
 800562c:	ffff0007 	.word	0xffff0007

08005630 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800563e:	4b53      	ldr	r3, [pc, #332]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b03      	cmp	r3, #3
 8005648:	d101      	bne.n	800564e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e099      	b.n	8005782 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800564e:	4b4f      	ldr	r3, [pc, #316]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a4e      	ldr	r2, [pc, #312]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565a:	f7fc f893 	bl	8001784 <HAL_GetTick>
 800565e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005660:	e008      	b.n	8005674 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005662:	f7fc f88f 	bl	8001784 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e086      	b.n	8005782 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005674:	4b45      	ldr	r3, [pc, #276]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005680:	4b42      	ldr	r3, [pc, #264]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	051b      	lsls	r3, r3, #20
 800568e:	493f      	ldr	r1, [pc, #252]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	628b      	str	r3, [r1, #40]	; 0x28
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	3b01      	subs	r3, #1
 800569a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	025b      	lsls	r3, r3, #9
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	3b01      	subs	r3, #1
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056c4:	4931      	ldr	r1, [pc, #196]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056ca:	4b30      	ldr	r3, [pc, #192]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	492d      	ldr	r1, [pc, #180]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056dc:	4b2b      	ldr	r3, [pc, #172]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4928      	ldr	r1, [pc, #160]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056ee:	4b27      	ldr	r3, [pc, #156]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a26      	ldr	r2, [pc, #152]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056fa:	4b24      	ldr	r3, [pc, #144]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <RCCEx_PLL3_Config+0x160>)
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	69d2      	ldr	r2, [r2, #28]
 8005706:	00d2      	lsls	r2, r2, #3
 8005708:	4920      	ldr	r1, [pc, #128]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800570e:	4b1f      	ldr	r3, [pc, #124]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	4a1e      	ldr	r2, [pc, #120]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005726:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800572a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800572c:	e00f      	b.n	800574e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d106      	bne.n	8005742 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	4a14      	ldr	r2, [pc, #80]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 800573a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800573e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005740:	e005      	b.n	800574e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	4a11      	ldr	r2, [pc, #68]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a0e      	ldr	r2, [pc, #56]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575a:	f7fc f813 	bl	8001784 <HAL_GetTick>
 800575e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005760:	e008      	b.n	8005774 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005762:	f7fc f80f 	bl	8001784 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e006      	b.n	8005782 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <RCCEx_PLL3_Config+0x15c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	58024400 	.word	0x58024400
 8005790:	ffff0007 	.word	0xffff0007

08005794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e049      	b.n	800583a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb fcc8 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 f9a6 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d001      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e054      	b.n	8005906 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <HAL_TIM_Base_Start_IT+0xd0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d022      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d01d      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a22      	ldr	r2, [pc, #136]	; (8005918 <HAL_TIM_Base_Start_IT+0xd4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d018      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a21      	ldr	r2, [pc, #132]	; (800591c <HAL_TIM_Base_Start_IT+0xd8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d013      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <HAL_TIM_Base_Start_IT+0xdc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00e      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <HAL_TIM_Base_Start_IT+0xe0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d009      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_TIM_Base_Start_IT+0xe4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1b      	ldr	r2, [pc, #108]	; (800592c <HAL_TIM_Base_Start_IT+0xe8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d115      	bne.n	80058f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	4b19      	ldr	r3, [pc, #100]	; (8005930 <HAL_TIM_Base_Start_IT+0xec>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d015      	beq.n	8005902 <HAL_TIM_Base_Start_IT+0xbe>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d011      	beq.n	8005902 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ee:	e008      	b.n	8005902 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e000      	b.n	8005904 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40010000 	.word	0x40010000
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40010400 	.word	0x40010400
 8005928:	40001800 	.word	0x40001800
 800592c:	40014000 	.word	0x40014000
 8005930:	00010007 	.word	0x00010007

08005934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIM_ConfigClockSource+0x1c>
 800594c:	2302      	movs	r3, #2
 800594e:	e0dc      	b.n	8005b0a <HAL_TIM_ConfigClockSource+0x1d6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <HAL_TIM_ConfigClockSource+0x1e0>)
 800596c:	4013      	ands	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a64      	ldr	r2, [pc, #400]	; (8005b18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	f000 80a9 	beq.w	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 800598c:	4a62      	ldr	r2, [pc, #392]	; (8005b18 <HAL_TIM_ConfigClockSource+0x1e4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	f200 80ae 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005994:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	f000 80a1 	beq.w	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 800599c:	4a5f      	ldr	r2, [pc, #380]	; (8005b1c <HAL_TIM_ConfigClockSource+0x1e8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	f200 80a6 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059a4:	4a5e      	ldr	r2, [pc, #376]	; (8005b20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	f000 8099 	beq.w	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 80059ac:	4a5c      	ldr	r2, [pc, #368]	; (8005b20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	f200 809e 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059b8:	f000 8091 	beq.w	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 80059bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059c0:	f200 8096 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c8:	f000 8089 	beq.w	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 80059cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d0:	f200 808e 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d03e      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0x124>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	f200 8087 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	f000 8086 	beq.w	8005af6 <HAL_TIM_ConfigClockSource+0x1c2>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d87f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d01a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xf6>
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d87b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d050      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x16a>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d877      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a00:	2b50      	cmp	r3, #80	; 0x50
 8005a02:	d03c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x14a>
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d873      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d058      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x18a>
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d86f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d064      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d86b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d060      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d867      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d05a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x1aa>
 8005a28:	e062      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a3a:	f000 f98b 	bl	8005d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04f      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a68:	f000 f974 	bl	8005d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e03c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 f8e4 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f93e 	bl	8005d18 <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e02c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 f903 	bl	8005cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f92e 	bl	8005d18 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e01c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 f8c4 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f91e 	bl	8005d18 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e00c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 f915 	bl	8005d18 <TIM_ITRx_SetConfig>
      break;
 8005aee:	e003      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e000      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	ffceff88 	.word	0xffceff88
 8005b18:	00100040 	.word	0x00100040
 8005b1c:	00100030 	.word	0x00100030
 8005b20:	00100020 	.word	0x00100020

08005b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a40      	ldr	r2, [pc, #256]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d00f      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3d      	ldr	r2, [pc, #244]	; (8005c3c <TIM_Base_SetConfig+0x118>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	; (8005c40 <TIM_Base_SetConfig+0x11c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3b      	ldr	r2, [pc, #236]	; (8005c44 <TIM_Base_SetConfig+0x120>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3a      	ldr	r2, [pc, #232]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2f      	ldr	r2, [pc, #188]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01f      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d01b      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <TIM_Base_SetConfig+0x118>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d017      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <TIM_Base_SetConfig+0x11c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <TIM_Base_SetConfig+0x120>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00f      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a29      	ldr	r2, [pc, #164]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <TIM_Base_SetConfig+0x128>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <TIM_Base_SetConfig+0x130>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d108      	bne.n	8005bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <TIM_Base_SetConfig+0x128>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a10      	ldr	r2, [pc, #64]	; (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a0f      	ldr	r2, [pc, #60]	; (8005c54 <TIM_Base_SetConfig+0x130>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	615a      	str	r2, [r3, #20]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f023 030a 	bic.w	r3, r3, #10
 8005c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b087      	sub	sp, #28
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f023 0210 	bic.w	r2, r3, #16
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <TIM_ITRx_SetConfig+0x38>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f043 0307 	orr.w	r3, r3, #7
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	ffcfff8f 	.word	0xffcfff8f

08005d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e06d      	b.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d108      	bne.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005de6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a20      	ldr	r2, [pc, #128]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d01d      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10c      	bne.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40001800 	.word	0x40001800
 8005eac:	40014000 	.word	0x40014000

08005eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e042      	b.n	8005f48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb f95b 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2224      	movs	r2, #36	; 0x24
 8005ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8ba 	bl	800606c <UART_SetConfig>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e022      	b.n	8005f48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fe16 	bl	8006b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fe9d 	bl	8006c80 <UART_CheckIdleState>
 8005f46:	4603      	mov	r3, r0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d17b      	bne.n	8006062 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_Transmit+0x26>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e074      	b.n	8006064 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2221      	movs	r2, #33	; 0x21
 8005f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f8a:	f7fb fbfb 	bl	8001784 <HAL_GetTick>
 8005f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	88fa      	ldrh	r2, [r7, #6]
 8005f94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa8:	d108      	bne.n	8005fbc <HAL_UART_Transmit+0x6c>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	e003      	b.n	8005fc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fc4:	e030      	b.n	8006028 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 feff 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e03d      	b.n	8006064 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	3302      	adds	r3, #2
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	e007      	b.n	8006016 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	3301      	adds	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1c8      	bne.n	8005fc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fec8 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e006      	b.n	8006064 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e000      	b.n	8006064 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006062:	2302      	movs	r3, #2
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800606c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006070:	b092      	sub	sp, #72	; 0x48
 8006072:	af00      	add	r7, sp, #0
 8006074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	431a      	orrs	r2, r3
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	431a      	orrs	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	4313      	orrs	r3, r2
 8006092:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4bbe      	ldr	r3, [pc, #760]	; (8006394 <UART_SetConfig+0x328>)
 800609c:	4013      	ands	r3, r2
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060a4:	430b      	orrs	r3, r1
 80060a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4ab3      	ldr	r2, [pc, #716]	; (8006398 <UART_SetConfig+0x32c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060d4:	4313      	orrs	r3, r2
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	4baf      	ldr	r3, [pc, #700]	; (800639c <UART_SetConfig+0x330>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	f023 010f 	bic.w	r1, r3, #15
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4aa6      	ldr	r2, [pc, #664]	; (80063a0 <UART_SetConfig+0x334>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d177      	bne.n	80061fc <UART_SetConfig+0x190>
 800610c:	4ba5      	ldr	r3, [pc, #660]	; (80063a4 <UART_SetConfig+0x338>)
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006114:	2b28      	cmp	r3, #40	; 0x28
 8006116:	d86d      	bhi.n	80061f4 <UART_SetConfig+0x188>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0xb4>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	080061c5 	.word	0x080061c5
 8006124:	080061f5 	.word	0x080061f5
 8006128:	080061f5 	.word	0x080061f5
 800612c:	080061f5 	.word	0x080061f5
 8006130:	080061f5 	.word	0x080061f5
 8006134:	080061f5 	.word	0x080061f5
 8006138:	080061f5 	.word	0x080061f5
 800613c:	080061f5 	.word	0x080061f5
 8006140:	080061cd 	.word	0x080061cd
 8006144:	080061f5 	.word	0x080061f5
 8006148:	080061f5 	.word	0x080061f5
 800614c:	080061f5 	.word	0x080061f5
 8006150:	080061f5 	.word	0x080061f5
 8006154:	080061f5 	.word	0x080061f5
 8006158:	080061f5 	.word	0x080061f5
 800615c:	080061f5 	.word	0x080061f5
 8006160:	080061d5 	.word	0x080061d5
 8006164:	080061f5 	.word	0x080061f5
 8006168:	080061f5 	.word	0x080061f5
 800616c:	080061f5 	.word	0x080061f5
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061f5 	.word	0x080061f5
 8006178:	080061f5 	.word	0x080061f5
 800617c:	080061f5 	.word	0x080061f5
 8006180:	080061dd 	.word	0x080061dd
 8006184:	080061f5 	.word	0x080061f5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080061f5 	.word	0x080061f5
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061f5 	.word	0x080061f5
 8006198:	080061f5 	.word	0x080061f5
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	080061f5 	.word	0x080061f5
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061f5 	.word	0x080061f5
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e222      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d2:	e21e      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e21a      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e216      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e212      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061ec:	2340      	movs	r3, #64	; 0x40
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e20e      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e20a      	b.n	8006612 <UART_SetConfig+0x5a6>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a69      	ldr	r2, [pc, #420]	; (80063a8 <UART_SetConfig+0x33c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d130      	bne.n	8006268 <UART_SetConfig+0x1fc>
 8006206:	4b67      	ldr	r3, [pc, #412]	; (80063a4 <UART_SetConfig+0x338>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b05      	cmp	r3, #5
 8006210:	d826      	bhi.n	8006260 <UART_SetConfig+0x1f4>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x1ac>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006231 	.word	0x08006231
 800621c:	08006239 	.word	0x08006239
 8006220:	08006241 	.word	0x08006241
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	2300      	movs	r3, #0
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e1ec      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e1e8      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e1e4      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e1e0      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e1dc      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006258:	2340      	movs	r3, #64	; 0x40
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e1d8      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e1d4      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4f      	ldr	r2, [pc, #316]	; (80063ac <UART_SetConfig+0x340>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d130      	bne.n	80062d4 <UART_SetConfig+0x268>
 8006272:	4b4c      	ldr	r3, [pc, #304]	; (80063a4 <UART_SetConfig+0x338>)
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b05      	cmp	r3, #5
 800627c:	d826      	bhi.n	80062cc <UART_SetConfig+0x260>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x218>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	0800629d 	.word	0x0800629d
 8006288:	080062a5 	.word	0x080062a5
 800628c:	080062ad 	.word	0x080062ad
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062c5 	.word	0x080062c5
 800629c:	2300      	movs	r3, #0
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e1b6      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062a4:	2304      	movs	r3, #4
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062aa:	e1b2      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062ac:	2308      	movs	r3, #8
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e1ae      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062b4:	2310      	movs	r3, #16
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e1aa      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062bc:	2320      	movs	r3, #32
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e1a6      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e1a2      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e19e      	b.n	8006612 <UART_SetConfig+0x5a6>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a35      	ldr	r2, [pc, #212]	; (80063b0 <UART_SetConfig+0x344>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d130      	bne.n	8006340 <UART_SetConfig+0x2d4>
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <UART_SetConfig+0x338>)
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d826      	bhi.n	8006338 <UART_SetConfig+0x2cc>
 80062ea:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <UART_SetConfig+0x284>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006309 	.word	0x08006309
 80062f4:	08006311 	.word	0x08006311
 80062f8:	08006319 	.word	0x08006319
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006329 	.word	0x08006329
 8006304:	08006331 	.word	0x08006331
 8006308:	2300      	movs	r3, #0
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630e:	e180      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006310:	2304      	movs	r3, #4
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006316:	e17c      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006318:	2308      	movs	r3, #8
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631e:	e178      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006320:	2310      	movs	r3, #16
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e174      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006328:	2320      	movs	r3, #32
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632e:	e170      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006330:	2340      	movs	r3, #64	; 0x40
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e16c      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e168      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1b      	ldr	r2, [pc, #108]	; (80063b4 <UART_SetConfig+0x348>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d142      	bne.n	80063d0 <UART_SetConfig+0x364>
 800634a:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <UART_SetConfig+0x338>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	2b05      	cmp	r3, #5
 8006354:	d838      	bhi.n	80063c8 <UART_SetConfig+0x35c>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0x2f0>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006375 	.word	0x08006375
 8006360:	0800637d 	.word	0x0800637d
 8006364:	08006385 	.word	0x08006385
 8006368:	0800638d 	.word	0x0800638d
 800636c:	080063b9 	.word	0x080063b9
 8006370:	080063c1 	.word	0x080063c1
 8006374:	2300      	movs	r3, #0
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e14a      	b.n	8006612 <UART_SetConfig+0x5a6>
 800637c:	2304      	movs	r3, #4
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e146      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006384:	2308      	movs	r3, #8
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e142      	b.n	8006612 <UART_SetConfig+0x5a6>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e13e      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006394:	cfff69f3 	.word	0xcfff69f3
 8006398:	58000c00 	.word	0x58000c00
 800639c:	11fff4ff 	.word	0x11fff4ff
 80063a0:	40011000 	.word	0x40011000
 80063a4:	58024400 	.word	0x58024400
 80063a8:	40004400 	.word	0x40004400
 80063ac:	40004800 	.word	0x40004800
 80063b0:	40004c00 	.word	0x40004c00
 80063b4:	40005000 	.word	0x40005000
 80063b8:	2320      	movs	r3, #32
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e128      	b.n	8006612 <UART_SetConfig+0x5a6>
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e124      	b.n	8006612 <UART_SetConfig+0x5a6>
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e120      	b.n	8006612 <UART_SetConfig+0x5a6>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4acb      	ldr	r2, [pc, #812]	; (8006704 <UART_SetConfig+0x698>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d176      	bne.n	80064c8 <UART_SetConfig+0x45c>
 80063da:	4bcb      	ldr	r3, [pc, #812]	; (8006708 <UART_SetConfig+0x69c>)
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e2:	2b28      	cmp	r3, #40	; 0x28
 80063e4:	d86c      	bhi.n	80064c0 <UART_SetConfig+0x454>
 80063e6:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <UART_SetConfig+0x380>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006491 	.word	0x08006491
 80063f0:	080064c1 	.word	0x080064c1
 80063f4:	080064c1 	.word	0x080064c1
 80063f8:	080064c1 	.word	0x080064c1
 80063fc:	080064c1 	.word	0x080064c1
 8006400:	080064c1 	.word	0x080064c1
 8006404:	080064c1 	.word	0x080064c1
 8006408:	080064c1 	.word	0x080064c1
 800640c:	08006499 	.word	0x08006499
 8006410:	080064c1 	.word	0x080064c1
 8006414:	080064c1 	.word	0x080064c1
 8006418:	080064c1 	.word	0x080064c1
 800641c:	080064c1 	.word	0x080064c1
 8006420:	080064c1 	.word	0x080064c1
 8006424:	080064c1 	.word	0x080064c1
 8006428:	080064c1 	.word	0x080064c1
 800642c:	080064a1 	.word	0x080064a1
 8006430:	080064c1 	.word	0x080064c1
 8006434:	080064c1 	.word	0x080064c1
 8006438:	080064c1 	.word	0x080064c1
 800643c:	080064c1 	.word	0x080064c1
 8006440:	080064c1 	.word	0x080064c1
 8006444:	080064c1 	.word	0x080064c1
 8006448:	080064c1 	.word	0x080064c1
 800644c:	080064a9 	.word	0x080064a9
 8006450:	080064c1 	.word	0x080064c1
 8006454:	080064c1 	.word	0x080064c1
 8006458:	080064c1 	.word	0x080064c1
 800645c:	080064c1 	.word	0x080064c1
 8006460:	080064c1 	.word	0x080064c1
 8006464:	080064c1 	.word	0x080064c1
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064b1 	.word	0x080064b1
 8006470:	080064c1 	.word	0x080064c1
 8006474:	080064c1 	.word	0x080064c1
 8006478:	080064c1 	.word	0x080064c1
 800647c:	080064c1 	.word	0x080064c1
 8006480:	080064c1 	.word	0x080064c1
 8006484:	080064c1 	.word	0x080064c1
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	2301      	movs	r3, #1
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e0bc      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006498:	2304      	movs	r3, #4
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e0b8      	b.n	8006612 <UART_SetConfig+0x5a6>
 80064a0:	2308      	movs	r3, #8
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e0b4      	b.n	8006612 <UART_SetConfig+0x5a6>
 80064a8:	2310      	movs	r3, #16
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e0b0      	b.n	8006612 <UART_SetConfig+0x5a6>
 80064b0:	2320      	movs	r3, #32
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e0ac      	b.n	8006612 <UART_SetConfig+0x5a6>
 80064b8:	2340      	movs	r3, #64	; 0x40
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e0a8      	b.n	8006612 <UART_SetConfig+0x5a6>
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e0a4      	b.n	8006612 <UART_SetConfig+0x5a6>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a8f      	ldr	r2, [pc, #572]	; (800670c <UART_SetConfig+0x6a0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d130      	bne.n	8006534 <UART_SetConfig+0x4c8>
 80064d2:	4b8d      	ldr	r3, [pc, #564]	; (8006708 <UART_SetConfig+0x69c>)
 80064d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d826      	bhi.n	800652c <UART_SetConfig+0x4c0>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x478>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064fd 	.word	0x080064fd
 80064e8:	08006505 	.word	0x08006505
 80064ec:	0800650d 	.word	0x0800650d
 80064f0:	08006515 	.word	0x08006515
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006525 	.word	0x08006525
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e086      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006504:	2304      	movs	r3, #4
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e082      	b.n	8006612 <UART_SetConfig+0x5a6>
 800650c:	2308      	movs	r3, #8
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e07e      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006514:	2310      	movs	r3, #16
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e07a      	b.n	8006612 <UART_SetConfig+0x5a6>
 800651c:	2320      	movs	r3, #32
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e076      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006524:	2340      	movs	r3, #64	; 0x40
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e072      	b.n	8006612 <UART_SetConfig+0x5a6>
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e06e      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a75      	ldr	r2, [pc, #468]	; (8006710 <UART_SetConfig+0x6a4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d130      	bne.n	80065a0 <UART_SetConfig+0x534>
 800653e:	4b72      	ldr	r3, [pc, #456]	; (8006708 <UART_SetConfig+0x69c>)
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b05      	cmp	r3, #5
 8006548:	d826      	bhi.n	8006598 <UART_SetConfig+0x52c>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0x4e4>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006569 	.word	0x08006569
 8006554:	08006571 	.word	0x08006571
 8006558:	08006579 	.word	0x08006579
 800655c:	08006581 	.word	0x08006581
 8006560:	08006589 	.word	0x08006589
 8006564:	08006591 	.word	0x08006591
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e050      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006570:	2304      	movs	r3, #4
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e04c      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006578:	2308      	movs	r3, #8
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e048      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e044      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006588:	2320      	movs	r3, #32
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e040      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006590:	2340      	movs	r3, #64	; 0x40
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e03c      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e038      	b.n	8006612 <UART_SetConfig+0x5a6>
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5b      	ldr	r2, [pc, #364]	; (8006714 <UART_SetConfig+0x6a8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d130      	bne.n	800660c <UART_SetConfig+0x5a0>
 80065aa:	4b57      	ldr	r3, [pc, #348]	; (8006708 <UART_SetConfig+0x69c>)
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d826      	bhi.n	8006604 <UART_SetConfig+0x598>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0x550>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065d5 	.word	0x080065d5
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065e5 	.word	0x080065e5
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	2302      	movs	r3, #2
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065da:	e01a      	b.n	8006612 <UART_SetConfig+0x5a6>
 80065dc:	2304      	movs	r3, #4
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e2:	e016      	b.n	8006612 <UART_SetConfig+0x5a6>
 80065e4:	2308      	movs	r3, #8
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ea:	e012      	b.n	8006612 <UART_SetConfig+0x5a6>
 80065ec:	2310      	movs	r3, #16
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e00e      	b.n	8006612 <UART_SetConfig+0x5a6>
 80065f4:	2320      	movs	r3, #32
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e00a      	b.n	8006612 <UART_SetConfig+0x5a6>
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e006      	b.n	8006612 <UART_SetConfig+0x5a6>
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e002      	b.n	8006612 <UART_SetConfig+0x5a6>
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <UART_SetConfig+0x6a8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	f040 80f8 	bne.w	800680e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800661e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006622:	2b20      	cmp	r3, #32
 8006624:	dc46      	bgt.n	80066b4 <UART_SetConfig+0x648>
 8006626:	2b02      	cmp	r3, #2
 8006628:	f2c0 8082 	blt.w	8006730 <UART_SetConfig+0x6c4>
 800662c:	3b02      	subs	r3, #2
 800662e:	2b1e      	cmp	r3, #30
 8006630:	d87e      	bhi.n	8006730 <UART_SetConfig+0x6c4>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x5cc>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	080066bb 	.word	0x080066bb
 800663c:	08006731 	.word	0x08006731
 8006640:	080066c3 	.word	0x080066c3
 8006644:	08006731 	.word	0x08006731
 8006648:	08006731 	.word	0x08006731
 800664c:	08006731 	.word	0x08006731
 8006650:	080066d3 	.word	0x080066d3
 8006654:	08006731 	.word	0x08006731
 8006658:	08006731 	.word	0x08006731
 800665c:	08006731 	.word	0x08006731
 8006660:	08006731 	.word	0x08006731
 8006664:	08006731 	.word	0x08006731
 8006668:	08006731 	.word	0x08006731
 800666c:	08006731 	.word	0x08006731
 8006670:	080066e3 	.word	0x080066e3
 8006674:	08006731 	.word	0x08006731
 8006678:	08006731 	.word	0x08006731
 800667c:	08006731 	.word	0x08006731
 8006680:	08006731 	.word	0x08006731
 8006684:	08006731 	.word	0x08006731
 8006688:	08006731 	.word	0x08006731
 800668c:	08006731 	.word	0x08006731
 8006690:	08006731 	.word	0x08006731
 8006694:	08006731 	.word	0x08006731
 8006698:	08006731 	.word	0x08006731
 800669c:	08006731 	.word	0x08006731
 80066a0:	08006731 	.word	0x08006731
 80066a4:	08006731 	.word	0x08006731
 80066a8:	08006731 	.word	0x08006731
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006723 	.word	0x08006723
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d037      	beq.n	8006728 <UART_SetConfig+0x6bc>
 80066b8:	e03a      	b.n	8006730 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80066ba:	f7fe fc49 	bl	8004f50 <HAL_RCCEx_GetD3PCLK1Freq>
 80066be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066c0:	e03c      	b.n	800673c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fc58 	bl	8004f7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066d0:	e034      	b.n	800673c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d2:	f107 0318 	add.w	r3, r7, #24
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fda4 	bl	8005224 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066e0:	e02c      	b.n	800673c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <UART_SetConfig+0x69c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <UART_SetConfig+0x69c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	08db      	lsrs	r3, r3, #3
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	4a07      	ldr	r2, [pc, #28]	; (8006718 <UART_SetConfig+0x6ac>)
 80066fa:	fa22 f303 	lsr.w	r3, r2, r3
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006700:	e01c      	b.n	800673c <UART_SetConfig+0x6d0>
 8006702:	bf00      	nop
 8006704:	40011400 	.word	0x40011400
 8006708:	58024400 	.word	0x58024400
 800670c:	40007800 	.word	0x40007800
 8006710:	40007c00 	.word	0x40007c00
 8006714:	58000c00 	.word	0x58000c00
 8006718:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800671c:	4b9d      	ldr	r3, [pc, #628]	; (8006994 <UART_SetConfig+0x928>)
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006720:	e00c      	b.n	800673c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006722:	4b9d      	ldr	r3, [pc, #628]	; (8006998 <UART_SetConfig+0x92c>)
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006726:	e009      	b.n	800673c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800672e:	e005      	b.n	800673c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800673a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 81de 	beq.w	8006b00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	4a94      	ldr	r2, [pc, #592]	; (800699c <UART_SetConfig+0x930>)
 800674a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674e:	461a      	mov	r2, r3
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	fbb3 f3f2 	udiv	r3, r3, r2
 8006756:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	4413      	add	r3, r2
 8006762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006764:	429a      	cmp	r2, r3
 8006766:	d305      	bcc.n	8006774 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800676e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800677a:	e1c1      	b.n	8006b00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	2200      	movs	r2, #0
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	60fa      	str	r2, [r7, #12]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	4a84      	ldr	r2, [pc, #528]	; (800699c <UART_SetConfig+0x930>)
 800678a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678e:	b29b      	uxth	r3, r3
 8006790:	2200      	movs	r2, #0
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800679e:	f7f9 fdf7 	bl	8000390 <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	020b      	lsls	r3, r1, #8
 80067b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067b8:	0202      	lsls	r2, r0, #8
 80067ba:	6979      	ldr	r1, [r7, #20]
 80067bc:	6849      	ldr	r1, [r1, #4]
 80067be:	0849      	lsrs	r1, r1, #1
 80067c0:	2000      	movs	r0, #0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4605      	mov	r5, r0
 80067c6:	eb12 0804 	adds.w	r8, r2, r4
 80067ca:	eb43 0905 	adc.w	r9, r3, r5
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	469a      	mov	sl, r3
 80067d6:	4693      	mov	fp, r2
 80067d8:	4652      	mov	r2, sl
 80067da:	465b      	mov	r3, fp
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7f9 fdd6 	bl	8000390 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f2:	d308      	bcc.n	8006806 <UART_SetConfig+0x79a>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fa:	d204      	bcs.n	8006806 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e17c      	b.n	8006b00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800680c:	e178      	b.n	8006b00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006816:	f040 80c5 	bne.w	80069a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800681a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800681e:	2b20      	cmp	r3, #32
 8006820:	dc48      	bgt.n	80068b4 <UART_SetConfig+0x848>
 8006822:	2b00      	cmp	r3, #0
 8006824:	db7b      	blt.n	800691e <UART_SetConfig+0x8b2>
 8006826:	2b20      	cmp	r3, #32
 8006828:	d879      	bhi.n	800691e <UART_SetConfig+0x8b2>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <UART_SetConfig+0x7c4>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	080068bb 	.word	0x080068bb
 8006834:	080068c3 	.word	0x080068c3
 8006838:	0800691f 	.word	0x0800691f
 800683c:	0800691f 	.word	0x0800691f
 8006840:	080068cb 	.word	0x080068cb
 8006844:	0800691f 	.word	0x0800691f
 8006848:	0800691f 	.word	0x0800691f
 800684c:	0800691f 	.word	0x0800691f
 8006850:	080068db 	.word	0x080068db
 8006854:	0800691f 	.word	0x0800691f
 8006858:	0800691f 	.word	0x0800691f
 800685c:	0800691f 	.word	0x0800691f
 8006860:	0800691f 	.word	0x0800691f
 8006864:	0800691f 	.word	0x0800691f
 8006868:	0800691f 	.word	0x0800691f
 800686c:	0800691f 	.word	0x0800691f
 8006870:	080068eb 	.word	0x080068eb
 8006874:	0800691f 	.word	0x0800691f
 8006878:	0800691f 	.word	0x0800691f
 800687c:	0800691f 	.word	0x0800691f
 8006880:	0800691f 	.word	0x0800691f
 8006884:	0800691f 	.word	0x0800691f
 8006888:	0800691f 	.word	0x0800691f
 800688c:	0800691f 	.word	0x0800691f
 8006890:	0800691f 	.word	0x0800691f
 8006894:	0800691f 	.word	0x0800691f
 8006898:	0800691f 	.word	0x0800691f
 800689c:	0800691f 	.word	0x0800691f
 80068a0:	0800691f 	.word	0x0800691f
 80068a4:	0800691f 	.word	0x0800691f
 80068a8:	0800691f 	.word	0x0800691f
 80068ac:	0800691f 	.word	0x0800691f
 80068b0:	08006911 	.word	0x08006911
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d02e      	beq.n	8006916 <UART_SetConfig+0x8aa>
 80068b8:	e031      	b.n	800691e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ba:	f7fd f913 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 80068be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068c0:	e033      	b.n	800692a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c2:	f7fd f925 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 80068c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068c8:	e02f      	b.n	800692a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe fb54 	bl	8004f7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d8:	e027      	b.n	800692a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068da:	f107 0318 	add.w	r3, r7, #24
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fca0 	bl	8005224 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e8:	e01f      	b.n	800692a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ea:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <UART_SetConfig+0x934>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068f6:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <UART_SetConfig+0x934>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	08db      	lsrs	r3, r3, #3
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <UART_SetConfig+0x928>)
 8006902:	fa22 f303 	lsr.w	r3, r2, r3
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006908:	e00f      	b.n	800692a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800690a:	4b22      	ldr	r3, [pc, #136]	; (8006994 <UART_SetConfig+0x928>)
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800690e:	e00c      	b.n	800692a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006910:	4b21      	ldr	r3, [pc, #132]	; (8006998 <UART_SetConfig+0x92c>)
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006914:	e009      	b.n	800692a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691c:	e005      	b.n	800692a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006928:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800692a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80e7 	beq.w	8006b00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	4a19      	ldr	r2, [pc, #100]	; (800699c <UART_SetConfig+0x930>)
 8006938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800693c:	461a      	mov	r2, r3
 800693e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006940:	fbb3 f3f2 	udiv	r3, r3, r2
 8006944:	005a      	lsls	r2, r3, #1
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	441a      	add	r2, r3
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	2b0f      	cmp	r3, #15
 800695c:	d916      	bls.n	800698c <UART_SetConfig+0x920>
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d212      	bcs.n	800698c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	b29b      	uxth	r3, r3
 800696a:	f023 030f 	bic.w	r3, r3, #15
 800696e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	b29a      	uxth	r2, r3
 800697c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800697e:	4313      	orrs	r3, r2
 8006980:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	e0b9      	b.n	8006b00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006992:	e0b5      	b.n	8006b00 <UART_SetConfig+0xa94>
 8006994:	03d09000 	.word	0x03d09000
 8006998:	003d0900 	.word	0x003d0900
 800699c:	08008144 	.word	0x08008144
 80069a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80069a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	dc49      	bgt.n	8006a40 <UART_SetConfig+0x9d4>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db7c      	blt.n	8006aaa <UART_SetConfig+0xa3e>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d87a      	bhi.n	8006aaa <UART_SetConfig+0xa3e>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0x950>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	08006a47 	.word	0x08006a47
 80069c0:	08006a4f 	.word	0x08006a4f
 80069c4:	08006aab 	.word	0x08006aab
 80069c8:	08006aab 	.word	0x08006aab
 80069cc:	08006a57 	.word	0x08006a57
 80069d0:	08006aab 	.word	0x08006aab
 80069d4:	08006aab 	.word	0x08006aab
 80069d8:	08006aab 	.word	0x08006aab
 80069dc:	08006a67 	.word	0x08006a67
 80069e0:	08006aab 	.word	0x08006aab
 80069e4:	08006aab 	.word	0x08006aab
 80069e8:	08006aab 	.word	0x08006aab
 80069ec:	08006aab 	.word	0x08006aab
 80069f0:	08006aab 	.word	0x08006aab
 80069f4:	08006aab 	.word	0x08006aab
 80069f8:	08006aab 	.word	0x08006aab
 80069fc:	08006a77 	.word	0x08006a77
 8006a00:	08006aab 	.word	0x08006aab
 8006a04:	08006aab 	.word	0x08006aab
 8006a08:	08006aab 	.word	0x08006aab
 8006a0c:	08006aab 	.word	0x08006aab
 8006a10:	08006aab 	.word	0x08006aab
 8006a14:	08006aab 	.word	0x08006aab
 8006a18:	08006aab 	.word	0x08006aab
 8006a1c:	08006aab 	.word	0x08006aab
 8006a20:	08006aab 	.word	0x08006aab
 8006a24:	08006aab 	.word	0x08006aab
 8006a28:	08006aab 	.word	0x08006aab
 8006a2c:	08006aab 	.word	0x08006aab
 8006a30:	08006aab 	.word	0x08006aab
 8006a34:	08006aab 	.word	0x08006aab
 8006a38:	08006aab 	.word	0x08006aab
 8006a3c:	08006a9d 	.word	0x08006a9d
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d02e      	beq.n	8006aa2 <UART_SetConfig+0xa36>
 8006a44:	e031      	b.n	8006aaa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a46:	f7fd f84d 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8006a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a4c:	e033      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a4e:	f7fd f85f 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8006a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a54:	e02f      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fa8e 	bl	8004f7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a64:	e027      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a66:	f107 0318 	add.w	r3, r7, #24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe fbda 	bl	8005224 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a74:	e01f      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a76:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <UART_SetConfig+0xac0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <UART_SetConfig+0xac0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <UART_SetConfig+0xac4>)
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a94:	e00f      	b.n	8006ab6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006a96:	4b26      	ldr	r3, [pc, #152]	; (8006b30 <UART_SetConfig+0xac4>)
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a9a:	e00c      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a9c:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <UART_SetConfig+0xac8>)
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa0:	e009      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa8:	e005      	b.n	8006ab6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ab4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d021      	beq.n	8006b00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <UART_SetConfig+0xacc>)
 8006ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	441a      	add	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b0f      	cmp	r3, #15
 8006ae4:	d909      	bls.n	8006afa <UART_SetConfig+0xa8e>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aec:	d205      	bcs.n	8006afa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60da      	str	r2, [r3, #12]
 8006af8:	e002      	b.n	8006b00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006b1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3748      	adds	r7, #72	; 0x48
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b2a:	bf00      	nop
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	03d09000 	.word	0x03d09000
 8006b34:	003d0900 	.word	0x003d0900
 8006b38:	08008144 	.word	0x08008144

08006b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3a:	d10a      	bne.n	8006c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b098      	sub	sp, #96	; 0x60
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c90:	f7fa fd78 	bl	8001784 <HAL_GetTick>
 8006c94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d12f      	bne.n	8006d04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cac:	2200      	movs	r2, #0
 8006cae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f88e 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d022      	beq.n	8006d04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e063      	b.n	8006dcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d149      	bne.n	8006da6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f857 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d03c      	beq.n	8006da6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	623b      	str	r3, [r7, #32]
   return(result);
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e6      	bne.n	8006d2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3308      	adds	r3, #8
 8006d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d7e:	61fa      	str	r2, [r7, #28]
 8006d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	69b9      	ldr	r1, [r7, #24]
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e5      	bne.n	8006d5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e012      	b.n	8006dcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3758      	adds	r7, #88	; 0x58
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de4:	e049      	b.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d045      	beq.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fa fcc9 	bl	8001784 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e048      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d031      	beq.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d110      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f839 	bl	8006ea4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2208      	movs	r2, #8
 8006e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e029      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e54:	d111      	bne.n	8006e7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f81f 	bl	8006ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e00f      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4013      	ands	r3, r2
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	bf0c      	ite	eq
 8006e8a:	2301      	moveq	r3, #1
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d0a6      	beq.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b095      	sub	sp, #84	; 0x54
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eca:	643b      	str	r3, [r7, #64]	; 0x40
 8006ecc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e6      	bne.n	8006eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	4b1e      	ldr	r3, [pc, #120]	; (8006f6c <UART_EndRxTransfer+0xc8>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e5      	bne.n	8006ede <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d118      	bne.n	8006f4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6979      	ldr	r1, [r7, #20]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	613b      	str	r3, [r7, #16]
   return(result);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e6      	bne.n	8006f1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006f60:	bf00      	nop
 8006f62:	3754      	adds	r7, #84	; 0x54
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	effffffe 	.word	0xeffffffe

08006f70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e027      	b.n	8006fd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2224      	movs	r2, #36	; 0x24
 8006f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e02d      	b.n	8007056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2224      	movs	r2, #36	; 0x24
 8007006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0201 	bic.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f850 	bl	80070dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007072:	2302      	movs	r3, #2
 8007074:	e02d      	b.n	80070d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2224      	movs	r2, #36	; 0x24
 8007082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f812 	bl	80070dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070fc:	e031      	b.n	8007162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070fe:	2310      	movs	r3, #16
 8007100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007102:	2310      	movs	r3, #16
 8007104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	0e5b      	lsrs	r3, r3, #25
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	0f5b      	lsrs	r3, r3, #29
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	7b3a      	ldrb	r2, [r7, #12]
 800712a:	4911      	ldr	r1, [pc, #68]	; (8007170 <UARTEx_SetNbDataToProcess+0x94>)
 800712c:	5c8a      	ldrb	r2, [r1, r2]
 800712e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007132:	7b3a      	ldrb	r2, [r7, #12]
 8007134:	490f      	ldr	r1, [pc, #60]	; (8007174 <UARTEx_SetNbDataToProcess+0x98>)
 8007136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007138:	fb93 f3f2 	sdiv	r3, r3, r2
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	7b7a      	ldrb	r2, [r7, #13]
 8007148:	4909      	ldr	r1, [pc, #36]	; (8007170 <UARTEx_SetNbDataToProcess+0x94>)
 800714a:	5c8a      	ldrb	r2, [r1, r2]
 800714c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007150:	7b7a      	ldrb	r2, [r7, #13]
 8007152:	4908      	ldr	r1, [pc, #32]	; (8007174 <UARTEx_SetNbDataToProcess+0x98>)
 8007154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007156:	fb93 f3f2 	sdiv	r3, r3, r2
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	0800815c 	.word	0x0800815c
 8007174:	08008164 	.word	0x08008164

08007178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007178:	b084      	sub	sp, #16
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	f107 001c 	add.w	r0, r7, #28
 8007186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	2b01      	cmp	r3, #1
 800718e:	d120      	bne.n	80071d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	4b2a      	ldr	r3, [pc, #168]	; (800724c <USB_CoreInit+0xd4>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d105      	bne.n	80071c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 faac 	bl	8007724 <USB_CoreReset>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e01a      	b.n	8007208 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 faa0 	bl	8007724 <USB_CoreReset>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
 80071fa:	e005      	b.n	8007208 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2b01      	cmp	r3, #1
 800720c:	d116      	bne.n	800723c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <USB_CoreInit+0xd8>)
 800721e:	4313      	orrs	r3, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f043 0206 	orr.w	r2, r3, #6
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007248:	b004      	add	sp, #16
 800724a:	4770      	bx	lr
 800724c:	ffbdffbf 	.word	0xffbdffbf
 8007250:	03ee0000 	.word	0x03ee0000

08007254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 0201 	bic.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d115      	bne.n	80072c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072a4:	2001      	movs	r0, #1
 80072a6:	f7fa fa79 	bl	800179c <HAL_Delay>
      ms++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa29 	bl	8007708 <USB_GetMode>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d01e      	beq.n	80072fa <USB_SetCurrentMode+0x84>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b31      	cmp	r3, #49	; 0x31
 80072c0:	d9f0      	bls.n	80072a4 <USB_SetCurrentMode+0x2e>
 80072c2:	e01a      	b.n	80072fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d115      	bne.n	80072f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072d6:	2001      	movs	r0, #1
 80072d8:	f7fa fa60 	bl	800179c <HAL_Delay>
      ms++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa10 	bl	8007708 <USB_GetMode>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <USB_SetCurrentMode+0x84>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b31      	cmp	r3, #49	; 0x31
 80072f2:	d9f0      	bls.n	80072d6 <USB_SetCurrentMode+0x60>
 80072f4:	e001      	b.n	80072fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e005      	b.n	8007306 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b32      	cmp	r3, #50	; 0x32
 80072fe:	d101      	bne.n	8007304 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007310:	b084      	sub	sp, #16
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800731e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e009      	b.n	8007344 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3340      	adds	r3, #64	; 0x40
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3301      	adds	r3, #1
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b0e      	cmp	r3, #14
 8007348:	d9f2      	bls.n	8007330 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800734a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d11c      	bne.n	800738a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735e:	f043 0302 	orr.w	r3, r3, #2
 8007362:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e005      	b.n	8007396 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800739c:	461a      	mov	r2, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	4619      	mov	r1, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b0:	461a      	mov	r2, r3
 80073b2:	680b      	ldr	r3, [r1, #0]
 80073b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10c      	bne.n	80073d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073c2:	2100      	movs	r1, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f965 	bl	8007694 <USB_SetDevSpeed>
 80073ca:	e008      	b.n	80073de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073cc:	2101      	movs	r1, #1
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f960 	bl	8007694 <USB_SetDevSpeed>
 80073d4:	e003      	b.n	80073de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073d6:	2103      	movs	r1, #3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f95b 	bl	8007694 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073de:	2110      	movs	r1, #16
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8f3 	bl	80075cc <USB_FlushTxFifo>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f91f 	bl	8007634 <USB_FlushRxFifo>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007406:	461a      	mov	r2, r3
 8007408:	2300      	movs	r3, #0
 800740a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	461a      	mov	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	e043      	b.n	80074b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800743c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007440:	d118      	bne.n	8007474 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	461a      	mov	r2, r3
 8007456:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	e013      	b.n	8007486 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	461a      	mov	r2, r3
 800746c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	e008      	b.n	8007486 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	461a      	mov	r2, r3
 8007482:	2300      	movs	r3, #0
 8007484:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007492:	461a      	mov	r2, r3
 8007494:	2300      	movs	r3, #0
 8007496:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	461a      	mov	r2, r3
 80074a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	3301      	adds	r3, #1
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d3b7      	bcc.n	800742a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	e043      	b.n	8007548 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d6:	d118      	bne.n	800750a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ea:	461a      	mov	r2, r3
 80074ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e013      	b.n	800751c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e008      	b.n	800751c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	461a      	mov	r2, r3
 8007518:	2300      	movs	r3, #0
 800751a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	461a      	mov	r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	461a      	mov	r2, r3
 800753c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007540:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3301      	adds	r3, #1
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	d3b7      	bcc.n	80074c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800755e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007562:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007570:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f043 0210 	orr.w	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <USB_DevInit+0x2b4>)
 800758a:	4313      	orrs	r3, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f043 0208 	orr.w	r2, r3, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d105      	bne.n	80075b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <USB_DevInit+0x2b8>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c0:	b004      	add	sp, #16
 80075c2:	4770      	bx	lr
 80075c4:	803c3800 	.word	0x803c3800
 80075c8:	40000004 	.word	0x40000004

080075cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4a13      	ldr	r2, [pc, #76]	; (8007630 <USB_FlushTxFifo+0x64>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e01b      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	daf2      	bge.n	80075da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	019b      	lsls	r3, r3, #6
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a08      	ldr	r2, [pc, #32]	; (8007630 <USB_FlushTxFifo+0x64>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e006      	b.n	8007624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b20      	cmp	r3, #32
 8007620:	d0f0      	beq.n	8007604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	00030d40 	.word	0x00030d40

08007634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4a11      	ldr	r2, [pc, #68]	; (8007690 <USB_FlushRxFifo+0x5c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d901      	bls.n	8007652 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e018      	b.n	8007684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	daf2      	bge.n	8007640 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2210      	movs	r2, #16
 8007662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <USB_FlushRxFifo+0x5c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e006      	b.n	8007684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d0f0      	beq.n	8007664 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	00030d40 	.word	0x00030d40

08007694 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b4:	4313      	orrs	r3, r2
 80076b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076e0:	f023 0303 	bic.w	r3, r3, #3
 80076e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f4:	f043 0302 	orr.w	r3, r3, #2
 80076f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f003 0301 	and.w	r3, r3, #1
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <USB_CoreReset+0x64>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e01b      	b.n	800777a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	daf2      	bge.n	8007730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f043 0201 	orr.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <USB_CoreReset+0x64>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d901      	bls.n	800776c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e006      	b.n	800777a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d0f0      	beq.n	800775a <USB_CoreReset+0x36>

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	00030d40 	.word	0x00030d40

0800778c <siprintf>:
 800778c:	b40e      	push	{r1, r2, r3}
 800778e:	b500      	push	{lr}
 8007790:	b09c      	sub	sp, #112	; 0x70
 8007792:	ab1d      	add	r3, sp, #116	; 0x74
 8007794:	9002      	str	r0, [sp, #8]
 8007796:	9006      	str	r0, [sp, #24]
 8007798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800779c:	4809      	ldr	r0, [pc, #36]	; (80077c4 <siprintf+0x38>)
 800779e:	9107      	str	r1, [sp, #28]
 80077a0:	9104      	str	r1, [sp, #16]
 80077a2:	4909      	ldr	r1, [pc, #36]	; (80077c8 <siprintf+0x3c>)
 80077a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a8:	9105      	str	r1, [sp, #20]
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	a902      	add	r1, sp, #8
 80077b0:	f000 f992 	bl	8007ad8 <_svfiprintf_r>
 80077b4:	9b02      	ldr	r3, [sp, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	b01c      	add	sp, #112	; 0x70
 80077bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c0:	b003      	add	sp, #12
 80077c2:	4770      	bx	lr
 80077c4:	24000064 	.word	0x24000064
 80077c8:	ffff0208 	.word	0xffff0208

080077cc <memset>:
 80077cc:	4402      	add	r2, r0
 80077ce:	4603      	mov	r3, r0
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d100      	bne.n	80077d6 <memset+0xa>
 80077d4:	4770      	bx	lr
 80077d6:	f803 1b01 	strb.w	r1, [r3], #1
 80077da:	e7f9      	b.n	80077d0 <memset+0x4>

080077dc <__errno>:
 80077dc:	4b01      	ldr	r3, [pc, #4]	; (80077e4 <__errno+0x8>)
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	24000064 	.word	0x24000064

080077e8 <__libc_init_array>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	4d0d      	ldr	r5, [pc, #52]	; (8007820 <__libc_init_array+0x38>)
 80077ec:	4c0d      	ldr	r4, [pc, #52]	; (8007824 <__libc_init_array+0x3c>)
 80077ee:	1b64      	subs	r4, r4, r5
 80077f0:	10a4      	asrs	r4, r4, #2
 80077f2:	2600      	movs	r6, #0
 80077f4:	42a6      	cmp	r6, r4
 80077f6:	d109      	bne.n	800780c <__libc_init_array+0x24>
 80077f8:	4d0b      	ldr	r5, [pc, #44]	; (8007828 <__libc_init_array+0x40>)
 80077fa:	4c0c      	ldr	r4, [pc, #48]	; (800782c <__libc_init_array+0x44>)
 80077fc:	f000 fc6a 	bl	80080d4 <_init>
 8007800:	1b64      	subs	r4, r4, r5
 8007802:	10a4      	asrs	r4, r4, #2
 8007804:	2600      	movs	r6, #0
 8007806:	42a6      	cmp	r6, r4
 8007808:	d105      	bne.n	8007816 <__libc_init_array+0x2e>
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007810:	4798      	blx	r3
 8007812:	3601      	adds	r6, #1
 8007814:	e7ee      	b.n	80077f4 <__libc_init_array+0xc>
 8007816:	f855 3b04 	ldr.w	r3, [r5], #4
 800781a:	4798      	blx	r3
 800781c:	3601      	adds	r6, #1
 800781e:	e7f2      	b.n	8007806 <__libc_init_array+0x1e>
 8007820:	080081a8 	.word	0x080081a8
 8007824:	080081a8 	.word	0x080081a8
 8007828:	080081a8 	.word	0x080081a8
 800782c:	080081ac 	.word	0x080081ac

08007830 <__retarget_lock_acquire_recursive>:
 8007830:	4770      	bx	lr

08007832 <__retarget_lock_release_recursive>:
 8007832:	4770      	bx	lr

08007834 <_free_r>:
 8007834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007836:	2900      	cmp	r1, #0
 8007838:	d044      	beq.n	80078c4 <_free_r+0x90>
 800783a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783e:	9001      	str	r0, [sp, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f1a1 0404 	sub.w	r4, r1, #4
 8007846:	bfb8      	it	lt
 8007848:	18e4      	addlt	r4, r4, r3
 800784a:	f000 f8df 	bl	8007a0c <__malloc_lock>
 800784e:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <_free_r+0x94>)
 8007850:	9801      	ldr	r0, [sp, #4]
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	b933      	cbnz	r3, 8007864 <_free_r+0x30>
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	6014      	str	r4, [r2, #0]
 800785a:	b003      	add	sp, #12
 800785c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007860:	f000 b8da 	b.w	8007a18 <__malloc_unlock>
 8007864:	42a3      	cmp	r3, r4
 8007866:	d908      	bls.n	800787a <_free_r+0x46>
 8007868:	6825      	ldr	r5, [r4, #0]
 800786a:	1961      	adds	r1, r4, r5
 800786c:	428b      	cmp	r3, r1
 800786e:	bf01      	itttt	eq
 8007870:	6819      	ldreq	r1, [r3, #0]
 8007872:	685b      	ldreq	r3, [r3, #4]
 8007874:	1949      	addeq	r1, r1, r5
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	e7ed      	b.n	8007856 <_free_r+0x22>
 800787a:	461a      	mov	r2, r3
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b10b      	cbz	r3, 8007884 <_free_r+0x50>
 8007880:	42a3      	cmp	r3, r4
 8007882:	d9fa      	bls.n	800787a <_free_r+0x46>
 8007884:	6811      	ldr	r1, [r2, #0]
 8007886:	1855      	adds	r5, r2, r1
 8007888:	42a5      	cmp	r5, r4
 800788a:	d10b      	bne.n	80078a4 <_free_r+0x70>
 800788c:	6824      	ldr	r4, [r4, #0]
 800788e:	4421      	add	r1, r4
 8007890:	1854      	adds	r4, r2, r1
 8007892:	42a3      	cmp	r3, r4
 8007894:	6011      	str	r1, [r2, #0]
 8007896:	d1e0      	bne.n	800785a <_free_r+0x26>
 8007898:	681c      	ldr	r4, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	6053      	str	r3, [r2, #4]
 800789e:	440c      	add	r4, r1
 80078a0:	6014      	str	r4, [r2, #0]
 80078a2:	e7da      	b.n	800785a <_free_r+0x26>
 80078a4:	d902      	bls.n	80078ac <_free_r+0x78>
 80078a6:	230c      	movs	r3, #12
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	e7d6      	b.n	800785a <_free_r+0x26>
 80078ac:	6825      	ldr	r5, [r4, #0]
 80078ae:	1961      	adds	r1, r4, r5
 80078b0:	428b      	cmp	r3, r1
 80078b2:	bf04      	itt	eq
 80078b4:	6819      	ldreq	r1, [r3, #0]
 80078b6:	685b      	ldreq	r3, [r3, #4]
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	bf04      	itt	eq
 80078bc:	1949      	addeq	r1, r1, r5
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	6054      	str	r4, [r2, #4]
 80078c2:	e7ca      	b.n	800785a <_free_r+0x26>
 80078c4:	b003      	add	sp, #12
 80078c6:	bd30      	pop	{r4, r5, pc}
 80078c8:	24000b50 	.word	0x24000b50

080078cc <sbrk_aligned>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4e0e      	ldr	r6, [pc, #56]	; (8007908 <sbrk_aligned+0x3c>)
 80078d0:	460c      	mov	r4, r1
 80078d2:	6831      	ldr	r1, [r6, #0]
 80078d4:	4605      	mov	r5, r0
 80078d6:	b911      	cbnz	r1, 80078de <sbrk_aligned+0x12>
 80078d8:	f000 fba6 	bl	8008028 <_sbrk_r>
 80078dc:	6030      	str	r0, [r6, #0]
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 fba1 	bl	8008028 <_sbrk_r>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	d00a      	beq.n	8007900 <sbrk_aligned+0x34>
 80078ea:	1cc4      	adds	r4, r0, #3
 80078ec:	f024 0403 	bic.w	r4, r4, #3
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d007      	beq.n	8007904 <sbrk_aligned+0x38>
 80078f4:	1a21      	subs	r1, r4, r0
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fb96 	bl	8008028 <_sbrk_r>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d101      	bne.n	8007904 <sbrk_aligned+0x38>
 8007900:	f04f 34ff 	mov.w	r4, #4294967295
 8007904:	4620      	mov	r0, r4
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	24000b54 	.word	0x24000b54

0800790c <_malloc_r>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	1ccd      	adds	r5, r1, #3
 8007912:	f025 0503 	bic.w	r5, r5, #3
 8007916:	3508      	adds	r5, #8
 8007918:	2d0c      	cmp	r5, #12
 800791a:	bf38      	it	cc
 800791c:	250c      	movcc	r5, #12
 800791e:	2d00      	cmp	r5, #0
 8007920:	4607      	mov	r7, r0
 8007922:	db01      	blt.n	8007928 <_malloc_r+0x1c>
 8007924:	42a9      	cmp	r1, r5
 8007926:	d905      	bls.n	8007934 <_malloc_r+0x28>
 8007928:	230c      	movs	r3, #12
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	2600      	movs	r6, #0
 800792e:	4630      	mov	r0, r6
 8007930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a08 <_malloc_r+0xfc>
 8007938:	f000 f868 	bl	8007a0c <__malloc_lock>
 800793c:	f8d8 3000 	ldr.w	r3, [r8]
 8007940:	461c      	mov	r4, r3
 8007942:	bb5c      	cbnz	r4, 800799c <_malloc_r+0x90>
 8007944:	4629      	mov	r1, r5
 8007946:	4638      	mov	r0, r7
 8007948:	f7ff ffc0 	bl	80078cc <sbrk_aligned>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	4604      	mov	r4, r0
 8007950:	d155      	bne.n	80079fe <_malloc_r+0xf2>
 8007952:	f8d8 4000 	ldr.w	r4, [r8]
 8007956:	4626      	mov	r6, r4
 8007958:	2e00      	cmp	r6, #0
 800795a:	d145      	bne.n	80079e8 <_malloc_r+0xdc>
 800795c:	2c00      	cmp	r4, #0
 800795e:	d048      	beq.n	80079f2 <_malloc_r+0xe6>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	4631      	mov	r1, r6
 8007964:	4638      	mov	r0, r7
 8007966:	eb04 0903 	add.w	r9, r4, r3
 800796a:	f000 fb5d 	bl	8008028 <_sbrk_r>
 800796e:	4581      	cmp	r9, r0
 8007970:	d13f      	bne.n	80079f2 <_malloc_r+0xe6>
 8007972:	6821      	ldr	r1, [r4, #0]
 8007974:	1a6d      	subs	r5, r5, r1
 8007976:	4629      	mov	r1, r5
 8007978:	4638      	mov	r0, r7
 800797a:	f7ff ffa7 	bl	80078cc <sbrk_aligned>
 800797e:	3001      	adds	r0, #1
 8007980:	d037      	beq.n	80079f2 <_malloc_r+0xe6>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	442b      	add	r3, r5
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	f8d8 3000 	ldr.w	r3, [r8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d038      	beq.n	8007a02 <_malloc_r+0xf6>
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	42a2      	cmp	r2, r4
 8007994:	d12b      	bne.n	80079ee <_malloc_r+0xe2>
 8007996:	2200      	movs	r2, #0
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	e00f      	b.n	80079bc <_malloc_r+0xb0>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	1b52      	subs	r2, r2, r5
 80079a0:	d41f      	bmi.n	80079e2 <_malloc_r+0xd6>
 80079a2:	2a0b      	cmp	r2, #11
 80079a4:	d917      	bls.n	80079d6 <_malloc_r+0xca>
 80079a6:	1961      	adds	r1, r4, r5
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	6025      	str	r5, [r4, #0]
 80079ac:	bf18      	it	ne
 80079ae:	6059      	strne	r1, [r3, #4]
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	bf08      	it	eq
 80079b4:	f8c8 1000 	streq.w	r1, [r8]
 80079b8:	5162      	str	r2, [r4, r5]
 80079ba:	604b      	str	r3, [r1, #4]
 80079bc:	4638      	mov	r0, r7
 80079be:	f104 060b 	add.w	r6, r4, #11
 80079c2:	f000 f829 	bl	8007a18 <__malloc_unlock>
 80079c6:	f026 0607 	bic.w	r6, r6, #7
 80079ca:	1d23      	adds	r3, r4, #4
 80079cc:	1af2      	subs	r2, r6, r3
 80079ce:	d0ae      	beq.n	800792e <_malloc_r+0x22>
 80079d0:	1b9b      	subs	r3, r3, r6
 80079d2:	50a3      	str	r3, [r4, r2]
 80079d4:	e7ab      	b.n	800792e <_malloc_r+0x22>
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	6862      	ldr	r2, [r4, #4]
 80079da:	d1dd      	bne.n	8007998 <_malloc_r+0x8c>
 80079dc:	f8c8 2000 	str.w	r2, [r8]
 80079e0:	e7ec      	b.n	80079bc <_malloc_r+0xb0>
 80079e2:	4623      	mov	r3, r4
 80079e4:	6864      	ldr	r4, [r4, #4]
 80079e6:	e7ac      	b.n	8007942 <_malloc_r+0x36>
 80079e8:	4634      	mov	r4, r6
 80079ea:	6876      	ldr	r6, [r6, #4]
 80079ec:	e7b4      	b.n	8007958 <_malloc_r+0x4c>
 80079ee:	4613      	mov	r3, r2
 80079f0:	e7cc      	b.n	800798c <_malloc_r+0x80>
 80079f2:	230c      	movs	r3, #12
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4638      	mov	r0, r7
 80079f8:	f000 f80e 	bl	8007a18 <__malloc_unlock>
 80079fc:	e797      	b.n	800792e <_malloc_r+0x22>
 80079fe:	6025      	str	r5, [r4, #0]
 8007a00:	e7dc      	b.n	80079bc <_malloc_r+0xb0>
 8007a02:	605b      	str	r3, [r3, #4]
 8007a04:	deff      	udf	#255	; 0xff
 8007a06:	bf00      	nop
 8007a08:	24000b50 	.word	0x24000b50

08007a0c <__malloc_lock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_lock+0x8>)
 8007a0e:	f7ff bf0f 	b.w	8007830 <__retarget_lock_acquire_recursive>
 8007a12:	bf00      	nop
 8007a14:	24000b4c 	.word	0x24000b4c

08007a18 <__malloc_unlock>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__malloc_unlock+0x8>)
 8007a1a:	f7ff bf0a 	b.w	8007832 <__retarget_lock_release_recursive>
 8007a1e:	bf00      	nop
 8007a20:	24000b4c 	.word	0x24000b4c

08007a24 <__ssputs_r>:
 8007a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	688e      	ldr	r6, [r1, #8]
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	42be      	cmp	r6, r7
 8007a2e:	680b      	ldr	r3, [r1, #0]
 8007a30:	4682      	mov	sl, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	4690      	mov	r8, r2
 8007a36:	d82c      	bhi.n	8007a92 <__ssputs_r+0x6e>
 8007a38:	898a      	ldrh	r2, [r1, #12]
 8007a3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a3e:	d026      	beq.n	8007a8e <__ssputs_r+0x6a>
 8007a40:	6965      	ldr	r5, [r4, #20]
 8007a42:	6909      	ldr	r1, [r1, #16]
 8007a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a48:	eba3 0901 	sub.w	r9, r3, r1
 8007a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a50:	1c7b      	adds	r3, r7, #1
 8007a52:	444b      	add	r3, r9
 8007a54:	106d      	asrs	r5, r5, #1
 8007a56:	429d      	cmp	r5, r3
 8007a58:	bf38      	it	cc
 8007a5a:	461d      	movcc	r5, r3
 8007a5c:	0553      	lsls	r3, r2, #21
 8007a5e:	d527      	bpl.n	8007ab0 <__ssputs_r+0x8c>
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7ff ff53 	bl	800790c <_malloc_r>
 8007a66:	4606      	mov	r6, r0
 8007a68:	b360      	cbz	r0, 8007ac4 <__ssputs_r+0xa0>
 8007a6a:	6921      	ldr	r1, [r4, #16]
 8007a6c:	464a      	mov	r2, r9
 8007a6e:	f000 faeb 	bl	8008048 <memcpy>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	6126      	str	r6, [r4, #16]
 8007a80:	6165      	str	r5, [r4, #20]
 8007a82:	444e      	add	r6, r9
 8007a84:	eba5 0509 	sub.w	r5, r5, r9
 8007a88:	6026      	str	r6, [r4, #0]
 8007a8a:	60a5      	str	r5, [r4, #8]
 8007a8c:	463e      	mov	r6, r7
 8007a8e:	42be      	cmp	r6, r7
 8007a90:	d900      	bls.n	8007a94 <__ssputs_r+0x70>
 8007a92:	463e      	mov	r6, r7
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	4632      	mov	r2, r6
 8007a98:	4641      	mov	r1, r8
 8007a9a:	f000 faab 	bl	8007ff4 <memmove>
 8007a9e:	68a3      	ldr	r3, [r4, #8]
 8007aa0:	1b9b      	subs	r3, r3, r6
 8007aa2:	60a3      	str	r3, [r4, #8]
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	4433      	add	r3, r6
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab0:	462a      	mov	r2, r5
 8007ab2:	f000 fad7 	bl	8008064 <_realloc_r>
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d1e0      	bne.n	8007a7e <__ssputs_r+0x5a>
 8007abc:	6921      	ldr	r1, [r4, #16]
 8007abe:	4650      	mov	r0, sl
 8007ac0:	f7ff feb8 	bl	8007834 <_free_r>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	f8ca 3000 	str.w	r3, [sl]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	e7e9      	b.n	8007aac <__ssputs_r+0x88>

08007ad8 <_svfiprintf_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4698      	mov	r8, r3
 8007ade:	898b      	ldrh	r3, [r1, #12]
 8007ae0:	061b      	lsls	r3, r3, #24
 8007ae2:	b09d      	sub	sp, #116	; 0x74
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	4614      	mov	r4, r2
 8007aea:	d50e      	bpl.n	8007b0a <_svfiprintf_r+0x32>
 8007aec:	690b      	ldr	r3, [r1, #16]
 8007aee:	b963      	cbnz	r3, 8007b0a <_svfiprintf_r+0x32>
 8007af0:	2140      	movs	r1, #64	; 0x40
 8007af2:	f7ff ff0b 	bl	800790c <_malloc_r>
 8007af6:	6028      	str	r0, [r5, #0]
 8007af8:	6128      	str	r0, [r5, #16]
 8007afa:	b920      	cbnz	r0, 8007b06 <_svfiprintf_r+0x2e>
 8007afc:	230c      	movs	r3, #12
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	e0d0      	b.n	8007ca8 <_svfiprintf_r+0x1d0>
 8007b06:	2340      	movs	r3, #64	; 0x40
 8007b08:	616b      	str	r3, [r5, #20]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0e:	2320      	movs	r3, #32
 8007b10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b18:	2330      	movs	r3, #48	; 0x30
 8007b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cc0 <_svfiprintf_r+0x1e8>
 8007b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b22:	f04f 0901 	mov.w	r9, #1
 8007b26:	4623      	mov	r3, r4
 8007b28:	469a      	mov	sl, r3
 8007b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2e:	b10a      	cbz	r2, 8007b34 <_svfiprintf_r+0x5c>
 8007b30:	2a25      	cmp	r2, #37	; 0x25
 8007b32:	d1f9      	bne.n	8007b28 <_svfiprintf_r+0x50>
 8007b34:	ebba 0b04 	subs.w	fp, sl, r4
 8007b38:	d00b      	beq.n	8007b52 <_svfiprintf_r+0x7a>
 8007b3a:	465b      	mov	r3, fp
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4638      	mov	r0, r7
 8007b42:	f7ff ff6f 	bl	8007a24 <__ssputs_r>
 8007b46:	3001      	adds	r0, #1
 8007b48:	f000 80a9 	beq.w	8007c9e <_svfiprintf_r+0x1c6>
 8007b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4e:	445a      	add	r2, fp
 8007b50:	9209      	str	r2, [sp, #36]	; 0x24
 8007b52:	f89a 3000 	ldrb.w	r3, [sl]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80a1 	beq.w	8007c9e <_svfiprintf_r+0x1c6>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b66:	f10a 0a01 	add.w	sl, sl, #1
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	9307      	str	r3, [sp, #28]
 8007b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b72:	931a      	str	r3, [sp, #104]	; 0x68
 8007b74:	4654      	mov	r4, sl
 8007b76:	2205      	movs	r2, #5
 8007b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7c:	4850      	ldr	r0, [pc, #320]	; (8007cc0 <_svfiprintf_r+0x1e8>)
 8007b7e:	f7f8 fbb7 	bl	80002f0 <memchr>
 8007b82:	9a04      	ldr	r2, [sp, #16]
 8007b84:	b9d8      	cbnz	r0, 8007bbe <_svfiprintf_r+0xe6>
 8007b86:	06d0      	lsls	r0, r2, #27
 8007b88:	bf44      	itt	mi
 8007b8a:	2320      	movmi	r3, #32
 8007b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b90:	0711      	lsls	r1, r2, #28
 8007b92:	bf44      	itt	mi
 8007b94:	232b      	movmi	r3, #43	; 0x2b
 8007b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba0:	d015      	beq.n	8007bce <_svfiprintf_r+0xf6>
 8007ba2:	9a07      	ldr	r2, [sp, #28]
 8007ba4:	4654      	mov	r4, sl
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f04f 0c0a 	mov.w	ip, #10
 8007bac:	4621      	mov	r1, r4
 8007bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb2:	3b30      	subs	r3, #48	; 0x30
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	d94d      	bls.n	8007c54 <_svfiprintf_r+0x17c>
 8007bb8:	b1b0      	cbz	r0, 8007be8 <_svfiprintf_r+0x110>
 8007bba:	9207      	str	r2, [sp, #28]
 8007bbc:	e014      	b.n	8007be8 <_svfiprintf_r+0x110>
 8007bbe:	eba0 0308 	sub.w	r3, r0, r8
 8007bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	46a2      	mov	sl, r4
 8007bcc:	e7d2      	b.n	8007b74 <_svfiprintf_r+0x9c>
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	1d19      	adds	r1, r3, #4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	9103      	str	r1, [sp, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfbb      	ittet	lt
 8007bda:	425b      	neglt	r3, r3
 8007bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8007be0:	9307      	strge	r3, [sp, #28]
 8007be2:	9307      	strlt	r3, [sp, #28]
 8007be4:	bfb8      	it	lt
 8007be6:	9204      	strlt	r2, [sp, #16]
 8007be8:	7823      	ldrb	r3, [r4, #0]
 8007bea:	2b2e      	cmp	r3, #46	; 0x2e
 8007bec:	d10c      	bne.n	8007c08 <_svfiprintf_r+0x130>
 8007bee:	7863      	ldrb	r3, [r4, #1]
 8007bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf2:	d134      	bne.n	8007c5e <_svfiprintf_r+0x186>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	1d1a      	adds	r2, r3, #4
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	9203      	str	r2, [sp, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfb8      	it	lt
 8007c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c04:	3402      	adds	r4, #2
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cd0 <_svfiprintf_r+0x1f8>
 8007c0c:	7821      	ldrb	r1, [r4, #0]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	4650      	mov	r0, sl
 8007c12:	f7f8 fb6d 	bl	80002f0 <memchr>
 8007c16:	b138      	cbz	r0, 8007c28 <_svfiprintf_r+0x150>
 8007c18:	9b04      	ldr	r3, [sp, #16]
 8007c1a:	eba0 000a 	sub.w	r0, r0, sl
 8007c1e:	2240      	movs	r2, #64	; 0x40
 8007c20:	4082      	lsls	r2, r0
 8007c22:	4313      	orrs	r3, r2
 8007c24:	3401      	adds	r4, #1
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2c:	4825      	ldr	r0, [pc, #148]	; (8007cc4 <_svfiprintf_r+0x1ec>)
 8007c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c32:	2206      	movs	r2, #6
 8007c34:	f7f8 fb5c 	bl	80002f0 <memchr>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d038      	beq.n	8007cae <_svfiprintf_r+0x1d6>
 8007c3c:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <_svfiprintf_r+0x1f0>)
 8007c3e:	bb1b      	cbnz	r3, 8007c88 <_svfiprintf_r+0x1b0>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	3307      	adds	r3, #7
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	3308      	adds	r3, #8
 8007c4a:	9303      	str	r3, [sp, #12]
 8007c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4e:	4433      	add	r3, r6
 8007c50:	9309      	str	r3, [sp, #36]	; 0x24
 8007c52:	e768      	b.n	8007b26 <_svfiprintf_r+0x4e>
 8007c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c58:	460c      	mov	r4, r1
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	e7a6      	b.n	8007bac <_svfiprintf_r+0xd4>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	3401      	adds	r4, #1
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	4619      	mov	r1, r3
 8007c66:	f04f 0c0a 	mov.w	ip, #10
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c70:	3a30      	subs	r2, #48	; 0x30
 8007c72:	2a09      	cmp	r2, #9
 8007c74:	d903      	bls.n	8007c7e <_svfiprintf_r+0x1a6>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0c6      	beq.n	8007c08 <_svfiprintf_r+0x130>
 8007c7a:	9105      	str	r1, [sp, #20]
 8007c7c:	e7c4      	b.n	8007c08 <_svfiprintf_r+0x130>
 8007c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c82:	4604      	mov	r4, r0
 8007c84:	2301      	movs	r3, #1
 8007c86:	e7f0      	b.n	8007c6a <_svfiprintf_r+0x192>
 8007c88:	ab03      	add	r3, sp, #12
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <_svfiprintf_r+0x1f4>)
 8007c90:	a904      	add	r1, sp, #16
 8007c92:	4638      	mov	r0, r7
 8007c94:	f3af 8000 	nop.w
 8007c98:	1c42      	adds	r2, r0, #1
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	d1d6      	bne.n	8007c4c <_svfiprintf_r+0x174>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	065b      	lsls	r3, r3, #25
 8007ca2:	f53f af2d 	bmi.w	8007b00 <_svfiprintf_r+0x28>
 8007ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca8:	b01d      	add	sp, #116	; 0x74
 8007caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cae:	ab03      	add	r3, sp, #12
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	462a      	mov	r2, r5
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <_svfiprintf_r+0x1f4>)
 8007cb6:	a904      	add	r1, sp, #16
 8007cb8:	4638      	mov	r0, r7
 8007cba:	f000 f879 	bl	8007db0 <_printf_i>
 8007cbe:	e7eb      	b.n	8007c98 <_svfiprintf_r+0x1c0>
 8007cc0:	0800816c 	.word	0x0800816c
 8007cc4:	08008176 	.word	0x08008176
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a25 	.word	0x08007a25
 8007cd0:	08008172 	.word	0x08008172

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	6922      	ldr	r2, [r4, #16]
 8007d3e:	f003 0306 	and.w	r3, r3, #6
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	bf02      	ittt	eq
 8007d46:	68e5      	ldreq	r5, [r4, #12]
 8007d48:	6833      	ldreq	r3, [r6, #0]
 8007d4a:	1aed      	subeq	r5, r5, r3
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d4 	beq.w	8007f7a <_printf_i+0x1ca>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80c0 	beq.w	8007f58 <_printf_i+0x1a8>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f61 	.word	0x08007f61
 8007e20:	08007e89 	.word	0x08007e89
 8007e24:	08007f1b 	.word	0x08007f1b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f83 	.word	0x08007f83
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e89 	.word	0x08007e89
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f23 	.word	0x08007f23
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e09f      	b.n	8007f9c <_printf_i+0x1ec>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	0607      	lsls	r7, r0, #24
 8007e62:	f103 0104 	add.w	r1, r3, #4
 8007e66:	6029      	str	r1, [r5, #0]
 8007e68:	d501      	bpl.n	8007e6e <_printf_i+0xbe>
 8007e6a:	681e      	ldr	r6, [r3, #0]
 8007e6c:	e003      	b.n	8007e76 <_printf_i+0xc6>
 8007e6e:	0646      	lsls	r6, r0, #25
 8007e70:	d5fb      	bpl.n	8007e6a <_printf_i+0xba>
 8007e72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	da03      	bge.n	8007e82 <_printf_i+0xd2>
 8007e7a:	232d      	movs	r3, #45	; 0x2d
 8007e7c:	4276      	negs	r6, r6
 8007e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e82:	485a      	ldr	r0, [pc, #360]	; (8007fec <_printf_i+0x23c>)
 8007e84:	230a      	movs	r3, #10
 8007e86:	e012      	b.n	8007eae <_printf_i+0xfe>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	6820      	ldr	r0, [r4, #0]
 8007e8c:	1d19      	adds	r1, r3, #4
 8007e8e:	6029      	str	r1, [r5, #0]
 8007e90:	0605      	lsls	r5, r0, #24
 8007e92:	d501      	bpl.n	8007e98 <_printf_i+0xe8>
 8007e94:	681e      	ldr	r6, [r3, #0]
 8007e96:	e002      	b.n	8007e9e <_printf_i+0xee>
 8007e98:	0641      	lsls	r1, r0, #25
 8007e9a:	d5fb      	bpl.n	8007e94 <_printf_i+0xe4>
 8007e9c:	881e      	ldrh	r6, [r3, #0]
 8007e9e:	4853      	ldr	r0, [pc, #332]	; (8007fec <_printf_i+0x23c>)
 8007ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2308      	moveq	r3, #8
 8007ea6:	230a      	movne	r3, #10
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eae:	6865      	ldr	r5, [r4, #4]
 8007eb0:	60a5      	str	r5, [r4, #8]
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	bfa2      	ittt	ge
 8007eb6:	6821      	ldrge	r1, [r4, #0]
 8007eb8:	f021 0104 	bicge.w	r1, r1, #4
 8007ebc:	6021      	strge	r1, [r4, #0]
 8007ebe:	b90e      	cbnz	r6, 8007ec4 <_printf_i+0x114>
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	d04b      	beq.n	8007f5c <_printf_i+0x1ac>
 8007ec4:	4615      	mov	r5, r2
 8007ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eca:	fb03 6711 	mls	r7, r3, r1, r6
 8007ece:	5dc7      	ldrb	r7, [r0, r7]
 8007ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed4:	4637      	mov	r7, r6
 8007ed6:	42bb      	cmp	r3, r7
 8007ed8:	460e      	mov	r6, r1
 8007eda:	d9f4      	bls.n	8007ec6 <_printf_i+0x116>
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d10b      	bne.n	8007ef8 <_printf_i+0x148>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	07de      	lsls	r6, r3, #31
 8007ee4:	d508      	bpl.n	8007ef8 <_printf_i+0x148>
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	6861      	ldr	r1, [r4, #4]
 8007eea:	4299      	cmp	r1, r3
 8007eec:	bfde      	ittt	le
 8007eee:	2330      	movle	r3, #48	; 0x30
 8007ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ef8:	1b52      	subs	r2, r2, r5
 8007efa:	6122      	str	r2, [r4, #16]
 8007efc:	f8cd a000 	str.w	sl, [sp]
 8007f00:	464b      	mov	r3, r9
 8007f02:	aa03      	add	r2, sp, #12
 8007f04:	4621      	mov	r1, r4
 8007f06:	4640      	mov	r0, r8
 8007f08:	f7ff fee4 	bl	8007cd4 <_printf_common>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d14a      	bne.n	8007fa6 <_printf_i+0x1f6>
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	b004      	add	sp, #16
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	f043 0320 	orr.w	r3, r3, #32
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	4833      	ldr	r0, [pc, #204]	; (8007ff0 <_printf_i+0x240>)
 8007f24:	2778      	movs	r7, #120	; 0x78
 8007f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	6829      	ldr	r1, [r5, #0]
 8007f2e:	061f      	lsls	r7, r3, #24
 8007f30:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f34:	d402      	bmi.n	8007f3c <_printf_i+0x18c>
 8007f36:	065f      	lsls	r7, r3, #25
 8007f38:	bf48      	it	mi
 8007f3a:	b2b6      	uxthmi	r6, r6
 8007f3c:	07df      	lsls	r7, r3, #31
 8007f3e:	bf48      	it	mi
 8007f40:	f043 0320 	orrmi.w	r3, r3, #32
 8007f44:	6029      	str	r1, [r5, #0]
 8007f46:	bf48      	it	mi
 8007f48:	6023      	strmi	r3, [r4, #0]
 8007f4a:	b91e      	cbnz	r6, 8007f54 <_printf_i+0x1a4>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	f023 0320 	bic.w	r3, r3, #32
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	2310      	movs	r3, #16
 8007f56:	e7a7      	b.n	8007ea8 <_printf_i+0xf8>
 8007f58:	4824      	ldr	r0, [pc, #144]	; (8007fec <_printf_i+0x23c>)
 8007f5a:	e7e4      	b.n	8007f26 <_printf_i+0x176>
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	e7bd      	b.n	8007edc <_printf_i+0x12c>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	6826      	ldr	r6, [r4, #0]
 8007f64:	6961      	ldr	r1, [r4, #20]
 8007f66:	1d18      	adds	r0, r3, #4
 8007f68:	6028      	str	r0, [r5, #0]
 8007f6a:	0635      	lsls	r5, r6, #24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0x1c4>
 8007f70:	6019      	str	r1, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0x1ca>
 8007f74:	0670      	lsls	r0, r6, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0x1c0>
 8007f78:	8019      	strh	r1, [r3, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	4615      	mov	r5, r2
 8007f80:	e7bc      	b.n	8007efc <_printf_i+0x14c>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	602a      	str	r2, [r5, #0]
 8007f88:	681d      	ldr	r5, [r3, #0]
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f7f8 f9ae 	bl	80002f0 <memchr>
 8007f94:	b108      	cbz	r0, 8007f9a <_printf_i+0x1ea>
 8007f96:	1b40      	subs	r0, r0, r5
 8007f98:	6060      	str	r0, [r4, #4]
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	e7aa      	b.n	8007efc <_printf_i+0x14c>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4649      	mov	r1, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	47d0      	blx	sl
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d0ad      	beq.n	8007f10 <_printf_i+0x160>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	079b      	lsls	r3, r3, #30
 8007fb8:	d413      	bmi.n	8007fe2 <_printf_i+0x232>
 8007fba:	68e0      	ldr	r0, [r4, #12]
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	4298      	cmp	r0, r3
 8007fc0:	bfb8      	it	lt
 8007fc2:	4618      	movlt	r0, r3
 8007fc4:	e7a6      	b.n	8007f14 <_printf_i+0x164>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4649      	mov	r1, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	47d0      	blx	sl
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d09d      	beq.n	8007f10 <_printf_i+0x160>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	9903      	ldr	r1, [sp, #12]
 8007fda:	1a5b      	subs	r3, r3, r1
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dcf2      	bgt.n	8007fc6 <_printf_i+0x216>
 8007fe0:	e7eb      	b.n	8007fba <_printf_i+0x20a>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	f104 0619 	add.w	r6, r4, #25
 8007fe8:	e7f5      	b.n	8007fd6 <_printf_i+0x226>
 8007fea:	bf00      	nop
 8007fec:	0800817d 	.word	0x0800817d
 8007ff0:	0800818e 	.word	0x0800818e

08007ff4 <memmove>:
 8007ff4:	4288      	cmp	r0, r1
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	eb01 0402 	add.w	r4, r1, r2
 8007ffc:	d902      	bls.n	8008004 <memmove+0x10>
 8007ffe:	4284      	cmp	r4, r0
 8008000:	4623      	mov	r3, r4
 8008002:	d807      	bhi.n	8008014 <memmove+0x20>
 8008004:	1e43      	subs	r3, r0, #1
 8008006:	42a1      	cmp	r1, r4
 8008008:	d008      	beq.n	800801c <memmove+0x28>
 800800a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008012:	e7f8      	b.n	8008006 <memmove+0x12>
 8008014:	4402      	add	r2, r0
 8008016:	4601      	mov	r1, r0
 8008018:	428a      	cmp	r2, r1
 800801a:	d100      	bne.n	800801e <memmove+0x2a>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008026:	e7f7      	b.n	8008018 <memmove+0x24>

08008028 <_sbrk_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d06      	ldr	r5, [pc, #24]	; (8008044 <_sbrk_r+0x1c>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f9 fa38 	bl	80014a8 <_sbrk>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_sbrk_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_sbrk_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	24000b48 	.word	0x24000b48

08008048 <memcpy>:
 8008048:	440a      	add	r2, r1
 800804a:	4291      	cmp	r1, r2
 800804c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008050:	d100      	bne.n	8008054 <memcpy+0xc>
 8008052:	4770      	bx	lr
 8008054:	b510      	push	{r4, lr}
 8008056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800805e:	4291      	cmp	r1, r2
 8008060:	d1f9      	bne.n	8008056 <memcpy+0xe>
 8008062:	bd10      	pop	{r4, pc}

08008064 <_realloc_r>:
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	4680      	mov	r8, r0
 800806a:	4614      	mov	r4, r2
 800806c:	460e      	mov	r6, r1
 800806e:	b921      	cbnz	r1, 800807a <_realloc_r+0x16>
 8008070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4611      	mov	r1, r2
 8008076:	f7ff bc49 	b.w	800790c <_malloc_r>
 800807a:	b92a      	cbnz	r2, 8008088 <_realloc_r+0x24>
 800807c:	f7ff fbda 	bl	8007834 <_free_r>
 8008080:	4625      	mov	r5, r4
 8008082:	4628      	mov	r0, r5
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	f000 f81b 	bl	80080c2 <_malloc_usable_size_r>
 800808c:	4284      	cmp	r4, r0
 800808e:	4607      	mov	r7, r0
 8008090:	d802      	bhi.n	8008098 <_realloc_r+0x34>
 8008092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008096:	d812      	bhi.n	80080be <_realloc_r+0x5a>
 8008098:	4621      	mov	r1, r4
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff fc36 	bl	800790c <_malloc_r>
 80080a0:	4605      	mov	r5, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0ed      	beq.n	8008082 <_realloc_r+0x1e>
 80080a6:	42bc      	cmp	r4, r7
 80080a8:	4622      	mov	r2, r4
 80080aa:	4631      	mov	r1, r6
 80080ac:	bf28      	it	cs
 80080ae:	463a      	movcs	r2, r7
 80080b0:	f7ff ffca 	bl	8008048 <memcpy>
 80080b4:	4631      	mov	r1, r6
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7ff fbbc 	bl	8007834 <_free_r>
 80080bc:	e7e1      	b.n	8008082 <_realloc_r+0x1e>
 80080be:	4635      	mov	r5, r6
 80080c0:	e7df      	b.n	8008082 <_realloc_r+0x1e>

080080c2 <_malloc_usable_size_r>:
 80080c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c6:	1f18      	subs	r0, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfbc      	itt	lt
 80080cc:	580b      	ldrlt	r3, [r1, r0]
 80080ce:	18c0      	addlt	r0, r0, r3
 80080d0:	4770      	bx	lr
	...

080080d4 <_init>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr

080080e0 <_fini>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr
