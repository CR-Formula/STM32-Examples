
IR_Lap_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  24000000  080049ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001bc  2400006c  08004a58  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000228  08004a58  00020228  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ccc4  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001b4f  00000000  00000000  0002cda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c48  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000096c  00000000  00000000  0002f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036ad9  00000000  00000000  0002fea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e257  00000000  00000000  0006697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015cca9  00000000  00000000  00074bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003e54  00000000  00000000  001d1880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001d56d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080046ec 	.word	0x080046ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	080046ec 	.word	0x080046ec

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b0a6      	sub	sp, #152	; 0x98
 80003b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int best_lap = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	67bb      	str	r3, [r7, #120]	; 0x78
	int currentLap = 1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f000 fe06 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f000 f9fe 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f000 fab4 	bl	8000934 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003cc:	f000 fa64 	bl	8000898 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int runCounter = 0; runCounter < 9; runCounter++){
 80003d0:	2300      	movs	r3, #0
 80003d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80003d6:	e1e3      	b.n	80007a0 <main+0x3f0>
		  //wait until car moves off of start line
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 80003d8:	bf00      	nop
 80003da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003de:	48cc      	ldr	r0, [pc, #816]	; (8000710 <main+0x360>)
 80003e0:	f001 f928 	bl	8001634 <HAL_GPIO_ReadPin>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f7      	beq.n	80003da <main+0x2a>
		  }
		  //save start time
		  long int time_start = __HAL_TIM_GET_COUNTER(&htim2);
 80003ea:	4bca      	ldr	r3, [pc, #808]	; (8000714 <main+0x364>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	677b      	str	r3, [r7, #116]	; 0x74
		  //wait until car crosses finish line again.
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 80003f2:	bf00      	nop
 80003f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f8:	48c5      	ldr	r0, [pc, #788]	; (8000710 <main+0x360>)
 80003fa:	f001 f91b 	bl	8001634 <HAL_GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f7      	beq.n	80003f4 <main+0x44>
		  }
		  //save finish time
		  long int time_finished = __HAL_TIM_GET_COUNTER(&htim2);
 8000404:	4bc3      	ldr	r3, [pc, #780]	; (8000714 <main+0x364>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040a:	673b      	str	r3, [r7, #112]	; 0x70
		  //find time elapsed by subtracting start time - current time
		  time_elapsed[runCounter] = time_start - time_finished;
 800040c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800040e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000410:	1ad2      	subs	r2, r2, r3
 8000412:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	3390      	adds	r3, #144	; 0x90
 800041a:	443b      	add	r3, r7
 800041c:	f843 2c78 	str.w	r2, [r3, #-120]
		  //save best time and best lap if time is faster
		  if(time_elapsed[runCounter] < best_time || best_time == 0){
 8000420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3390      	adds	r3, #144	; 0x90
 8000428:	443b      	add	r3, r7
 800042a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800042e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000432:	429a      	cmp	r2, r3
 8000434:	dc03      	bgt.n	800043e <main+0x8e>
 8000436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800043a:	2b00      	cmp	r3, #0
 800043c:	d10b      	bne.n	8000456 <main+0xa6>
			  best_time = time_elapsed[runCounter];
 800043e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	3390      	adds	r3, #144	; 0x90
 8000446:	443b      	add	r3, r7
 8000448:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800044c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			  best_lap = currentLap;
 8000450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000454:	67bb      	str	r3, [r7, #120]	; 0x78
		  }
		  int minutes = time_elapsed[runCounter]/60000;
 8000456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	3390      	adds	r3, #144	; 0x90
 800045e:	443b      	add	r3, r7
 8000460:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000464:	4aac      	ldr	r2, [pc, #688]	; (8000718 <main+0x368>)
 8000466:	fb82 1203 	smull	r1, r2, r2, r3
 800046a:	1392      	asrs	r2, r2, #14
 800046c:	17db      	asrs	r3, r3, #31
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	66fb      	str	r3, [r7, #108]	; 0x6c
		  int seconds = (time_elapsed[runCounter]%60000)/1000;
 8000472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	3390      	adds	r3, #144	; 0x90
 800047a:	443b      	add	r3, r7
 800047c:	f853 2c78 	ldr.w	r2, [r3, #-120]
 8000480:	4ba5      	ldr	r3, [pc, #660]	; (8000718 <main+0x368>)
 8000482:	fb83 1302 	smull	r1, r3, r3, r2
 8000486:	1399      	asrs	r1, r3, #14
 8000488:	17d3      	asrs	r3, r2, #31
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8000490:	fb01 f303 	mul.w	r3, r1, r3
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4aa1      	ldr	r2, [pc, #644]	; (800071c <main+0x36c>)
 8000498:	fb82 1203 	smull	r1, r2, r2, r3
 800049c:	1192      	asrs	r2, r2, #6
 800049e:	17db      	asrs	r3, r3, #31
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	66bb      	str	r3, [r7, #104]	; 0x68
		  int milliseconds = time_elapsed[runCounter]%1000;
 80004a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	3390      	adds	r3, #144	; 0x90
 80004ac:	443b      	add	r3, r7
 80004ae:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80004b2:	4a9a      	ldr	r2, [pc, #616]	; (800071c <main+0x36c>)
 80004b4:	fb82 1203 	smull	r1, r2, r2, r3
 80004b8:	1191      	asrs	r1, r2, #6
 80004ba:	17da      	asrs	r2, r3, #31
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c2:	fb01 f202 	mul.w	r2, r1, r2
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	667b      	str	r3, [r7, #100]	; 0x64
		  printf("Lap #%i time: %i minutes, %i seconds, %i milliseconds\n", currentLap, minutes, seconds, milliseconds);
 80004ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80004d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80004d2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80004d6:	4892      	ldr	r0, [pc, #584]	; (8000720 <main+0x370>)
 80004d8:	f002 fc68 	bl	8002dac <iprintf>
		  char userinput[10];
		  userinput:
		  printf("Start again?(yes/no/end)\n");
 80004dc:	4891      	ldr	r0, [pc, #580]	; (8000724 <main+0x374>)
 80004de:	f002 fccb 	bl	8002e78 <puts>
		  scanf("%s", userinput);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4619      	mov	r1, r3
 80004e8:	488f      	ldr	r0, [pc, #572]	; (8000728 <main+0x378>)
 80004ea:	f002 fccd 	bl	8002e88 <iscanf>
		  toLower(userinput);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fb7c 	bl	8000bf0 <toLower>
		  if(strcmp(userinput, "no") == 0){
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	498b      	ldr	r1, [pc, #556]	; (800072c <main+0x37c>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff feee 	bl	80002e0 <strcmp>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	f040 8128 	bne.w	800075c <main+0x3ac>
			  userinput2:
 800050c:	bf00      	nop
			  printf("Would you like to do?\nSee best time?(best)\nSee last 10 runs?(last10)\nStart again?(yes)");
 800050e:	4888      	ldr	r0, [pc, #544]	; (8000730 <main+0x380>)
 8000510:	f002 fc4c 	bl	8002dac <iprintf>
			  char userinput2[10];
			  scanf("%s", userinput2);
 8000514:	463b      	mov	r3, r7
 8000516:	4619      	mov	r1, r3
 8000518:	4883      	ldr	r0, [pc, #524]	; (8000728 <main+0x378>)
 800051a:	f002 fcb5 	bl	8002e88 <iscanf>
			  toLower(userinput2);
 800051e:	463b      	mov	r3, r7
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fb65 	bl	8000bf0 <toLower>
			  	  if(strcmp(userinput2, "best") == 0){
 8000526:	463b      	mov	r3, r7
 8000528:	4982      	ldr	r1, [pc, #520]	; (8000734 <main+0x384>)
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fed8 	bl	80002e0 <strcmp>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d131      	bne.n	800059a <main+0x1ea>
			  		  int best_minutes = best_time/60000;
 8000536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800053a:	4a77      	ldr	r2, [pc, #476]	; (8000718 <main+0x368>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1392      	asrs	r2, r2, #14
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	64bb      	str	r3, [r7, #72]	; 0x48
			  		  int best_seconds = (best_time%60000)/1000;
 8000548:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800054c:	4b72      	ldr	r3, [pc, #456]	; (8000718 <main+0x368>)
 800054e:	fb83 1302 	smull	r1, r3, r3, r2
 8000552:	1399      	asrs	r1, r3, #14
 8000554:	17d3      	asrs	r3, r2, #31
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	f64e 2160 	movw	r1, #60000	; 0xea60
 800055c:	fb01 f303 	mul.w	r3, r1, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	4a6e      	ldr	r2, [pc, #440]	; (800071c <main+0x36c>)
 8000564:	fb82 1203 	smull	r1, r2, r2, r3
 8000568:	1192      	asrs	r2, r2, #6
 800056a:	17db      	asrs	r3, r3, #31
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
			  		  int best_milliseconds = best_time%1000;
 8000570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000574:	4a69      	ldr	r2, [pc, #420]	; (800071c <main+0x36c>)
 8000576:	fb82 1203 	smull	r1, r2, r2, r3
 800057a:	1191      	asrs	r1, r2, #6
 800057c:	17da      	asrs	r2, r3, #31
 800057e:	1a8a      	subs	r2, r1, r2
 8000580:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000584:	fb01 f202 	mul.w	r2, r1, r2
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
			  		  printf("Best Lap time: %i minutes, %i seconds, %i milliseconds\n", best_minutes, best_seconds, best_milliseconds);
 800058c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800058e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000590:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000592:	4869      	ldr	r0, [pc, #420]	; (8000738 <main+0x388>)
 8000594:	f002 fc0a 	bl	8002dac <iprintf>
 8000598:	e0f8      	b.n	800078c <main+0x3dc>
			  	  } else if (strcmp(userinput2, "last10") == 0){
 800059a:	463b      	mov	r3, r7
 800059c:	4967      	ldr	r1, [pc, #412]	; (800073c <main+0x38c>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe9e 	bl	80002e0 <strcmp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f040 80cc 	bne.w	8000744 <main+0x394>
			  		  //current lap from 0-9
			  		  int lapCounterTemp = runCounter;
 80005ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  		  int last10counter = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	67fb      	str	r3, [r7, #124]	; 0x7c
			  		  //prints the laps from current lap number to 0
			  		  while(lapCounterTemp >= 0){
 80005b8:	e04c      	b.n	8000654 <main+0x2a4>
			  			  int last10minutes = time_elapsed[lapCounterTemp]/60000;
 80005ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	3390      	adds	r3, #144	; 0x90
 80005c2:	443b      	add	r3, r7
 80005c4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80005c8:	4a53      	ldr	r2, [pc, #332]	; (8000718 <main+0x368>)
 80005ca:	fb82 1203 	smull	r1, r2, r2, r3
 80005ce:	1392      	asrs	r2, r2, #14
 80005d0:	17db      	asrs	r3, r3, #31
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
			  			  int last10seconds = (time_elapsed[lapCounterTemp]%60000)/1000;
 80005d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3390      	adds	r3, #144	; 0x90
 80005de:	443b      	add	r3, r7
 80005e0:	f853 2c78 	ldr.w	r2, [r3, #-120]
 80005e4:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <main+0x368>)
 80005e6:	fb83 1302 	smull	r1, r3, r3, r2
 80005ea:	1399      	asrs	r1, r3, #14
 80005ec:	17d3      	asrs	r3, r2, #31
 80005ee:	1acb      	subs	r3, r1, r3
 80005f0:	f64e 2160 	movw	r1, #60000	; 0xea60
 80005f4:	fb01 f303 	mul.w	r3, r1, r3
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4a48      	ldr	r2, [pc, #288]	; (800071c <main+0x36c>)
 80005fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000600:	1192      	asrs	r2, r2, #6
 8000602:	17db      	asrs	r3, r3, #31
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	653b      	str	r3, [r7, #80]	; 0x50
			  			  int last10milliseconds = time_elapsed[lapCounterTemp]%1000;
 8000608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	3390      	adds	r3, #144	; 0x90
 8000610:	443b      	add	r3, r7
 8000612:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000616:	4a41      	ldr	r2, [pc, #260]	; (800071c <main+0x36c>)
 8000618:	fb82 1203 	smull	r1, r2, r2, r3
 800061c:	1191      	asrs	r1, r2, #6
 800061e:	17da      	asrs	r2, r3, #31
 8000620:	1a8a      	subs	r2, r1, r2
 8000622:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000626:	fb01 f202 	mul.w	r2, r1, r2
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
				  		  printf("Lap #%i: %i minutes, %i seconds, %i milliseconds", currentLap - last10counter, last10minutes, last10seconds, last10milliseconds);
 800062e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000634:	1ad1      	subs	r1, r2, r3
 8000636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800063c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800063e:	4840      	ldr	r0, [pc, #256]	; (8000740 <main+0x390>)
 8000640:	f002 fbb4 	bl	8002dac <iprintf>
			  			  lapCounterTemp--;
 8000644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000648:	3b01      	subs	r3, #1
 800064a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  			  last10counter++;
 800064e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000650:	3301      	adds	r3, #1
 8000652:	67fb      	str	r3, [r7, #124]	; 0x7c
			  		  while(lapCounterTemp >= 0){
 8000654:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000658:	2b00      	cmp	r3, #0
 800065a:	daae      	bge.n	80005ba <main+0x20a>
			  		  }
			  		  //lapCounterTemp should now be -1, add 10 to that to make 9
			  		  lapCounterTemp += 10;
 800065c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000660:	330a      	adds	r3, #10
 8000662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  		  //prints the rest of the last 10 laps
			  		  while(lapCounterTemp > runCounter){
 8000666:	e04c      	b.n	8000702 <main+0x352>
			  			  int last10minutes = time_elapsed[lapCounterTemp]/60000;
 8000668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3390      	adds	r3, #144	; 0x90
 8000670:	443b      	add	r3, r7
 8000672:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000676:	4a28      	ldr	r2, [pc, #160]	; (8000718 <main+0x368>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1392      	asrs	r2, r2, #14
 800067e:	17db      	asrs	r3, r3, #31
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	663b      	str	r3, [r7, #96]	; 0x60
			  			  int last10seconds = (time_elapsed[lapCounterTemp]%60000)/1000;
 8000684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	3390      	adds	r3, #144	; 0x90
 800068c:	443b      	add	r3, r7
 800068e:	f853 2c78 	ldr.w	r2, [r3, #-120]
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <main+0x368>)
 8000694:	fb83 1302 	smull	r1, r3, r3, r2
 8000698:	1399      	asrs	r1, r3, #14
 800069a:	17d3      	asrs	r3, r2, #31
 800069c:	1acb      	subs	r3, r1, r3
 800069e:	f64e 2160 	movw	r1, #60000	; 0xea60
 80006a2:	fb01 f303 	mul.w	r3, r1, r3
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <main+0x36c>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	1192      	asrs	r2, r2, #6
 80006b0:	17db      	asrs	r3, r3, #31
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
			  			  int last10milliseconds = time_elapsed[lapCounterTemp]%1000;
 80006b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3390      	adds	r3, #144	; 0x90
 80006be:	443b      	add	r3, r7
 80006c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80006c4:	4a15      	ldr	r2, [pc, #84]	; (800071c <main+0x36c>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1191      	asrs	r1, r2, #6
 80006cc:	17da      	asrs	r2, r3, #31
 80006ce:	1a8a      	subs	r2, r1, r2
 80006d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d4:	fb01 f202 	mul.w	r2, r1, r2
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	65bb      	str	r3, [r7, #88]	; 0x58
			  			  printf("Lap #%i: %i minutes, %i seconds, %i milliseconds", currentLap - last10counter, last10minutes, last10seconds, last10milliseconds);
 80006dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80006e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006e2:	1ad1      	subs	r1, r2, r3
 80006e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <main+0x390>)
 80006ee:	f002 fb5d 	bl	8002dac <iprintf>
			  			  lapCounterTemp--;
 80006f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006f6:	3b01      	subs	r3, #1
 80006f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  			  last10counter++;
 80006fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006fe:	3301      	adds	r3, #1
 8000700:	67fb      	str	r3, [r7, #124]	; 0x7c
			  		  while(lapCounterTemp > runCounter){
 8000702:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800070a:	429a      	cmp	r2, r3
 800070c:	dcac      	bgt.n	8000668 <main+0x2b8>
 800070e:	e03d      	b.n	800078c <main+0x3dc>
 8000710:	58020000 	.word	0x58020000
 8000714:	24000088 	.word	0x24000088
 8000718:	45e7b273 	.word	0x45e7b273
 800071c:	10624dd3 	.word	0x10624dd3
 8000720:	08004704 	.word	0x08004704
 8000724:	0800473c 	.word	0x0800473c
 8000728:	08004758 	.word	0x08004758
 800072c:	0800475c 	.word	0x0800475c
 8000730:	08004760 	.word	0x08004760
 8000734:	080047b8 	.word	0x080047b8
 8000738:	080047c0 	.word	0x080047c0
 800073c:	080047f8 	.word	0x080047f8
 8000740:	08004800 	.word	0x08004800
			  		  }
			  	  } else if (strcmp(userinput2, "yes") != 0){
 8000744:	463b      	mov	r3, r7
 8000746:	491b      	ldr	r1, [pc, #108]	; (80007b4 <main+0x404>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdc9 	bl	80002e0 <strcmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d01b      	beq.n	800078c <main+0x3dc>
			  		  printf("Error, input best, last10 or yes");
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <main+0x408>)
 8000756:	f002 fb29 	bl	8002dac <iprintf>
			  		  goto userinput2;
 800075a:	e6d8      	b.n	800050e <main+0x15e>
			  	  }

		  } else if (strcmp(userinput, "end") == 0){
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4916      	ldr	r1, [pc, #88]	; (80007bc <main+0x40c>)
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fdbc 	bl	80002e0 <strcmp>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <main+0x3c2>
			  return 0;
 800076e:	2300      	movs	r3, #0
 8000770:	e01c      	b.n	80007ac <main+0x3fc>
		  } else if (strcmp(userinput, "yes") != 0){
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	490f      	ldr	r1, [pc, #60]	; (80007b4 <main+0x404>)
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fdb1 	bl	80002e0 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d003      	beq.n	800078c <main+0x3dc>
			  printf("Error, input yes or no");
 8000784:	480e      	ldr	r0, [pc, #56]	; (80007c0 <main+0x410>)
 8000786:	f002 fb11 	bl	8002dac <iprintf>
			  goto userinput;
 800078a:	e6a7      	b.n	80004dc <main+0x12c>
		  }
		  currentLap++;
 800078c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000790:	3301      	adds	r3, #1
 8000792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  for(int runCounter = 0; runCounter < 9; runCounter++){
 8000796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800079a:	3301      	adds	r3, #1
 800079c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80007a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	f77f ae17 	ble.w	80003d8 <main+0x28>
 80007aa:	e611      	b.n	80003d0 <main+0x20>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3790      	adds	r7, #144	; 0x90
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	08004834 	.word	0x08004834
 80007b8:	08004838 	.word	0x08004838
 80007bc:	0800485c 	.word	0x0800485c
 80007c0:	08004860 	.word	0x08004860

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	; 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	224c      	movs	r2, #76	; 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fc42 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fc3c 	bl	800305c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f000 ff57 	bl	8001698 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemClock_Config+0xcc>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	4a27      	ldr	r2, [pc, #156]	; (8000890 <SystemClock_Config+0xcc>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xcc>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <SystemClock_Config+0xd0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <SystemClock_Config+0xd0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000820:	bf00      	nop
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <SystemClock_Config+0xd0>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082e:	d1f8      	bne.n	8000822 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000834:	2301      	movs	r3, #1
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff61 	bl	800170c <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000850:	f000 f9fe 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	233f      	movs	r3, #63	; 0x3f
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fba1 	bl	8001fc0 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000884:	f000 f9e4 	bl	8000c50 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3770      	adds	r7, #112	; 0x70
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58000400 	.word	0x58000400
 8000894:	58024800 	.word	0x58024800

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM2_Init+0x98>)
 80008b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM2_Init+0x98>)
 80008c0:	223f      	movs	r2, #63	; 0x3f
 80008c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM2_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_TIM2_Init+0x98>)
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_TIM2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_TIM2_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM2_Init+0x98>)
 80008e0:	f001 fe9e 	bl	8002620 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008ea:	f000 f9b1 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM2_Init+0x98>)
 80008fc:	f001 fee8 	bl	80026d0 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000906:	f000 f9a3 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM2_Init+0x98>)
 8000918:	f002 f90a 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000922:	f000 f995 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	24000088 	.word	0x24000088

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4ba1      	ldr	r3, [pc, #644]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a9f      	ldr	r2, [pc, #636]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b9d      	ldr	r3, [pc, #628]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000968:	4b99      	ldr	r3, [pc, #612]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a98      	ldr	r2, [pc, #608]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000970:	f043 0320 	orr.w	r3, r3, #32
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b95      	ldr	r3, [pc, #596]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b92      	ldr	r3, [pc, #584]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a90      	ldr	r2, [pc, #576]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b8e      	ldr	r3, [pc, #568]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b8a      	ldr	r3, [pc, #552]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a89      	ldr	r2, [pc, #548]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b83      	ldr	r3, [pc, #524]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a81      	ldr	r2, [pc, #516]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b7f      	ldr	r3, [pc, #508]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e0:	4b7b      	ldr	r3, [pc, #492]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a7a      	ldr	r2, [pc, #488]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b77      	ldr	r3, [pc, #476]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fe:	4b74      	ldr	r3, [pc, #464]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a72      	ldr	r2, [pc, #456]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b70      	ldr	r3, [pc, #448]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a6b      	ldr	r2, [pc, #428]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b68      	ldr	r3, [pc, #416]	; (8000bd0 <MX_GPIO_Init+0x29c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a40:	4864      	ldr	r0, [pc, #400]	; (8000bd4 <MX_GPIO_Init+0x2a0>)
 8000a42:	f000 fe0f 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	4862      	ldr	r0, [pc, #392]	; (8000bd8 <MX_GPIO_Init+0x2a4>)
 8000a4e:	f000 fe09 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2102      	movs	r1, #2
 8000a56:	4861      	ldr	r0, [pc, #388]	; (8000bdc <MX_GPIO_Init+0x2a8>)
 8000a58:	f000 fe04 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	485b      	ldr	r0, [pc, #364]	; (8000be0 <MX_GPIO_Init+0x2ac>)
 8000a72:	f000 fc2f 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4856      	ldr	r0, [pc, #344]	; (8000be4 <MX_GPIO_Init+0x2b0>)
 8000a8a:	f000 fc23 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a8e:	2332      	movs	r3, #50	; 0x32
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	484d      	ldr	r0, [pc, #308]	; (8000be0 <MX_GPIO_Init+0x2ac>)
 8000aaa:	f000 fc13 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000aae:	2386      	movs	r3, #134	; 0x86
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4847      	ldr	r0, [pc, #284]	; (8000be8 <MX_GPIO_Init+0x2b4>)
 8000aca:	f000 fc03 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ace:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <MX_GPIO_Init+0x2a0>)
 8000ae8:	f000 fbf4 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afe:	230b      	movs	r3, #11
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <MX_GPIO_Init+0x2a0>)
 8000b0a:	f000 fbe3 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b20:	2307      	movs	r3, #7
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0x2a4>)
 8000b2c:	f000 fbd2 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0x2a4>)
 8000b4a:	f000 fbc3 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <MX_GPIO_Init+0x2b8>)
 8000b64:	f000 fbb6 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b68:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_GPIO_Init+0x2b4>)
 8000b86:	f000 fba5 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_GPIO_Init+0x2b8>)
 8000ba8:	f000 fb94 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bac:	2302      	movs	r3, #2
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_GPIO_Init+0x2a8>)
 8000bc4:	f000 fb86 	bl	80012d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020400 	.word	0x58020400
 8000bd8:	58020c00 	.word	0x58020c00
 8000bdc:	58021000 	.word	0x58021000
 8000be0:	58020800 	.word	0x58020800
 8000be4:	58021400 	.word	0x58021400
 8000be8:	58020000 	.word	0x58020000
 8000bec:	58021800 	.word	0x58021800

08000bf0 <toLower>:

/* USER CODE BEGIN 4 */
void toLower(char userinput[]) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(userinput); i++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e019      	b.n	8000c32 <toLower+0x42>
        userinput[i] = tolower(userinput[i]);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	7afb      	ldrb	r3, [r7, #11]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <toLower+0x5c>)
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d102      	bne.n	8000c20 <toLower+0x30>
 8000c1a:	7afb      	ldrb	r3, [r7, #11]
 8000c1c:	3320      	adds	r3, #32
 8000c1e:	e000      	b.n	8000c22 <toLower+0x32>
 8000c20:	7afb      	ldrb	r3, [r7, #11]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	440a      	add	r2, r1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < strlen(userinput); i++) {
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fb5e 	bl	80002f4 <strlen>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8de      	bhi.n	8000bfe <toLower+0xe>
    }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08004894 	.word	0x08004894

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x30>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c68:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x30>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x30>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	58024400 	.word	0x58024400

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d10e      	bne.n	8000cc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca8:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f9ca 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
  }

  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
  }
  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f002 f962 	bl	80030f8 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24080000 	.word	0x24080000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	240000d4 	.word	0x240000d4
 8000e68:	24000228 	.word	0x24000228

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <SystemInit+0xe4>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a36      	ldr	r2, [pc, #216]	; (8000f50 <SystemInit+0xe4>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <SystemInit+0xe8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d807      	bhi.n	8000e9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <SystemInit+0xe8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 030f 	bic.w	r3, r3, #15
 8000e94:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <SystemInit+0xe8>)
 8000e96:	f043 0307 	orr.w	r3, r3, #7
 8000e9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <SystemInit+0xec>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a2d      	ldr	r2, [pc, #180]	; (8000f58 <SystemInit+0xec>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <SystemInit+0xec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <SystemInit+0xec>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4929      	ldr	r1, [pc, #164]	; (8000f58 <SystemInit+0xec>)
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <SystemInit+0xf0>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <SystemInit+0xe8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <SystemInit+0xe8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 030f 	bic.w	r3, r3, #15
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <SystemInit+0xe8>)
 8000ed0:	f043 0307 	orr.w	r3, r3, #7
 8000ed4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <SystemInit+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <SystemInit+0xec>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <SystemInit+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <SystemInit+0xec>)
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <SystemInit+0xf4>)
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <SystemInit+0xec>)
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <SystemInit+0xf8>)
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <SystemInit+0xec>)
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <SystemInit+0xfc>)
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <SystemInit+0xec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <SystemInit+0xec>)
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <SystemInit+0xfc>)
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <SystemInit+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SystemInit+0xec>)
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <SystemInit+0xfc>)
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <SystemInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <SystemInit+0xec>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <SystemInit+0xec>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <SystemInit+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <SystemInit+0x100>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <SystemInit+0x104>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f36:	d202      	bcs.n	8000f3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <SystemInit+0x108>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <SystemInit+0x10c>)
 8000f40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	52002000 	.word	0x52002000
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f60:	02020200 	.word	0x02020200
 8000f64:	01ff0000 	.word	0x01ff0000
 8000f68:	01010280 	.word	0x01010280
 8000f6c:	5c001000 	.word	0x5c001000
 8000f70:	ffff0000 	.word	0xffff0000
 8000f74:	51008108 	.word	0x51008108
 8000f78:	52004000 	.word	0x52004000

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f80:	f7ff ff74 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f002 f8ab 	bl	8003104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff f9ff 	bl	80003b0 <main>
  bx  lr
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fbc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000fc0:	080049ec 	.word	0x080049ec
  ldr r2, =_sbss
 8000fc4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000fc8:	24000228 	.word	0x24000228

08000fcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC3_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f000 f94a 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fdc:	f001 f9a6 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_Init+0x68>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	4913      	ldr	r1, [pc, #76]	; (800103c <HAL_Init+0x6c>)
 8000fee:	5ccb      	ldrb	r3, [r1, r3]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_Init+0x68>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_Init+0x6c>)
 8001004:	5cd3      	ldrb	r3, [r2, r3]
 8001006:	f003 031f 	and.w	r3, r3, #31
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_Init+0x70>)
 8001012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_Init+0x74>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f814 	bl	8001048 <HAL_InitTick>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e002      	b.n	8001030 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800102a:	f7ff fe17 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58024400 	.word	0x58024400
 800103c:	08004884 	.word	0x08004884
 8001040:	24000004 	.word	0x24000004
 8001044:	24000000 	.word	0x24000000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_InitTick+0x60>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e021      	b.n	80010a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_InitTick+0x64>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_InitTick+0x60>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f921 	bl	80012ba <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 f8f9 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x68>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2400000c 	.word	0x2400000c
 80010ac:	24000000 	.word	0x24000000
 80010b0:	24000008 	.word	0x24000008

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2400000c 	.word	0x2400000c
 80010d8:	240000d8 	.word	0x240000d8

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	240000d8 	.word	0x240000d8

080010f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetREVID+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0c1b      	lsrs	r3, r3, #16
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	5c001000 	.word	0x5c001000

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	4313      	orrs	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	05fa0000 	.word	0x05fa0000

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff47 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb2 	bl	800122c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012e2:	4b89      	ldr	r3, [pc, #548]	; (8001508 <HAL_GPIO_Init+0x234>)
 80012e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012e6:	e194      	b.n	8001612 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8186 	beq.w	800160c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <HAL_GPIO_Init+0x44>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d130      	bne.n	800137a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134e:	2201      	movs	r2, #1
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f003 0201 	and.w	r2, r3, #1
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b03      	cmp	r3, #3
 8001384:	d017      	beq.n	80013b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d123      	bne.n	800140a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	69b9      	ldr	r1, [r7, #24]
 8001406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0203 	and.w	r2, r3, #3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80e0 	beq.w	800160c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x238>)
 800144e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001452:	4a2e      	ldr	r2, [pc, #184]	; (800150c <HAL_GPIO_Init+0x238>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_GPIO_Init+0x238>)
 800145e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146a:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_GPIO_Init+0x23c>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_GPIO_Init+0x240>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d052      	beq.n	800153c <HAL_GPIO_Init+0x268>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_GPIO_Init+0x244>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d031      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_GPIO_Init+0x248>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d02b      	beq.n	80014fe <HAL_GPIO_Init+0x22a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_GPIO_Init+0x24c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x226>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <HAL_GPIO_Init+0x250>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x222>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_GPIO_Init+0x254>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x21e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_GPIO_Init+0x258>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x21a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_GPIO_Init+0x25c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x216>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_GPIO_Init+0x260>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x212>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a17      	ldr	r2, [pc, #92]	; (8001538 <HAL_GPIO_Init+0x264>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x20e>
 80014de:	2309      	movs	r3, #9
 80014e0:	e02d      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014e2:	230a      	movs	r3, #10
 80014e4:	e02b      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014e6:	2308      	movs	r3, #8
 80014e8:	e029      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e027      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e025      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014f2:	2305      	movs	r3, #5
 80014f4:	e023      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014f6:	2304      	movs	r3, #4
 80014f8:	e021      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e01f      	b.n	800153e <HAL_GPIO_Init+0x26a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e01d      	b.n	800153e <HAL_GPIO_Init+0x26a>
 8001502:	2301      	movs	r3, #1
 8001504:	e01b      	b.n	800153e <HAL_GPIO_Init+0x26a>
 8001506:	bf00      	nop
 8001508:	58000080 	.word	0x58000080
 800150c:	58024400 	.word	0x58024400
 8001510:	58000400 	.word	0x58000400
 8001514:	58020000 	.word	0x58020000
 8001518:	58020400 	.word	0x58020400
 800151c:	58020800 	.word	0x58020800
 8001520:	58020c00 	.word	0x58020c00
 8001524:	58021000 	.word	0x58021000
 8001528:	58021400 	.word	0x58021400
 800152c:	58021800 	.word	0x58021800
 8001530:	58021c00 	.word	0x58021c00
 8001534:	58022000 	.word	0x58022000
 8001538:	58022400 	.word	0x58022400
 800153c:	2300      	movs	r3, #0
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154e:	4938      	ldr	r1, [pc, #224]	; (8001630 <HAL_GPIO_Init+0x35c>)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	f47f ae63 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3724      	adds	r7, #36	; 0x24
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	58000400 	.word	0x58000400

08001634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e001      	b.n	8001656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00a      	beq.n	80016c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01f      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e01d      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f023 0207 	bic.w	r2, r3, #7
 80016ca:	490f      	ldr	r1, [pc, #60]	; (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016d2:	f7ff fd03 	bl	80010dc <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d8:	e009      	b.n	80016ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016da:	f7ff fcff 	bl	80010dc <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e8:	d901      	bls.n	80016ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e007      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_PWREx_ConfigSupply+0x70>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fa:	d1ee      	bne.n	80016da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	58024800 	.word	0x58024800

0800170c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	f000 bc48 	b.w	8001fb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8088 	beq.w	800183e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172e:	4b99      	ldr	r3, [pc, #612]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001738:	4b96      	ldr	r3, [pc, #600]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	2b10      	cmp	r3, #16
 8001742:	d007      	beq.n	8001754 <HAL_RCC_OscConfig+0x48>
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	2b18      	cmp	r3, #24
 8001748:	d111      	bne.n	800176e <HAL_RCC_OscConfig+0x62>
 800174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	4b8f      	ldr	r3, [pc, #572]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d06d      	beq.n	800183c <HAL_RCC_OscConfig+0x130>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d169      	bne.n	800183c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f000 bc21 	b.w	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x7a>
 8001778:	4b86      	ldr	r3, [pc, #536]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a85      	ldr	r2, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e02e      	b.n	80017e4 <HAL_RCC_OscConfig+0xd8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x9c>
 800178e:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a80      	ldr	r2, [pc, #512]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b7e      	ldr	r3, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7d      	ldr	r2, [pc, #500]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xd8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017b2:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a77      	ldr	r2, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a74      	ldr	r2, [pc, #464]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xd8>
 80017cc:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a70      	ldr	r2, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6d      	ldr	r2, [pc, #436]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc76 	bl	80010dc <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc72 	bl	80010dc <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e3d4      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fc62 	bl	80010dc <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc5e 	bl	80010dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e3c0      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x110>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80ca 	beq.w	80019e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001854:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001856:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_RCC_OscConfig+0x166>
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2b18      	cmp	r3, #24
 8001866:	d156      	bne.n	8001916 <HAL_RCC_OscConfig+0x20a>
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d151      	bne.n	8001916 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001872:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e392      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0219 	bic.w	r2, r3, #25
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	493f      	ldr	r1, [pc, #252]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fc1e 	bl	80010dc <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc1a 	bl	80010dc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e37c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	f7ff fc17 	bl	80010f4 <HAL_GetREVID>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d817      	bhi.n	8001900 <HAL_RCC_OscConfig+0x1f4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b40      	cmp	r3, #64	; 0x40
 80018d6:	d108      	bne.n	80018ea <HAL_RCC_OscConfig+0x1de>
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80018e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e8:	e07a      	b.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	031b      	lsls	r3, r3, #12
 80018f8:	4926      	ldr	r1, [pc, #152]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fe:	e06f      	b.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	4921      	ldr	r1, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	e064      	b.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0219 	bic.w	r2, r3, #25
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	491a      	ldr	r1, [pc, #104]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fbd4 	bl	80010dc <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff fbd0 	bl	80010dc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e332      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	f7ff fbcd 	bl	80010f4 <HAL_GetREVID>
 800195a:	4603      	mov	r3, r0
 800195c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001960:	4293      	cmp	r3, r2
 8001962:	d819      	bhi.n	8001998 <HAL_RCC_OscConfig+0x28c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d108      	bne.n	800197e <HAL_RCC_OscConfig+0x272>
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6053      	str	r3, [r2, #4]
 800197c:	e030      	b.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	031b      	lsls	r3, r3, #12
 800198c:	4901      	ldr	r1, [pc, #4]	; (8001994 <HAL_RCC_OscConfig+0x288>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
 8001992:	e025      	b.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
 8001994:	58024400 	.word	0x58024400
 8001998:	4b9a      	ldr	r3, [pc, #616]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4997      	ldr	r1, [pc, #604]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
 80019ac:	e018      	b.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ae:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a94      	ldr	r2, [pc, #592]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb8f 	bl	80010dc <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fb8b 	bl	80010dc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e2ed      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019d4:	4b8b      	ldr	r3, [pc, #556]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80a9 	beq.w	8001b40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4b85      	ldr	r3, [pc, #532]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019f8:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d007      	beq.n	8001a14 <HAL_RCC_OscConfig+0x308>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b18      	cmp	r3, #24
 8001a08:	d13a      	bne.n	8001a80 <HAL_RCC_OscConfig+0x374>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d135      	bne.n	8001a80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a14:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x320>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e2c1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a2c:	f7ff fb62 	bl	80010f4 <HAL_GetREVID>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d817      	bhi.n	8001a6a <HAL_RCC_OscConfig+0x35e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_OscConfig+0x348>
 8001a42:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a4a:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a52:	e075      	b.n	8001b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a54:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	069b      	lsls	r3, r3, #26
 8001a62:	4968      	ldr	r1, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a68:	e06a      	b.n	8001b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a6a:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	061b      	lsls	r3, r3, #24
 8001a78:	4962      	ldr	r1, [pc, #392]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a7e:	e05f      	b.n	8001b40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d042      	beq.n	8001b0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a88:	4b5e      	ldr	r3, [pc, #376]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fb22 	bl	80010dc <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fb1e 	bl	80010dc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e280      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aae:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aba:	f7ff fb1b 	bl	80010f4 <HAL_GetREVID>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d817      	bhi.n	8001af8 <HAL_RCC_OscConfig+0x3ec>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d108      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x3d6>
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ade:	6053      	str	r3, [r2, #4]
 8001ae0:	e02e      	b.n	8001b40 <HAL_RCC_OscConfig+0x434>
 8001ae2:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	069b      	lsls	r3, r3, #26
 8001af0:	4944      	ldr	r1, [pc, #272]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e023      	b.n	8001b40 <HAL_RCC_OscConfig+0x434>
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	493f      	ldr	r1, [pc, #252]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e018      	b.n	8001b40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3c      	ldr	r2, [pc, #240]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fadf 	bl	80010dc <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b22:	f7ff fadb 	bl	80010dc <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e23d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b34:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d036      	beq.n	8001bba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d019      	beq.n	8001b88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fabc 	bl	80010dc <HAL_GetTick>
 8001b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fab8 	bl	80010dc <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e21a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x45c>
 8001b86:	e018      	b.n	8001bba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff faa2 	bl	80010dc <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fa9e 	bl	80010dc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e200      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d039      	beq.n	8001c3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fa7f 	bl	80010dc <HAL_GetTick>
 8001bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be2:	f7ff fa7b 	bl	80010dc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1dd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4d6>
 8001c00:	e01b      	b.n	8001c3a <HAL_RCC_OscConfig+0x52e>
 8001c02:	bf00      	nop
 8001c04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c08:	4b9b      	ldr	r3, [pc, #620]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a9a      	ldr	r2, [pc, #616]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fa62 	bl	80010dc <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1c:	f7ff fa5e 	bl	80010dc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1c0      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c2e:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8081 	beq.w	8001d4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x770>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a8b      	ldr	r2, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x770>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fa42 	bl	80010dc <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5c:	f7ff fa3e 	bl	80010dc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1a0      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <HAL_RCC_OscConfig+0x770>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x584>
 8001c82:	4b7d      	ldr	r3, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a7c      	ldr	r2, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	e02d      	b.n	8001cec <HAL_RCC_OscConfig+0x5e0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x5a6>
 8001c98:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a76      	ldr	r2, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	4b74      	ldr	r3, [pc, #464]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x5e0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5c8>
 8001cba:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b6c      	ldr	r3, [pc, #432]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a6b      	ldr	r2, [pc, #428]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x5e0>
 8001cd4:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a67      	ldr	r2, [pc, #412]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a64      	ldr	r2, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d015      	beq.n	8001d20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f9f2 	bl	80010dc <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f9ee 	bl	80010dc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e14e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d12:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ee      	beq.n	8001cfc <HAL_RCC_OscConfig+0x5f0>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f9dc 	bl	80010dc <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff f9d8 	bl	80010dc <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e138      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ee      	bne.n	8001d28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 812d 	beq.w	8001fae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d5c:	2b18      	cmp	r3, #24
 8001d5e:	f000 80bd 	beq.w	8001edc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	f040 809e 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a41      	ldr	r2, [pc, #260]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff f9b0 	bl	80010dc <HAL_GetTick>
 8001d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f9ac 	bl	80010dc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e10e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x774>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	430a      	orrs	r2, r1
 8001db2:	4931      	ldr	r1, [pc, #196]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	628b      	str	r3, [r1, #40]	; 0x28
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	025b      	lsls	r3, r3, #9
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	3b01      	subs	r3, #1
 8001de2:	061b      	lsls	r3, r3, #24
 8001de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001de8:	4923      	ldr	r1, [pc, #140]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x778>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e06:	00d2      	lsls	r2, r2, #3
 8001e08:	491b      	ldr	r1, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	f023 020c 	bic.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4917      	ldr	r1, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	f023 0202 	bic.w	r2, r3, #2
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	4912      	ldr	r1, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <HAL_RCC_OscConfig+0x76c>)
 8001e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f935 	bl	80010dc <HAL_GetTick>
 8001e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e74:	e011      	b.n	8001e9a <HAL_RCC_OscConfig+0x78e>
 8001e76:	bf00      	nop
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58024800 	.word	0x58024800
 8001e80:	fffffc0c 	.word	0xfffffc0c
 8001e84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f928 	bl	80010dc <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e08a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x77c>
 8001ea6:	e082      	b.n	8001fae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f912 	bl	80010dc <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f90e 	bl	80010dc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e070      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ece:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x7b0>
 8001eda:	e068      	b.n	8001fae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d031      	beq.n	8001f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0203 	and.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d12a      	bne.n	8001f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d122      	bne.n	8001f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d11a      	bne.n	8001f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0a5b      	lsrs	r3, r3, #9
 8001f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0e1b      	lsrs	r3, r3, #24
 8001f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e02b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d01f      	beq.n	8001fae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f7a:	f7ff f8af 	bl	80010dc <HAL_GetTick>
 8001f7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f80:	bf00      	nop
 8001f82:	f7ff f8ab 	bl	80010dc <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d0f9      	beq.n	8001f82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x8b0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f9a:	00d2      	lsls	r2, r2, #3
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x8ac>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	ffff0007 	.word	0xffff0007

08001fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e19c      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b87      	ldr	r3, [pc, #540]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020f 	bic.w	r2, r3, #15
 8001fea:	4985      	ldr	r1, [pc, #532]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b83      	ldr	r3, [pc, #524]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e184      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201c:	429a      	cmp	r2, r3
 800201e:	d908      	bls.n	8002032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002020:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4975      	ldr	r1, [pc, #468]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800202e:	4313      	orrs	r3, r2
 8002030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	4b70      	ldr	r3, [pc, #448]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800204a:	429a      	cmp	r2, r3
 800204c:	d908      	bls.n	8002060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	496a      	ldr	r1, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800205c:	4313      	orrs	r3, r2
 800205e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002078:	429a      	cmp	r2, r3
 800207a:	d908      	bls.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800207c:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	495e      	ldr	r1, [pc, #376]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800208a:	4313      	orrs	r3, r2
 800208c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4953      	ldr	r1, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d908      	bls.n	80020ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f023 020f 	bic.w	r2, r3, #15
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4947      	ldr	r1, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d055      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4940      	ldr	r1, [pc, #256]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002104:	4313      	orrs	r3, r2
 8002106:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d121      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0f6      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d115      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ea      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0de      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d6      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f023 0207 	bic.w	r2, r3, #7
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4925      	ldr	r1, [pc, #148]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800216e:	4313      	orrs	r3, r2
 8002170:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002172:	f7fe ffb3 	bl	80010dc <HAL_GetTick>
 8002176:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002178:	e00a      	b.n	8002190 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217a:	f7fe ffaf 	bl	80010dc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0be      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	429a      	cmp	r2, r3
 80021a0:	d1eb      	bne.n	800217a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d208      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d214      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	4906      	ldr	r1, [pc, #24]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e086      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
 8002200:	52002000 	.word	0x52002000
 8002204:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002220:	429a      	cmp	r2, r3
 8002222:	d208      	bcs.n	8002236 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002224:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4939      	ldr	r1, [pc, #228]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002232:	4313      	orrs	r3, r2
 8002234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224e:	429a      	cmp	r2, r3
 8002250:	d208      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	492e      	ldr	r1, [pc, #184]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002260:	4313      	orrs	r3, r2
 8002262:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800227c:	429a      	cmp	r2, r3
 800227e:	d208      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4922      	ldr	r1, [pc, #136]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 800228e:	4313      	orrs	r3, r2
 8002290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d208      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4917      	ldr	r1, [pc, #92]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022c0:	f000 f834 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_RCC_ClockConfig+0x35c>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_RCC_ClockConfig+0x35c>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x360>)
 80022f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x364>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x368>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fea0 	bl	8001048 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	58024400 	.word	0x58024400
 800231c:	08004884 	.word	0x08004884
 8002320:	24000004 	.word	0x24000004
 8002324:	24000000 	.word	0x24000000
 8002328:	24000008 	.word	0x24000008

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002332:	4bb3      	ldr	r3, [pc, #716]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233a:	2b18      	cmp	r3, #24
 800233c:	f200 8155 	bhi.w	80025ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	080023ad 	.word	0x080023ad
 800234c:	080025eb 	.word	0x080025eb
 8002350:	080025eb 	.word	0x080025eb
 8002354:	080025eb 	.word	0x080025eb
 8002358:	080025eb 	.word	0x080025eb
 800235c:	080025eb 	.word	0x080025eb
 8002360:	080025eb 	.word	0x080025eb
 8002364:	080025eb 	.word	0x080025eb
 8002368:	080023d3 	.word	0x080023d3
 800236c:	080025eb 	.word	0x080025eb
 8002370:	080025eb 	.word	0x080025eb
 8002374:	080025eb 	.word	0x080025eb
 8002378:	080025eb 	.word	0x080025eb
 800237c:	080025eb 	.word	0x080025eb
 8002380:	080025eb 	.word	0x080025eb
 8002384:	080025eb 	.word	0x080025eb
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080025eb 	.word	0x080025eb
 8002390:	080025eb 	.word	0x080025eb
 8002394:	080025eb 	.word	0x080025eb
 8002398:	080025eb 	.word	0x080025eb
 800239c:	080025eb 	.word	0x080025eb
 80023a0:	080025eb 	.word	0x080025eb
 80023a4:	080025eb 	.word	0x080025eb
 80023a8:	080023df 	.word	0x080023df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023ac:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023b8:	4b91      	ldr	r3, [pc, #580]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	4a90      	ldr	r2, [pc, #576]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80023ca:	e111      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023cc:	4b8d      	ldr	r3, [pc, #564]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ce:	61bb      	str	r3, [r7, #24]
      break;
 80023d0:	e10e      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023d2:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023d4:	61bb      	str	r3, [r7, #24]
      break;
 80023d6:	e10b      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023d8:	4b8c      	ldr	r3, [pc, #560]	; (800260c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023da:	61bb      	str	r3, [r7, #24]
      break;
 80023dc:	e108      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023de:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023e8:	4b85      	ldr	r3, [pc, #532]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023f4:	4b82      	ldr	r3, [pc, #520]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023fe:	4b80      	ldr	r3, [pc, #512]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002416:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80e1 	beq.w	80025e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b02      	cmp	r3, #2
 8002426:	f000 8083 	beq.w	8002530 <HAL_RCC_GetSysClockFreq+0x204>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f200 80a1 	bhi.w	8002574 <HAL_RCC_GetSysClockFreq+0x248>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x114>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d056      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800243e:	e099      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02d      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	4a6b      	ldr	r2, [pc, #428]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002476:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002486:	ed97 6a02 	vldr	s12, [r7, #8]
 800248a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800249a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80024a6:	e087      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ba:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024ea:	e065      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002512:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800251e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800252e:	e043      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800261c <HAL_RCC_GetSysClockFreq+0x2f0>
 800253e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002552:	ed97 6a02 	vldr	s12, [r7, #8]
 8002556:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800255a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800255e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002572:	e021      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002596:	ed97 6a02 	vldr	s12, [r7, #8]
 800259a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800259e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	0a5b      	lsrs	r3, r3, #9
 80025be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c2:	3301      	adds	r3, #1
 80025c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025dc:	ee17 3a90 	vmov	r3, s15
 80025e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
      break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025ec:	61bb      	str	r3, [r7, #24]
      break;
 80025ee:	bf00      	nop
  }

  return sysclockfreq;
 80025f0:	69bb      	ldr	r3, [r7, #24]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	03d09000 	.word	0x03d09000
 8002608:	003d0900 	.word	0x003d0900
 800260c:	017d7840 	.word	0x017d7840
 8002610:	46000000 	.word	0x46000000
 8002614:	4c742400 	.word	0x4c742400
 8002618:	4a742400 	.word	0x4a742400
 800261c:	4bbebc20 	.word	0x4bbebc20

08002620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e049      	b.n	80026c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fb22 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 f92e 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIM_ConfigClockSource+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0dc      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a64      	ldr	r2, [pc, #400]	; (80028b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	f000 80a9 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 8002728:	4a62      	ldr	r2, [pc, #392]	; (80028b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	f200 80ae 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 8002730:	4a61      	ldr	r2, [pc, #388]	; (80028b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f000 80a1 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 8002738:	4a5f      	ldr	r2, [pc, #380]	; (80028b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	f200 80a6 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 8002740:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8002742:	4293      	cmp	r3, r2
 8002744:	f000 8099 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 8002748:	4a5c      	ldr	r2, [pc, #368]	; (80028bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800274a:	4293      	cmp	r3, r2
 800274c:	f200 809e 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 8002750:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002754:	f000 8091 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 8002758:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800275c:	f200 8096 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 8002760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002764:	f000 8089 	beq.w	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 8002768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276c:	f200 808e 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d03e      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0x124>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	f200 8087 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	f000 8086 	beq.w	8002892 <HAL_TIM_ConfigClockSource+0x1c2>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d87f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d01a      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xf6>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d87b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d050      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x16a>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d877      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 800279c:	2b50      	cmp	r3, #80	; 0x50
 800279e:	d03c      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x14a>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d873      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d058      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x18a>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d86f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 80027ac:	2b30      	cmp	r3, #48	; 0x30
 80027ae:	d064      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d86b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d060      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d867      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05c      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d05a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x1aa>
 80027c4:	e062      	b.n	800288c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d6:	f000 f98b 	bl	8002af0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
      break;
 80027f2:	e04f      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002804:	f000 f974 	bl	8002af0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002816:	609a      	str	r2, [r3, #8]
      break;
 8002818:	e03c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8e4 	bl	80029f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2150      	movs	r1, #80	; 0x50
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f93e 	bl	8002ab4 <TIM_ITRx_SetConfig>
      break;
 8002838:	e02c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f903 	bl	8002a52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2160      	movs	r1, #96	; 0x60
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f92e 	bl	8002ab4 <TIM_ITRx_SetConfig>
      break;
 8002858:	e01c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8c4 	bl	80029f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f91e 	bl	8002ab4 <TIM_ITRx_SetConfig>
      break;
 8002878:	e00c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 f915 	bl	8002ab4 <TIM_ITRx_SetConfig>
      break;
 800288a:	e003      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	ffceff88 	.word	0xffceff88
 80028b4:	00100040 	.word	0x00100040
 80028b8:	00100030 	.word	0x00100030
 80028bc:	00100020 	.word	0x00100020

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <TIM_Base_SetConfig+0x114>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d00f      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3d      	ldr	r2, [pc, #244]	; (80029d8 <TIM_Base_SetConfig+0x118>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a3c      	ldr	r2, [pc, #240]	; (80029dc <TIM_Base_SetConfig+0x11c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <TIM_Base_SetConfig+0x120>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x40>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3a      	ldr	r2, [pc, #232]	; (80029e4 <TIM_Base_SetConfig+0x124>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d108      	bne.n	8002912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <TIM_Base_SetConfig+0x114>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d01b      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <TIM_Base_SetConfig+0x118>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d017      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <TIM_Base_SetConfig+0x11c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <TIM_Base_SetConfig+0x120>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <TIM_Base_SetConfig+0x124>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a28      	ldr	r2, [pc, #160]	; (80029e8 <TIM_Base_SetConfig+0x128>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <TIM_Base_SetConfig+0x12c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x9a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <TIM_Base_SetConfig+0x130>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <TIM_Base_SetConfig+0x114>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00f      	beq.n	80029b8 <TIM_Base_SetConfig+0xf8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <TIM_Base_SetConfig+0x124>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00b      	beq.n	80029b8 <TIM_Base_SetConfig+0xf8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <TIM_Base_SetConfig+0x128>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <TIM_Base_SetConfig+0xf8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <TIM_Base_SetConfig+0x12c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d003      	beq.n	80029b8 <TIM_Base_SetConfig+0xf8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <TIM_Base_SetConfig+0x130>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	615a      	str	r2, [r3, #20]
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40010400 	.word	0x40010400
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800

080029f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 030a 	bic.w	r3, r3, #10
 8002a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	031b      	lsls	r3, r3, #12
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <TIM_ITRx_SetConfig+0x38>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f043 0307 	orr.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	609a      	str	r2, [r3, #8]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	ffcfff8f 	.word	0xffcfff8f

08002af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e06d      	b.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d022      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d01d      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d018      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00e      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10c      	bne.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40010400 	.word	0x40010400
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40000800 	.word	0x40000800
 8002c40:	40000c00 	.word	0x40000c00
 8002c44:	40001800 	.word	0x40001800
 8002c48:	40014000 	.word	0x40014000

08002c4c <std>:
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	b510      	push	{r4, lr}
 8002c50:	4604      	mov	r4, r0
 8002c52:	e9c0 3300 	strd	r3, r3, [r0]
 8002c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c5a:	6083      	str	r3, [r0, #8]
 8002c5c:	8181      	strh	r1, [r0, #12]
 8002c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8002c60:	81c2      	strh	r2, [r0, #14]
 8002c62:	6183      	str	r3, [r0, #24]
 8002c64:	4619      	mov	r1, r3
 8002c66:	2208      	movs	r2, #8
 8002c68:	305c      	adds	r0, #92	; 0x5c
 8002c6a:	f000 f9f7 	bl	800305c <memset>
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <std+0x38>)
 8002c70:	6263      	str	r3, [r4, #36]	; 0x24
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <std+0x3c>)
 8002c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <std+0x40>)
 8002c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <std+0x44>)
 8002c7c:	6224      	str	r4, [r4, #32]
 8002c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	bf00      	nop
 8002c84:	08002ead 	.word	0x08002ead
 8002c88:	08002ecf 	.word	0x08002ecf
 8002c8c:	08002f07 	.word	0x08002f07
 8002c90:	08002f2b 	.word	0x08002f2b

08002c94 <stdio_exit_handler>:
 8002c94:	4a02      	ldr	r2, [pc, #8]	; (8002ca0 <stdio_exit_handler+0xc>)
 8002c96:	4903      	ldr	r1, [pc, #12]	; (8002ca4 <stdio_exit_handler+0x10>)
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <stdio_exit_handler+0x14>)
 8002c9a:	f000 b869 	b.w	8002d70 <_fwalk_sglue>
 8002c9e:	bf00      	nop
 8002ca0:	24000010 	.word	0x24000010
 8002ca4:	08003ffd 	.word	0x08003ffd
 8002ca8:	2400001c 	.word	0x2400001c

08002cac <cleanup_stdio>:
 8002cac:	6841      	ldr	r1, [r0, #4]
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <cleanup_stdio+0x34>)
 8002cb0:	4299      	cmp	r1, r3
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	d001      	beq.n	8002cbc <cleanup_stdio+0x10>
 8002cb8:	f001 f9a0 	bl	8003ffc <_fflush_r>
 8002cbc:	68a1      	ldr	r1, [r4, #8]
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <cleanup_stdio+0x38>)
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	d002      	beq.n	8002cca <cleanup_stdio+0x1e>
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f001 f999 	bl	8003ffc <_fflush_r>
 8002cca:	68e1      	ldr	r1, [r4, #12]
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <cleanup_stdio+0x3c>)
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	d004      	beq.n	8002cdc <cleanup_stdio+0x30>
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd8:	f001 b990 	b.w	8003ffc <_fflush_r>
 8002cdc:	bd10      	pop	{r4, pc}
 8002cde:	bf00      	nop
 8002ce0:	240000dc 	.word	0x240000dc
 8002ce4:	24000144 	.word	0x24000144
 8002ce8:	240001ac 	.word	0x240001ac

08002cec <global_stdio_init.part.0>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <global_stdio_init.part.0+0x30>)
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	; (8002d20 <global_stdio_init.part.0+0x34>)
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <global_stdio_init.part.0+0x38>)
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	f7ff ffa6 	bl	8002c4c <std>
 8002d00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002d04:	2201      	movs	r2, #1
 8002d06:	2109      	movs	r1, #9
 8002d08:	f7ff ffa0 	bl	8002c4c <std>
 8002d0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002d10:	2202      	movs	r2, #2
 8002d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d16:	2112      	movs	r1, #18
 8002d18:	f7ff bf98 	b.w	8002c4c <std>
 8002d1c:	24000214 	.word	0x24000214
 8002d20:	240000dc 	.word	0x240000dc
 8002d24:	08002c95 	.word	0x08002c95

08002d28 <__sfp_lock_acquire>:
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <__sfp_lock_acquire+0x8>)
 8002d2a:	f000 ba0f 	b.w	800314c <__retarget_lock_acquire_recursive>
 8002d2e:	bf00      	nop
 8002d30:	2400021d 	.word	0x2400021d

08002d34 <__sfp_lock_release>:
 8002d34:	4801      	ldr	r0, [pc, #4]	; (8002d3c <__sfp_lock_release+0x8>)
 8002d36:	f000 ba0a 	b.w	800314e <__retarget_lock_release_recursive>
 8002d3a:	bf00      	nop
 8002d3c:	2400021d 	.word	0x2400021d

08002d40 <__sinit>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	f7ff fff0 	bl	8002d28 <__sfp_lock_acquire>
 8002d48:	6a23      	ldr	r3, [r4, #32]
 8002d4a:	b11b      	cbz	r3, 8002d54 <__sinit+0x14>
 8002d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d50:	f7ff bff0 	b.w	8002d34 <__sfp_lock_release>
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__sinit+0x28>)
 8002d56:	6223      	str	r3, [r4, #32]
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__sinit+0x2c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f5      	bne.n	8002d4c <__sinit+0xc>
 8002d60:	f7ff ffc4 	bl	8002cec <global_stdio_init.part.0>
 8002d64:	e7f2      	b.n	8002d4c <__sinit+0xc>
 8002d66:	bf00      	nop
 8002d68:	08002cad 	.word	0x08002cad
 8002d6c:	24000214 	.word	0x24000214

08002d70 <_fwalk_sglue>:
 8002d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d74:	4607      	mov	r7, r0
 8002d76:	4688      	mov	r8, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d80:	f1b9 0901 	subs.w	r9, r9, #1
 8002d84:	d505      	bpl.n	8002d92 <_fwalk_sglue+0x22>
 8002d86:	6824      	ldr	r4, [r4, #0]
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d1f7      	bne.n	8002d7c <_fwalk_sglue+0xc>
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d92:	89ab      	ldrh	r3, [r5, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d907      	bls.n	8002da8 <_fwalk_sglue+0x38>
 8002d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	d003      	beq.n	8002da8 <_fwalk_sglue+0x38>
 8002da0:	4629      	mov	r1, r5
 8002da2:	4638      	mov	r0, r7
 8002da4:	47c0      	blx	r8
 8002da6:	4306      	orrs	r6, r0
 8002da8:	3568      	adds	r5, #104	; 0x68
 8002daa:	e7e9      	b.n	8002d80 <_fwalk_sglue+0x10>

08002dac <iprintf>:
 8002dac:	b40f      	push	{r0, r1, r2, r3}
 8002dae:	b507      	push	{r0, r1, r2, lr}
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <iprintf+0x20>)
 8002db2:	ab04      	add	r3, sp, #16
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dba:	6881      	ldr	r1, [r0, #8]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	f000 fae9 	bl	8003394 <_vfiprintf_r>
 8002dc2:	b003      	add	sp, #12
 8002dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc8:	b004      	add	sp, #16
 8002dca:	4770      	bx	lr
 8002dcc:	24000068 	.word	0x24000068

08002dd0 <_puts_r>:
 8002dd0:	6a03      	ldr	r3, [r0, #32]
 8002dd2:	b570      	push	{r4, r5, r6, lr}
 8002dd4:	6884      	ldr	r4, [r0, #8]
 8002dd6:	4605      	mov	r5, r0
 8002dd8:	460e      	mov	r6, r1
 8002dda:	b90b      	cbnz	r3, 8002de0 <_puts_r+0x10>
 8002ddc:	f7ff ffb0 	bl	8002d40 <__sinit>
 8002de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002de2:	07db      	lsls	r3, r3, #31
 8002de4:	d405      	bmi.n	8002df2 <_puts_r+0x22>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0598      	lsls	r0, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <_puts_r+0x22>
 8002dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dee:	f000 f9ad 	bl	800314c <__retarget_lock_acquire_recursive>
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	0719      	lsls	r1, r3, #28
 8002df6:	d513      	bpl.n	8002e20 <_puts_r+0x50>
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	b18b      	cbz	r3, 8002e20 <_puts_r+0x50>
 8002dfc:	3e01      	subs	r6, #1
 8002dfe:	68a3      	ldr	r3, [r4, #8]
 8002e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e04:	3b01      	subs	r3, #1
 8002e06:	60a3      	str	r3, [r4, #8]
 8002e08:	b9e9      	cbnz	r1, 8002e46 <_puts_r+0x76>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da2e      	bge.n	8002e6c <_puts_r+0x9c>
 8002e0e:	4622      	mov	r2, r4
 8002e10:	210a      	movs	r1, #10
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 f88d 	bl	8002f32 <__swbuf_r>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d007      	beq.n	8002e2c <_puts_r+0x5c>
 8002e1c:	250a      	movs	r5, #10
 8002e1e:	e007      	b.n	8002e30 <_puts_r+0x60>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f8c2 	bl	8002fac <__swsetup_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d0e7      	beq.n	8002dfc <_puts_r+0x2c>
 8002e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8002e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	d405      	bmi.n	8002e42 <_puts_r+0x72>
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	059b      	lsls	r3, r3, #22
 8002e3a:	d402      	bmi.n	8002e42 <_puts_r+0x72>
 8002e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e3e:	f000 f986 	bl	800314e <__retarget_lock_release_recursive>
 8002e42:	4628      	mov	r0, r5
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da04      	bge.n	8002e54 <_puts_r+0x84>
 8002e4a:	69a2      	ldr	r2, [r4, #24]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dc06      	bgt.n	8002e5e <_puts_r+0x8e>
 8002e50:	290a      	cmp	r1, #10
 8002e52:	d004      	beq.n	8002e5e <_puts_r+0x8e>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	e7cf      	b.n	8002dfe <_puts_r+0x2e>
 8002e5e:	4622      	mov	r2, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f866 	bl	8002f32 <__swbuf_r>
 8002e66:	3001      	adds	r0, #1
 8002e68:	d1c9      	bne.n	8002dfe <_puts_r+0x2e>
 8002e6a:	e7df      	b.n	8002e2c <_puts_r+0x5c>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	250a      	movs	r5, #10
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	6022      	str	r2, [r4, #0]
 8002e74:	701d      	strb	r5, [r3, #0]
 8002e76:	e7db      	b.n	8002e30 <_puts_r+0x60>

08002e78 <puts>:
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <puts+0xc>)
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f7ff bfa7 	b.w	8002dd0 <_puts_r>
 8002e82:	bf00      	nop
 8002e84:	24000068 	.word	0x24000068

08002e88 <iscanf>:
 8002e88:	b40f      	push	{r0, r1, r2, r3}
 8002e8a:	b507      	push	{r0, r1, r2, lr}
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <iscanf+0x20>)
 8002e8e:	ab04      	add	r3, sp, #16
 8002e90:	6808      	ldr	r0, [r1, #0]
 8002e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e96:	6841      	ldr	r1, [r0, #4]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f000 fec7 	bl	8003c2c <_vfiscanf_r>
 8002e9e:	b003      	add	sp, #12
 8002ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ea4:	b004      	add	sp, #16
 8002ea6:	4770      	bx	lr
 8002ea8:	24000068 	.word	0x24000068

08002eac <__sread>:
 8002eac:	b510      	push	{r4, lr}
 8002eae:	460c      	mov	r4, r1
 8002eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb4:	f000 f8fc 	bl	80030b0 <_read_r>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	bfab      	itete	ge
 8002ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8002ec0:	181b      	addge	r3, r3, r0
 8002ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ec6:	bfac      	ite	ge
 8002ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eca:	81a3      	strhlt	r3, [r4, #12]
 8002ecc:	bd10      	pop	{r4, pc}

08002ece <__swrite>:
 8002ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed2:	461f      	mov	r7, r3
 8002ed4:	898b      	ldrh	r3, [r1, #12]
 8002ed6:	05db      	lsls	r3, r3, #23
 8002ed8:	4605      	mov	r5, r0
 8002eda:	460c      	mov	r4, r1
 8002edc:	4616      	mov	r6, r2
 8002ede:	d505      	bpl.n	8002eec <__swrite+0x1e>
 8002ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f000 f8d0 	bl	800308c <_lseek_r>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ef6:	81a3      	strh	r3, [r4, #12]
 8002ef8:	4632      	mov	r2, r6
 8002efa:	463b      	mov	r3, r7
 8002efc:	4628      	mov	r0, r5
 8002efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	f000 b8e7 	b.w	80030d4 <_write_r>

08002f06 <__sseek>:
 8002f06:	b510      	push	{r4, lr}
 8002f08:	460c      	mov	r4, r1
 8002f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0e:	f000 f8bd 	bl	800308c <_lseek_r>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	bf15      	itete	ne
 8002f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f22:	81a3      	strheq	r3, [r4, #12]
 8002f24:	bf18      	it	ne
 8002f26:	81a3      	strhne	r3, [r4, #12]
 8002f28:	bd10      	pop	{r4, pc}

08002f2a <__sclose>:
 8002f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2e:	f000 b89d 	b.w	800306c <_close_r>

08002f32 <__swbuf_r>:
 8002f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f34:	460e      	mov	r6, r1
 8002f36:	4614      	mov	r4, r2
 8002f38:	4605      	mov	r5, r0
 8002f3a:	b118      	cbz	r0, 8002f44 <__swbuf_r+0x12>
 8002f3c:	6a03      	ldr	r3, [r0, #32]
 8002f3e:	b90b      	cbnz	r3, 8002f44 <__swbuf_r+0x12>
 8002f40:	f7ff fefe 	bl	8002d40 <__sinit>
 8002f44:	69a3      	ldr	r3, [r4, #24]
 8002f46:	60a3      	str	r3, [r4, #8]
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	071a      	lsls	r2, r3, #28
 8002f4c:	d525      	bpl.n	8002f9a <__swbuf_r+0x68>
 8002f4e:	6923      	ldr	r3, [r4, #16]
 8002f50:	b31b      	cbz	r3, 8002f9a <__swbuf_r+0x68>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	6922      	ldr	r2, [r4, #16]
 8002f56:	1a98      	subs	r0, r3, r2
 8002f58:	6963      	ldr	r3, [r4, #20]
 8002f5a:	b2f6      	uxtb	r6, r6
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	4637      	mov	r7, r6
 8002f60:	dc04      	bgt.n	8002f6c <__swbuf_r+0x3a>
 8002f62:	4621      	mov	r1, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	f001 f849 	bl	8003ffc <_fflush_r>
 8002f6a:	b9e0      	cbnz	r0, 8002fa6 <__swbuf_r+0x74>
 8002f6c:	68a3      	ldr	r3, [r4, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60a3      	str	r3, [r4, #8]
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	6022      	str	r2, [r4, #0]
 8002f78:	701e      	strb	r6, [r3, #0]
 8002f7a:	6962      	ldr	r2, [r4, #20]
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d004      	beq.n	8002f8c <__swbuf_r+0x5a>
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	07db      	lsls	r3, r3, #31
 8002f86:	d506      	bpl.n	8002f96 <__swbuf_r+0x64>
 8002f88:	2e0a      	cmp	r6, #10
 8002f8a:	d104      	bne.n	8002f96 <__swbuf_r+0x64>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f001 f834 	bl	8003ffc <_fflush_r>
 8002f94:	b938      	cbnz	r0, 8002fa6 <__swbuf_r+0x74>
 8002f96:	4638      	mov	r0, r7
 8002f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 f805 	bl	8002fac <__swsetup_r>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d0d5      	beq.n	8002f52 <__swbuf_r+0x20>
 8002fa6:	f04f 37ff 	mov.w	r7, #4294967295
 8002faa:	e7f4      	b.n	8002f96 <__swbuf_r+0x64>

08002fac <__swsetup_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <__swsetup_r+0xac>)
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	b118      	cbz	r0, 8002fc0 <__swsetup_r+0x14>
 8002fb8:	6a03      	ldr	r3, [r0, #32]
 8002fba:	b90b      	cbnz	r3, 8002fc0 <__swsetup_r+0x14>
 8002fbc:	f7ff fec0 	bl	8002d40 <__sinit>
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fc6:	0718      	lsls	r0, r3, #28
 8002fc8:	d422      	bmi.n	8003010 <__swsetup_r+0x64>
 8002fca:	06d9      	lsls	r1, r3, #27
 8002fcc:	d407      	bmi.n	8002fde <__swsetup_r+0x32>
 8002fce:	2309      	movs	r3, #9
 8002fd0:	602b      	str	r3, [r5, #0]
 8002fd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fd6:	81a3      	strh	r3, [r4, #12]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	e034      	b.n	8003048 <__swsetup_r+0x9c>
 8002fde:	0758      	lsls	r0, r3, #29
 8002fe0:	d512      	bpl.n	8003008 <__swsetup_r+0x5c>
 8002fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fe4:	b141      	cbz	r1, 8002ff8 <__swsetup_r+0x4c>
 8002fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fea:	4299      	cmp	r1, r3
 8002fec:	d002      	beq.n	8002ff4 <__swsetup_r+0x48>
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f000 f8ae 	bl	8003150 <_free_r>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6363      	str	r3, [r4, #52]	; 0x34
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	2300      	movs	r3, #0
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	81a3      	strh	r3, [r4, #12]
 8003010:	6923      	ldr	r3, [r4, #16]
 8003012:	b94b      	cbnz	r3, 8003028 <__swsetup_r+0x7c>
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800301a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301e:	d003      	beq.n	8003028 <__swsetup_r+0x7c>
 8003020:	4621      	mov	r1, r4
 8003022:	4628      	mov	r0, r5
 8003024:	f001 f838 	bl	8004098 <__smakebuf_r>
 8003028:	89a0      	ldrh	r0, [r4, #12]
 800302a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800302e:	f010 0301 	ands.w	r3, r0, #1
 8003032:	d00a      	beq.n	800304a <__swsetup_r+0x9e>
 8003034:	2300      	movs	r3, #0
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	6963      	ldr	r3, [r4, #20]
 800303a:	425b      	negs	r3, r3
 800303c:	61a3      	str	r3, [r4, #24]
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	b943      	cbnz	r3, 8003054 <__swsetup_r+0xa8>
 8003042:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003046:	d1c4      	bne.n	8002fd2 <__swsetup_r+0x26>
 8003048:	bd38      	pop	{r3, r4, r5, pc}
 800304a:	0781      	lsls	r1, r0, #30
 800304c:	bf58      	it	pl
 800304e:	6963      	ldrpl	r3, [r4, #20]
 8003050:	60a3      	str	r3, [r4, #8]
 8003052:	e7f4      	b.n	800303e <__swsetup_r+0x92>
 8003054:	2000      	movs	r0, #0
 8003056:	e7f7      	b.n	8003048 <__swsetup_r+0x9c>
 8003058:	24000068 	.word	0x24000068

0800305c <memset>:
 800305c:	4402      	add	r2, r0
 800305e:	4603      	mov	r3, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <_close_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4d06      	ldr	r5, [pc, #24]	; (8003088 <_close_r+0x1c>)
 8003070:	2300      	movs	r3, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	f7fd fe8d 	bl	8000d96 <_close>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_close_r+0x1a>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_close_r+0x1a>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	24000218 	.word	0x24000218

0800308c <_lseek_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d07      	ldr	r5, [pc, #28]	; (80030ac <_lseek_r+0x20>)
 8003090:	4604      	mov	r4, r0
 8003092:	4608      	mov	r0, r1
 8003094:	4611      	mov	r1, r2
 8003096:	2200      	movs	r2, #0
 8003098:	602a      	str	r2, [r5, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f7fd fea2 	bl	8000de4 <_lseek>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_lseek_r+0x1e>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_lseek_r+0x1e>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	24000218 	.word	0x24000218

080030b0 <_read_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4d07      	ldr	r5, [pc, #28]	; (80030d0 <_read_r+0x20>)
 80030b4:	4604      	mov	r4, r0
 80030b6:	4608      	mov	r0, r1
 80030b8:	4611      	mov	r1, r2
 80030ba:	2200      	movs	r2, #0
 80030bc:	602a      	str	r2, [r5, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	f7fd fe30 	bl	8000d24 <_read>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_read_r+0x1e>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_read_r+0x1e>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	24000218 	.word	0x24000218

080030d4 <_write_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	4d07      	ldr	r5, [pc, #28]	; (80030f4 <_write_r+0x20>)
 80030d8:	4604      	mov	r4, r0
 80030da:	4608      	mov	r0, r1
 80030dc:	4611      	mov	r1, r2
 80030de:	2200      	movs	r2, #0
 80030e0:	602a      	str	r2, [r5, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f7fd fe3b 	bl	8000d5e <_write>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d102      	bne.n	80030f2 <_write_r+0x1e>
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	b103      	cbz	r3, 80030f2 <_write_r+0x1e>
 80030f0:	6023      	str	r3, [r4, #0]
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
 80030f4:	24000218 	.word	0x24000218

080030f8 <__errno>:
 80030f8:	4b01      	ldr	r3, [pc, #4]	; (8003100 <__errno+0x8>)
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	24000068 	.word	0x24000068

08003104 <__libc_init_array>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4d0d      	ldr	r5, [pc, #52]	; (800313c <__libc_init_array+0x38>)
 8003108:	4c0d      	ldr	r4, [pc, #52]	; (8003140 <__libc_init_array+0x3c>)
 800310a:	1b64      	subs	r4, r4, r5
 800310c:	10a4      	asrs	r4, r4, #2
 800310e:	2600      	movs	r6, #0
 8003110:	42a6      	cmp	r6, r4
 8003112:	d109      	bne.n	8003128 <__libc_init_array+0x24>
 8003114:	4d0b      	ldr	r5, [pc, #44]	; (8003144 <__libc_init_array+0x40>)
 8003116:	4c0c      	ldr	r4, [pc, #48]	; (8003148 <__libc_init_array+0x44>)
 8003118:	f001 fae8 	bl	80046ec <_init>
 800311c:	1b64      	subs	r4, r4, r5
 800311e:	10a4      	asrs	r4, r4, #2
 8003120:	2600      	movs	r6, #0
 8003122:	42a6      	cmp	r6, r4
 8003124:	d105      	bne.n	8003132 <__libc_init_array+0x2e>
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	f855 3b04 	ldr.w	r3, [r5], #4
 800312c:	4798      	blx	r3
 800312e:	3601      	adds	r6, #1
 8003130:	e7ee      	b.n	8003110 <__libc_init_array+0xc>
 8003132:	f855 3b04 	ldr.w	r3, [r5], #4
 8003136:	4798      	blx	r3
 8003138:	3601      	adds	r6, #1
 800313a:	e7f2      	b.n	8003122 <__libc_init_array+0x1e>
 800313c:	080049e4 	.word	0x080049e4
 8003140:	080049e4 	.word	0x080049e4
 8003144:	080049e4 	.word	0x080049e4
 8003148:	080049e8 	.word	0x080049e8

0800314c <__retarget_lock_acquire_recursive>:
 800314c:	4770      	bx	lr

0800314e <__retarget_lock_release_recursive>:
 800314e:	4770      	bx	lr

08003150 <_free_r>:
 8003150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003152:	2900      	cmp	r1, #0
 8003154:	d044      	beq.n	80031e0 <_free_r+0x90>
 8003156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800315a:	9001      	str	r0, [sp, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f1a1 0404 	sub.w	r4, r1, #4
 8003162:	bfb8      	it	lt
 8003164:	18e4      	addlt	r4, r4, r3
 8003166:	f000 f8df 	bl	8003328 <__malloc_lock>
 800316a:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <_free_r+0x94>)
 800316c:	9801      	ldr	r0, [sp, #4]
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	b933      	cbnz	r3, 8003180 <_free_r+0x30>
 8003172:	6063      	str	r3, [r4, #4]
 8003174:	6014      	str	r4, [r2, #0]
 8003176:	b003      	add	sp, #12
 8003178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800317c:	f000 b8da 	b.w	8003334 <__malloc_unlock>
 8003180:	42a3      	cmp	r3, r4
 8003182:	d908      	bls.n	8003196 <_free_r+0x46>
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	1961      	adds	r1, r4, r5
 8003188:	428b      	cmp	r3, r1
 800318a:	bf01      	itttt	eq
 800318c:	6819      	ldreq	r1, [r3, #0]
 800318e:	685b      	ldreq	r3, [r3, #4]
 8003190:	1949      	addeq	r1, r1, r5
 8003192:	6021      	streq	r1, [r4, #0]
 8003194:	e7ed      	b.n	8003172 <_free_r+0x22>
 8003196:	461a      	mov	r2, r3
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	b10b      	cbz	r3, 80031a0 <_free_r+0x50>
 800319c:	42a3      	cmp	r3, r4
 800319e:	d9fa      	bls.n	8003196 <_free_r+0x46>
 80031a0:	6811      	ldr	r1, [r2, #0]
 80031a2:	1855      	adds	r5, r2, r1
 80031a4:	42a5      	cmp	r5, r4
 80031a6:	d10b      	bne.n	80031c0 <_free_r+0x70>
 80031a8:	6824      	ldr	r4, [r4, #0]
 80031aa:	4421      	add	r1, r4
 80031ac:	1854      	adds	r4, r2, r1
 80031ae:	42a3      	cmp	r3, r4
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	d1e0      	bne.n	8003176 <_free_r+0x26>
 80031b4:	681c      	ldr	r4, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	6053      	str	r3, [r2, #4]
 80031ba:	440c      	add	r4, r1
 80031bc:	6014      	str	r4, [r2, #0]
 80031be:	e7da      	b.n	8003176 <_free_r+0x26>
 80031c0:	d902      	bls.n	80031c8 <_free_r+0x78>
 80031c2:	230c      	movs	r3, #12
 80031c4:	6003      	str	r3, [r0, #0]
 80031c6:	e7d6      	b.n	8003176 <_free_r+0x26>
 80031c8:	6825      	ldr	r5, [r4, #0]
 80031ca:	1961      	adds	r1, r4, r5
 80031cc:	428b      	cmp	r3, r1
 80031ce:	bf04      	itt	eq
 80031d0:	6819      	ldreq	r1, [r3, #0]
 80031d2:	685b      	ldreq	r3, [r3, #4]
 80031d4:	6063      	str	r3, [r4, #4]
 80031d6:	bf04      	itt	eq
 80031d8:	1949      	addeq	r1, r1, r5
 80031da:	6021      	streq	r1, [r4, #0]
 80031dc:	6054      	str	r4, [r2, #4]
 80031de:	e7ca      	b.n	8003176 <_free_r+0x26>
 80031e0:	b003      	add	sp, #12
 80031e2:	bd30      	pop	{r4, r5, pc}
 80031e4:	24000220 	.word	0x24000220

080031e8 <sbrk_aligned>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	4e0e      	ldr	r6, [pc, #56]	; (8003224 <sbrk_aligned+0x3c>)
 80031ec:	460c      	mov	r4, r1
 80031ee:	6831      	ldr	r1, [r6, #0]
 80031f0:	4605      	mov	r5, r0
 80031f2:	b911      	cbnz	r1, 80031fa <sbrk_aligned+0x12>
 80031f4:	f001 f92c 	bl	8004450 <_sbrk_r>
 80031f8:	6030      	str	r0, [r6, #0]
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f001 f927 	bl	8004450 <_sbrk_r>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	d00a      	beq.n	800321c <sbrk_aligned+0x34>
 8003206:	1cc4      	adds	r4, r0, #3
 8003208:	f024 0403 	bic.w	r4, r4, #3
 800320c:	42a0      	cmp	r0, r4
 800320e:	d007      	beq.n	8003220 <sbrk_aligned+0x38>
 8003210:	1a21      	subs	r1, r4, r0
 8003212:	4628      	mov	r0, r5
 8003214:	f001 f91c 	bl	8004450 <_sbrk_r>
 8003218:	3001      	adds	r0, #1
 800321a:	d101      	bne.n	8003220 <sbrk_aligned+0x38>
 800321c:	f04f 34ff 	mov.w	r4, #4294967295
 8003220:	4620      	mov	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	24000224 	.word	0x24000224

08003228 <_malloc_r>:
 8003228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800322c:	1ccd      	adds	r5, r1, #3
 800322e:	f025 0503 	bic.w	r5, r5, #3
 8003232:	3508      	adds	r5, #8
 8003234:	2d0c      	cmp	r5, #12
 8003236:	bf38      	it	cc
 8003238:	250c      	movcc	r5, #12
 800323a:	2d00      	cmp	r5, #0
 800323c:	4607      	mov	r7, r0
 800323e:	db01      	blt.n	8003244 <_malloc_r+0x1c>
 8003240:	42a9      	cmp	r1, r5
 8003242:	d905      	bls.n	8003250 <_malloc_r+0x28>
 8003244:	230c      	movs	r3, #12
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	2600      	movs	r6, #0
 800324a:	4630      	mov	r0, r6
 800324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003250:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003324 <_malloc_r+0xfc>
 8003254:	f000 f868 	bl	8003328 <__malloc_lock>
 8003258:	f8d8 3000 	ldr.w	r3, [r8]
 800325c:	461c      	mov	r4, r3
 800325e:	bb5c      	cbnz	r4, 80032b8 <_malloc_r+0x90>
 8003260:	4629      	mov	r1, r5
 8003262:	4638      	mov	r0, r7
 8003264:	f7ff ffc0 	bl	80031e8 <sbrk_aligned>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	4604      	mov	r4, r0
 800326c:	d155      	bne.n	800331a <_malloc_r+0xf2>
 800326e:	f8d8 4000 	ldr.w	r4, [r8]
 8003272:	4626      	mov	r6, r4
 8003274:	2e00      	cmp	r6, #0
 8003276:	d145      	bne.n	8003304 <_malloc_r+0xdc>
 8003278:	2c00      	cmp	r4, #0
 800327a:	d048      	beq.n	800330e <_malloc_r+0xe6>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	4631      	mov	r1, r6
 8003280:	4638      	mov	r0, r7
 8003282:	eb04 0903 	add.w	r9, r4, r3
 8003286:	f001 f8e3 	bl	8004450 <_sbrk_r>
 800328a:	4581      	cmp	r9, r0
 800328c:	d13f      	bne.n	800330e <_malloc_r+0xe6>
 800328e:	6821      	ldr	r1, [r4, #0]
 8003290:	1a6d      	subs	r5, r5, r1
 8003292:	4629      	mov	r1, r5
 8003294:	4638      	mov	r0, r7
 8003296:	f7ff ffa7 	bl	80031e8 <sbrk_aligned>
 800329a:	3001      	adds	r0, #1
 800329c:	d037      	beq.n	800330e <_malloc_r+0xe6>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	442b      	add	r3, r5
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	f8d8 3000 	ldr.w	r3, [r8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d038      	beq.n	800331e <_malloc_r+0xf6>
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	42a2      	cmp	r2, r4
 80032b0:	d12b      	bne.n	800330a <_malloc_r+0xe2>
 80032b2:	2200      	movs	r2, #0
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	e00f      	b.n	80032d8 <_malloc_r+0xb0>
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	1b52      	subs	r2, r2, r5
 80032bc:	d41f      	bmi.n	80032fe <_malloc_r+0xd6>
 80032be:	2a0b      	cmp	r2, #11
 80032c0:	d917      	bls.n	80032f2 <_malloc_r+0xca>
 80032c2:	1961      	adds	r1, r4, r5
 80032c4:	42a3      	cmp	r3, r4
 80032c6:	6025      	str	r5, [r4, #0]
 80032c8:	bf18      	it	ne
 80032ca:	6059      	strne	r1, [r3, #4]
 80032cc:	6863      	ldr	r3, [r4, #4]
 80032ce:	bf08      	it	eq
 80032d0:	f8c8 1000 	streq.w	r1, [r8]
 80032d4:	5162      	str	r2, [r4, r5]
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	4638      	mov	r0, r7
 80032da:	f104 060b 	add.w	r6, r4, #11
 80032de:	f000 f829 	bl	8003334 <__malloc_unlock>
 80032e2:	f026 0607 	bic.w	r6, r6, #7
 80032e6:	1d23      	adds	r3, r4, #4
 80032e8:	1af2      	subs	r2, r6, r3
 80032ea:	d0ae      	beq.n	800324a <_malloc_r+0x22>
 80032ec:	1b9b      	subs	r3, r3, r6
 80032ee:	50a3      	str	r3, [r4, r2]
 80032f0:	e7ab      	b.n	800324a <_malloc_r+0x22>
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	6862      	ldr	r2, [r4, #4]
 80032f6:	d1dd      	bne.n	80032b4 <_malloc_r+0x8c>
 80032f8:	f8c8 2000 	str.w	r2, [r8]
 80032fc:	e7ec      	b.n	80032d8 <_malloc_r+0xb0>
 80032fe:	4623      	mov	r3, r4
 8003300:	6864      	ldr	r4, [r4, #4]
 8003302:	e7ac      	b.n	800325e <_malloc_r+0x36>
 8003304:	4634      	mov	r4, r6
 8003306:	6876      	ldr	r6, [r6, #4]
 8003308:	e7b4      	b.n	8003274 <_malloc_r+0x4c>
 800330a:	4613      	mov	r3, r2
 800330c:	e7cc      	b.n	80032a8 <_malloc_r+0x80>
 800330e:	230c      	movs	r3, #12
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4638      	mov	r0, r7
 8003314:	f000 f80e 	bl	8003334 <__malloc_unlock>
 8003318:	e797      	b.n	800324a <_malloc_r+0x22>
 800331a:	6025      	str	r5, [r4, #0]
 800331c:	e7dc      	b.n	80032d8 <_malloc_r+0xb0>
 800331e:	605b      	str	r3, [r3, #4]
 8003320:	deff      	udf	#255	; 0xff
 8003322:	bf00      	nop
 8003324:	24000220 	.word	0x24000220

08003328 <__malloc_lock>:
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <__malloc_lock+0x8>)
 800332a:	f7ff bf0f 	b.w	800314c <__retarget_lock_acquire_recursive>
 800332e:	bf00      	nop
 8003330:	2400021c 	.word	0x2400021c

08003334 <__malloc_unlock>:
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <__malloc_unlock+0x8>)
 8003336:	f7ff bf0a 	b.w	800314e <__retarget_lock_release_recursive>
 800333a:	bf00      	nop
 800333c:	2400021c 	.word	0x2400021c

08003340 <__sfputc_r>:
 8003340:	6893      	ldr	r3, [r2, #8]
 8003342:	3b01      	subs	r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	b410      	push	{r4}
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	da08      	bge.n	800335e <__sfputc_r+0x1e>
 800334c:	6994      	ldr	r4, [r2, #24]
 800334e:	42a3      	cmp	r3, r4
 8003350:	db01      	blt.n	8003356 <__sfputc_r+0x16>
 8003352:	290a      	cmp	r1, #10
 8003354:	d103      	bne.n	800335e <__sfputc_r+0x1e>
 8003356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800335a:	f7ff bdea 	b.w	8002f32 <__swbuf_r>
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	1c58      	adds	r0, r3, #1
 8003362:	6010      	str	r0, [r2, #0]
 8003364:	7019      	strb	r1, [r3, #0]
 8003366:	4608      	mov	r0, r1
 8003368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800336c:	4770      	bx	lr

0800336e <__sfputs_r>:
 800336e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003370:	4606      	mov	r6, r0
 8003372:	460f      	mov	r7, r1
 8003374:	4614      	mov	r4, r2
 8003376:	18d5      	adds	r5, r2, r3
 8003378:	42ac      	cmp	r4, r5
 800337a:	d101      	bne.n	8003380 <__sfputs_r+0x12>
 800337c:	2000      	movs	r0, #0
 800337e:	e007      	b.n	8003390 <__sfputs_r+0x22>
 8003380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003384:	463a      	mov	r2, r7
 8003386:	4630      	mov	r0, r6
 8003388:	f7ff ffda 	bl	8003340 <__sfputc_r>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d1f3      	bne.n	8003378 <__sfputs_r+0xa>
 8003390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003394 <_vfiprintf_r>:
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	460d      	mov	r5, r1
 800339a:	b09d      	sub	sp, #116	; 0x74
 800339c:	4614      	mov	r4, r2
 800339e:	4698      	mov	r8, r3
 80033a0:	4606      	mov	r6, r0
 80033a2:	b118      	cbz	r0, 80033ac <_vfiprintf_r+0x18>
 80033a4:	6a03      	ldr	r3, [r0, #32]
 80033a6:	b90b      	cbnz	r3, 80033ac <_vfiprintf_r+0x18>
 80033a8:	f7ff fcca 	bl	8002d40 <__sinit>
 80033ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033ae:	07d9      	lsls	r1, r3, #31
 80033b0:	d405      	bmi.n	80033be <_vfiprintf_r+0x2a>
 80033b2:	89ab      	ldrh	r3, [r5, #12]
 80033b4:	059a      	lsls	r2, r3, #22
 80033b6:	d402      	bmi.n	80033be <_vfiprintf_r+0x2a>
 80033b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033ba:	f7ff fec7 	bl	800314c <__retarget_lock_acquire_recursive>
 80033be:	89ab      	ldrh	r3, [r5, #12]
 80033c0:	071b      	lsls	r3, r3, #28
 80033c2:	d501      	bpl.n	80033c8 <_vfiprintf_r+0x34>
 80033c4:	692b      	ldr	r3, [r5, #16]
 80033c6:	b99b      	cbnz	r3, 80033f0 <_vfiprintf_r+0x5c>
 80033c8:	4629      	mov	r1, r5
 80033ca:	4630      	mov	r0, r6
 80033cc:	f7ff fdee 	bl	8002fac <__swsetup_r>
 80033d0:	b170      	cbz	r0, 80033f0 <_vfiprintf_r+0x5c>
 80033d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033d4:	07dc      	lsls	r4, r3, #31
 80033d6:	d504      	bpl.n	80033e2 <_vfiprintf_r+0x4e>
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	b01d      	add	sp, #116	; 0x74
 80033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e2:	89ab      	ldrh	r3, [r5, #12]
 80033e4:	0598      	lsls	r0, r3, #22
 80033e6:	d4f7      	bmi.n	80033d8 <_vfiprintf_r+0x44>
 80033e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033ea:	f7ff feb0 	bl	800314e <__retarget_lock_release_recursive>
 80033ee:	e7f3      	b.n	80033d8 <_vfiprintf_r+0x44>
 80033f0:	2300      	movs	r3, #0
 80033f2:	9309      	str	r3, [sp, #36]	; 0x24
 80033f4:	2320      	movs	r3, #32
 80033f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80033fe:	2330      	movs	r3, #48	; 0x30
 8003400:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80035b4 <_vfiprintf_r+0x220>
 8003404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003408:	f04f 0901 	mov.w	r9, #1
 800340c:	4623      	mov	r3, r4
 800340e:	469a      	mov	sl, r3
 8003410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003414:	b10a      	cbz	r2, 800341a <_vfiprintf_r+0x86>
 8003416:	2a25      	cmp	r2, #37	; 0x25
 8003418:	d1f9      	bne.n	800340e <_vfiprintf_r+0x7a>
 800341a:	ebba 0b04 	subs.w	fp, sl, r4
 800341e:	d00b      	beq.n	8003438 <_vfiprintf_r+0xa4>
 8003420:	465b      	mov	r3, fp
 8003422:	4622      	mov	r2, r4
 8003424:	4629      	mov	r1, r5
 8003426:	4630      	mov	r0, r6
 8003428:	f7ff ffa1 	bl	800336e <__sfputs_r>
 800342c:	3001      	adds	r0, #1
 800342e:	f000 80a9 	beq.w	8003584 <_vfiprintf_r+0x1f0>
 8003432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003434:	445a      	add	r2, fp
 8003436:	9209      	str	r2, [sp, #36]	; 0x24
 8003438:	f89a 3000 	ldrb.w	r3, [sl]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a1 	beq.w	8003584 <_vfiprintf_r+0x1f0>
 8003442:	2300      	movs	r3, #0
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
 8003448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800344c:	f10a 0a01 	add.w	sl, sl, #1
 8003450:	9304      	str	r3, [sp, #16]
 8003452:	9307      	str	r3, [sp, #28]
 8003454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003458:	931a      	str	r3, [sp, #104]	; 0x68
 800345a:	4654      	mov	r4, sl
 800345c:	2205      	movs	r2, #5
 800345e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003462:	4854      	ldr	r0, [pc, #336]	; (80035b4 <_vfiprintf_r+0x220>)
 8003464:	f7fc ff54 	bl	8000310 <memchr>
 8003468:	9a04      	ldr	r2, [sp, #16]
 800346a:	b9d8      	cbnz	r0, 80034a4 <_vfiprintf_r+0x110>
 800346c:	06d1      	lsls	r1, r2, #27
 800346e:	bf44      	itt	mi
 8003470:	2320      	movmi	r3, #32
 8003472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003476:	0713      	lsls	r3, r2, #28
 8003478:	bf44      	itt	mi
 800347a:	232b      	movmi	r3, #43	; 0x2b
 800347c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003480:	f89a 3000 	ldrb.w	r3, [sl]
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d015      	beq.n	80034b4 <_vfiprintf_r+0x120>
 8003488:	9a07      	ldr	r2, [sp, #28]
 800348a:	4654      	mov	r4, sl
 800348c:	2000      	movs	r0, #0
 800348e:	f04f 0c0a 	mov.w	ip, #10
 8003492:	4621      	mov	r1, r4
 8003494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003498:	3b30      	subs	r3, #48	; 0x30
 800349a:	2b09      	cmp	r3, #9
 800349c:	d94d      	bls.n	800353a <_vfiprintf_r+0x1a6>
 800349e:	b1b0      	cbz	r0, 80034ce <_vfiprintf_r+0x13a>
 80034a0:	9207      	str	r2, [sp, #28]
 80034a2:	e014      	b.n	80034ce <_vfiprintf_r+0x13a>
 80034a4:	eba0 0308 	sub.w	r3, r0, r8
 80034a8:	fa09 f303 	lsl.w	r3, r9, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	9304      	str	r3, [sp, #16]
 80034b0:	46a2      	mov	sl, r4
 80034b2:	e7d2      	b.n	800345a <_vfiprintf_r+0xc6>
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	1d19      	adds	r1, r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	9103      	str	r1, [sp, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bfbb      	ittet	lt
 80034c0:	425b      	neglt	r3, r3
 80034c2:	f042 0202 	orrlt.w	r2, r2, #2
 80034c6:	9307      	strge	r3, [sp, #28]
 80034c8:	9307      	strlt	r3, [sp, #28]
 80034ca:	bfb8      	it	lt
 80034cc:	9204      	strlt	r2, [sp, #16]
 80034ce:	7823      	ldrb	r3, [r4, #0]
 80034d0:	2b2e      	cmp	r3, #46	; 0x2e
 80034d2:	d10c      	bne.n	80034ee <_vfiprintf_r+0x15a>
 80034d4:	7863      	ldrb	r3, [r4, #1]
 80034d6:	2b2a      	cmp	r3, #42	; 0x2a
 80034d8:	d134      	bne.n	8003544 <_vfiprintf_r+0x1b0>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	9203      	str	r2, [sp, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bfb8      	it	lt
 80034e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034ea:	3402      	adds	r4, #2
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80035c4 <_vfiprintf_r+0x230>
 80034f2:	7821      	ldrb	r1, [r4, #0]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4650      	mov	r0, sl
 80034f8:	f7fc ff0a 	bl	8000310 <memchr>
 80034fc:	b138      	cbz	r0, 800350e <_vfiprintf_r+0x17a>
 80034fe:	9b04      	ldr	r3, [sp, #16]
 8003500:	eba0 000a 	sub.w	r0, r0, sl
 8003504:	2240      	movs	r2, #64	; 0x40
 8003506:	4082      	lsls	r2, r0
 8003508:	4313      	orrs	r3, r2
 800350a:	3401      	adds	r4, #1
 800350c:	9304      	str	r3, [sp, #16]
 800350e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003512:	4829      	ldr	r0, [pc, #164]	; (80035b8 <_vfiprintf_r+0x224>)
 8003514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003518:	2206      	movs	r2, #6
 800351a:	f7fc fef9 	bl	8000310 <memchr>
 800351e:	2800      	cmp	r0, #0
 8003520:	d03f      	beq.n	80035a2 <_vfiprintf_r+0x20e>
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <_vfiprintf_r+0x228>)
 8003524:	bb1b      	cbnz	r3, 800356e <_vfiprintf_r+0x1da>
 8003526:	9b03      	ldr	r3, [sp, #12]
 8003528:	3307      	adds	r3, #7
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	3308      	adds	r3, #8
 8003530:	9303      	str	r3, [sp, #12]
 8003532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003534:	443b      	add	r3, r7
 8003536:	9309      	str	r3, [sp, #36]	; 0x24
 8003538:	e768      	b.n	800340c <_vfiprintf_r+0x78>
 800353a:	fb0c 3202 	mla	r2, ip, r2, r3
 800353e:	460c      	mov	r4, r1
 8003540:	2001      	movs	r0, #1
 8003542:	e7a6      	b.n	8003492 <_vfiprintf_r+0xfe>
 8003544:	2300      	movs	r3, #0
 8003546:	3401      	adds	r4, #1
 8003548:	9305      	str	r3, [sp, #20]
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0c0a 	mov.w	ip, #10
 8003550:	4620      	mov	r0, r4
 8003552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003556:	3a30      	subs	r2, #48	; 0x30
 8003558:	2a09      	cmp	r2, #9
 800355a:	d903      	bls.n	8003564 <_vfiprintf_r+0x1d0>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0c6      	beq.n	80034ee <_vfiprintf_r+0x15a>
 8003560:	9105      	str	r1, [sp, #20]
 8003562:	e7c4      	b.n	80034ee <_vfiprintf_r+0x15a>
 8003564:	fb0c 2101 	mla	r1, ip, r1, r2
 8003568:	4604      	mov	r4, r0
 800356a:	2301      	movs	r3, #1
 800356c:	e7f0      	b.n	8003550 <_vfiprintf_r+0x1bc>
 800356e:	ab03      	add	r3, sp, #12
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	462a      	mov	r2, r5
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <_vfiprintf_r+0x22c>)
 8003576:	a904      	add	r1, sp, #16
 8003578:	4630      	mov	r0, r6
 800357a:	f3af 8000 	nop.w
 800357e:	4607      	mov	r7, r0
 8003580:	1c78      	adds	r0, r7, #1
 8003582:	d1d6      	bne.n	8003532 <_vfiprintf_r+0x19e>
 8003584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003586:	07d9      	lsls	r1, r3, #31
 8003588:	d405      	bmi.n	8003596 <_vfiprintf_r+0x202>
 800358a:	89ab      	ldrh	r3, [r5, #12]
 800358c:	059a      	lsls	r2, r3, #22
 800358e:	d402      	bmi.n	8003596 <_vfiprintf_r+0x202>
 8003590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003592:	f7ff fddc 	bl	800314e <__retarget_lock_release_recursive>
 8003596:	89ab      	ldrh	r3, [r5, #12]
 8003598:	065b      	lsls	r3, r3, #25
 800359a:	f53f af1d 	bmi.w	80033d8 <_vfiprintf_r+0x44>
 800359e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035a0:	e71c      	b.n	80033dc <_vfiprintf_r+0x48>
 80035a2:	ab03      	add	r3, sp, #12
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	462a      	mov	r2, r5
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <_vfiprintf_r+0x22c>)
 80035aa:	a904      	add	r1, sp, #16
 80035ac:	4630      	mov	r0, r6
 80035ae:	f000 f879 	bl	80036a4 <_printf_i>
 80035b2:	e7e4      	b.n	800357e <_vfiprintf_r+0x1ea>
 80035b4:	08004995 	.word	0x08004995
 80035b8:	0800499f 	.word	0x0800499f
 80035bc:	00000000 	.word	0x00000000
 80035c0:	0800336f 	.word	0x0800336f
 80035c4:	0800499b 	.word	0x0800499b

080035c8 <_printf_common>:
 80035c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035cc:	4616      	mov	r6, r2
 80035ce:	4699      	mov	r9, r3
 80035d0:	688a      	ldr	r2, [r1, #8]
 80035d2:	690b      	ldr	r3, [r1, #16]
 80035d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d8:	4293      	cmp	r3, r2
 80035da:	bfb8      	it	lt
 80035dc:	4613      	movlt	r3, r2
 80035de:	6033      	str	r3, [r6, #0]
 80035e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035e4:	4607      	mov	r7, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	b10a      	cbz	r2, 80035ee <_printf_common+0x26>
 80035ea:	3301      	adds	r3, #1
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	0699      	lsls	r1, r3, #26
 80035f2:	bf42      	ittt	mi
 80035f4:	6833      	ldrmi	r3, [r6, #0]
 80035f6:	3302      	addmi	r3, #2
 80035f8:	6033      	strmi	r3, [r6, #0]
 80035fa:	6825      	ldr	r5, [r4, #0]
 80035fc:	f015 0506 	ands.w	r5, r5, #6
 8003600:	d106      	bne.n	8003610 <_printf_common+0x48>
 8003602:	f104 0a19 	add.w	sl, r4, #25
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	6832      	ldr	r2, [r6, #0]
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	42ab      	cmp	r3, r5
 800360e:	dc26      	bgt.n	800365e <_printf_common+0x96>
 8003610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003614:	1e13      	subs	r3, r2, #0
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	bf18      	it	ne
 800361a:	2301      	movne	r3, #1
 800361c:	0692      	lsls	r2, r2, #26
 800361e:	d42b      	bmi.n	8003678 <_printf_common+0xb0>
 8003620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003624:	4649      	mov	r1, r9
 8003626:	4638      	mov	r0, r7
 8003628:	47c0      	blx	r8
 800362a:	3001      	adds	r0, #1
 800362c:	d01e      	beq.n	800366c <_printf_common+0xa4>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	6922      	ldr	r2, [r4, #16]
 8003632:	f003 0306 	and.w	r3, r3, #6
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf02      	ittt	eq
 800363a:	68e5      	ldreq	r5, [r4, #12]
 800363c:	6833      	ldreq	r3, [r6, #0]
 800363e:	1aed      	subeq	r5, r5, r3
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	bf0c      	ite	eq
 8003644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003648:	2500      	movne	r5, #0
 800364a:	4293      	cmp	r3, r2
 800364c:	bfc4      	itt	gt
 800364e:	1a9b      	subgt	r3, r3, r2
 8003650:	18ed      	addgt	r5, r5, r3
 8003652:	2600      	movs	r6, #0
 8003654:	341a      	adds	r4, #26
 8003656:	42b5      	cmp	r5, r6
 8003658:	d11a      	bne.n	8003690 <_printf_common+0xc8>
 800365a:	2000      	movs	r0, #0
 800365c:	e008      	b.n	8003670 <_printf_common+0xa8>
 800365e:	2301      	movs	r3, #1
 8003660:	4652      	mov	r2, sl
 8003662:	4649      	mov	r1, r9
 8003664:	4638      	mov	r0, r7
 8003666:	47c0      	blx	r8
 8003668:	3001      	adds	r0, #1
 800366a:	d103      	bne.n	8003674 <_printf_common+0xac>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	3501      	adds	r5, #1
 8003676:	e7c6      	b.n	8003606 <_printf_common+0x3e>
 8003678:	18e1      	adds	r1, r4, r3
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	2030      	movs	r0, #48	; 0x30
 800367e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003682:	4422      	add	r2, r4
 8003684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368c:	3302      	adds	r3, #2
 800368e:	e7c7      	b.n	8003620 <_printf_common+0x58>
 8003690:	2301      	movs	r3, #1
 8003692:	4622      	mov	r2, r4
 8003694:	4649      	mov	r1, r9
 8003696:	4638      	mov	r0, r7
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d0e6      	beq.n	800366c <_printf_common+0xa4>
 800369e:	3601      	adds	r6, #1
 80036a0:	e7d9      	b.n	8003656 <_printf_common+0x8e>
	...

080036a4 <_printf_i>:
 80036a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	7e0f      	ldrb	r7, [r1, #24]
 80036aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036ac:	2f78      	cmp	r7, #120	; 0x78
 80036ae:	4691      	mov	r9, r2
 80036b0:	4680      	mov	r8, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	469a      	mov	sl, r3
 80036b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036ba:	d807      	bhi.n	80036cc <_printf_i+0x28>
 80036bc:	2f62      	cmp	r7, #98	; 0x62
 80036be:	d80a      	bhi.n	80036d6 <_printf_i+0x32>
 80036c0:	2f00      	cmp	r7, #0
 80036c2:	f000 80d4 	beq.w	800386e <_printf_i+0x1ca>
 80036c6:	2f58      	cmp	r7, #88	; 0x58
 80036c8:	f000 80c0 	beq.w	800384c <_printf_i+0x1a8>
 80036cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036d4:	e03a      	b.n	800374c <_printf_i+0xa8>
 80036d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036da:	2b15      	cmp	r3, #21
 80036dc:	d8f6      	bhi.n	80036cc <_printf_i+0x28>
 80036de:	a101      	add	r1, pc, #4	; (adr r1, 80036e4 <_printf_i+0x40>)
 80036e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	08003751 	.word	0x08003751
 80036ec:	080036cd 	.word	0x080036cd
 80036f0:	080036cd 	.word	0x080036cd
 80036f4:	080036cd 	.word	0x080036cd
 80036f8:	080036cd 	.word	0x080036cd
 80036fc:	08003751 	.word	0x08003751
 8003700:	080036cd 	.word	0x080036cd
 8003704:	080036cd 	.word	0x080036cd
 8003708:	080036cd 	.word	0x080036cd
 800370c:	080036cd 	.word	0x080036cd
 8003710:	08003855 	.word	0x08003855
 8003714:	0800377d 	.word	0x0800377d
 8003718:	0800380f 	.word	0x0800380f
 800371c:	080036cd 	.word	0x080036cd
 8003720:	080036cd 	.word	0x080036cd
 8003724:	08003877 	.word	0x08003877
 8003728:	080036cd 	.word	0x080036cd
 800372c:	0800377d 	.word	0x0800377d
 8003730:	080036cd 	.word	0x080036cd
 8003734:	080036cd 	.word	0x080036cd
 8003738:	08003817 	.word	0x08003817
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800374c:	2301      	movs	r3, #1
 800374e:	e09f      	b.n	8003890 <_printf_i+0x1ec>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	0607      	lsls	r7, r0, #24
 8003756:	f103 0104 	add.w	r1, r3, #4
 800375a:	6029      	str	r1, [r5, #0]
 800375c:	d501      	bpl.n	8003762 <_printf_i+0xbe>
 800375e:	681e      	ldr	r6, [r3, #0]
 8003760:	e003      	b.n	800376a <_printf_i+0xc6>
 8003762:	0646      	lsls	r6, r0, #25
 8003764:	d5fb      	bpl.n	800375e <_printf_i+0xba>
 8003766:	f9b3 6000 	ldrsh.w	r6, [r3]
 800376a:	2e00      	cmp	r6, #0
 800376c:	da03      	bge.n	8003776 <_printf_i+0xd2>
 800376e:	232d      	movs	r3, #45	; 0x2d
 8003770:	4276      	negs	r6, r6
 8003772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003776:	485a      	ldr	r0, [pc, #360]	; (80038e0 <_printf_i+0x23c>)
 8003778:	230a      	movs	r3, #10
 800377a:	e012      	b.n	80037a2 <_printf_i+0xfe>
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	1d19      	adds	r1, r3, #4
 8003782:	6029      	str	r1, [r5, #0]
 8003784:	0605      	lsls	r5, r0, #24
 8003786:	d501      	bpl.n	800378c <_printf_i+0xe8>
 8003788:	681e      	ldr	r6, [r3, #0]
 800378a:	e002      	b.n	8003792 <_printf_i+0xee>
 800378c:	0641      	lsls	r1, r0, #25
 800378e:	d5fb      	bpl.n	8003788 <_printf_i+0xe4>
 8003790:	881e      	ldrh	r6, [r3, #0]
 8003792:	4853      	ldr	r0, [pc, #332]	; (80038e0 <_printf_i+0x23c>)
 8003794:	2f6f      	cmp	r7, #111	; 0x6f
 8003796:	bf0c      	ite	eq
 8003798:	2308      	moveq	r3, #8
 800379a:	230a      	movne	r3, #10
 800379c:	2100      	movs	r1, #0
 800379e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037a2:	6865      	ldr	r5, [r4, #4]
 80037a4:	60a5      	str	r5, [r4, #8]
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	bfa2      	ittt	ge
 80037aa:	6821      	ldrge	r1, [r4, #0]
 80037ac:	f021 0104 	bicge.w	r1, r1, #4
 80037b0:	6021      	strge	r1, [r4, #0]
 80037b2:	b90e      	cbnz	r6, 80037b8 <_printf_i+0x114>
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	d04b      	beq.n	8003850 <_printf_i+0x1ac>
 80037b8:	4615      	mov	r5, r2
 80037ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80037be:	fb03 6711 	mls	r7, r3, r1, r6
 80037c2:	5dc7      	ldrb	r7, [r0, r7]
 80037c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037c8:	4637      	mov	r7, r6
 80037ca:	42bb      	cmp	r3, r7
 80037cc:	460e      	mov	r6, r1
 80037ce:	d9f4      	bls.n	80037ba <_printf_i+0x116>
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d10b      	bne.n	80037ec <_printf_i+0x148>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	07de      	lsls	r6, r3, #31
 80037d8:	d508      	bpl.n	80037ec <_printf_i+0x148>
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	6861      	ldr	r1, [r4, #4]
 80037de:	4299      	cmp	r1, r3
 80037e0:	bfde      	ittt	le
 80037e2:	2330      	movle	r3, #48	; 0x30
 80037e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037ec:	1b52      	subs	r2, r2, r5
 80037ee:	6122      	str	r2, [r4, #16]
 80037f0:	f8cd a000 	str.w	sl, [sp]
 80037f4:	464b      	mov	r3, r9
 80037f6:	aa03      	add	r2, sp, #12
 80037f8:	4621      	mov	r1, r4
 80037fa:	4640      	mov	r0, r8
 80037fc:	f7ff fee4 	bl	80035c8 <_printf_common>
 8003800:	3001      	adds	r0, #1
 8003802:	d14a      	bne.n	800389a <_printf_i+0x1f6>
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	b004      	add	sp, #16
 800380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	4833      	ldr	r0, [pc, #204]	; (80038e4 <_printf_i+0x240>)
 8003818:	2778      	movs	r7, #120	; 0x78
 800381a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	6829      	ldr	r1, [r5, #0]
 8003822:	061f      	lsls	r7, r3, #24
 8003824:	f851 6b04 	ldr.w	r6, [r1], #4
 8003828:	d402      	bmi.n	8003830 <_printf_i+0x18c>
 800382a:	065f      	lsls	r7, r3, #25
 800382c:	bf48      	it	mi
 800382e:	b2b6      	uxthmi	r6, r6
 8003830:	07df      	lsls	r7, r3, #31
 8003832:	bf48      	it	mi
 8003834:	f043 0320 	orrmi.w	r3, r3, #32
 8003838:	6029      	str	r1, [r5, #0]
 800383a:	bf48      	it	mi
 800383c:	6023      	strmi	r3, [r4, #0]
 800383e:	b91e      	cbnz	r6, 8003848 <_printf_i+0x1a4>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	2310      	movs	r3, #16
 800384a:	e7a7      	b.n	800379c <_printf_i+0xf8>
 800384c:	4824      	ldr	r0, [pc, #144]	; (80038e0 <_printf_i+0x23c>)
 800384e:	e7e4      	b.n	800381a <_printf_i+0x176>
 8003850:	4615      	mov	r5, r2
 8003852:	e7bd      	b.n	80037d0 <_printf_i+0x12c>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	6826      	ldr	r6, [r4, #0]
 8003858:	6961      	ldr	r1, [r4, #20]
 800385a:	1d18      	adds	r0, r3, #4
 800385c:	6028      	str	r0, [r5, #0]
 800385e:	0635      	lsls	r5, r6, #24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	d501      	bpl.n	8003868 <_printf_i+0x1c4>
 8003864:	6019      	str	r1, [r3, #0]
 8003866:	e002      	b.n	800386e <_printf_i+0x1ca>
 8003868:	0670      	lsls	r0, r6, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0x1c0>
 800386c:	8019      	strh	r1, [r3, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	6123      	str	r3, [r4, #16]
 8003872:	4615      	mov	r5, r2
 8003874:	e7bc      	b.n	80037f0 <_printf_i+0x14c>
 8003876:	682b      	ldr	r3, [r5, #0]
 8003878:	1d1a      	adds	r2, r3, #4
 800387a:	602a      	str	r2, [r5, #0]
 800387c:	681d      	ldr	r5, [r3, #0]
 800387e:	6862      	ldr	r2, [r4, #4]
 8003880:	2100      	movs	r1, #0
 8003882:	4628      	mov	r0, r5
 8003884:	f7fc fd44 	bl	8000310 <memchr>
 8003888:	b108      	cbz	r0, 800388e <_printf_i+0x1ea>
 800388a:	1b40      	subs	r0, r0, r5
 800388c:	6060      	str	r0, [r4, #4]
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	6123      	str	r3, [r4, #16]
 8003892:	2300      	movs	r3, #0
 8003894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003898:	e7aa      	b.n	80037f0 <_printf_i+0x14c>
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	462a      	mov	r2, r5
 800389e:	4649      	mov	r1, r9
 80038a0:	4640      	mov	r0, r8
 80038a2:	47d0      	blx	sl
 80038a4:	3001      	adds	r0, #1
 80038a6:	d0ad      	beq.n	8003804 <_printf_i+0x160>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	079b      	lsls	r3, r3, #30
 80038ac:	d413      	bmi.n	80038d6 <_printf_i+0x232>
 80038ae:	68e0      	ldr	r0, [r4, #12]
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	4298      	cmp	r0, r3
 80038b4:	bfb8      	it	lt
 80038b6:	4618      	movlt	r0, r3
 80038b8:	e7a6      	b.n	8003808 <_printf_i+0x164>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4632      	mov	r2, r6
 80038be:	4649      	mov	r1, r9
 80038c0:	4640      	mov	r0, r8
 80038c2:	47d0      	blx	sl
 80038c4:	3001      	adds	r0, #1
 80038c6:	d09d      	beq.n	8003804 <_printf_i+0x160>
 80038c8:	3501      	adds	r5, #1
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	9903      	ldr	r1, [sp, #12]
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	42ab      	cmp	r3, r5
 80038d2:	dcf2      	bgt.n	80038ba <_printf_i+0x216>
 80038d4:	e7eb      	b.n	80038ae <_printf_i+0x20a>
 80038d6:	2500      	movs	r5, #0
 80038d8:	f104 0619 	add.w	r6, r4, #25
 80038dc:	e7f5      	b.n	80038ca <_printf_i+0x226>
 80038de:	bf00      	nop
 80038e0:	080049a6 	.word	0x080049a6
 80038e4:	080049b7 	.word	0x080049b7

080038e8 <__svfiscanf_r>:
 80038e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ec:	461d      	mov	r5, r3
 80038ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80038f0:	07df      	lsls	r7, r3, #31
 80038f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80038f6:	4606      	mov	r6, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	4692      	mov	sl, r2
 80038fc:	d405      	bmi.n	800390a <__svfiscanf_r+0x22>
 80038fe:	898b      	ldrh	r3, [r1, #12]
 8003900:	0598      	lsls	r0, r3, #22
 8003902:	d402      	bmi.n	800390a <__svfiscanf_r+0x22>
 8003904:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8003906:	f7ff fc21 	bl	800314c <__retarget_lock_acquire_recursive>
 800390a:	2300      	movs	r3, #0
 800390c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003910:	4baa      	ldr	r3, [pc, #680]	; (8003bbc <__svfiscanf_r+0x2d4>)
 8003912:	93a0      	str	r3, [sp, #640]	; 0x280
 8003914:	f10d 0804 	add.w	r8, sp, #4
 8003918:	4ba9      	ldr	r3, [pc, #676]	; (8003bc0 <__svfiscanf_r+0x2d8>)
 800391a:	4faa      	ldr	r7, [pc, #680]	; (8003bc4 <__svfiscanf_r+0x2dc>)
 800391c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8003bc8 <__svfiscanf_r+0x2e0>
 8003920:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003924:	93a1      	str	r3, [sp, #644]	; 0x284
 8003926:	9500      	str	r5, [sp, #0]
 8003928:	f89a 3000 	ldrb.w	r3, [sl]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8170 	beq.w	8003c12 <__svfiscanf_r+0x32a>
 8003932:	5cf9      	ldrb	r1, [r7, r3]
 8003934:	f011 0108 	ands.w	r1, r1, #8
 8003938:	f10a 0501 	add.w	r5, sl, #1
 800393c:	d019      	beq.n	8003972 <__svfiscanf_r+0x8a>
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	dd0f      	ble.n	8003964 <__svfiscanf_r+0x7c>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	5cba      	ldrb	r2, [r7, r2]
 800394a:	0711      	lsls	r1, r2, #28
 800394c:	d401      	bmi.n	8003952 <__svfiscanf_r+0x6a>
 800394e:	46aa      	mov	sl, r5
 8003950:	e7ea      	b.n	8003928 <__svfiscanf_r+0x40>
 8003952:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003954:	3201      	adds	r2, #1
 8003956:	9245      	str	r2, [sp, #276]	; 0x114
 8003958:	6862      	ldr	r2, [r4, #4]
 800395a:	3301      	adds	r3, #1
 800395c:	3a01      	subs	r2, #1
 800395e:	6062      	str	r2, [r4, #4]
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	e7ec      	b.n	800393e <__svfiscanf_r+0x56>
 8003964:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003966:	4621      	mov	r1, r4
 8003968:	4630      	mov	r0, r6
 800396a:	4798      	blx	r3
 800396c:	2800      	cmp	r0, #0
 800396e:	d0e9      	beq.n	8003944 <__svfiscanf_r+0x5c>
 8003970:	e7ed      	b.n	800394e <__svfiscanf_r+0x66>
 8003972:	2b25      	cmp	r3, #37	; 0x25
 8003974:	d012      	beq.n	800399c <__svfiscanf_r+0xb4>
 8003976:	469a      	mov	sl, r3
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f340 8093 	ble.w	8003aa6 <__svfiscanf_r+0x1be>
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	7813      	ldrb	r3, [r2, #0]
 8003984:	4553      	cmp	r3, sl
 8003986:	f040 8144 	bne.w	8003c12 <__svfiscanf_r+0x32a>
 800398a:	6863      	ldr	r3, [r4, #4]
 800398c:	3b01      	subs	r3, #1
 800398e:	6063      	str	r3, [r4, #4]
 8003990:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003992:	3201      	adds	r2, #1
 8003994:	3301      	adds	r3, #1
 8003996:	6022      	str	r2, [r4, #0]
 8003998:	9345      	str	r3, [sp, #276]	; 0x114
 800399a:	e7d8      	b.n	800394e <__svfiscanf_r+0x66>
 800399c:	9141      	str	r1, [sp, #260]	; 0x104
 800399e:	9143      	str	r1, [sp, #268]	; 0x10c
 80039a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80039a4:	2b2a      	cmp	r3, #42	; 0x2a
 80039a6:	bf02      	ittt	eq
 80039a8:	2310      	moveq	r3, #16
 80039aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80039ac:	f10a 0502 	addeq.w	r5, sl, #2
 80039b0:	220a      	movs	r2, #10
 80039b2:	46aa      	mov	sl, r5
 80039b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80039b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d91d      	bls.n	80039fc <__svfiscanf_r+0x114>
 80039c0:	4881      	ldr	r0, [pc, #516]	; (8003bc8 <__svfiscanf_r+0x2e0>)
 80039c2:	2203      	movs	r2, #3
 80039c4:	f7fc fca4 	bl	8000310 <memchr>
 80039c8:	b138      	cbz	r0, 80039da <__svfiscanf_r+0xf2>
 80039ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80039cc:	eba0 0009 	sub.w	r0, r0, r9
 80039d0:	2301      	movs	r3, #1
 80039d2:	4083      	lsls	r3, r0
 80039d4:	4313      	orrs	r3, r2
 80039d6:	9341      	str	r3, [sp, #260]	; 0x104
 80039d8:	4655      	mov	r5, sl
 80039da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039de:	2b78      	cmp	r3, #120	; 0x78
 80039e0:	d807      	bhi.n	80039f2 <__svfiscanf_r+0x10a>
 80039e2:	2b57      	cmp	r3, #87	; 0x57
 80039e4:	d811      	bhi.n	8003a0a <__svfiscanf_r+0x122>
 80039e6:	2b25      	cmp	r3, #37	; 0x25
 80039e8:	d0c5      	beq.n	8003976 <__svfiscanf_r+0x8e>
 80039ea:	d857      	bhi.n	8003a9c <__svfiscanf_r+0x1b4>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80c6 	beq.w	8003b7e <__svfiscanf_r+0x296>
 80039f2:	2303      	movs	r3, #3
 80039f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80039f6:	230a      	movs	r3, #10
 80039f8:	9342      	str	r3, [sp, #264]	; 0x108
 80039fa:	e07f      	b.n	8003afc <__svfiscanf_r+0x214>
 80039fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80039fe:	fb02 1103 	mla	r1, r2, r3, r1
 8003a02:	3930      	subs	r1, #48	; 0x30
 8003a04:	9143      	str	r1, [sp, #268]	; 0x10c
 8003a06:	4655      	mov	r5, sl
 8003a08:	e7d3      	b.n	80039b2 <__svfiscanf_r+0xca>
 8003a0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003a0e:	2a20      	cmp	r2, #32
 8003a10:	d8ef      	bhi.n	80039f2 <__svfiscanf_r+0x10a>
 8003a12:	a101      	add	r1, pc, #4	; (adr r1, 8003a18 <__svfiscanf_r+0x130>)
 8003a14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a18:	08003adf 	.word	0x08003adf
 8003a1c:	080039f3 	.word	0x080039f3
 8003a20:	080039f3 	.word	0x080039f3
 8003a24:	08003b3d 	.word	0x08003b3d
 8003a28:	080039f3 	.word	0x080039f3
 8003a2c:	080039f3 	.word	0x080039f3
 8003a30:	080039f3 	.word	0x080039f3
 8003a34:	080039f3 	.word	0x080039f3
 8003a38:	080039f3 	.word	0x080039f3
 8003a3c:	080039f3 	.word	0x080039f3
 8003a40:	080039f3 	.word	0x080039f3
 8003a44:	08003b53 	.word	0x08003b53
 8003a48:	08003b39 	.word	0x08003b39
 8003a4c:	08003aa3 	.word	0x08003aa3
 8003a50:	08003aa3 	.word	0x08003aa3
 8003a54:	08003aa3 	.word	0x08003aa3
 8003a58:	080039f3 	.word	0x080039f3
 8003a5c:	08003af5 	.word	0x08003af5
 8003a60:	080039f3 	.word	0x080039f3
 8003a64:	080039f3 	.word	0x080039f3
 8003a68:	080039f3 	.word	0x080039f3
 8003a6c:	080039f3 	.word	0x080039f3
 8003a70:	08003b63 	.word	0x08003b63
 8003a74:	08003b31 	.word	0x08003b31
 8003a78:	08003ad7 	.word	0x08003ad7
 8003a7c:	080039f3 	.word	0x080039f3
 8003a80:	080039f3 	.word	0x080039f3
 8003a84:	08003b5f 	.word	0x08003b5f
 8003a88:	080039f3 	.word	0x080039f3
 8003a8c:	08003b39 	.word	0x08003b39
 8003a90:	080039f3 	.word	0x080039f3
 8003a94:	080039f3 	.word	0x080039f3
 8003a98:	08003adf 	.word	0x08003adf
 8003a9c:	3b45      	subs	r3, #69	; 0x45
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d8a7      	bhi.n	80039f2 <__svfiscanf_r+0x10a>
 8003aa2:	2305      	movs	r3, #5
 8003aa4:	e029      	b.n	8003afa <__svfiscanf_r+0x212>
 8003aa6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4630      	mov	r0, r6
 8003aac:	4798      	blx	r3
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	f43f af66 	beq.w	8003980 <__svfiscanf_r+0x98>
 8003ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab6:	07da      	lsls	r2, r3, #31
 8003ab8:	f140 80a3 	bpl.w	8003c02 <__svfiscanf_r+0x31a>
 8003abc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d066      	beq.n	8003b90 <__svfiscanf_r+0x2a8>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ac8:	bf18      	it	ne
 8003aca:	f04f 30ff 	movne.w	r0, #4294967295
 8003ace:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ad8:	f042 0220 	orr.w	r2, r2, #32
 8003adc:	9241      	str	r2, [sp, #260]	; 0x104
 8003ade:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	9241      	str	r2, [sp, #260]	; 0x104
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	2b6f      	cmp	r3, #111	; 0x6f
 8003aea:	9242      	str	r2, [sp, #264]	; 0x108
 8003aec:	bf34      	ite	cc
 8003aee:	2303      	movcc	r3, #3
 8003af0:	2304      	movcs	r3, #4
 8003af2:	e002      	b.n	8003afa <__svfiscanf_r+0x212>
 8003af4:	2300      	movs	r3, #0
 8003af6:	9342      	str	r3, [sp, #264]	; 0x108
 8003af8:	2303      	movs	r3, #3
 8003afa:	9347      	str	r3, [sp, #284]	; 0x11c
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dd49      	ble.n	8003b96 <__svfiscanf_r+0x2ae>
 8003b02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b04:	065b      	lsls	r3, r3, #25
 8003b06:	d404      	bmi.n	8003b12 <__svfiscanf_r+0x22a>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	5cba      	ldrb	r2, [r7, r2]
 8003b0e:	0710      	lsls	r0, r2, #28
 8003b10:	d448      	bmi.n	8003ba4 <__svfiscanf_r+0x2bc>
 8003b12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	dc60      	bgt.n	8003bda <__svfiscanf_r+0x2f2>
 8003b18:	466b      	mov	r3, sp
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	a941      	add	r1, sp, #260	; 0x104
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f000 f898 	bl	8003c54 <_scanf_chars>
 8003b24:	2801      	cmp	r0, #1
 8003b26:	d074      	beq.n	8003c12 <__svfiscanf_r+0x32a>
 8003b28:	2802      	cmp	r0, #2
 8003b2a:	f47f af10 	bne.w	800394e <__svfiscanf_r+0x66>
 8003b2e:	e7c1      	b.n	8003ab4 <__svfiscanf_r+0x1cc>
 8003b30:	2308      	movs	r3, #8
 8003b32:	9342      	str	r3, [sp, #264]	; 0x108
 8003b34:	2304      	movs	r3, #4
 8003b36:	e7e0      	b.n	8003afa <__svfiscanf_r+0x212>
 8003b38:	220a      	movs	r2, #10
 8003b3a:	e7d5      	b.n	8003ae8 <__svfiscanf_r+0x200>
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4640      	mov	r0, r8
 8003b40:	f000 fb6c 	bl	800421c <__sccl>
 8003b44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4a:	9341      	str	r3, [sp, #260]	; 0x104
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e7d3      	b.n	8003afa <__svfiscanf_r+0x212>
 8003b52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b58:	9341      	str	r3, [sp, #260]	; 0x104
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e7cd      	b.n	8003afa <__svfiscanf_r+0x212>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e7cb      	b.n	8003afa <__svfiscanf_r+0x212>
 8003b62:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003b64:	06c3      	lsls	r3, r0, #27
 8003b66:	f53f aef2 	bmi.w	800394e <__svfiscanf_r+0x66>
 8003b6a:	9b00      	ldr	r3, [sp, #0]
 8003b6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b6e:	1d19      	adds	r1, r3, #4
 8003b70:	9100      	str	r1, [sp, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	07c0      	lsls	r0, r0, #31
 8003b76:	bf4c      	ite	mi
 8003b78:	801a      	strhmi	r2, [r3, #0]
 8003b7a:	601a      	strpl	r2, [r3, #0]
 8003b7c:	e6e7      	b.n	800394e <__svfiscanf_r+0x66>
 8003b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b80:	07d8      	lsls	r0, r3, #31
 8003b82:	d405      	bmi.n	8003b90 <__svfiscanf_r+0x2a8>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	0599      	lsls	r1, r3, #22
 8003b88:	d402      	bmi.n	8003b90 <__svfiscanf_r+0x2a8>
 8003b8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b8c:	f7ff fadf 	bl	800314e <__retarget_lock_release_recursive>
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	e79b      	b.n	8003ace <__svfiscanf_r+0x1e6>
 8003b96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	4798      	blx	r3
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d0af      	beq.n	8003b02 <__svfiscanf_r+0x21a>
 8003ba2:	e787      	b.n	8003ab4 <__svfiscanf_r+0x1cc>
 8003ba4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ba6:	3201      	adds	r2, #1
 8003ba8:	9245      	str	r2, [sp, #276]	; 0x114
 8003baa:	6862      	ldr	r2, [r4, #4]
 8003bac:	3a01      	subs	r2, #1
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	6062      	str	r2, [r4, #4]
 8003bb2:	dd0b      	ble.n	8003bcc <__svfiscanf_r+0x2e4>
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	e7a6      	b.n	8003b08 <__svfiscanf_r+0x220>
 8003bba:	bf00      	nop
 8003bbc:	08004303 	.word	0x08004303
 8003bc0:	0800412d 	.word	0x0800412d
 8003bc4:	08004895 	.word	0x08004895
 8003bc8:	0800499b 	.word	0x0800499b
 8003bcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	4798      	blx	r3
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d097      	beq.n	8003b08 <__svfiscanf_r+0x220>
 8003bd8:	e76c      	b.n	8003ab4 <__svfiscanf_r+0x1cc>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	dc06      	bgt.n	8003bec <__svfiscanf_r+0x304>
 8003bde:	466b      	mov	r3, sp
 8003be0:	4622      	mov	r2, r4
 8003be2:	a941      	add	r1, sp, #260	; 0x104
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 f88f 	bl	8003d08 <_scanf_i>
 8003bea:	e79b      	b.n	8003b24 <__svfiscanf_r+0x23c>
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <__svfiscanf_r+0x340>)
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f43f aead 	beq.w	800394e <__svfiscanf_r+0x66>
 8003bf4:	466b      	mov	r3, sp
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	a941      	add	r1, sp, #260	; 0x104
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f3af 8000 	nop.w
 8003c00:	e790      	b.n	8003b24 <__svfiscanf_r+0x23c>
 8003c02:	89a3      	ldrh	r3, [r4, #12]
 8003c04:	0599      	lsls	r1, r3, #22
 8003c06:	f53f af59 	bmi.w	8003abc <__svfiscanf_r+0x1d4>
 8003c0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c0c:	f7ff fa9f 	bl	800314e <__retarget_lock_release_recursive>
 8003c10:	e754      	b.n	8003abc <__svfiscanf_r+0x1d4>
 8003c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c14:	07da      	lsls	r2, r3, #31
 8003c16:	d405      	bmi.n	8003c24 <__svfiscanf_r+0x33c>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	059b      	lsls	r3, r3, #22
 8003c1c:	d402      	bmi.n	8003c24 <__svfiscanf_r+0x33c>
 8003c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c20:	f7ff fa95 	bl	800314e <__retarget_lock_release_recursive>
 8003c24:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003c26:	e752      	b.n	8003ace <__svfiscanf_r+0x1e6>
 8003c28:	00000000 	.word	0x00000000

08003c2c <_vfiscanf_r>:
 8003c2c:	b530      	push	{r4, r5, lr}
 8003c2e:	4604      	mov	r4, r0
 8003c30:	b085      	sub	sp, #20
 8003c32:	b148      	cbz	r0, 8003c48 <_vfiscanf_r+0x1c>
 8003c34:	6a05      	ldr	r5, [r0, #32]
 8003c36:	b93d      	cbnz	r5, 8003c48 <_vfiscanf_r+0x1c>
 8003c38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c3c:	9101      	str	r1, [sp, #4]
 8003c3e:	f7ff f87f 	bl	8002d40 <__sinit>
 8003c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c46:	9901      	ldr	r1, [sp, #4]
 8003c48:	4620      	mov	r0, r4
 8003c4a:	b005      	add	sp, #20
 8003c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c50:	f7ff be4a 	b.w	80038e8 <__svfiscanf_r>

08003c54 <_scanf_chars>:
 8003c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c58:	4615      	mov	r5, r2
 8003c5a:	688a      	ldr	r2, [r1, #8]
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	b932      	cbnz	r2, 8003c70 <_scanf_chars+0x1c>
 8003c62:	698a      	ldr	r2, [r1, #24]
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2201      	moveq	r2, #1
 8003c6a:	f04f 32ff 	movne.w	r2, #4294967295
 8003c6e:	608a      	str	r2, [r1, #8]
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003d04 <_scanf_chars+0xb0>
 8003c76:	06d1      	lsls	r1, r2, #27
 8003c78:	bf5f      	itttt	pl
 8003c7a:	681a      	ldrpl	r2, [r3, #0]
 8003c7c:	1d11      	addpl	r1, r2, #4
 8003c7e:	6019      	strpl	r1, [r3, #0]
 8003c80:	6816      	ldrpl	r6, [r2, #0]
 8003c82:	2700      	movs	r7, #0
 8003c84:	69a0      	ldr	r0, [r4, #24]
 8003c86:	b188      	cbz	r0, 8003cac <_scanf_chars+0x58>
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d107      	bne.n	8003c9c <_scanf_chars+0x48>
 8003c8c:	682a      	ldr	r2, [r5, #0]
 8003c8e:	7811      	ldrb	r1, [r2, #0]
 8003c90:	6962      	ldr	r2, [r4, #20]
 8003c92:	5c52      	ldrb	r2, [r2, r1]
 8003c94:	b952      	cbnz	r2, 8003cac <_scanf_chars+0x58>
 8003c96:	2f00      	cmp	r7, #0
 8003c98:	d031      	beq.n	8003cfe <_scanf_chars+0xaa>
 8003c9a:	e022      	b.n	8003ce2 <_scanf_chars+0x8e>
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	d120      	bne.n	8003ce2 <_scanf_chars+0x8e>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003ca8:	071b      	lsls	r3, r3, #28
 8003caa:	d41a      	bmi.n	8003ce2 <_scanf_chars+0x8e>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	06da      	lsls	r2, r3, #27
 8003cb0:	bf5e      	ittt	pl
 8003cb2:	682b      	ldrpl	r3, [r5, #0]
 8003cb4:	781b      	ldrbpl	r3, [r3, #0]
 8003cb6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003cba:	682a      	ldr	r2, [r5, #0]
 8003cbc:	686b      	ldr	r3, [r5, #4]
 8003cbe:	3201      	adds	r2, #1
 8003cc0:	602a      	str	r2, [r5, #0]
 8003cc2:	68a2      	ldr	r2, [r4, #8]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	3a01      	subs	r2, #1
 8003cc8:	606b      	str	r3, [r5, #4]
 8003cca:	3701      	adds	r7, #1
 8003ccc:	60a2      	str	r2, [r4, #8]
 8003cce:	b142      	cbz	r2, 8003ce2 <_scanf_chars+0x8e>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	dcd7      	bgt.n	8003c84 <_scanf_chars+0x30>
 8003cd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4798      	blx	r3
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d0d0      	beq.n	8003c84 <_scanf_chars+0x30>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	f013 0310 	ands.w	r3, r3, #16
 8003ce8:	d105      	bne.n	8003cf6 <_scanf_chars+0xa2>
 8003cea:	68e2      	ldr	r2, [r4, #12]
 8003cec:	3201      	adds	r2, #1
 8003cee:	60e2      	str	r2, [r4, #12]
 8003cf0:	69a2      	ldr	r2, [r4, #24]
 8003cf2:	b102      	cbz	r2, 8003cf6 <_scanf_chars+0xa2>
 8003cf4:	7033      	strb	r3, [r6, #0]
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	443b      	add	r3, r7
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d02:	bf00      	nop
 8003d04:	08004895 	.word	0x08004895

08003d08 <_scanf_i>:
 8003d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0c:	4698      	mov	r8, r3
 8003d0e:	4b74      	ldr	r3, [pc, #464]	; (8003ee0 <_scanf_i+0x1d8>)
 8003d10:	460c      	mov	r4, r1
 8003d12:	4682      	mov	sl, r0
 8003d14:	4616      	mov	r6, r2
 8003d16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	ab03      	add	r3, sp, #12
 8003d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d22:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <_scanf_i+0x1dc>)
 8003d24:	69a1      	ldr	r1, [r4, #24]
 8003d26:	4a70      	ldr	r2, [pc, #448]	; (8003ee8 <_scanf_i+0x1e0>)
 8003d28:	2903      	cmp	r1, #3
 8003d2a:	bf18      	it	ne
 8003d2c:	461a      	movne	r2, r3
 8003d2e:	68a3      	ldr	r3, [r4, #8]
 8003d30:	9201      	str	r2, [sp, #4]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003d38:	bf88      	it	hi
 8003d3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003d3e:	4627      	mov	r7, r4
 8003d40:	bf82      	ittt	hi
 8003d42:	eb03 0905 	addhi.w	r9, r3, r5
 8003d46:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003d4a:	60a3      	strhi	r3, [r4, #8]
 8003d4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003d50:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003d54:	bf98      	it	ls
 8003d56:	f04f 0900 	movls.w	r9, #0
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	463d      	mov	r5, r7
 8003d5e:	f04f 0b00 	mov.w	fp, #0
 8003d62:	6831      	ldr	r1, [r6, #0]
 8003d64:	ab03      	add	r3, sp, #12
 8003d66:	7809      	ldrb	r1, [r1, #0]
 8003d68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f7fc facf 	bl	8000310 <memchr>
 8003d72:	b328      	cbz	r0, 8003dc0 <_scanf_i+0xb8>
 8003d74:	f1bb 0f01 	cmp.w	fp, #1
 8003d78:	d159      	bne.n	8003e2e <_scanf_i+0x126>
 8003d7a:	6862      	ldr	r2, [r4, #4]
 8003d7c:	b92a      	cbnz	r2, 8003d8a <_scanf_i+0x82>
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	2308      	movs	r3, #8
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	6063      	str	r3, [r4, #4]
 8003d88:	6022      	str	r2, [r4, #0]
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003d90:	6022      	str	r2, [r4, #0]
 8003d92:	68a2      	ldr	r2, [r4, #8]
 8003d94:	1e51      	subs	r1, r2, #1
 8003d96:	60a1      	str	r1, [r4, #8]
 8003d98:	b192      	cbz	r2, 8003dc0 <_scanf_i+0xb8>
 8003d9a:	6832      	ldr	r2, [r6, #0]
 8003d9c:	1c51      	adds	r1, r2, #1
 8003d9e:	6031      	str	r1, [r6, #0]
 8003da0:	7812      	ldrb	r2, [r2, #0]
 8003da2:	f805 2b01 	strb.w	r2, [r5], #1
 8003da6:	6872      	ldr	r2, [r6, #4]
 8003da8:	3a01      	subs	r2, #1
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	6072      	str	r2, [r6, #4]
 8003dae:	dc07      	bgt.n	8003dc0 <_scanf_i+0xb8>
 8003db0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003db4:	4631      	mov	r1, r6
 8003db6:	4650      	mov	r0, sl
 8003db8:	4790      	blx	r2
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	f040 8085 	bne.w	8003eca <_scanf_i+0x1c2>
 8003dc0:	f10b 0b01 	add.w	fp, fp, #1
 8003dc4:	f1bb 0f03 	cmp.w	fp, #3
 8003dc8:	d1cb      	bne.n	8003d62 <_scanf_i+0x5a>
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	b90b      	cbnz	r3, 8003dd2 <_scanf_i+0xca>
 8003dce:	230a      	movs	r3, #10
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	6863      	ldr	r3, [r4, #4]
 8003dd4:	4945      	ldr	r1, [pc, #276]	; (8003eec <_scanf_i+0x1e4>)
 8003dd6:	6960      	ldr	r0, [r4, #20]
 8003dd8:	1ac9      	subs	r1, r1, r3
 8003dda:	f000 fa1f 	bl	800421c <__sccl>
 8003dde:	f04f 0b00 	mov.w	fp, #0
 8003de2:	68a3      	ldr	r3, [r4, #8]
 8003de4:	6822      	ldr	r2, [r4, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d03d      	beq.n	8003e66 <_scanf_i+0x15e>
 8003dea:	6831      	ldr	r1, [r6, #0]
 8003dec:	6960      	ldr	r0, [r4, #20]
 8003dee:	f891 c000 	ldrb.w	ip, [r1]
 8003df2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d035      	beq.n	8003e66 <_scanf_i+0x15e>
 8003dfa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003dfe:	d124      	bne.n	8003e4a <_scanf_i+0x142>
 8003e00:	0510      	lsls	r0, r2, #20
 8003e02:	d522      	bpl.n	8003e4a <_scanf_i+0x142>
 8003e04:	f10b 0b01 	add.w	fp, fp, #1
 8003e08:	f1b9 0f00 	cmp.w	r9, #0
 8003e0c:	d003      	beq.n	8003e16 <_scanf_i+0x10e>
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	6873      	ldr	r3, [r6, #4]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	6073      	str	r3, [r6, #4]
 8003e1e:	dd1b      	ble.n	8003e58 <_scanf_i+0x150>
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	68a3      	ldr	r3, [r4, #8]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	60a3      	str	r3, [r4, #8]
 8003e2c:	e7d9      	b.n	8003de2 <_scanf_i+0xda>
 8003e2e:	f1bb 0f02 	cmp.w	fp, #2
 8003e32:	d1ae      	bne.n	8003d92 <_scanf_i+0x8a>
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003e3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003e3e:	d1bf      	bne.n	8003dc0 <_scanf_i+0xb8>
 8003e40:	2310      	movs	r3, #16
 8003e42:	6063      	str	r3, [r4, #4]
 8003e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e48:	e7a2      	b.n	8003d90 <_scanf_i+0x88>
 8003e4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003e4e:	6022      	str	r2, [r4, #0]
 8003e50:	780b      	ldrb	r3, [r1, #0]
 8003e52:	f805 3b01 	strb.w	r3, [r5], #1
 8003e56:	e7de      	b.n	8003e16 <_scanf_i+0x10e>
 8003e58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4650      	mov	r0, sl
 8003e60:	4798      	blx	r3
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d0df      	beq.n	8003e26 <_scanf_i+0x11e>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	05d9      	lsls	r1, r3, #23
 8003e6a:	d50d      	bpl.n	8003e88 <_scanf_i+0x180>
 8003e6c:	42bd      	cmp	r5, r7
 8003e6e:	d909      	bls.n	8003e84 <_scanf_i+0x17c>
 8003e70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e78:	4632      	mov	r2, r6
 8003e7a:	4650      	mov	r0, sl
 8003e7c:	4798      	blx	r3
 8003e7e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003e82:	464d      	mov	r5, r9
 8003e84:	42bd      	cmp	r5, r7
 8003e86:	d028      	beq.n	8003eda <_scanf_i+0x1d2>
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	f012 0210 	ands.w	r2, r2, #16
 8003e8e:	d113      	bne.n	8003eb8 <_scanf_i+0x1b0>
 8003e90:	702a      	strb	r2, [r5, #0]
 8003e92:	6863      	ldr	r3, [r4, #4]
 8003e94:	9e01      	ldr	r6, [sp, #4]
 8003e96:	4639      	mov	r1, r7
 8003e98:	4650      	mov	r0, sl
 8003e9a:	47b0      	blx	r6
 8003e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	f8c8 2000 	str.w	r2, [r8]
 8003ea8:	f011 0f20 	tst.w	r1, #32
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	d00f      	beq.n	8003ed0 <_scanf_i+0x1c8>
 8003eb0:	6018      	str	r0, [r3, #0]
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	60e3      	str	r3, [r4, #12]
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	1bed      	subs	r5, r5, r7
 8003ebc:	445d      	add	r5, fp
 8003ebe:	442b      	add	r3, r5
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	b007      	add	sp, #28
 8003ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eca:	f04f 0b00 	mov.w	fp, #0
 8003ece:	e7ca      	b.n	8003e66 <_scanf_i+0x15e>
 8003ed0:	07ca      	lsls	r2, r1, #31
 8003ed2:	bf4c      	ite	mi
 8003ed4:	8018      	strhmi	r0, [r3, #0]
 8003ed6:	6018      	strpl	r0, [r3, #0]
 8003ed8:	e7eb      	b.n	8003eb2 <_scanf_i+0x1aa>
 8003eda:	2001      	movs	r0, #1
 8003edc:	e7f2      	b.n	8003ec4 <_scanf_i+0x1bc>
 8003ede:	bf00      	nop
 8003ee0:	08004878 	.word	0x08004878
 8003ee4:	080046d9 	.word	0x080046d9
 8003ee8:	080045f1 	.word	0x080045f1
 8003eec:	080049d8 	.word	0x080049d8

08003ef0 <__sflush_r>:
 8003ef0:	898a      	ldrh	r2, [r1, #12]
 8003ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	0710      	lsls	r0, r2, #28
 8003efa:	460c      	mov	r4, r1
 8003efc:	d458      	bmi.n	8003fb0 <__sflush_r+0xc0>
 8003efe:	684b      	ldr	r3, [r1, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dc05      	bgt.n	8003f10 <__sflush_r+0x20>
 8003f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dc02      	bgt.n	8003f10 <__sflush_r+0x20>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f12:	2e00      	cmp	r6, #0
 8003f14:	d0f9      	beq.n	8003f0a <__sflush_r+0x1a>
 8003f16:	2300      	movs	r3, #0
 8003f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f1c:	682f      	ldr	r7, [r5, #0]
 8003f1e:	6a21      	ldr	r1, [r4, #32]
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	d032      	beq.n	8003f8a <__sflush_r+0x9a>
 8003f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	075a      	lsls	r2, r3, #29
 8003f2a:	d505      	bpl.n	8003f38 <__sflush_r+0x48>
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	1ac0      	subs	r0, r0, r3
 8003f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f32:	b10b      	cbz	r3, 8003f38 <__sflush_r+0x48>
 8003f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f36:	1ac0      	subs	r0, r0, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f3e:	6a21      	ldr	r1, [r4, #32]
 8003f40:	4628      	mov	r0, r5
 8003f42:	47b0      	blx	r6
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	d106      	bne.n	8003f58 <__sflush_r+0x68>
 8003f4a:	6829      	ldr	r1, [r5, #0]
 8003f4c:	291d      	cmp	r1, #29
 8003f4e:	d82b      	bhi.n	8003fa8 <__sflush_r+0xb8>
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <__sflush_r+0x108>)
 8003f52:	410a      	asrs	r2, r1
 8003f54:	07d6      	lsls	r6, r2, #31
 8003f56:	d427      	bmi.n	8003fa8 <__sflush_r+0xb8>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	6062      	str	r2, [r4, #4]
 8003f5c:	04d9      	lsls	r1, r3, #19
 8003f5e:	6922      	ldr	r2, [r4, #16]
 8003f60:	6022      	str	r2, [r4, #0]
 8003f62:	d504      	bpl.n	8003f6e <__sflush_r+0x7e>
 8003f64:	1c42      	adds	r2, r0, #1
 8003f66:	d101      	bne.n	8003f6c <__sflush_r+0x7c>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	b903      	cbnz	r3, 8003f6e <__sflush_r+0x7e>
 8003f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8003f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f70:	602f      	str	r7, [r5, #0]
 8003f72:	2900      	cmp	r1, #0
 8003f74:	d0c9      	beq.n	8003f0a <__sflush_r+0x1a>
 8003f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d002      	beq.n	8003f84 <__sflush_r+0x94>
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7ff f8e6 	bl	8003150 <_free_r>
 8003f84:	2000      	movs	r0, #0
 8003f86:	6360      	str	r0, [r4, #52]	; 0x34
 8003f88:	e7c0      	b.n	8003f0c <__sflush_r+0x1c>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	47b0      	blx	r6
 8003f90:	1c41      	adds	r1, r0, #1
 8003f92:	d1c8      	bne.n	8003f26 <__sflush_r+0x36>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0c5      	beq.n	8003f26 <__sflush_r+0x36>
 8003f9a:	2b1d      	cmp	r3, #29
 8003f9c:	d001      	beq.n	8003fa2 <__sflush_r+0xb2>
 8003f9e:	2b16      	cmp	r3, #22
 8003fa0:	d101      	bne.n	8003fa6 <__sflush_r+0xb6>
 8003fa2:	602f      	str	r7, [r5, #0]
 8003fa4:	e7b1      	b.n	8003f0a <__sflush_r+0x1a>
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	e7ad      	b.n	8003f0c <__sflush_r+0x1c>
 8003fb0:	690f      	ldr	r7, [r1, #16]
 8003fb2:	2f00      	cmp	r7, #0
 8003fb4:	d0a9      	beq.n	8003f0a <__sflush_r+0x1a>
 8003fb6:	0793      	lsls	r3, r2, #30
 8003fb8:	680e      	ldr	r6, [r1, #0]
 8003fba:	bf08      	it	eq
 8003fbc:	694b      	ldreq	r3, [r1, #20]
 8003fbe:	600f      	str	r7, [r1, #0]
 8003fc0:	bf18      	it	ne
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	eba6 0807 	sub.w	r8, r6, r7
 8003fc8:	608b      	str	r3, [r1, #8]
 8003fca:	f1b8 0f00 	cmp.w	r8, #0
 8003fce:	dd9c      	ble.n	8003f0a <__sflush_r+0x1a>
 8003fd0:	6a21      	ldr	r1, [r4, #32]
 8003fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	463a      	mov	r2, r7
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b0      	blx	r6
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	dc06      	bgt.n	8003fee <__sflush_r+0xfe>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e78e      	b.n	8003f0c <__sflush_r+0x1c>
 8003fee:	4407      	add	r7, r0
 8003ff0:	eba8 0800 	sub.w	r8, r8, r0
 8003ff4:	e7e9      	b.n	8003fca <__sflush_r+0xda>
 8003ff6:	bf00      	nop
 8003ff8:	dfbffffe 	.word	0xdfbffffe

08003ffc <_fflush_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	4605      	mov	r5, r0
 8004002:	460c      	mov	r4, r1
 8004004:	b913      	cbnz	r3, 800400c <_fflush_r+0x10>
 8004006:	2500      	movs	r5, #0
 8004008:	4628      	mov	r0, r5
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	b118      	cbz	r0, 8004016 <_fflush_r+0x1a>
 800400e:	6a03      	ldr	r3, [r0, #32]
 8004010:	b90b      	cbnz	r3, 8004016 <_fflush_r+0x1a>
 8004012:	f7fe fe95 	bl	8002d40 <__sinit>
 8004016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f3      	beq.n	8004006 <_fflush_r+0xa>
 800401e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004020:	07d0      	lsls	r0, r2, #31
 8004022:	d404      	bmi.n	800402e <_fflush_r+0x32>
 8004024:	0599      	lsls	r1, r3, #22
 8004026:	d402      	bmi.n	800402e <_fflush_r+0x32>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f7ff f88f 	bl	800314c <__retarget_lock_acquire_recursive>
 800402e:	4628      	mov	r0, r5
 8004030:	4621      	mov	r1, r4
 8004032:	f7ff ff5d 	bl	8003ef0 <__sflush_r>
 8004036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004038:	07da      	lsls	r2, r3, #31
 800403a:	4605      	mov	r5, r0
 800403c:	d4e4      	bmi.n	8004008 <_fflush_r+0xc>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	059b      	lsls	r3, r3, #22
 8004042:	d4e1      	bmi.n	8004008 <_fflush_r+0xc>
 8004044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004046:	f7ff f882 	bl	800314e <__retarget_lock_release_recursive>
 800404a:	e7dd      	b.n	8004008 <_fflush_r+0xc>

0800404c <__swhatbuf_r>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	460c      	mov	r4, r1
 8004050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004054:	2900      	cmp	r1, #0
 8004056:	b096      	sub	sp, #88	; 0x58
 8004058:	4615      	mov	r5, r2
 800405a:	461e      	mov	r6, r3
 800405c:	da0d      	bge.n	800407a <__swhatbuf_r+0x2e>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	bf0c      	ite	eq
 800406a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800406e:	2340      	movne	r3, #64	; 0x40
 8004070:	2000      	movs	r0, #0
 8004072:	6031      	str	r1, [r6, #0]
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	b016      	add	sp, #88	; 0x58
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	466a      	mov	r2, sp
 800407c:	f000 f9c6 	bl	800440c <_fstat_r>
 8004080:	2800      	cmp	r0, #0
 8004082:	dbec      	blt.n	800405e <__swhatbuf_r+0x12>
 8004084:	9901      	ldr	r1, [sp, #4]
 8004086:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800408a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800408e:	4259      	negs	r1, r3
 8004090:	4159      	adcs	r1, r3
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	e7eb      	b.n	8004070 <__swhatbuf_r+0x24>

08004098 <__smakebuf_r>:
 8004098:	898b      	ldrh	r3, [r1, #12]
 800409a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800409c:	079d      	lsls	r5, r3, #30
 800409e:	4606      	mov	r6, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	d507      	bpl.n	80040b4 <__smakebuf_r+0x1c>
 80040a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	2301      	movs	r3, #1
 80040ae:	6163      	str	r3, [r4, #20]
 80040b0:	b002      	add	sp, #8
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	ab01      	add	r3, sp, #4
 80040b6:	466a      	mov	r2, sp
 80040b8:	f7ff ffc8 	bl	800404c <__swhatbuf_r>
 80040bc:	9900      	ldr	r1, [sp, #0]
 80040be:	4605      	mov	r5, r0
 80040c0:	4630      	mov	r0, r6
 80040c2:	f7ff f8b1 	bl	8003228 <_malloc_r>
 80040c6:	b948      	cbnz	r0, 80040dc <__smakebuf_r+0x44>
 80040c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040cc:	059a      	lsls	r2, r3, #22
 80040ce:	d4ef      	bmi.n	80040b0 <__smakebuf_r+0x18>
 80040d0:	f023 0303 	bic.w	r3, r3, #3
 80040d4:	f043 0302 	orr.w	r3, r3, #2
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	e7e3      	b.n	80040a4 <__smakebuf_r+0xc>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	6020      	str	r0, [r4, #0]
 80040e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	9b00      	ldr	r3, [sp, #0]
 80040e8:	6163      	str	r3, [r4, #20]
 80040ea:	9b01      	ldr	r3, [sp, #4]
 80040ec:	6120      	str	r0, [r4, #16]
 80040ee:	b15b      	cbz	r3, 8004108 <__smakebuf_r+0x70>
 80040f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 f99b 	bl	8004430 <_isatty_r>
 80040fa:	b128      	cbz	r0, 8004108 <__smakebuf_r+0x70>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	81a3      	strh	r3, [r4, #12]
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	431d      	orrs	r5, r3
 800410c:	81a5      	strh	r5, [r4, #12]
 800410e:	e7cf      	b.n	80040b0 <__smakebuf_r+0x18>

08004110 <lflush>:
 8004110:	898b      	ldrh	r3, [r1, #12]
 8004112:	f003 0309 	and.w	r3, r3, #9
 8004116:	2b09      	cmp	r3, #9
 8004118:	d103      	bne.n	8004122 <lflush+0x12>
 800411a:	4b03      	ldr	r3, [pc, #12]	; (8004128 <lflush+0x18>)
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	f7ff bf6d 	b.w	8003ffc <_fflush_r>
 8004122:	2000      	movs	r0, #0
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	24000068 	.word	0x24000068

0800412c <__srefill_r>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	460c      	mov	r4, r1
 8004130:	4605      	mov	r5, r0
 8004132:	b118      	cbz	r0, 800413c <__srefill_r+0x10>
 8004134:	6a03      	ldr	r3, [r0, #32]
 8004136:	b90b      	cbnz	r3, 800413c <__srefill_r+0x10>
 8004138:	f7fe fe02 	bl	8002d40 <__sinit>
 800413c:	2300      	movs	r3, #0
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004146:	069e      	lsls	r6, r3, #26
 8004148:	d502      	bpl.n	8004150 <__srefill_r+0x24>
 800414a:	f04f 30ff 	mov.w	r0, #4294967295
 800414e:	e05c      	b.n	800420a <__srefill_r+0xde>
 8004150:	0758      	lsls	r0, r3, #29
 8004152:	d448      	bmi.n	80041e6 <__srefill_r+0xba>
 8004154:	06d9      	lsls	r1, r3, #27
 8004156:	d405      	bmi.n	8004164 <__srefill_r+0x38>
 8004158:	2309      	movs	r3, #9
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004160:	81a3      	strh	r3, [r4, #12]
 8004162:	e7f2      	b.n	800414a <__srefill_r+0x1e>
 8004164:	071a      	lsls	r2, r3, #28
 8004166:	d50b      	bpl.n	8004180 <__srefill_r+0x54>
 8004168:	4621      	mov	r1, r4
 800416a:	4628      	mov	r0, r5
 800416c:	f7ff ff46 	bl	8003ffc <_fflush_r>
 8004170:	2800      	cmp	r0, #0
 8004172:	d1ea      	bne.n	800414a <__srefill_r+0x1e>
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	60a0      	str	r0, [r4, #8]
 8004178:	f023 0308 	bic.w	r3, r3, #8
 800417c:	81a3      	strh	r3, [r4, #12]
 800417e:	61a0      	str	r0, [r4, #24]
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	b91b      	cbnz	r3, 8004194 <__srefill_r+0x68>
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f7ff ff82 	bl	8004098 <__smakebuf_r>
 8004194:	89a6      	ldrh	r6, [r4, #12]
 8004196:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800419a:	07b3      	lsls	r3, r6, #30
 800419c:	d00f      	beq.n	80041be <__srefill_r+0x92>
 800419e:	2301      	movs	r3, #1
 80041a0:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <__srefill_r+0xe4>)
 80041a2:	491c      	ldr	r1, [pc, #112]	; (8004214 <__srefill_r+0xe8>)
 80041a4:	481c      	ldr	r0, [pc, #112]	; (8004218 <__srefill_r+0xec>)
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	f006 0609 	and.w	r6, r6, #9
 80041ac:	f7fe fde0 	bl	8002d70 <_fwalk_sglue>
 80041b0:	2e09      	cmp	r6, #9
 80041b2:	81a7      	strh	r7, [r4, #12]
 80041b4:	d103      	bne.n	80041be <__srefill_r+0x92>
 80041b6:	4621      	mov	r1, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7ff fe99 	bl	8003ef0 <__sflush_r>
 80041be:	6922      	ldr	r2, [r4, #16]
 80041c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80041c2:	6963      	ldr	r3, [r4, #20]
 80041c4:	6a21      	ldr	r1, [r4, #32]
 80041c6:	6022      	str	r2, [r4, #0]
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b0      	blx	r6
 80041cc:	2800      	cmp	r0, #0
 80041ce:	6060      	str	r0, [r4, #4]
 80041d0:	dc1c      	bgt.n	800420c <__srefill_r+0xe0>
 80041d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d6:	bf17      	itett	ne
 80041d8:	2200      	movne	r2, #0
 80041da:	f043 0320 	orreq.w	r3, r3, #32
 80041de:	6062      	strne	r2, [r4, #4]
 80041e0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80041e4:	e7bc      	b.n	8004160 <__srefill_r+0x34>
 80041e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041e8:	2900      	cmp	r1, #0
 80041ea:	d0cd      	beq.n	8004188 <__srefill_r+0x5c>
 80041ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f0:	4299      	cmp	r1, r3
 80041f2:	d002      	beq.n	80041fa <__srefill_r+0xce>
 80041f4:	4628      	mov	r0, r5
 80041f6:	f7fe ffab 	bl	8003150 <_free_r>
 80041fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041fc:	6063      	str	r3, [r4, #4]
 80041fe:	2000      	movs	r0, #0
 8004200:	6360      	str	r0, [r4, #52]	; 0x34
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0c0      	beq.n	8004188 <__srefill_r+0x5c>
 8004206:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420c:	2000      	movs	r0, #0
 800420e:	e7fc      	b.n	800420a <__srefill_r+0xde>
 8004210:	24000010 	.word	0x24000010
 8004214:	08004111 	.word	0x08004111
 8004218:	2400001c 	.word	0x2400001c

0800421c <__sccl>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	780b      	ldrb	r3, [r1, #0]
 8004220:	4604      	mov	r4, r0
 8004222:	2b5e      	cmp	r3, #94	; 0x5e
 8004224:	bf0b      	itete	eq
 8004226:	784b      	ldrbeq	r3, [r1, #1]
 8004228:	1c4a      	addne	r2, r1, #1
 800422a:	1c8a      	addeq	r2, r1, #2
 800422c:	2100      	movne	r1, #0
 800422e:	bf08      	it	eq
 8004230:	2101      	moveq	r1, #1
 8004232:	3801      	subs	r0, #1
 8004234:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004238:	f800 1f01 	strb.w	r1, [r0, #1]!
 800423c:	42a8      	cmp	r0, r5
 800423e:	d1fb      	bne.n	8004238 <__sccl+0x1c>
 8004240:	b90b      	cbnz	r3, 8004246 <__sccl+0x2a>
 8004242:	1e50      	subs	r0, r2, #1
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	f081 0101 	eor.w	r1, r1, #1
 800424a:	54e1      	strb	r1, [r4, r3]
 800424c:	4610      	mov	r0, r2
 800424e:	4602      	mov	r2, r0
 8004250:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004254:	2d2d      	cmp	r5, #45	; 0x2d
 8004256:	d005      	beq.n	8004264 <__sccl+0x48>
 8004258:	2d5d      	cmp	r5, #93	; 0x5d
 800425a:	d016      	beq.n	800428a <__sccl+0x6e>
 800425c:	2d00      	cmp	r5, #0
 800425e:	d0f1      	beq.n	8004244 <__sccl+0x28>
 8004260:	462b      	mov	r3, r5
 8004262:	e7f2      	b.n	800424a <__sccl+0x2e>
 8004264:	7846      	ldrb	r6, [r0, #1]
 8004266:	2e5d      	cmp	r6, #93	; 0x5d
 8004268:	d0fa      	beq.n	8004260 <__sccl+0x44>
 800426a:	42b3      	cmp	r3, r6
 800426c:	dcf8      	bgt.n	8004260 <__sccl+0x44>
 800426e:	3002      	adds	r0, #2
 8004270:	461a      	mov	r2, r3
 8004272:	3201      	adds	r2, #1
 8004274:	4296      	cmp	r6, r2
 8004276:	54a1      	strb	r1, [r4, r2]
 8004278:	dcfb      	bgt.n	8004272 <__sccl+0x56>
 800427a:	1af2      	subs	r2, r6, r3
 800427c:	3a01      	subs	r2, #1
 800427e:	1c5d      	adds	r5, r3, #1
 8004280:	42b3      	cmp	r3, r6
 8004282:	bfa8      	it	ge
 8004284:	2200      	movge	r2, #0
 8004286:	18ab      	adds	r3, r5, r2
 8004288:	e7e1      	b.n	800424e <__sccl+0x32>
 800428a:	4610      	mov	r0, r2
 800428c:	e7da      	b.n	8004244 <__sccl+0x28>

0800428e <__submore>:
 800428e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004292:	460c      	mov	r4, r1
 8004294:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800429a:	4299      	cmp	r1, r3
 800429c:	d11d      	bne.n	80042da <__submore+0x4c>
 800429e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042a2:	f7fe ffc1 	bl	8003228 <_malloc_r>
 80042a6:	b918      	cbnz	r0, 80042b0 <__submore+0x22>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80042b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80042ba:	6360      	str	r0, [r4, #52]	; 0x34
 80042bc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80042c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80042c4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80042c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80042cc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80042d0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80042d4:	6020      	str	r0, [r4, #0]
 80042d6:	2000      	movs	r0, #0
 80042d8:	e7e8      	b.n	80042ac <__submore+0x1e>
 80042da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80042dc:	0077      	lsls	r7, r6, #1
 80042de:	463a      	mov	r2, r7
 80042e0:	f000 f8d4 	bl	800448c <_realloc_r>
 80042e4:	4605      	mov	r5, r0
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0de      	beq.n	80042a8 <__submore+0x1a>
 80042ea:	eb00 0806 	add.w	r8, r0, r6
 80042ee:	4601      	mov	r1, r0
 80042f0:	4632      	mov	r2, r6
 80042f2:	4640      	mov	r0, r8
 80042f4:	f000 f8bc 	bl	8004470 <memcpy>
 80042f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80042fc:	f8c4 8000 	str.w	r8, [r4]
 8004300:	e7e9      	b.n	80042d6 <__submore+0x48>

08004302 <_ungetc_r>:
 8004302:	b570      	push	{r4, r5, r6, lr}
 8004304:	4614      	mov	r4, r2
 8004306:	1c4a      	adds	r2, r1, #1
 8004308:	4606      	mov	r6, r0
 800430a:	460d      	mov	r5, r1
 800430c:	d103      	bne.n	8004316 <_ungetc_r+0x14>
 800430e:	f04f 35ff 	mov.w	r5, #4294967295
 8004312:	4628      	mov	r0, r5
 8004314:	bd70      	pop	{r4, r5, r6, pc}
 8004316:	b118      	cbz	r0, 8004320 <_ungetc_r+0x1e>
 8004318:	6a03      	ldr	r3, [r0, #32]
 800431a:	b90b      	cbnz	r3, 8004320 <_ungetc_r+0x1e>
 800431c:	f7fe fd10 	bl	8002d40 <__sinit>
 8004320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004322:	07db      	lsls	r3, r3, #31
 8004324:	d405      	bmi.n	8004332 <_ungetc_r+0x30>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	0598      	lsls	r0, r3, #22
 800432a:	d402      	bmi.n	8004332 <_ungetc_r+0x30>
 800432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432e:	f7fe ff0d 	bl	800314c <__retarget_lock_acquire_recursive>
 8004332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004336:	f023 0320 	bic.w	r3, r3, #32
 800433a:	0759      	lsls	r1, r3, #29
 800433c:	81a3      	strh	r3, [r4, #12]
 800433e:	b29a      	uxth	r2, r3
 8004340:	d423      	bmi.n	800438a <_ungetc_r+0x88>
 8004342:	06d3      	lsls	r3, r2, #27
 8004344:	d409      	bmi.n	800435a <_ungetc_r+0x58>
 8004346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004348:	07dd      	lsls	r5, r3, #31
 800434a:	d4e0      	bmi.n	800430e <_ungetc_r+0xc>
 800434c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004350:	d1dd      	bne.n	800430e <_ungetc_r+0xc>
 8004352:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004354:	f7fe fefb 	bl	800314e <__retarget_lock_release_recursive>
 8004358:	e7d9      	b.n	800430e <_ungetc_r+0xc>
 800435a:	0710      	lsls	r0, r2, #28
 800435c:	d511      	bpl.n	8004382 <_ungetc_r+0x80>
 800435e:	4621      	mov	r1, r4
 8004360:	4630      	mov	r0, r6
 8004362:	f7ff fe4b 	bl	8003ffc <_fflush_r>
 8004366:	b130      	cbz	r0, 8004376 <_ungetc_r+0x74>
 8004368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800436a:	07d9      	lsls	r1, r3, #31
 800436c:	d4cf      	bmi.n	800430e <_ungetc_r+0xc>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004374:	e7ec      	b.n	8004350 <_ungetc_r+0x4e>
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	60a0      	str	r0, [r4, #8]
 800437a:	f023 0308 	bic.w	r3, r3, #8
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	61a0      	str	r0, [r4, #24]
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800438c:	6862      	ldr	r2, [r4, #4]
 800438e:	b2ed      	uxtb	r5, r5
 8004390:	b1d3      	cbz	r3, 80043c8 <_ungetc_r+0xc6>
 8004392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004394:	4293      	cmp	r3, r2
 8004396:	dc05      	bgt.n	80043a4 <_ungetc_r+0xa2>
 8004398:	4621      	mov	r1, r4
 800439a:	4630      	mov	r0, r6
 800439c:	f7ff ff77 	bl	800428e <__submore>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d1e1      	bne.n	8004368 <_ungetc_r+0x66>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	1e5a      	subs	r2, r3, #1
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	f803 5c01 	strb.w	r5, [r3, #-1]
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	3301      	adds	r3, #1
 80043b2:	6063      	str	r3, [r4, #4]
 80043b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043b6:	07da      	lsls	r2, r3, #31
 80043b8:	d4ab      	bmi.n	8004312 <_ungetc_r+0x10>
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	059b      	lsls	r3, r3, #22
 80043be:	d4a8      	bmi.n	8004312 <_ungetc_r+0x10>
 80043c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043c2:	f7fe fec4 	bl	800314e <__retarget_lock_release_recursive>
 80043c6:	e7a4      	b.n	8004312 <_ungetc_r+0x10>
 80043c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80043ca:	6920      	ldr	r0, [r4, #16]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f001 0101 	and.w	r1, r1, #1
 80043d2:	b160      	cbz	r0, 80043ee <_ungetc_r+0xec>
 80043d4:	4298      	cmp	r0, r3
 80043d6:	d20a      	bcs.n	80043ee <_ungetc_r+0xec>
 80043d8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80043dc:	42a8      	cmp	r0, r5
 80043de:	d106      	bne.n	80043ee <_ungetc_r+0xec>
 80043e0:	3b01      	subs	r3, #1
 80043e2:	3201      	adds	r2, #1
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	6062      	str	r2, [r4, #4]
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d192      	bne.n	8004312 <_ungetc_r+0x10>
 80043ec:	e7e5      	b.n	80043ba <_ungetc_r+0xb8>
 80043ee:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80043f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f6:	6363      	str	r3, [r4, #52]	; 0x34
 80043f8:	2303      	movs	r3, #3
 80043fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80043fc:	4623      	mov	r3, r4
 80043fe:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	2301      	movs	r3, #1
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	e7ee      	b.n	80043e8 <_ungetc_r+0xe6>
	...

0800440c <_fstat_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d07      	ldr	r5, [pc, #28]	; (800442c <_fstat_r+0x20>)
 8004410:	2300      	movs	r3, #0
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	f7fc fcc8 	bl	8000dae <_fstat>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d102      	bne.n	8004428 <_fstat_r+0x1c>
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	b103      	cbz	r3, 8004428 <_fstat_r+0x1c>
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	bd38      	pop	{r3, r4, r5, pc}
 800442a:	bf00      	nop
 800442c:	24000218 	.word	0x24000218

08004430 <_isatty_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d06      	ldr	r5, [pc, #24]	; (800444c <_isatty_r+0x1c>)
 8004434:	2300      	movs	r3, #0
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	f7fc fcc7 	bl	8000dce <_isatty>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_isatty_r+0x1a>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_isatty_r+0x1a>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	24000218 	.word	0x24000218

08004450 <_sbrk_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4d06      	ldr	r5, [pc, #24]	; (800446c <_sbrk_r+0x1c>)
 8004454:	2300      	movs	r3, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc fcd0 	bl	8000e00 <_sbrk>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_sbrk_r+0x1a>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_sbrk_r+0x1a>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	24000218 	.word	0x24000218

08004470 <memcpy>:
 8004470:	440a      	add	r2, r1
 8004472:	4291      	cmp	r1, r2
 8004474:	f100 33ff 	add.w	r3, r0, #4294967295
 8004478:	d100      	bne.n	800447c <memcpy+0xc>
 800447a:	4770      	bx	lr
 800447c:	b510      	push	{r4, lr}
 800447e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004486:	4291      	cmp	r1, r2
 8004488:	d1f9      	bne.n	800447e <memcpy+0xe>
 800448a:	bd10      	pop	{r4, pc}

0800448c <_realloc_r>:
 800448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	4680      	mov	r8, r0
 8004492:	4614      	mov	r4, r2
 8004494:	460e      	mov	r6, r1
 8004496:	b921      	cbnz	r1, 80044a2 <_realloc_r+0x16>
 8004498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449c:	4611      	mov	r1, r2
 800449e:	f7fe bec3 	b.w	8003228 <_malloc_r>
 80044a2:	b92a      	cbnz	r2, 80044b0 <_realloc_r+0x24>
 80044a4:	f7fe fe54 	bl	8003150 <_free_r>
 80044a8:	4625      	mov	r5, r4
 80044aa:	4628      	mov	r0, r5
 80044ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b0:	f000 f914 	bl	80046dc <_malloc_usable_size_r>
 80044b4:	4284      	cmp	r4, r0
 80044b6:	4607      	mov	r7, r0
 80044b8:	d802      	bhi.n	80044c0 <_realloc_r+0x34>
 80044ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044be:	d812      	bhi.n	80044e6 <_realloc_r+0x5a>
 80044c0:	4621      	mov	r1, r4
 80044c2:	4640      	mov	r0, r8
 80044c4:	f7fe feb0 	bl	8003228 <_malloc_r>
 80044c8:	4605      	mov	r5, r0
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d0ed      	beq.n	80044aa <_realloc_r+0x1e>
 80044ce:	42bc      	cmp	r4, r7
 80044d0:	4622      	mov	r2, r4
 80044d2:	4631      	mov	r1, r6
 80044d4:	bf28      	it	cs
 80044d6:	463a      	movcs	r2, r7
 80044d8:	f7ff ffca 	bl	8004470 <memcpy>
 80044dc:	4631      	mov	r1, r6
 80044de:	4640      	mov	r0, r8
 80044e0:	f7fe fe36 	bl	8003150 <_free_r>
 80044e4:	e7e1      	b.n	80044aa <_realloc_r+0x1e>
 80044e6:	4635      	mov	r5, r6
 80044e8:	e7df      	b.n	80044aa <_realloc_r+0x1e>
	...

080044ec <_strtol_l.constprop.0>:
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f2:	d001      	beq.n	80044f8 <_strtol_l.constprop.0+0xc>
 80044f4:	2b24      	cmp	r3, #36	; 0x24
 80044f6:	d906      	bls.n	8004506 <_strtol_l.constprop.0+0x1a>
 80044f8:	f7fe fdfe 	bl	80030f8 <__errno>
 80044fc:	2316      	movs	r3, #22
 80044fe:	6003      	str	r3, [r0, #0]
 8004500:	2000      	movs	r0, #0
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80045ec <_strtol_l.constprop.0+0x100>
 800450a:	460d      	mov	r5, r1
 800450c:	462e      	mov	r6, r5
 800450e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004512:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004516:	f017 0708 	ands.w	r7, r7, #8
 800451a:	d1f7      	bne.n	800450c <_strtol_l.constprop.0+0x20>
 800451c:	2c2d      	cmp	r4, #45	; 0x2d
 800451e:	d132      	bne.n	8004586 <_strtol_l.constprop.0+0x9a>
 8004520:	782c      	ldrb	r4, [r5, #0]
 8004522:	2701      	movs	r7, #1
 8004524:	1cb5      	adds	r5, r6, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d05b      	beq.n	80045e2 <_strtol_l.constprop.0+0xf6>
 800452a:	2b10      	cmp	r3, #16
 800452c:	d109      	bne.n	8004542 <_strtol_l.constprop.0+0x56>
 800452e:	2c30      	cmp	r4, #48	; 0x30
 8004530:	d107      	bne.n	8004542 <_strtol_l.constprop.0+0x56>
 8004532:	782c      	ldrb	r4, [r5, #0]
 8004534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004538:	2c58      	cmp	r4, #88	; 0x58
 800453a:	d14d      	bne.n	80045d8 <_strtol_l.constprop.0+0xec>
 800453c:	786c      	ldrb	r4, [r5, #1]
 800453e:	2310      	movs	r3, #16
 8004540:	3502      	adds	r5, #2
 8004542:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004546:	f108 38ff 	add.w	r8, r8, #4294967295
 800454a:	f04f 0e00 	mov.w	lr, #0
 800454e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004552:	4676      	mov	r6, lr
 8004554:	fb03 8a19 	mls	sl, r3, r9, r8
 8004558:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800455c:	f1bc 0f09 	cmp.w	ip, #9
 8004560:	d816      	bhi.n	8004590 <_strtol_l.constprop.0+0xa4>
 8004562:	4664      	mov	r4, ip
 8004564:	42a3      	cmp	r3, r4
 8004566:	dd24      	ble.n	80045b2 <_strtol_l.constprop.0+0xc6>
 8004568:	f1be 3fff 	cmp.w	lr, #4294967295
 800456c:	d008      	beq.n	8004580 <_strtol_l.constprop.0+0x94>
 800456e:	45b1      	cmp	r9, r6
 8004570:	d31c      	bcc.n	80045ac <_strtol_l.constprop.0+0xc0>
 8004572:	d101      	bne.n	8004578 <_strtol_l.constprop.0+0x8c>
 8004574:	45a2      	cmp	sl, r4
 8004576:	db19      	blt.n	80045ac <_strtol_l.constprop.0+0xc0>
 8004578:	fb06 4603 	mla	r6, r6, r3, r4
 800457c:	f04f 0e01 	mov.w	lr, #1
 8004580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004584:	e7e8      	b.n	8004558 <_strtol_l.constprop.0+0x6c>
 8004586:	2c2b      	cmp	r4, #43	; 0x2b
 8004588:	bf04      	itt	eq
 800458a:	782c      	ldrbeq	r4, [r5, #0]
 800458c:	1cb5      	addeq	r5, r6, #2
 800458e:	e7ca      	b.n	8004526 <_strtol_l.constprop.0+0x3a>
 8004590:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004594:	f1bc 0f19 	cmp.w	ip, #25
 8004598:	d801      	bhi.n	800459e <_strtol_l.constprop.0+0xb2>
 800459a:	3c37      	subs	r4, #55	; 0x37
 800459c:	e7e2      	b.n	8004564 <_strtol_l.constprop.0+0x78>
 800459e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80045a2:	f1bc 0f19 	cmp.w	ip, #25
 80045a6:	d804      	bhi.n	80045b2 <_strtol_l.constprop.0+0xc6>
 80045a8:	3c57      	subs	r4, #87	; 0x57
 80045aa:	e7db      	b.n	8004564 <_strtol_l.constprop.0+0x78>
 80045ac:	f04f 3eff 	mov.w	lr, #4294967295
 80045b0:	e7e6      	b.n	8004580 <_strtol_l.constprop.0+0x94>
 80045b2:	f1be 3fff 	cmp.w	lr, #4294967295
 80045b6:	d105      	bne.n	80045c4 <_strtol_l.constprop.0+0xd8>
 80045b8:	2322      	movs	r3, #34	; 0x22
 80045ba:	6003      	str	r3, [r0, #0]
 80045bc:	4646      	mov	r6, r8
 80045be:	b942      	cbnz	r2, 80045d2 <_strtol_l.constprop.0+0xe6>
 80045c0:	4630      	mov	r0, r6
 80045c2:	e79e      	b.n	8004502 <_strtol_l.constprop.0+0x16>
 80045c4:	b107      	cbz	r7, 80045c8 <_strtol_l.constprop.0+0xdc>
 80045c6:	4276      	negs	r6, r6
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d0f9      	beq.n	80045c0 <_strtol_l.constprop.0+0xd4>
 80045cc:	f1be 0f00 	cmp.w	lr, #0
 80045d0:	d000      	beq.n	80045d4 <_strtol_l.constprop.0+0xe8>
 80045d2:	1e69      	subs	r1, r5, #1
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	e7f3      	b.n	80045c0 <_strtol_l.constprop.0+0xd4>
 80045d8:	2430      	movs	r4, #48	; 0x30
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1b1      	bne.n	8004542 <_strtol_l.constprop.0+0x56>
 80045de:	2308      	movs	r3, #8
 80045e0:	e7af      	b.n	8004542 <_strtol_l.constprop.0+0x56>
 80045e2:	2c30      	cmp	r4, #48	; 0x30
 80045e4:	d0a5      	beq.n	8004532 <_strtol_l.constprop.0+0x46>
 80045e6:	230a      	movs	r3, #10
 80045e8:	e7ab      	b.n	8004542 <_strtol_l.constprop.0+0x56>
 80045ea:	bf00      	nop
 80045ec:	08004895 	.word	0x08004895

080045f0 <_strtol_r>:
 80045f0:	f7ff bf7c 	b.w	80044ec <_strtol_l.constprop.0>

080045f4 <_strtoul_l.constprop.0>:
 80045f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f8:	4f36      	ldr	r7, [pc, #216]	; (80046d4 <_strtoul_l.constprop.0+0xe0>)
 80045fa:	4686      	mov	lr, r0
 80045fc:	460d      	mov	r5, r1
 80045fe:	4628      	mov	r0, r5
 8004600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004604:	5d3e      	ldrb	r6, [r7, r4]
 8004606:	f016 0608 	ands.w	r6, r6, #8
 800460a:	d1f8      	bne.n	80045fe <_strtoul_l.constprop.0+0xa>
 800460c:	2c2d      	cmp	r4, #45	; 0x2d
 800460e:	d130      	bne.n	8004672 <_strtoul_l.constprop.0+0x7e>
 8004610:	782c      	ldrb	r4, [r5, #0]
 8004612:	2601      	movs	r6, #1
 8004614:	1c85      	adds	r5, r0, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d057      	beq.n	80046ca <_strtoul_l.constprop.0+0xd6>
 800461a:	2b10      	cmp	r3, #16
 800461c:	d109      	bne.n	8004632 <_strtoul_l.constprop.0+0x3e>
 800461e:	2c30      	cmp	r4, #48	; 0x30
 8004620:	d107      	bne.n	8004632 <_strtoul_l.constprop.0+0x3e>
 8004622:	7828      	ldrb	r0, [r5, #0]
 8004624:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004628:	2858      	cmp	r0, #88	; 0x58
 800462a:	d149      	bne.n	80046c0 <_strtoul_l.constprop.0+0xcc>
 800462c:	786c      	ldrb	r4, [r5, #1]
 800462e:	2310      	movs	r3, #16
 8004630:	3502      	adds	r5, #2
 8004632:	f04f 38ff 	mov.w	r8, #4294967295
 8004636:	2700      	movs	r7, #0
 8004638:	fbb8 f8f3 	udiv	r8, r8, r3
 800463c:	fb03 f908 	mul.w	r9, r3, r8
 8004640:	ea6f 0909 	mvn.w	r9, r9
 8004644:	4638      	mov	r0, r7
 8004646:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800464a:	f1bc 0f09 	cmp.w	ip, #9
 800464e:	d815      	bhi.n	800467c <_strtoul_l.constprop.0+0x88>
 8004650:	4664      	mov	r4, ip
 8004652:	42a3      	cmp	r3, r4
 8004654:	dd23      	ble.n	800469e <_strtoul_l.constprop.0+0xaa>
 8004656:	f1b7 3fff 	cmp.w	r7, #4294967295
 800465a:	d007      	beq.n	800466c <_strtoul_l.constprop.0+0x78>
 800465c:	4580      	cmp	r8, r0
 800465e:	d31b      	bcc.n	8004698 <_strtoul_l.constprop.0+0xa4>
 8004660:	d101      	bne.n	8004666 <_strtoul_l.constprop.0+0x72>
 8004662:	45a1      	cmp	r9, r4
 8004664:	db18      	blt.n	8004698 <_strtoul_l.constprop.0+0xa4>
 8004666:	fb00 4003 	mla	r0, r0, r3, r4
 800466a:	2701      	movs	r7, #1
 800466c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004670:	e7e9      	b.n	8004646 <_strtoul_l.constprop.0+0x52>
 8004672:	2c2b      	cmp	r4, #43	; 0x2b
 8004674:	bf04      	itt	eq
 8004676:	782c      	ldrbeq	r4, [r5, #0]
 8004678:	1c85      	addeq	r5, r0, #2
 800467a:	e7cc      	b.n	8004616 <_strtoul_l.constprop.0+0x22>
 800467c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004680:	f1bc 0f19 	cmp.w	ip, #25
 8004684:	d801      	bhi.n	800468a <_strtoul_l.constprop.0+0x96>
 8004686:	3c37      	subs	r4, #55	; 0x37
 8004688:	e7e3      	b.n	8004652 <_strtoul_l.constprop.0+0x5e>
 800468a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800468e:	f1bc 0f19 	cmp.w	ip, #25
 8004692:	d804      	bhi.n	800469e <_strtoul_l.constprop.0+0xaa>
 8004694:	3c57      	subs	r4, #87	; 0x57
 8004696:	e7dc      	b.n	8004652 <_strtoul_l.constprop.0+0x5e>
 8004698:	f04f 37ff 	mov.w	r7, #4294967295
 800469c:	e7e6      	b.n	800466c <_strtoul_l.constprop.0+0x78>
 800469e:	1c7b      	adds	r3, r7, #1
 80046a0:	d106      	bne.n	80046b0 <_strtoul_l.constprop.0+0xbc>
 80046a2:	2322      	movs	r3, #34	; 0x22
 80046a4:	f8ce 3000 	str.w	r3, [lr]
 80046a8:	4638      	mov	r0, r7
 80046aa:	b932      	cbnz	r2, 80046ba <_strtoul_l.constprop.0+0xc6>
 80046ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046b0:	b106      	cbz	r6, 80046b4 <_strtoul_l.constprop.0+0xc0>
 80046b2:	4240      	negs	r0, r0
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	d0f9      	beq.n	80046ac <_strtoul_l.constprop.0+0xb8>
 80046b8:	b107      	cbz	r7, 80046bc <_strtoul_l.constprop.0+0xc8>
 80046ba:	1e69      	subs	r1, r5, #1
 80046bc:	6011      	str	r1, [r2, #0]
 80046be:	e7f5      	b.n	80046ac <_strtoul_l.constprop.0+0xb8>
 80046c0:	2430      	movs	r4, #48	; 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1b5      	bne.n	8004632 <_strtoul_l.constprop.0+0x3e>
 80046c6:	2308      	movs	r3, #8
 80046c8:	e7b3      	b.n	8004632 <_strtoul_l.constprop.0+0x3e>
 80046ca:	2c30      	cmp	r4, #48	; 0x30
 80046cc:	d0a9      	beq.n	8004622 <_strtoul_l.constprop.0+0x2e>
 80046ce:	230a      	movs	r3, #10
 80046d0:	e7af      	b.n	8004632 <_strtoul_l.constprop.0+0x3e>
 80046d2:	bf00      	nop
 80046d4:	08004895 	.word	0x08004895

080046d8 <_strtoul_r>:
 80046d8:	f7ff bf8c 	b.w	80045f4 <_strtoul_l.constprop.0>

080046dc <_malloc_usable_size_r>:
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f18      	subs	r0, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfbc      	itt	lt
 80046e6:	580b      	ldrlt	r3, [r1, r0]
 80046e8:	18c0      	addlt	r0, r0, r3
 80046ea:	4770      	bx	lr

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
